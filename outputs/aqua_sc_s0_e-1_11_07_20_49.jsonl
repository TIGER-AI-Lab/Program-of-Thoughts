{"demonstration": "\n# Write Python Code to solve the following questions. Store your result as a variable named 'ans'.\nfrom sympy import Symbol\nfrom sympy import simplify\nimport math\nfrom sympy import solve_it\n# solve_it(equations, variable): solving the equations and return the variable value.\n\n# Question: In a flight of 600 km, an aircraft was slowed down due to bad weather. Its average speed for the trip was reduced by 200 km/hr and the time of flight increased by 30 minutes. The duration of the flight is:\n# Answer option: ['A)1 hour', 'B)2 hours', 'C)3 hours', 'D)4 hours', 'E)5 hours']\nduration = Symbol('duration', positive=True)\ndelay = 30 / 60\ntotal_disntace = 600\noriginal_speed = total_disntace / duration\nreduced_speed = total_disntace / (duration + delay)\nsolution = solve_it(original_speed - reduced_speed - 200, duration)\nans = solution[duration]\n\n# Question: M men agree to purchase a gift for Rs. D. If 3 men drop out how much more will each have to contribute towards the purchase of the gift?\n# Answer options: ['A)D/(M-3)', 'B)MD/3', 'C)M/(D-3)', 'D)3D/(M2-3M)', 'E)None of these']\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)\n\n# Question: A sum of money at simple interest amounts to Rs. 815 in 3 years and to Rs. 854 in 4 years. The sum is:\n# Answer option: ['A)Rs. 650', 'B)Rs. 690', 'C)Rs. 698', 'D)Rs. 700', 'E)None of these']\ndeposit = Symbol('deposit', positive=True)\ninterest = Symbol('interest', positive=True)\nmoney_in_3_years = deposit + 3 * interest\nmoney_in_4_years = deposit + 4 * interest\nsolution = solve_it([money_in_3_years - 815, money_in_4_years - 854], [deposit, interest])\nans = solution[deposit]\n\n# Question: Find out which of the following values is the multiple of X, if it is divisible by 9 and 12?\n# Answer option: ['A)36', 'B)15', 'C)17', 'D)5', 'E)7']\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break\n\n# Question: 35% of the employees of a company are men. 60% of the men in the company speak French and 40% of the employees of the company speak French. What is % of the women in the company who do not speak French?\n# Answer option: ['A)4%', 'B)10%', 'C)96%', 'D)90.12%', 'E)70.77%']\nnum_women = 65\nmen_speaking_french = 0.6 * 35\nemployees_speaking_french = 0.4 * 100\nwomen_speaking_french = employees_speaking_french - men_speaking_french\nwomen_not_speaking_french=num_women - women_speaking_french\nans = women_not_speaking_french / num_women\n\n# Question: In one hour, a boat goes 11 km/hr along the stream and 5 km/hr against the stream. The speed of the boat in still water (in km/hr) is:\n# Answer option: ['A)4 kmph', 'B)5 kmph', 'C)6 kmph', 'D)7 kmph', 'E)8 kmph']\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nalong_stream_speed = 11\nagainst_stream_speed = 5\nsolution = solve_it([boat_speed + stream_speed - along_stream_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[boat_speed]\n\n# Question: The difference between simple interest and C.I. at the same rate for Rs.5000 for 2 years in Rs.72. The rate of interest is?\n# Answer option: ['A)10%', 'B)12%', 'C)6%', 'D)8%', 'E)4%']\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]\n\n# Question: The area of a rectangle is 15 square centimeters and the perimeter is 16 centimeters. What are the dimensions of the rectangle?\n# Answer option: ['A)2&4', 'B)3&5', 'C)4&6', 'D)5&7', 'E)6&8']\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 15\npermimeter = 16\nsolution = solve_it([width * height - area, 2 * (width + height) - permimeter], [width, height])\nans = (solution[width], solution[height])\n"}
{"question": "A car is being driven, in a straight line and at a uniform speed, towards the base of a vertical tower. The top of the tower is observed from the car and, in the process, it takes 10 minutes for the angle of elevation to change from 45\u00b0 to 60\u00b0. After how much more time will this car reach the base of the tower?", "generated": ["\nangle = Symbol('angle', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it(time * math.tan(angle) - 10, time)\nans = solution[time]", "\nangle = Symbol('angle', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it(10 * (angle - 45) - time * (60 - 45), time)\nans = solution[time]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = 10\nsolution = solve_it(distance / speed - time, distance)\nans = solution[distance]", "\ntower_height = Symbol('tower_height', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntime_to_change_elevation = 10\nsolution = solve_it([tower_height * math.tan(math.radians(45)) - car_speed * time_to_change_elevation, tower_height * math.tan(math.radians(60)) - car_speed * (time_to_change_elevation + ans)], [tower_height, car_speed])\nans = solution[tower_height] / solution[car_speed]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance / speed - time, distance)\nans = solution[distance]", "\ntower_height = Symbol('tower_height', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntime_to_change_angle = 10\nsolution = solve_it([tower_height / (car_speed * time_to_change_angle) - math.tan(math.radians(45)), tower_height / (car_speed * time_to_change_angle) - math.tan(math.radians(60))], [tower_height, car_speed])\nans = solution[tower_height] / solution[car_speed]", "\ncar_speed = Symbol('car_speed', positive=True)\ntower_height = Symbol('tower_height', positive=True)\nangle_change_time = 10\nsolution = solve_it([car_speed * angle_change_time / tower_height - math.tan(math.radians(45)), car_speed * angle_change_time / tower_height - math.tan(math.radians(60))], [car_speed, tower_height])\nans = solution[tower_height] / solution[car_speed]", "\ndistance = Symbol('distance', positive=True)\nangle_change = 60 - 45\ntime_taken = 10\nspeed = distance / time_taken\nsolution = solve_it(speed * math.tan(math.radians(angle_change)) - distance, distance)\nans = solution[distance]", "\ntime = Symbol('time', positive=True)\ntan_angle_1 = math.tan(math.radians(45))\ntan_angle_2 = math.tan(math.radians(60))\nsolution = solve_it(time * tan_angle_1 - 10, time)\ntime_1 = solution[time]\nsolution = solve_it(time * tan_angle_2 - 10, time)\ntime_2 = solution[time]\nans = time_2 - time_1", "\ncar_speed = Symbol('car_speed', positive=True)\ntime_to_change_angle = 10\nangle_change = 60 - 45\nsolution = solve_it(car_speed * time_to_change_angle / angle_change - car_speed, car_speed)\nans = solution[car_speed]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([speed * time - distance, math.tan(math.radians(45)) - distance / speed / time, math.tan(math.radians(60)) - distance / speed / (time + 10 / 60)], [speed, distance, time])\nans = solution[time] + 10 / 60", "\nangle_of_elevation = Symbol('angle_of_elevation', positive=True)\ntime_in_minutes = Symbol('time_in_minutes', positive=True)\nsolution = solve_it(time_in_minutes - 10 - math.tan(angle_of_elevation * math.pi / 180), time_in_minutes)\nans = solution[time_in_minutes]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = 10 / 60\nsolution = solve_it(distance / speed - time, distance)\ndistance = solution[distance]\ntime_to_reach_base = distance / speed\nans = time_to_reach_base", "\nspeed = Symbol('speed', positive=True)\ntime_to_change_angle = 10 / 60\nangle_change = 60 - 45\ndistance_travelled = speed * time_to_change_angle\nheight_of_tower = distance_travelled * math.tan(math.radians(angle_change))\ntime_to_reach_base = height_of_tower / speed\nans = time_to_reach_base", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_change_angle = 10\nsolution = solve_it([distance / speed - time_to_change_angle, distance / math.tan(math.radians(45)) - distance / math.tan(math.radians(60))], [distance, speed])\nans = solution[distance] / solution[speed]", "\nspeed = Symbol('speed', positive=True)\ndistance_to_tower = Symbol('distance_to_tower', positive=True)\ntime_to_change_angle = 10\nsolution = solve_it([speed * time_to_change_angle - distance_to_tower * math.tan(math.radians(45)), speed * (time_to_change_angle + 1) - distance_to_tower * math.tan(math.radians(60))], [speed, distance_to_tower])\nspeed = solution[speed]\ndistance_to_tower = solution[distance_to_tower]\ntime_to_reach_tower = distance_to_tower / speed\nans = time_to_reach_tower - time_to_change_angle", "\ndistance_to_tower = Symbol('distance_to_tower', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_taken = 10 / 60\nsolution = solve_it(distance_to_tower / speed - time_taken, distance_to_tower)\nans = solution[distance_to_tower] / speed", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime_to_change_angle = 10 / 60\nangle_change = math.radians(60 - 45)\nsolution = solve_it([distance / speed - time_to_change_angle, distance / math.tan(angle_change) - distance], [speed, distance])\nans = solution[speed] * (math.sqrt(3) + 1)", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime_to_change_angle = 10\nangle_change = 60 - 45\nsolution = solve_it([speed * time_to_change_angle - distance, distance / time_to_change_angle - speed * math.tan(math.radians(angle_change))], [speed, distance])\nans = solution[speed]", "\ntime_for_angle_change = 10\nangle_change = 60 - 45\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\nsolution = solve_it([speed * time_for_angle_change - distance * math.tan(angle_change), distance - speed * time_for_angle_change], [speed, distance])\nspeed = solution[speed]\ndistance = solution[distance]\ntime_to_reach_base = distance / speed\nans = time_to_reach_base", "\ntime_elapsed = Symbol('time_elapsed', positive=True)\nangle_of_elevation = 45 + time_elapsed * (60 - 45) / 10\ndistance_covered = time_elapsed * 60\nheight_of_tower = distance_covered * math.tan(math.radians(angle_of_elevation))\nsolution = solve_it(height_of_tower - distance_covered, time_elapsed)\nans = solution[time_elapsed]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_change_elevation = 10 / 60\nsolution = solve_it([distance - speed * time_to_change_elevation, distance / math.tan(math.radians(45)) - distance / math.tan(math.radians(60))], [distance, speed])\ndistance = solution[distance]\nspeed = solution[speed]\ntime_to_reach_base = distance / speed\nans = time_to_reach_base", "\nspeed = Symbol('speed', positive=True)\ntime_taken_to_reach_tower = Symbol('time_taken_to_reach_tower', positive=True)\ndistance_to_tower = speed * time_taken_to_reach_tower\nangle_of_elevation = Symbol('angle_of_elevation', positive=True)\nheight_of_tower = distance_to_tower * math.tan(angle_of_elevation)\nsolution = solve_it([height_of_tower - distance_to_tower, time_taken_to_reach_tower - 10], [speed, time_taken_to_reach_tower])\nans = solution[time_taken_to_reach_tower]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_taken_to_change_angle = 10\nangle_change_rate = (60 - 45) / time_taken_to_change_angle\nsolution = solve_it(angle_change_rate - speed / distance, distance)\nans = solution[distance] / speed", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime_to_change_angle = 10\nangle_change = 60 - 45\nsolution = solve_it([speed * time_to_change_angle - distance, angle_change / time_to_change_angle - speed / distance], [speed, distance])\ntime_to_reach_base = distance / speed\nans = time_to_reach_base", "\ncar_speed = Symbol('car_speed', positive=True)\ntower_height = Symbol('tower_height', positive=True)\ntime_taken = 10 / 60\nangle_of_elevation = 45\nsolution = solve_it([car_speed * time_taken - tower_height * math.tan(angle_of_elevation * math.pi / 180), car_speed * time_taken - tower_height * math.tan((angle_of_elevation + 15) * math.pi / 180)], [car_speed, tower_height])\nans = solution[car_speed] * (math.tan(60 * math.pi / 180) - math.tan(45 * math.pi / 180)) / (math.tan(45 * math.pi / 180) * math.tan(60 * math.pi / 180))", "\ntime = Symbol('time', positive=True)\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nangle_of_elevation = Symbol('angle_of_elevation', positive=True)\ntan_angle_of_elevation = distance / speed\nsolution = solve_it([tan_angle_of_elevation.subs(angle_of_elevation, 45) * time - 10, tan_angle_of_elevation.subs(angle_of_elevation, 60) * time - 10], [distance, speed])\nans = solution[distance] / solution[speed]", "\nimport numpy as np\nimport math\ntime = Symbol('time', positive=True)\nangle_of_elevation_change_rate = (60 - 45) / 10\ndistance_to_tower = Symbol('distance_to_tower', positive=True)\ndistance_to_tower_change_rate = Symbol('distance_to_tower_change_rate', positive=True)\nsolution = solve_it([distance_to_tower_change_rate - distance_to_tower * angle_of_elevation_change_rate, distance_to_tower - distance_to_tower_change_rate * time], [distance_to_tower, distance_to_tower_change_rate, time])\nans = solution[time]", "\ntime_to_reach_base = Symbol('time_to_reach_base', positive=True)\ndistance_to_tower = Symbol('distance_to_tower', positive=True)\ntime_to_change_angle = 10\nangle_change = math.pi / 4\nsolution = solve_it([distance_to_tower * math.tan(angle_change) - distance_to_tower * math.tan(angle_change + angle_change / time_to_reach_base), distance_to_tower * math.tan(angle_change + angle_change / time_to_reach_base) - distance_to_tower * math.tan(angle_change + 2 * angle_change / time_to_reach_base)], [distance_to_tower, time_to_reach_base])\nans = solution[time_to_reach_base]", "\n# distance = speed * time\n# tan(angle) = height / distance\n# tan(angle) = height / speed * time\n# tan(angle) * speed * time = height\n# tan(angle) * speed * (time1 - time2) = height\nangle1 = 45\nangle2 = 60\ntime1 = 10\ntime2 = Symbol('time2', positive=True)\nheight = Symbol('height', positive=True)\nspeed = Symbol('speed', positive=True)\nsolution = solve_it(tan(angle1) * speed * time1 - tan(angle2) * speed * time2 - height, time2)\nans = solution[time2]"], "generated_prediction": "0.17", "options": ["A)5(\u221a3 + 1)", "B)6(\u221a3 + \u221a2)", "C)7(\u221a3 \u2013 1)", "D)8(\u221a3 \u2013 2)", "E)None of these"], "answer": "A", "prediction": "A"}
{"question": "The original price of an item is discounted 22%. A customer buys the item at this discounted price using a $20-off coupon. There is no tax on the item, and this was the only item the customer bought. If the customer paid $1.90 more than half the original price of the item, what was the original price of the item?", "generated": ["\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\nfinal_price = discounted_price - 20\nsolution = solve_it(final_price - 0.5 * original_price - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\nfinal_price = discounted_price - 20\nsolution = solve_it(final_price - 0.5 * original_price - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 22 / 100)\nfinal_price = discounted_price - 20\nsolution = solve_it(final_price - original_price / 2 - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\nfinal_price = discounted_price - 20\nsolution = solve_it(final_price - original_price / 2 - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\nfinal_price = discounted_price - 20\nsolution = solve_it(final_price - original_price / 2 - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\npaid_price = discounted_price - 20\nsolution = solve_it(paid_price - original_price / 2 - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 0.22)\nfinal_price = discounted_price - 20\nsolution = solve_it(original_price / 2 - final_price - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_discount = 20\nfinal_price = discounted_price - coupon_discount\nsolution = solve_it(final_price - 1.90 - original_price / 2, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_price = discounted_price - 20\ntotal_price = coupon_price * 2 - 1.9\nsolution = solve_it(total_price - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 22 / 100)\nprice_after_coupon = discounted_price - 20\nprice_paid = price_after_coupon / 2 + 1.9\nsolution = solve_it(price_paid - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 22 / 100)\nprice_after_coupon = discounted_price - 20\nprice_paid = price_after_coupon / 2 + 1.9\nsolution = solve_it(price_paid - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_price = discounted_price - 20\ntotal_price = coupon_price * 2 - 1.90\nsolution = solve_it(total_price - original_price / 2, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ndiscounted_price_with_coupon = discounted_price - 20\npaid_price = original_price / 2 + 1.9\nsolution = solve_it(discounted_price_with_coupon - paid_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 0.22)\ndiscounted_price_after_coupon = discounted_price - 20\nhalf_original_price = original_price / 2\nsolution = solve_it(discounted_price_after_coupon - half_original_price - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_discount = 20\ntotal_price = discounted_price - coupon_discount\nhalf_original_price = original_price / 2\nsolution = solve_it(total_price - half_original_price - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ndiscounted_price_after_coupon = discounted_price - 20\namount_paid = discounted_price_after_coupon * 1.5\nsolution = solve_it(amount_paid - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 22 / 100)\ncoupon_discount = 20\ntotal_price = discounted_price - coupon_discount\nsolution = solve_it(total_price - (original_price / 2 + 1.90), original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_discount = 20\ntotal_discount = discounted_price - coupon_discount\nhalf_original_price = original_price / 2\nsolution = solve_it(total_discount - half_original_price - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 22 / 100)\nprice_after_coupon = discounted_price - 20\nprice_paid = price_after_coupon - original_price / 2 + 1.9\nsolution = solve_it(price_paid - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 0.22)\ncoupon_discount = 20\namount_paid = (original_price / 2) + 1.90\nsolution = solve_it(amount_paid - discounted_price - coupon_discount, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_discount = 20\nfinal_price = discounted_price - coupon_discount\nsolution = solve_it(final_price - (original_price / 2 + 1.9), original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 22 / 100)\ncoupon_discount = 20\ntotal_paid = (original_price / 2) + 1.9\nsolution = solve_it(total_paid - discounted_price - coupon_discount, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 0.22)\ndiscounted_price_with_coupon = discounted_price - 20\npaid_amount = discounted_price_with_coupon * 1.5\nsolution = solve_it(paid_amount - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 22 / 100)\nprice_after_coupon = discounted_price - 20\nprice_after_coupon_more_than_half_original_price = price_after_coupon - original_price / 2\nsolution = solve_it(price_after_coupon_more_than_half_original_price - 1.9, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = 0.78 * original_price\ncoupon_discount = 20\ntotal_discount = discounted_price - coupon_discount\npaid_amount = total_discount + 1.90\nsolution = solve_it(paid_amount - 0.5 * original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_discount = 20\nfinal_price = discounted_price - coupon_discount\nsolution = solve_it(final_price - (original_price / 2 + 1.9), original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_discount = 20\ntotal_price = discounted_price - coupon_discount\nsolution = solve_it(total_price - (original_price / 2 + 1.90), original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_discount = 20\nfinal_price = discounted_price - coupon_discount\nsolution = solve_it(final_price - (original_price / 2 + 1.9), original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ndiscounted_price_after_coupon = discounted_price - 20\ntotal_price = discounted_price_after_coupon + 1.90\nsolution = solve_it(total_price - original_price / 2, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.78\ncoupon_discount = 20\ncoupon_discounted_price = discounted_price - coupon_discount\nfinal_price = coupon_discounted_price - 1.9\nsolution = solve_it(final_price - original_price / 2, original_price)\nans = solution[original_price]"], "generated_prediction": "78.21", "options": ["A)$61", "B)$65", "C)$67.40", "D)$70", "E)$78.20"], "answer": "E", "prediction": "E"}
{"question": "Find out which of the following values is the multiple of X, if it is divisible by 9 and 12?", "generated": ["\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break", "\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break"], "generated_prediction": "36", "options": ["A)36", "B)15", "C)17", "D)5", "E)7"], "answer": "A", "prediction": "A"}
{"question": "If the probability that Stock A will increase in value during the next month is 0.56, and the probability that Stock B will increase in value during the next month is 0.74. What is the greatest value for the probability that neither of these two events will occur?", "generated": ["\nans = 1 - 0.56 - 0.74", "\nans = 1 - 0.56 - 0.74", "\nans = 1 - 0.56 - 0.74 + 0.56 * 0.74", "\nans = 1 - 0.56 - 0.74 + 0.56 * 0.74", "\np_A = 0.56\np_B = 0.74\nans = 1 - p_A - p_B", "\nA = 0.56\nB = 0.74\nans = 1 - (A + B - A * B)", "\nstock_A = 0.56\nstock_B = 0.74\nans = 1 - stock_A - stock_B", "\nstock_a_increase_prob = 0.56\nstock_b_increase_prob = 0.74\nans = 1 - stock_a_increase_prob - stock_b_increase_prob", "\nstock_a_increase_prob = 0.56\nstock_b_increase_prob = 0.74\nans = 1 - stock_a_increase_prob - stock_b_increase_prob", "\nstock_a_probability = 0.56\nstock_b_probability = 0.74\nans = 1 - stock_a_probability - stock_b_probability", "\nprobability_A = 0.56\nprobability_B = 0.74\nans = 1 - max(probability_A, probability_B)", "\nstock_a_increase = 0.56\nstock_b_increase = 0.74\nans = 1 - (stock_a_increase + stock_b_increase)", "\nprob_stock_a_increase = 0.56\nprob_stock_b_increase = 0.74\nans = 1 - prob_stock_a_increase - prob_stock_b_increase", "\nprob_stock_A_increase = 0.56\nprob_stock_B_increase = 0.74\nans = 1 - prob_stock_A_increase - prob_stock_B_increase", "\nstock_a_increase_probability = 0.56\nstock_b_increase_probability = 0.74\nstock_a_decrease_probability = 1 - stock_a_increase_probability\nstock_b_decrease_probability = 1 - stock_b_increase_probability\nans = min(stock_a_decrease_probability, stock_b_decrease_probability)", "\nprob_A = 0.56\nprob_B = 0.74\nans = 1 - (prob_A + prob_B - prob_A * prob_B)", "\nprob_A_increase = 0.56\nprob_B_increase = 0.74\nprob_A_decrease = 1 - prob_A_increase\nprob_B_decrease = 1 - prob_B_increase\nans = max(prob_A_decrease, prob_B_decrease)", "\nprob_A = 0.56\nprob_B = 0.74\nans = 1 - (prob_A + prob_B)", "\nprobability_A = 0.56\nprobability_B = 0.74\nans = 1 - probability_A - probability_B", "\nprobability_stock_a_increase = 0.56\nprobability_stock_b_increase = 0.74\nprobability_neither_increase = 1 - (probability_stock_a_increase + probability_stock_b_increase - probability_stock_a_increase * probability_stock_b_increase)\nans = probability_neither_increase", "\nstock_a_increase_probability = 0.56\nstock_b_increase_probability = 0.74\nans = 1 - stock_a_increase_probability - stock_b_increase_probability", "\nprob_stock_A_increase = 0.56\nprob_stock_B_increase = 0.74\nprob_stock_A_decrease = 1 - prob_stock_A_increase\nprob_stock_B_decrease = 1 - prob_stock_B_increase\nprob_stock_A_decrease_and_stock_B_decrease = prob_stock_A_decrease * prob_stock_B_decrease\nprob_stock_A_decrease_or_stock_B_decrease = prob_stock_A_decrease + prob_stock_B_decrease - prob_stock_A_decrease_and_stock_B_decrease\nans = prob_stock_A_decrease_or_stock_B_decrease", "\nstock_A_increase = 0.56\nstock_B_increase = 0.74\nans = 1 - stock_A_increase - stock_B_increase", "\nstock_a_increase = 0.56\nstock_b_increase = 0.74\nans = 1 - (stock_a_increase + stock_b_increase - stock_a_increase * stock_b_increase)", "\nA_increase_probability = 0.56\nB_increase_probability = 0.74\nans = 1 - A_increase_probability - B_increase_probability", "\nstock_a_increase_probability = 0.56\nstock_b_increase_probability = 0.74\nans = 1 - (stock_a_increase_probability + stock_b_increase_probability - stock_a_increase_probability * stock_b_increase_probability)", "\nprob_A = 0.56\nprob_B = 0.74\nprob_A_and_B = prob_A * prob_B\nprob_A_or_B = prob_A + prob_B - prob_A_and_B\nans = 1 - prob_A_or_B", "\nprob_A = 0.56\nprob_B = 0.74\nprob_A_and_B = prob_A * prob_B\nprob_A_or_B = prob_A + prob_B - prob_A_and_B\nprob_not_A_and_not_B = 1 - prob_A_or_B\nans = prob_not_A_and_not_B", "\nprob_A_increase = 0.56\nprob_B_increase = 0.74\nprob_A_decrease = 1 - prob_A_increase\nprob_B_decrease = 1 - prob_B_increase\nprob_A_decrease_and_B_decrease = prob_A_decrease * prob_B_decrease\nans = prob_A_decrease_and_B_decrease", "\nprob_A = 0.56\nprob_B = 0.74\nprob_A_or_B = prob_A + prob_B - prob_A * prob_B\nans = 1 - prob_A_or_B"], "generated_prediction": "-0.30000000000000004", "options": ["A)0.22", "B)0.26", "C)0.37", "D)0.46", "E)0.63"], "answer": "B", "prediction": "A"}
{"question": "A trader sold an article at a profit of 20% for Rs.360. What is the cost price of the article?", "generated": ["\ncost_price = Symbol('cost_price', positive=True)\nselling_price = cost_price * 1.2\nsolution = solve_it(selling_price - 360, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = cost_price * 1.2\nsolution = solve_it(selling_price - 360, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = cost_price * 1.2\nsolution = solve_it(selling_price - 360, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = cost_price * 1.2\nsolution = solve_it(selling_price - 360, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = cost_price * 1.2\nsolution = solve_it(selling_price - 360, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nsolution = solve_it(cost_price * 1.2 - selling_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nsolution = solve_it(cost_price * 1.2 - selling_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nprofit = 20\nselling_price = 360\nsolution = solve_it(cost_price * (1 + profit / 100) - selling_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2 * selling_price\nsolution = solve_it(cost_price + profit - selling_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nsolution = solve_it(selling_price - cost_price - 0.2 * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - cost_price * profit, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nsolution = solve_it(selling_price - cost_price - 0.2 * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2 * selling_price\nsolution = solve_it(selling_price - cost_price - profit, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nsolution = solve_it(selling_price - cost_price - 0.2 * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit_percentage = 20\nsolution = solve_it(cost_price * (1 + profit_percentage / 100) - selling_price, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 20\nsolution = solve_it(selling_price - cost_price - cost_price * profit / 100 - 360, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 20\nsolution = solve_it(selling_price - cost_price - cost_price * profit / 100 - 360, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 360\nprofit = 0.2\nsolution = solve_it(selling_price - cost_price - (cost_price * profit), cost_price)\nans = solution[cost_price]"], "generated_prediction": "300.0", "options": ["A)270", "B)300", "C)280", "D)320", "E)315"], "answer": "B", "prediction": "B"}
{"question": "20 marbles were pulled out of a bag of only white marbles, painted black, and then put back in. Then, another 20 marbles were pulled out, of which 1 was black, after which they were all returned to the bag. If the percentage of black marbles pulled out the second time represents their percentage in the bag, how many marbles in total Q does the bag currently hold?", "generated": ["\ntotal_marbles = Symbol('total_marbles', positive=True)\nblack_marbles_in_bag = total_marbles * 1 / 20\nsolution = solve_it(black_marbles_in_bag - 20, total_marbles)\nans = solution[total_marbles]", "\nnum_marbles = Symbol('num_marbles', positive=True)\nnum_black_marbles = 0.05 * num_marbles\nsolution = solve_it(num_black_marbles - 20, num_marbles)\nans = solution[num_marbles]", "\nnum_black_marbles = Symbol('num_black_marbles', positive=True)\nnum_white_marbles = Symbol('num_white_marbles', positive=True)\nsolution = solve_it([num_black_marbles / (num_black_marbles + num_white_marbles) - 1 / 20, num_black_marbles - 20], [num_black_marbles, num_white_marbles])\nans = solution[num_black_marbles] + solution[num_white_marbles]", "\nQ = Symbol('Q', positive=True)\nnum_black_marbles_in_bag = 20 / Q\nnum_black_marbles_pulled_out = 1 / 20\nsolution = solve_it(num_black_marbles_in_bag - num_black_marbles_pulled_out, Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nblack_marbles_in_bag = 20 / Q\nblack_marbles_pulled_out_second_time = 1 / 20\nsolution = solve_it(black_marbles_in_bag - black_marbles_pulled_out_second_time, Q)\nans = solution[Q]", "\nmarbles_pulled_out_first_time = 20\nmarbles_pulled_out_second_time = 20\nblack_marbles_pulled_out_second_time = 1\ntotal_marbles = Symbol('total_marbles', positive=True)\nsolution = solve_it([total_marbles * black_marbles_pulled_out_second_time / marbles_pulled_out_second_time - marbles_pulled_out_first_time, total_marbles - marbles_pulled_out_first_time - marbles_pulled_out_second_time], total_marbles)\nans = solution[total_marbles]", "\ntotal_marbles = Symbol('total_marbles', positive=True)\nmarbles_painted_black = 20\nmarbles_pulled_out_second_time = 20\nmarbles_pulled_out_second_time_black = 1\nsolution = solve_it([total_marbles * marbles_pulled_out_second_time_black / marbles_pulled_out_second_time - marbles_painted_black, total_marbles - marbles_painted_black - marbles_pulled_out_second_time], total_marbles)\nans = solution[total_marbles]", "\nmarbles_in_bag = Symbol('marbles_in_bag', positive=True)\nmarbles_pulled_out_first_time = 20\nmarbles_pulled_out_second_time = 20\nblack_marbles_pulled_out_second_time = 1\nsolution = solve_it([marbles_in_bag / marbles_pulled_out_first_time - 1, marbles_in_bag / marbles_pulled_out_second_time - black_marbles_pulled_out_second_time], marbles_in_bag)\nans = solution[marbles_in_bag]", "\ntotal_marbles = Symbol('total_marbles', positive=True)\nblack_marbles = Symbol('black_marbles', positive=True)\nsolution = solve_it([total_marbles - 20 - black_marbles, total_marbles - 20 - 1, black_marbles / total_marbles - 1 / 20], [total_marbles, black_marbles])\nans = solution[total_marbles]", "\nmarbles_in_bag = Symbol('marbles_in_bag', positive=True)\nmarbles_pulled_out = 20\nmarbles_painted_black = 20\nmarbles_pulled_out_second_time = 20\nmarbles_pulled_out_second_time_black = 1\nsolution = solve_it([marbles_pulled_out_second_time_black / marbles_pulled_out_second_time - marbles_painted_black / marbles_pulled_out, marbles_pulled_out_second_time + marbles_pulled_out - marbles_in_bag], [marbles_in_bag])\nans = solution[marbles_in_bag]", "\nnum_marbles = Symbol('num_marbles', positive=True)\nnum_black_marbles = Symbol('num_black_marbles', positive=True)\nnum_white_marbles = num_marbles - num_black_marbles\nsolution = solve_it([num_white_marbles - 20, num_black_marbles - 1, num_black_marbles / num_marbles - 0.05], [num_marbles, num_black_marbles])\nans = solution[num_marbles]", "\nnum_marbles_pulled_out = 20\nnum_black_marbles_pulled_out = 1\nnum_marbles_in_bag = Symbol('num_marbles_in_bag', positive=True)\npercentage_of_black_marbles_pulled_out = num_black_marbles_pulled_out / num_marbles_pulled_out\npercentage_of_black_marbles_in_bag = percentage_of_black_marbles_pulled_out * num_marbles_in_bag / num_marbles_pulled_out\nsolution = solve_it(percentage_of_black_marbles_in_bag - percentage_of_black_marbles_pulled_out, num_marbles_in_bag)\nans = solution[num_marbles_in_bag]", "\nnum_marbles = Symbol('num_marbles', positive=True)\nnum_black_marbles = 20\nnum_white_marbles = num_marbles - num_black_marbles\nnum_black_marbles_second_time = 1\nnum_white_marbles_second_time = 19\nsolution = solve_it([num_black_marbles_second_time / num_marbles - num_black_marbles / num_marbles, num_white_marbles_second_time / num_marbles - num_white_marbles / num_marbles], num_marbles)\nans = solution[num_marbles]", "\nnum_marbles = Symbol('num_marbles', positive=True)\nnum_black_marbles_pulled_out = 1\nnum_marbles_pulled_out = 20\nsolution = solve_it(num_marbles * num_black_marbles_pulled_out / num_marbles_pulled_out - 20, num_marbles)\nans = solution[num_marbles]", "\nnum_marbles = Symbol('num_marbles', positive=True)\nnum_black_marbles = Symbol('num_black_marbles', positive=True)\nnum_marbles_pulled_out = 20\nnum_black_marbles_pulled_out_second_time = 1\nsolution = solve_it([num_black_marbles / num_marbles - num_black_marbles_pulled_out_second_time / num_marbles_pulled_out, num_black_marbles - 20], [num_marbles, num_black_marbles])\nans = solution[num_marbles]", "\ntotal_marbles = Symbol('total_marbles', positive=True)\nmarbles_painted_black = 20\nmarbles_pulled_out = 20\nmarbles_pulled_out_black = 1\nsolution = solve_it([total_marbles * marbles_pulled_out_black / marbles_pulled_out - marbles_painted_black, total_marbles - marbles_painted_black - marbles_pulled_out], total_marbles)\nans = solution[total_marbles]", "\nblack_marbles = 20\nwhite_marbles = 20\ntotal_marbles = black_marbles + white_marbles\nQ = Symbol('Q')\nblack_marbles_in_Q = Q * black_marbles / total_marbles\nsolution = solve_it(black_marbles_in_Q - 1, Q)\nans = solution[Q]", "\nnum_marbles_pulled_out = 20\nnum_black_marbles_pulled_out = 1\nnum_marbles_in_bag = Symbol('num_marbles_in_bag', positive=True)\nsolution = solve_it(num_marbles_in_bag * num_black_marbles_pulled_out / num_marbles_pulled_out - num_marbles_in_bag * 20 / (num_marbles_in_bag + 20), num_marbles_in_bag)\nans = solution[num_marbles_in_bag]", "\nnum_marbles_in_bag = Symbol('num_marbles_in_bag', positive=True)\nnum_black_marbles_in_bag = num_marbles_in_bag * 1 / 20\nnum_black_marbles_in_bag_after_first_pullout = num_black_marbles_in_bag * 20 / 20\nnum_black_marbles_in_bag_after_second_pullout = num_black_marbles_in_bag_after_first_pullout * 1 / 20\nsolution = solve_it(num_black_marbles_in_bag_after_second_pullout - num_black_marbles_in_bag, num_marbles_in_bag)\nans = solution[num_marbles_in_bag]", "\nblack_marbles_in_bag = Symbol('black_marbles_in_bag', positive=True)\ntotal_marbles_in_bag = Symbol('total_marbles_in_bag', positive=True)\nfirst_pull_marbles = 20\nsecond_pull_marbles = 20\nsecond_pull_black_marbles = 1\nsolution = solve_it([black_marbles_in_bag / total_marbles_in_bag - second_pull_black_marbles / second_pull_marbles, total_marbles_in_bag - first_pull_marbles - second_pull_marbles], [black_marbles_in_bag, total_marbles_in_bag])\nans = solution[total_marbles_in_bag]", "\nnum_marbles_in_bag = Symbol('num_marbles_in_bag', positive=True)\nnum_black_marbles_in_bag = num_marbles_in_bag / 100\nnum_white_marbles_in_bag = num_marbles_in_bag - num_black_marbles_in_bag\nnum_marbles_pulled_out = 20\nnum_black_marbles_pulled_out = 1\nsolution = solve_it([num_black_marbles_in_bag - num_black_marbles_pulled_out / num_marbles_pulled_out, num_white_marbles_in_bag - num_marbles_pulled_out + num_black_marbles_pulled_out], [num_marbles_in_bag, num_black_marbles_in_bag])\nans = solution[num_marbles_in_bag]", "\nnum_marbles_in_bag = Symbol('num_marbles_in_bag', positive=True)\nnum_black_marbles_in_bag = num_marbles_in_bag * 0.05\nnum_white_marbles_in_bag = num_marbles_in_bag - num_black_marbles_in_bag\nnum_marbles_painted_black = 20\nnum_black_marbles_in_bag = num_marbles_painted_black + num_black_marbles_in_bag\nnum_marbles_pulled_out = 20\nnum_black_marbles_pulled_out = 1\nsolution = solve_it(num_black_marbles_pulled_out / num_marbles_pulled_out - num_black_marbles_in_bag / num_marbles_in_bag, num_marbles_in_bag)\nans = solution[num_marbles_in_bag]", "\nQ = Symbol('Q')\nnum_marbles_pulled_out_first_time = 20\nnum_marbles_pulled_out_second_time = 20\nnum_black_marbles_pulled_out_second_time = 1\nsolution = solve_it([Q * num_black_marbles_pulled_out_second_time / num_marbles_pulled_out_second_time - num_marbles_pulled_out_first_time, Q - num_marbles_pulled_out_first_time - num_marbles_pulled_out_second_time], [Q])\nans = solution[Q]", "\nnum_marbles_in_bag = Symbol('num_marbles_in_bag', positive=True)\nmarbles_pulled_out_first_time = 20\nmarbles_pulled_out_second_time = 20\nmarbles_painted_black_first_time = 20\nmarbles_painted_black_second_time = 1\nsolution = solve_it([num_marbles_in_bag - marbles_pulled_out_first_time, marbles_painted_black_second_time / marbles_pulled_out_second_time - marbles_painted_black_first_time / marbles_pulled_out_first_time], num_marbles_in_bag)\nans = solution[num_marbles_in_bag]", "\nQ = Symbol('Q', positive=True)\nblack_marbles_in_bag = Q * 1 / 20\nblack_marbles_in_bag_after_first_pullout = black_marbles_in_bag - 20\nblack_marbles_in_bag_after_second_pullout = black_marbles_in_bag_after_first_pullout + 1\nsolution = solve_it(black_marbles_in_bag_after_second_pullout - black_marbles_in_bag, Q)\nans = solution[Q]", "\nmarbles_in_bag = Symbol('marbles_in_bag', positive=True)\nmarbles_pulled_out = 20\nmarbles_painted_black = 20\nmarbles_pulled_out_second_time = 20\nmarbles_pulled_out_second_time_black = 1\nsolution = solve_it([marbles_in_bag * marbles_pulled_out_second_time_black / marbles_pulled_out_second_time - marbles_painted_black, marbles_in_bag - marbles_pulled_out - marbles_painted_black], [marbles_in_bag])\nans = solution[marbles_in_bag]", "\nnum_marbles = Symbol('num_marbles', positive=True)\nnum_black_marbles = Symbol('num_black_marbles', positive=True)\nnum_white_marbles = num_marbles - num_black_marbles\nnum_marbles_pulled_out = 20\nnum_marbles_pulled_out_2 = 20\nnum_black_marbles_pulled_out = 1\nsolution = solve_it([num_black_marbles / num_marbles - num_black_marbles_pulled_out / num_marbles_pulled_out_2, num_white_marbles / num_marbles - (num_marbles_pulled_out - num_black_marbles_pulled_out) / num_marbles_pulled_out_2], [num_marbles, num_black_marbles])\nans = solution[num_marbles]", "\nnum_marbles_pulled_first_time = 20\nnum_marbles_pulled_second_time = 20\nnum_black_marbles_pulled_second_time = 1\nnum_marbles_in_bag = Symbol('num_marbles_in_bag', positive=True)\nsolution = solve_it(num_marbles_in_bag * (num_marbles_pulled_first_time / num_marbles_in_bag) - num_marbles_pulled_first_time, num_marbles_in_bag)\nnum_marbles_in_bag = solution[num_marbles_in_bag]\nsolution = solve_it(num_marbles_in_bag * (num_black_marbles_pulled_second_time / num_marbles_pulled_second_time) - num_black_marbles_pulled_second_time, num_marbles_in_bag)\nans = solution[num_marbles_in_bag]", "\nnum_marbles_in_bag = Symbol('num_marbles_in_bag', positive=True)\nnum_black_marbles_in_bag = num_marbles_in_bag * 1 / 20\nnum_white_marbles_in_bag = num_marbles_in_bag - num_black_marbles_in_bag\nnum_marbles_painted_black = num_white_marbles_in_bag\nnum_black_marbles_in_bag = num_marbles_painted_black + num_black_marbles_in_bag\nsolution = solve_it(num_black_marbles_in_bag - 1, num_marbles_in_bag)\nans = solution[num_marbles_in_bag]", "\nnum_marbles_pulled_out = 20\nnum_black_marbles_pulled_out = 1\npercentage_black_marbles = num_black_marbles_pulled_out / num_marbles_pulled_out\nnum_marbles_in_bag = Symbol('num_marbles_in_bag', positive=True)\nnum_black_marbles_in_bag = num_marbles_in_bag * percentage_black_marbles\nnum_white_marbles_in_bag = num_marbles_in_bag - num_black_marbles_in_bag\nsolution = solve_it(num_black_marbles_in_bag - 20, num_marbles_in_bag)\nans = solution[num_marbles_in_bag]"], "generated_prediction": "400.0", "options": ["A)40", "B)200", "C)380", "D)400", "E)3200"], "answer": "D", "prediction": "D"}
{"question": "Find the total no. of distinct bike no.'s that can beformed using 2 letters followed by 2 no.'s. How many letters need to be distinct?", "generated": ["\nans = 26 * 26 * 10 * 10", "\nans = 26 * 26 * 10 * 10", "\nans = 26 * 26 * 10 * 10", "\ndistinct_letters = 26\ndistinct_numbers = 10\nans = distinct_letters ** 2 * distinct_numbers ** 2", "\ndistinct_letters = 26\ndistinct_numbers = 10\nans = distinct_letters ** 2 * distinct_numbers ** 2", "\ndistinct_letters = 26\ndistinct_numbers = 10\nans = distinct_letters ** 2 * distinct_numbers ** 2", "\ndistinct_letters = 26\ndistinct_numbers = 10\nans = distinct_letters ** 2 * distinct_numbers ** 2", "\ndistinct_letters = 26\ndistinct_numbers = 10\nans = distinct_letters ** 2 * distinct_numbers ** 2", "\nans = 26 * 26 * 10 * 10", "\nans = 26 * 26 * 10 * 10", "\nnum_letters = 26\nnum_numbers = 10\nans = num_letters ** 2 * num_numbers ** 2", "\nnum_letters = 26\nnum_numbers = 10\nans = num_letters ** 2 * num_numbers ** 2", "\nnum_letters = 26\nnum_numbers = 10\nans = num_letters ** 2 * num_numbers ** 2", "\nnum_letters = 26\nnum_numbers = 10\nans = num_letters ** 2 * num_numbers ** 2", "\nnum_letters = 26\nnum_numbers = 10\nans = num_letters ** 2 * num_numbers ** 2", "\nnum_letters = 26\nnum_digits = 10\nans = num_letters ** 2 * num_digits ** 2", "\nnum_letters = 26\nnum_numbers = 10\nans = num_letters ** 2 * num_numbers ** 2", "\nnum_letters = 2\nnum_digits = 2\nans = 26 ** num_letters * 10 ** num_digits", "\nletter_count = 2\nnumber_count = 2\nans = 26 ** letter_count * 10 ** number_count", "\nnum_letters = 26\nnum_digits = 10\nnum_distinct_bike_nos = num_letters ** 2 * num_digits ** 2\nans = num_distinct_bike_nos", "\nnum_letters = 26\nnum_numbers = 10\nans = num_letters * num_letters * num_numbers * num_numbers", "\nnum_letters = 26\nnum_digits = 10\nnum_distinct_bike_nos = num_letters ** 2 * num_digits ** 2\nnum_distinct_letters = num_letters ** 2\nans = (num_distinct_bike_nos, num_distinct_letters)", "\nnum_letters = 26\nnum_numbers = 10\nnum_distinct_bike_nos = num_letters ** 2 * num_numbers ** 2\nnum_distinct_letters = num_letters ** 2\nans = (num_distinct_bike_nos, num_distinct_letters)", "\nalphabets = 26\ndigits = 10\nans = alphabets ** 2 * digits ** 2", "\ntotal_no_of_bikes = 26 * 26 * 10 * 10\nno_of_bikes_with_distinct_letters = 26 * 25 * 10 * 10\nno_of_bikes_with_distinct_numbers = 26 * 26 * 9 * 9\nans = total_no_of_bikes - no_of_bikes_with_distinct_letters - no_of_bikes_with_distinct_numbers", "\nnum_letters = 26\nnum_numbers = 10\nnum_distinct_bike_numbers = num_letters ** 2 * num_numbers ** 2\nnum_letters_need_to_be_distinct = math.ceil(math.log(num_distinct_bike_numbers, num_letters))\nans = (num_distinct_bike_numbers, num_letters_need_to_be_distinct)", "\nimport itertools\nletters = [chr(ord('A') + i) for i in range(26)]\nnumbers = [str(i) for i in range(10)]\ndistinct_letters = [''.join(combination) for combination in itertools.combinations(letters, 2)]\ndistinct_numbers = [''.join(combination) for combination in itertools.combinations(numbers, 2)]\nans = len(distinct_letters) * len(distinct_numbers)", "\n# There are 26 letters in the english alphabet.\n# There are 10 digits.\n# There are 26 * 26 * 10 * 10 possible combinations.\nans = 26 * 26 * 10 * 10", "\n# 26 letters and 10 numbers\n# 2 letters and 2 numbers\n# 26 * 26 * 10 * 10\nans = 26 * 26 * 10 * 10", "\n# Note: The answer is not correct.\nnum_of_letters = 26\nnum_of_numbers = 10\nnum_of_possible_bike_nos = num_of_letters * num_of_letters * num_of_numbers * num_of_numbers\nans = num_of_possible_bike_nos"], "generated_prediction": "67600", "options": ["A)74453", "B)64543", "C)74325", "D)65000", "E)97656"], "answer": "D", "prediction": "D"}
{"question": "A train running at a speed of 100 miles/hour, takes 10 hours to reach its destination. After covering quarter of the distance, it starts raining and the train has to be slowed to speed of 75 miles/hour. What is the total journey duration?", "generated": ["\ntotal_distance = 100 * 10\nfirst_quarter_distance = total_distance / 4\nfirst_quarter_time = first_quarter_distance / 100\nsecond_quarter_distance = total_distance / 2\nsecond_quarter_time = second_quarter_distance / 75\nans = first_quarter_time + second_quarter_time", "\ndistance = Symbol('distance', positive=True)\nspeed_1 = 100\nspeed_2 = 75\ntime_1 = distance / speed_1\ntime_2 = (distance / 4) / speed_2\nans = time_1 + time_2", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([speed * time - distance, (speed - 25) * (time + 0.25) - distance], [speed, time])\nans = solution[time]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([speed * time - distance, speed * time - distance / 4], [speed, time])\nans = solution[time]", "\ninitial_speed = 100\nfinal_speed = 75\ndistance = Symbol('distance', positive=True)\ninitial_duration = distance / initial_speed\nfinal_duration = distance / final_speed\nsolution = solve_it(initial_duration - final_duration - 10, distance)\nans = solution[distance] / final_speed", "\noriginal_speed = 100\noriginal_duration = 10\nnew_speed = 75\nnew_duration = original_duration * new_speed / original_speed\nans = new_duration", "\ntrain_speed = 100\nrain_speed = 75\nrain_time = 0.25 * (train_speed / rain_speed)\nans = rain_time + 10", "\nspeed = 100\ndistance = Symbol('distance', positive=True)\nrain_speed = 75\nrain_distance = distance / 4\nrain_time = rain_distance / rain_speed\ntotal_time = distance / speed + rain_time\nsolution = solve_it(total_time - 10, distance)\nans = solution[distance]", "\noriginal_speed = 100\nrain_speed = 75\ndistance = Symbol('distance', positive=True)\noriginal_time = distance / original_speed\nrain_time = distance / rain_speed\nsolution = solve_it(original_time - rain_time - 10, distance)\nans = solution[distance] / original_speed + solution[distance] / rain_speed", "\noriginal_speed = 100\ndistance = Symbol('distance', positive=True)\nduration = distance / original_speed\nrain_duration = distance / 4 / (original_speed - 75)\nans = duration + rain_duration", "\ntrain_speed = 100\nrain_speed = 75\nrain_duration = 0.25\ntotal_duration = rain_duration + (1 - rain_duration) * train_speed / rain_speed\nans = total_duration", "\nspeed = 100\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\nrain_speed = 75\nrain_distance = distance / 4\nsolution = solve_it([speed * time - distance, rain_speed * time - rain_distance], [distance, time])\nans = solution[time]", "\noriginal_speed = 100\nreduced_speed = 75\ndistance = Symbol('distance', positive=True)\noriginal_time = distance / original_speed\nreduced_time = (distance / 4) / reduced_speed + (3 * distance / 4) / original_speed\nsolution = solve_it(reduced_time - original_time - 10, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\noriginal_time = distance / 100\nreduced_time = (distance / 4) / 75 + (3 * distance / 4) / 100\nsolution = solve_it(original_time - reduced_time - 10, distance)\nans = solution[distance]", "\noriginal_speed = 100\ndistance = Symbol('distance', positive=True)\ntime = 10\nrain_speed = 75\nrain_distance = distance / 4\nrain_time = rain_distance / rain_speed\nsolution = solve_it(time - rain_time - distance / original_speed, distance)\nans = rain_time + solution[distance] / rain_speed", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\nduration = Symbol('duration', positive=True)\nsolution = solve_it([speed * duration - distance, speed * duration - distance, speed * duration - distance], [speed, duration, distance])\nans = solution[duration]", "\noriginal_speed = 100\nnew_speed = 75\ndistance = Symbol('distance', positive=True)\ntime_taken = distance / original_speed\ntime_taken_with_rain = (distance / 4) / new_speed + (3 * distance / 4) / original_speed\nsolution = solve_it(time_taken - time_taken_with_rain - 10, distance)\nans = solution[distance]", "\ntrain_speed = 100\nrain_speed = 75\ndistance = Symbol('distance', positive=True)\nrain_distance = distance / 4\nrain_time = rain_distance / rain_speed\ntotal_time = rain_time + distance / train_speed\nsolution = solve_it(total_time - 10, distance)\nans = solution[distance]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\nrain_speed = 75\nrain_distance = distance / 4\nrain_time = rain_distance / rain_speed\nsolution = solve_it([speed * time - distance, rain_time + time - 10], [speed, distance])\nans = solution[time]", "\nspeed = 100\nquarter_journey_duration = 0.25\nrain_speed = 75\nrain_journey_duration = 1 - quarter_journey_duration\ntotal_journey_duration = quarter_journey_duration + rain_journey_duration * rain_speed / speed\nans = total_journey_duration", "\ntrain_speed = Symbol('train_speed', positive=True)\nrain_speed = Symbol('rain_speed', positive=True)\ndistance = Symbol('distance', positive=True)\nrain_distance = distance / 4\nsolution = solve_it([train_speed * 10 - distance, rain_speed * (10 - rain_distance / train_speed) - distance], [train_speed, rain_speed])\nans = 10 + rain_distance / solution[rain_speed]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\ntotal_distance = 100\ntotal_time = 10\nrain_distance = total_distance / 4\nrain_time = rain_distance / speed\nsolution = solve_it([total_distance / (time - rain_time) - 100, total_distance / time - 75], [time, speed])\nans = solution[time]", "\ntrain_speed = 100\nrain_speed = 75\nrain_distance = 0.25\nrain_time = rain_distance / rain_speed\ntrain_time = 1 - rain_distance / train_speed\nans = train_time + rain_time", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nrain_speed = 75\nrain_distance = distance / 4\nrain_time = rain_distance / rain_speed\nsolution = solve_it([distance / speed - 10, rain_time - rain_distance / speed], [distance, speed])\nans = solution[distance] / solution[speed]", "\noriginal_speed = 100\ndistance = Symbol('distance', positive=True)\ntime_to_cover_distance = distance / original_speed\nrain_speed = 75\nrain_time = distance / 4 / rain_speed\ntotal_time = time_to_cover_distance + rain_time\nans = total_time", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 100\noriginal_time = 10\noriginal_distance = original_speed * original_time\nrain_speed = 75\nrain_time = time - original_time\nrain_distance = rain_speed * rain_time\nsolution = solve_it([original_distance + rain_distance - distance, rain_distance - rain_speed * time], [time, distance])\nans = solution[time]", "\ntrain_speed = 100\nrain_speed = 75\nrain_start_time = 0.25\nrain_duration = 1\nrain_end_time = rain_start_time + rain_duration\nrain_distance = rain_speed * rain_duration\ntotal_distance = train_speed * rain_start_time + rain_distance\ntotal_duration = total_distance / train_speed\nans = total_duration", "\noriginal_speed = 100\nnew_speed = 75\ndistance_covered_at_original_speed = original_speed * 10 / 4\ndistance_covered_at_new_speed = new_speed * (10 - (10 / 4))\ntotal_distance = distance_covered_at_original_speed + distance_covered_at_new_speed\ntotal_time = total_distance / new_speed\nans = total_time", "\nspeed = 100\ndistance = Symbol('distance', positive=True)\ntime_taken = distance / speed\nrain_speed = 75\nrain_time = time_taken * (1 - 0.25)\ntotal_time = rain_time + rain_time * (speed - rain_speed) / rain_speed\nans = total_time", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_time = 10\noriginal_speed = 100\nrain_speed = 75\nrain_distance = distance / 4\nrain_time = rain_distance / rain_speed\nsolution = solve_it([time * speed - distance, original_time - rain_time], [speed, time])\nans = solution[time]"], "generated_prediction": "distance/75", "options": ["A)10", "B)11.5", "C)12.5", "D)13.5", "E)15"], "answer": "C", "prediction": "B"}
{"question": "Of the 200 students in a school, at least 45% attended the prom night and at least 35% took part in the debating session. What is the maximum number of students who could have neither attended the prom night nor the debating session?", "generated": ["\nstudents = 200\nprom_night_attendees = 0.45 * students\ndebating_session_participants = 0.35 * students\nans = students - prom_night_attendees - debating_session_participants", "\ntotal_students = 200\nstudents_attended_prom = 0.45 * total_students\nstudents_attended_debate = 0.35 * total_students\nstudents_attended_both = students_attended_prom + students_attended_debate - total_students\nstudents_attended_neither = total_students - students_attended_both\nans = students_attended_neither", "\nstudents = 200\nstudents_attended_prom = 0.45 * students\nstudents_attended_debate = 0.35 * students\nstudents_attended_both = students_attended_prom + students_attended_debate - students\nstudents_attended_none = students - students_attended_both\nans = students_attended_none", "\nstudents_attended_prom = 0.45 * 200\nstudents_attended_debate = 0.35 * 200\nstudents_attended_both = students_attended_prom + students_attended_debate - 200\nstudents_attended_neither = 200 - students_attended_both\nans = students_attended_neither", "\nstudents = 200\nprom_night_attendees = 0.45 * students\ndebating_session_attendees = 0.35 * students\nattendees = prom_night_attendees + debating_session_attendees\nans = students - attendees", "\nnum_students = 200\nnum_students_attended_prom = 0.45 * num_students\nnum_students_took_part_in_debate = 0.35 * num_students\nnum_students_neither_attended_prom_nor_took_part_in_debate = num_students - num_students_attended_prom - num_students_took_part_in_debate\nans = num_students_neither_attended_prom_nor_took_part_in_debate", "\nnum_students = 200\nnum_students_attended_prom = 0.45 * num_students\nnum_students_took_part_in_debating = 0.35 * num_students\nnum_students_neither_attended_prom_nor_debating = num_students - num_students_attended_prom - num_students_took_part_in_debating\nans = num_students_neither_attended_prom_nor_debating", "\nstudents = 200\nprom_night = 0.45 * students\ndebating_session = 0.35 * students\nans = students - max(prom_night, debating_session)", "\ntotal_students = 200\nmin_students_attended_prom = 0.45 * total_students\nmin_students_attended_debate = 0.35 * total_students\nmax_students_neither_attended_prom_nor_debate = total_students - min_students_attended_prom - min_students_attended_debate\nans = max_students_neither_attended_prom_nor_debate", "\nnum_students = 200\nnum_attended_prom_night = 0.45 * num_students\nnum_took_part_in_debating = 0.35 * num_students\nnum_neither_attended_prom_night_nor_debating = num_students - num_attended_prom_night - num_took_part_in_debating\nans = num_neither_attended_prom_night_nor_debating", "\ntotal_students = 200\nstudents_attended_prom = 0.45 * total_students\nstudents_took_part_in_debating = 0.35 * total_students\nstudents_attended_both = students_attended_prom + students_took_part_in_debating - total_students\nstudents_attended_neither = total_students - students_attended_both\nans = students_attended_neither", "\nnum_students = 200\nattended_prom_night = 0.45 * num_students\ntook_part_in_debating = 0.35 * num_students\nmax_students_neither_attended_prom_night_nor_debating = num_students - max(attended_prom_night, took_part_in_debating)\nans = max_students_neither_attended_prom_night_nor_debating", "\nstudents = 200\nattended_prom_night = 0.45 * students\ntook_part_in_debating_session = 0.35 * students\nmaximum_number_of_students_neither_attended_prom_night_nor_took_part_in_debating_session = students - attended_prom_night - took_part_in_debating_session\nans = maximum_number_of_students_neither_attended_prom_night_nor_took_part_in_debating_session", "\nnum_students = 200\nmin_attended_prom = 45\nmin_took_part_in_debate = 35\nmax_neither_attended_prom_nor_took_part_in_debate = num_students - min_attended_prom - min_took_part_in_debate\nans = max_neither_attended_prom_nor_took_part_in_debate", "\nstudents = 200\nprom_night_attendees = 0.45 * students\ndebate_session_participants = 0.35 * students\nmax_students_not_attending_both = students - prom_night_attendees - debate_session_participants\nans = max_students_not_attending_both", "\nnum_students = 200\nprom_night_attendance = 0.45 * num_students\ndebating_attendance = 0.35 * num_students\nmax_students_neither_attended_prom_night_nor_debating = num_students - prom_night_attendance - debating_attendance\nans = max_students_neither_attended_prom_night_nor_debating", "\nprom_night_attendees = 0.45 * 200\ndebating_session_attendees = 0.35 * 200\nmax_students_not_attending_either = 200 - prom_night_attendees - debating_session_attendees\nans = max_students_not_attending_either", "\nstudents = 200\nattended_prom_night = 0.45 * students\ntook_part_in_debating_session = 0.35 * students\nmaximum_students_who_could_have_neither_attended_the_prom_night_nor_the_debating_session = students - attended_prom_night - took_part_in_debating_session\nans = maximum_students_who_could_have_neither_attended_the_prom_night_nor_the_debating_session", "\nnum_students = 200\nattended_prom_night = 0.45 * num_students\ntook_part_in_debating = 0.35 * num_students\nstudents_neither_attended_prom_night_nor_took_part_in_debating = num_students - attended_prom_night - took_part_in_debating\nans = students_neither_attended_prom_night_nor_took_part_in_debating", "\nstudents = 200\nattended_prom = 45\ntook_part_in_debating = 35\nattended_prom_and_took_part_in_debating = students - (attended_prom + took_part_in_debating - attended_prom * took_part_in_debating / 100)\nans = students - attended_prom_and_took_part_in_debating", "\nprom_night_attendees = 0.45 * 200\ndebating_session_attendees = 0.35 * 200\nattendees = prom_night_attendees + debating_session_attendees\nans = 200 - attendees", "\nstudents = 200\nstudents_attended_prom = 0.45 * students\nstudents_took_part_in_debate = 0.35 * students\nstudents_attended_prom_and_debate = students_attended_prom + students_took_part_in_debate - students\nstudents_neither_attended_prom_nor_debate = students - students_attended_prom_and_debate\nans = students_neither_attended_prom_nor_debate", "\nprom_attendees = 0.45 * 200\ndebate_attendees = 0.35 * 200\nmax_students_neither_attended = 200 - prom_attendees - debate_attendees\nans = max_students_neither_attended", "\nprom_night_attendees = 0.45 * 200\ndebating_session_participants = 0.35 * 200\nmaximum_number_of_students_who_could_have_neither_attended_the_prom_night_nor_the_debating_session = 200 - prom_night_attendees - debating_session_participants\nans = maximum_number_of_students_who_could_have_neither_attended_the_prom_night_nor_the_debating_session", "\nnum_students = 200\nprom_night_attendees = 0.45 * num_students\ndebating_session_attendees = 0.35 * num_students\nmax_students_who_did_not_attend_both = num_students - prom_night_attendees - debating_session_attendees\nans = max_students_who_did_not_attend_both", "\nstudents = 200\nprom_night_attendees = 0.45 * students\ndebating_session_participants = 0.35 * students\nmax_students_neither_attended_nor_participated = students - max(prom_night_attendees, debating_session_participants)\nans = max_students_neither_attended_nor_participated", "\nnum_students = 200\nprom_attendees = 0.45 * num_students\ndebate_attendees = 0.35 * num_students\nmax_students_neither_attended = num_students - prom_attendees - debate_attendees\nans = max_students_neither_attended", "\nnum_students = 200\nprom_night_attendees = 0.45 * num_students\ndebating_session_attendees = 0.35 * num_students\nmax_students_neither_prom_night_nor_debating_session = num_students - prom_night_attendees - debating_session_attendees\nans = max_students_neither_prom_night_nor_debating_session", "\nstudents = 200\nprom_night_attendees = 0.45 * students\ndebate_participants = 0.35 * students\nmax_students_neither_attended_nor_participated = students - prom_night_attendees - debate_participants\nans = max_students_neither_attended_nor_participated", "\nstudents_attended_prom = Symbol('students_attended_prom', positive=True)\nstudents_attended_debate = Symbol('students_attended_debate', positive=True)\nstudents_attended_both = Symbol('students_attended_both', positive=True)\nstudents_attended_neither = Symbol('students_attended_neither', positive=True)\nsolution = solve_it([students_attended_prom - 0.45 * 200, students_attended_debate - 0.35 * 200, students_attended_both + students_attended_neither - 200, students_attended_both - students_attended_prom, students_attended_both - students_attended_debate], [students_attended_prom, students_attended_debate, students_attended_both, students_attended_neither])\nans = solution[students_attended_neither]"], "generated_prediction": "40.0", "options": ["A)27", "B)81", "C)90", "D)99", "E)110"], "answer": "E", "prediction": "B"}
{"question": "A sales person gets a 10% commission on each sale he makes. How many sales of $250 each must he make in order to reach a salary of at least $1000?", "generated": ["\nsales = Symbol('sales', positive=True)\ncommission = 0.1\nsalary = 1000\nsolution = solve_it(sales * commission * 250 - salary, sales)\nans = solution[sales]", "\ncommission = 0.1\nsalary = 1000\nsales = Symbol('sales', positive=True)\nsolution = solve_it(sales * commission * 250 - salary, sales)\nans = solution[sales]", "\nnum_sales = Symbol('num_sales', positive=True)\ncommission = 0.1\nsolution = solve_it(num_sales * commission * 250 - 1000, num_sales)\nans = solution[num_sales]", "\nnum_sales = Symbol('num_sales', positive=True)\ncommission = 0.1\nsolution = solve_it(num_sales * commission * 250 - 1000, num_sales)\nans = solution[num_sales]", "\ncommission = 0.1\nsalary = 1000\nsales = Symbol('sales', positive=True)\nsolution = solve_it(sales * commission * 250 - salary, sales)\nans = solution[sales]", "\ncommission = 0.1\nsalary = 1000\nsales = Symbol('sales', positive=True)\nsolution = solve_it(sales * commission * 250 - salary, sales)\nans = solution[sales]", "\ncommission = 0.1\nsalary = 1000\nsales = Symbol('sales', positive=True)\nsolution = solve_it(sales * commission * 250 - salary, sales)\nans = solution[sales]", "\ncommission = 0.1\nsalary = 1000\nsale_price = 250\nnum_sales = math.ceil(salary / (sale_price * commission))\nans = num_sales", "\nnum_sales = Symbol('num_sales', positive=True)\nsales_price = 250\ncommission = 0.1\nsolution = solve_it(num_sales * sales_price * commission - 1000, num_sales)\nans = solution[num_sales]", "\ncommission = 0.1\ntarget_salary = 1000\nsale_price = 250\nnum_sales = target_salary / (sale_price * commission)\nans = math.ceil(num_sales)", "\ncommission = 0.1\ntarget_salary = 1000\nsale_price = 250\nnum_sales = target_salary / (sale_price * commission)\nans = math.ceil(num_sales)", "\ncommission_rate = 0.1\ntarget_salary = 1000\nsale_price = 250\nnum_sales = math.ceil(target_salary / (sale_price * commission_rate))\nans = num_sales", "\nnum_sales = Symbol('num_sales', positive=True)\ncommission_rate = 0.1\nsalary = 1000\nsolution = solve_it(num_sales * commission_rate * 250 - salary, num_sales)\nans = solution[num_sales]", "\ncommission = 0.1\nminimum_salary = 1000\nsales = Symbol('sales', positive=True)\nsolution = solve_it(sales * commission * 250 - minimum_salary, sales)\nans = solution[sales]", "\nsales_person_salary = Symbol('sales_person_salary', positive=True)\ncommission = 0.1\nsales_price = 250\nsolution = solve_it(sales_person_salary - commission * sales_price * sales_person_salary, sales_person_salary)\nans = solution[sales_person_salary]", "\ncommission = 0.1\nsalary = 1000\nnum_sales = Symbol('num_sales', positive=True)\nsolution = solve_it(num_sales * commission * 250 - salary, num_sales)\nans = solution[num_sales]", "\nsale_price = 250\ncommission = 0.1\nsalary = 1000\nsales = math.ceil(salary / (sale_price * commission))\nans = sales", "\ncommission = 0.1\nsalary = 1000\nsales_amount = 250\nsales_count = Symbol('sales_count', positive=True)\nsolution = solve_it(sales_count * (sales_amount * commission + sales_amount) - salary, sales_count)\nans = solution[sales_count]", "\nnum_sales = Symbol('num_sales', positive=True)\ncommission = 0.1\nsalary = 1000\nsolution = solve_it(num_sales * commission * 250 - salary, num_sales)\nans = solution[num_sales]", "\ncommission_percentage = 10\nsales_amount = 250\nsalary = 1000\nsales_count = Symbol('sales_count', positive=True)\nsolution = solve_it(sales_count * sales_amount * commission_percentage / 100 - salary, sales_count)\nans = solution[sales_count]", "\ncommission_rate = 0.1\nsalary = 1000\nsales = Symbol('sales', positive=True)\nsolution = solve_it(sales * commission_rate * 250 - salary, sales)\nans = solution[sales]", "\ncommission_rate = 0.1\nsalary = 1000\nsales_price = 250\nsolution = solve_it(salary - commission_rate * sales_price * sales_num, sales_num)\nans = solution[sales_num]", "\ncommission = 0.1\nsalary = 1000\nsales_amount = 250\nnum_sales = math.ceil(salary / (sales_amount * commission))\nans = num_sales", "\ncommission_rate = 0.1\ntarget_salary = 1000\nsale_price = 250\nnum_sales = target_salary / (sale_price * commission_rate)\nans = math.ceil(num_sales)", "\ncommission_rate = 0.1\ntarget_salary = 1000\nsales_to_reach_target = target_salary / (commission_rate * 250)\nans = math.ceil(sales_to_reach_target)", "\ncommission_rate = 0.1\ntarget_salary = 1000\nsales_count = Symbol('sales_count', positive=True)\nsolution = solve_it(sales_count * 250 * commission_rate - target_salary, sales_count)\nans = solution[sales_count]", "\ncommission_rate = 0.1\nminimum_salary = 1000\nsale_price = 250\nnum_sales = Symbol('num_sales', positive=True)\nsolution = solve_it(num_sales * sale_price * commission_rate - minimum_salary, num_sales)\nans = solution[num_sales]", "\nsales_person_salary = Symbol('sales_person_salary', positive=True)\nsale_price = 250\ncommission = 0.1\nsolution = solve_it(sales_person_salary - sale_price * commission, sales_person_salary)\nans = int(math.ceil(1000 / solution[sales_person_salary]))", "\nsalary = Symbol('salary', positive=True)\ncommission = Symbol('commission', positive=True)\nsales = Symbol('sales', positive=True)\nsolution = solve_it(sales * 250 * (1 + commission / 100) - salary, sales)\nans = solution[sales]", "\nsales_count = Symbol('sales_count')\nsales_amount = 250\ncommission_rate = 0.1\ncommission = sales_count * sales_amount * commission_rate\nsolution = solve_it(commission - 1000, sales_count)\nans = solution[sales_count]"], "generated_prediction": "40.0", "options": ["A)15", "B)24", "C)25", "D)40", "E)52"], "answer": "D", "prediction": "D"}
{"question": "A company produces 420 units of a particular computer component every month, at a production cost to the company of $110 per component, and sells all of the components by the end of each month. What is the minimum selling price per component that will guarantee that the yearly profit (revenue from sales minus production costs) will be at least $626,400 ?", "generated": ["\ncost = 110\nrevenue = Symbol('revenue', positive=True)\nprofit = 420 * 12 * (revenue - cost)\nsolution = solve_it(profit - 626400, revenue)\nans = solution[revenue]", "\nproduction_cost = 110\nminimum_profit = 626400\nminimum_selling_price = production_cost + minimum_profit / 420 / 12\nans = math.ceil(minimum_selling_price)", "\nproduction_cost = 110\nprofit = 626400\nmin_selling_price = (production_cost + profit / 12) / 420\nans = math.ceil(min_selling_price)", "\nproduction_cost = 110\nmin_profit = 626400\nmin_selling_price = (min_profit + 420 * 12 * production_cost) / (420 * 12)\nans = math.ceil(min_selling_price)", "\nproduction_cost = 110\nprofit = Symbol('profit', positive=True)\nsolution = solve_it(profit - 420 * (profit - production_cost), profit)\nans = solution[profit]", "\nproduction_cost = 110\nprofit = 626400\nmin_selling_price = Symbol('min_selling_price', positive=True)\nsolution = solve_it(min_selling_price * 420 * 12 - production_cost * 420 * 12 - profit, min_selling_price)\nans = solution[min_selling_price]", "\nproduction_cost = 110\nprofit = Symbol('profit', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nsolution = solve_it(420 * (selling_price - production_cost) - profit, selling_price)\nans = solution[selling_price]", "\nproduction_cost = 110\nprofit = 626400\nmin_selling_price = (production_cost * 420 * 12 + profit) / (420 * 12)\nans = math.ceil(min_selling_price)", "\nproduction_cost = 110\nprofit_per_month = Symbol('profit_per_month', positive=True)\ntotal_profit = profit_per_month * 420 * 12\nsolution = solve_it(total_profit - 626400, profit_per_month)\nans = solution[profit_per_month] + production_cost", "\nproduction_cost = 110\nprofit = 626400\nnum_units = 420\nmin_selling_price = (production_cost + profit / 12) / num_units\nans = math.ceil(min_selling_price)", "\nproduction_cost = 110\nyearly_profit = 626400\nmonthly_profit = yearly_profit / 12\nselling_price = Symbol('selling_price', positive=True)\nsolution = solve_it(420 * selling_price - 420 * production_cost - monthly_profit, selling_price)\nans = solution[selling_price]", "\nproduction_cost = 110\nproduction_quantity = 420\nminimum_profit = 626400\nminimum_selling_price = (minimum_profit + production_cost * production_quantity) / production_quantity\nans = math.ceil(minimum_selling_price)", "\nproduction_cost = 110\nproduction_units = 420\nprofit = Symbol('profit', positive=True)\nsolution = solve_it(production_cost * production_units + profit - 626400, profit)\nans = solution[profit] / (12 * production_units)", "\nproduction_cost = 110\nproduction_units = 420\nprofit = 626400\nmin_selling_price = (production_cost * production_units + profit) / (12 * production_units)\nans = math.ceil(min_selling_price)", "\ncost_per_unit = 110\nprofit_per_unit = Symbol('profit_per_unit', positive=True)\ntotal_units = 420 * 12\nminimum_selling_price = cost_per_unit + profit_per_unit\nsolution = solve_it(minimum_selling_price * total_units - 626400, profit_per_unit)\nans = solution[profit_per_unit]", "\ncost_per_unit = 110\nunits_per_month = 420\nunits_per_year = units_per_month * 12\nmin_selling_price = Symbol('min_selling_price', positive=True)\nprofit_per_year = units_per_year * (min_selling_price - cost_per_unit)\nsolution = solve_it(profit_per_year - 626400, min_selling_price)\nans = solution[min_selling_price]", "\nproduction_cost = 110\nprofit_per_unit = Symbol('profit_per_unit', positive=True)\nmonthly_profit = 420 * profit_per_unit - 420 * production_cost\nyearly_profit = 12 * monthly_profit\nsolution = solve_it(yearly_profit - 626400, profit_per_unit)\nans = solution[profit_per_unit]", "\nproduction_cost = 110\nproduction_units = 420\nminimum_profit = 626400\nminimum_selling_price = (minimum_profit + production_cost * production_units * 12) / (production_units * 12)\nans = minimum_selling_price", "\nproduction_cost = 110\nprofit_per_component = Symbol('profit_per_component', positive=True)\ntotal_profit = 420 * 12 * profit_per_component - 420 * 12 * production_cost\nsolution = solve_it(total_profit - 626400, profit_per_component)\nans = solution[profit_per_component]", "\nproduction_cost = 110\nmin_profit = 626400\nmin_selling_price = (production_cost + min_profit / 12) / 420\nans = math.ceil(min_selling_price)", "\nproduction_cost = 110\nproduction_per_month = 420\nprofit_per_month = Symbol('profit_per_month', positive=True)\nsolution = solve_it(production_per_month * 12 * production_cost + profit_per_month * production_per_month * 12 - 626400, profit_per_month)\nans = solution[profit_per_month] + production_cost", "\nproduction_cost = 110\nmonthly_production = 420\nminimum_selling_price = (626400 + production_cost * monthly_production * 12) / (monthly_production * 12)\nans = math.ceil(minimum_selling_price)", "\nproduction_cost = 110\nprofit_per_unit = Symbol('profit_per_unit', positive=True)\ntotal_profit = 420 * profit_per_unit * 12 - 420 * 12 * production_cost\nsolution = solve_it(total_profit - 626400, profit_per_unit)\nans = solution[profit_per_unit]", "\nproduction_cost = 110\nprofit_per_unit = Symbol('profit_per_unit', positive=True)\ntotal_profit = 420 * profit_per_unit * 12 - 420 * production_cost * 12\nsolution = solve_it(total_profit - 626400, profit_per_unit)\nans = solution[profit_per_unit]", "\nproduction_cost = 110\nproduction_units = 420\nmin_selling_price = (production_cost + 626400 / 12) / production_units\nans = math.ceil(min_selling_price)", "\nunit_cost = 110\nmin_profit = 626400\nmin_selling_price = unit_cost + min_profit / (12 * 420)\nans = math.ceil(min_selling_price)", "\nproduction_cost = 110\nprofit = 626400\nnum_components_per_month = 420\nnum_months = 12\nmin_selling_price = production_cost + profit / (num_components_per_month * num_months)\nans = min_selling_price", "\nproduction_cost = 110\nproduction_cost_per_year = 420 * 12 * production_cost\nprofit = Symbol('profit', positive=True)\nselling_price = Symbol('selling_price', positive=True)\ntotal_revenue = 420 * 12 * selling_price\nsolution = solve_it(total_revenue - production_cost_per_year - profit, selling_price)\nans = solution[selling_price]", "\nproduction_cost = 110\nproduction_per_month = 420\ntotal_production = production_per_month * 12\nprofit = Symbol('profit', positive=True)\nselling_price = production_cost + profit / total_production\nsolution = solve_it(selling_price * total_production - total_production * production_cost - 626400, profit)\nans = solution[profit]", "\nproduction_cost = 110\nprofit = 626400\nselling_price = Symbol('selling_price', positive=True)\nunits_produced = 420\nunits_sold = units_produced\ntotal_profit = units_sold * (selling_price - production_cost) * 12\nsolution = solve_it(total_profit - profit, selling_price)\nans = solution[selling_price]"], "generated_prediction": "234.29", "options": ["A)226", "B)230", "C)240", "D)260", "E)280"], "answer": "B", "prediction": "B"}
{"question": "At a certain factory, 10 percent of the staplers produced on Monday were defective and 2 percent of the non-defective staplers were rejected by mistake. If 72 of the non-defective staplers were rejected, what was the number of staplers produced that day?", "generated": ["\nnum_staplers = Symbol('num_staplers', positive=True)\nnum_defective_staplers = 0.1 * num_staplers\nnum_non_defective_staplers = num_staplers - num_defective_staplers\nnum_rejected_staplers = 0.02 * num_non_defective_staplers\nsolution = solve_it(num_rejected_staplers - 72, num_staplers)\nans = solution[num_staplers]", "\nnum_staplers = Symbol('num_staplers', positive=True)\nnum_defective_staplers = 0.1 * num_staplers\nnum_non_defective_staplers = num_staplers - num_defective_staplers\nnum_rejected_staplers = 0.02 * num_non_defective_staplers\nsolution = solve_it(num_rejected_staplers - 72, num_staplers)\nans = solution[num_staplers]", "\nstaplers_produced = Symbol('staplers_produced', positive=True)\ndefective_staplers = 0.1 * staplers_produced\nnon_defective_staplers = staplers_produced - defective_staplers\nnon_defective_staplers_rejected = 0.02 * non_defective_staplers\nsolution = solve_it(non_defective_staplers_rejected - 72, staplers_produced)\nans = solution[staplers_produced]", "\nnum_staplers = Symbol('num_staplers', positive=True)\nnum_defective_staplers = num_staplers * 0.1\nnum_non_defective_staplers = num_staplers - num_defective_staplers\nnum_rejected_staplers = num_non_defective_staplers * 0.02\nsolution = solve_it(num_rejected_staplers - 72, num_staplers)\nans = solution[num_staplers]", "\ntotal_staplers_produced = Symbol('total_staplers_produced', positive=True)\ndefective_staplers = 0.1 * total_staplers_produced\nnon_defective_staplers = total_staplers_produced - defective_staplers\nrejected_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(rejected_staplers - 72, total_staplers_produced)\nans = solution[total_staplers_produced]", "\ntotal_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\ntotal_rejected_staplers = 0.02 * (total_staplers - defective_staplers) + defective_staplers\nsolution = solve_it(total_rejected_staplers - 72, total_staplers)\nans = solution[total_staplers]", "\ntotal_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nrejected_staplers = 0.02 * (total_staplers - defective_staplers)\nsolution = solve_it(rejected_staplers - 72, total_staplers)\nans = solution[total_staplers]", "\nnum_staplers = Symbol('num_staplers', positive=True)\ndefective_staplers = 0.1 * num_staplers\nnon_defective_staplers = num_staplers - defective_staplers\nnon_defective_staplers_rejected = 0.02 * non_defective_staplers\nsolution = solve_it(non_defective_staplers_rejected - 72, num_staplers)\nans = solution[num_staplers]", "\ntotal_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nrejected_staplers = 0.02 * (total_staplers - defective_staplers)\nsolution = solve_it(rejected_staplers - 72, total_staplers)\nans = solution[total_staplers]", "\ntotal_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nnon_defective_staplers = total_staplers - defective_staplers\nrejected_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(rejected_staplers - 72, total_staplers)\nans = solution[total_staplers]", "\ntotal_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nnon_defective_staplers = total_staplers - defective_staplers\nrejected_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(rejected_staplers - 72, total_staplers)\nans = solution[total_staplers]", "\ntotal_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nnon_defective_staplers = total_staplers - defective_staplers\nrejected_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(rejected_staplers - 72, total_staplers)\nans = solution[total_staplers]", "\nnum_staplers = Symbol('num_staplers', positive=True)\ndefective_staplers = 0.1 * num_staplers\nrejected_staplers = 0.02 * (num_staplers - defective_staplers)\nsolution = solve_it(rejected_staplers - 72, num_staplers)\nans = solution[num_staplers]", "\ntotal_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nnon_defective_staplers = total_staplers - defective_staplers\nrejected_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(rejected_staplers - 72, total_staplers)\nans = solution[total_staplers]", "\ntotal_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers = 0.1 * total_staplers\nnon_defective_staplers = total_staplers - defective_staplers\nrejected_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(rejected_staplers - 72, total_staplers)\nans = solution[total_staplers]", "\ndefective_staplers = Symbol('defective_staplers', positive=True)\nnon_defective_staplers = Symbol('non_defective_staplers', positive=True)\nrejected_staplers = 72\nsolution = solve_it([defective_staplers / 10 - defective_staplers, non_defective_staplers * 0.02 - rejected_staplers], [defective_staplers, non_defective_staplers])\nans = solution[defective_staplers] + solution[non_defective_staplers]", "\ndefective_staplers = 0.1\nnon_defective_staplers = 0.02\nrejected_staplers = 72\ntotal_staplers = rejected_staplers / (1 - defective_staplers - non_defective_staplers)\nans = total_staplers", "\nnum_staplers = Symbol('num_staplers', positive=True)\ndefective_staplers = 0.1 * num_staplers\nnon_defective_staplers = num_staplers - defective_staplers\nrejected_staplers = 0.02 * non_defective_staplers\nsolution = solve_it(rejected_staplers - 72, num_staplers)\nans = solution[num_staplers]", "\ndefective_staplers = Symbol('defective_staplers', positive=True)\nnon_defective_staplers = Symbol('non_defective_staplers', positive=True)\nrejected_staplers = 72\nsolution = solve_it([defective_staplers + non_defective_staplers - 0.1 * (defective_staplers + non_defective_staplers), non_defective_staplers - 0.02 * non_defective_staplers - rejected_staplers], [defective_staplers, non_defective_staplers])\nans = solution[defective_staplers] + solution[non_defective_staplers]", "\ndefective_staplers = Symbol('defective_staplers', positive=True)\nnon_defective_staplers = Symbol('non_defective_staplers', positive=True)\ntotal_staplers = Symbol('total_staplers', positive=True)\nsolution = solve_it([defective_staplers / total_staplers - 0.1, non_defective_staplers / total_staplers - 0.9, non_defective_staplers / (total_staplers - defective_staplers) - 0.98, non_defective_staplers - 72], [defective_staplers, non_defective_staplers, total_staplers])\nans = solution[total_staplers]", "\nnum_staplers = Symbol('num_staplers', positive=True)\nnum_defective_staplers = num_staplers * 0.1\nnum_staplers_rejected = num_staplers * 0.02\nnum_staplers_rejected_by_mistake = 72\nsolution = solve_it([num_defective_staplers + num_staplers_rejected - num_staplers_rejected_by_mistake], [num_staplers])\nans = solution[num_staplers]", "\nnum_staplers = Symbol('num_staplers', positive=True)\nnum_defective_staplers = 0.1 * num_staplers\nnum_non_defective_staplers = num_staplers - num_defective_staplers\nnum_rejected_staplers = 0.02 * num_non_defective_staplers\nnum_rejected_non_defective_staplers = 72\nsolution = solve_it(num_rejected_staplers - num_rejected_non_defective_staplers, num_staplers)\nans = solution[num_staplers]", "\ndefective_staplers = Symbol('defective_staplers', positive=True)\nnon_defective_staplers = Symbol('non_defective_staplers', positive=True)\nrejected_staplers = 72\nsolution = solve_it([defective_staplers - 0.1 * non_defective_staplers, non_defective_staplers - 0.02 * non_defective_staplers - rejected_staplers], [defective_staplers, non_defective_staplers])\nans = solution[non_defective_staplers]", "\ndefective_staplers = Symbol('defective_staplers', positive=True)\ntotal_staplers = Symbol('total_staplers', positive=True)\nrejected_staplers = 72\nsolution = solve_it([total_staplers * 0.1 - defective_staplers, total_staplers * 0.98 - defective_staplers - rejected_staplers], [total_staplers, defective_staplers])\nans = solution[total_staplers]", "\ndefective_staplers = Symbol('defective_staplers', positive=True)\nnon_defective_staplers = Symbol('non_defective_staplers', positive=True)\nrejected_staplers = 72\nsolution = solve_it([defective_staplers / non_defective_staplers - 0.1, (non_defective_staplers - defective_staplers - rejected_staplers) / non_defective_staplers - 0.02], [defective_staplers, non_defective_staplers])\nans = solution[non_defective_staplers]", "\ndefective_staplers = Symbol('defective_staplers', positive=True)\nnon_defective_staplers = Symbol('non_defective_staplers', positive=True)\ntotal_staplers = Symbol('total_staplers', positive=True)\ndefective_staplers_percent = 0.1\nnon_defective_staplers_percent = 0.02\nrejected_staplers = 72\nsolution = solve_it([defective_staplers + non_defective_staplers - total_staplers, defective_staplers - defective_staplers_percent * total_staplers, non_defective_staplers - non_defective_staplers_percent * total_staplers, non_defective_staplers - rejected_staplers], [defective_staplers, non_defective_staplers, total_staplers])\nans = solution[total_staplers]", "\ndefective_staplers = Symbol('defective_staplers', positive=True)\nnon_defective_staplers = Symbol('non_defective_staplers', positive=True)\nstaplers_produced = Symbol('staplers_produced', positive=True)\ndefective_staplers_rejected = 0.1 * staplers_produced\nnon_defective_staplers_rejected = 0.02 * non_defective_staplers\nsolution = solve_it([defective_staplers_rejected + non_defective_staplers_rejected - 72, non_defective_staplers - staplers_produced], [staplers_produced, non_defective_staplers])\nans = solution[staplers_produced]", "\ndefective_staplers = Symbol('defective_staplers', positive=True)\nnon_defective_staplers = Symbol('non_defective_staplers', positive=True)\ndefective_staplers_percentage = 0.1\nnon_defective_staplers_percentage = 0.02\nrejected_staplers = 72\nsolution = solve_it([defective_staplers + non_defective_staplers - defective_staplers * defective_staplers_percentage - non_defective_staplers * non_defective_staplers_percentage - rejected_staplers], [defective_staplers, non_defective_staplers])\nans = solution[defective_staplers] + solution[non_defective_staplers]", "\ndefective_staplers = 0.1\nnon_defective_staplers = 0.98\nrejected_staplers = 0.02\nproduced_staplers = (72 / rejected_staplers) / non_defective_staplers\nans = produced_staplers / (1 - defective_staplers)", "\ndefective_staplers = 0.1\nnon_defective_staplers = 0.9\nrejected_non_defective_staplers = 0.02\nrejected_staplers = 72\nsolution = solve_it([defective_staplers + rejected_non_defective_staplers - rejected_staplers, non_defective_staplers - rejected_non_defective_staplers], [defective_staplers, non_defective_staplers])\nans = solution[defective_staplers] + solution[non_defective_staplers]"], "generated_prediction": "4000.0", "options": ["A)4,000", "B)4,200", "C)4,500", "D)4,800", "E)5,000"], "answer": "A", "prediction": "A"}
{"question": "Machine A puts out a yo-yo every 6 minutes. Machine B puts out a yo-yo every 9 minutes. After how many minutes will they have produced 10 yo-yos?", "generated": ["\ngcd = math.gcd(6, 9)\nans = 10 * gcd", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\nans = 10 / total_speed", "\nmachine_A_speed = 1 / 6\nmachine_B_speed = 1 / 9\ntotal_speed = machine_A_speed + machine_B_speed\nans = 10 / total_speed", "\ntime = Symbol('time', positive=True)\nmachine_a_output = time / 6\nmachine_b_output = time / 9\nsolution = solve_it(machine_a_output + machine_b_output - 10, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\nmachine_a_production = time / 6\nmachine_b_production = time / 9\nsolution = solve_it(machine_a_production + machine_b_production - 10, time)\nans = solution[time]", "\nmachine_A_rate = 1 / 6\nmachine_B_rate = 1 / 9\ntotal_rate = machine_A_rate + machine_B_rate\nans = 10 / total_rate", "\nmachine_A_speed = 1 / 6\nmachine_B_speed = 1 / 9\ntotal_speed = machine_A_speed + machine_B_speed\ntotal_time = 10 / total_speed\nans = total_time", "\ntime = Symbol('time', positive=True)\nnum_yo_yo_A = time / 6\nnum_yo_yo_B = time / 9\nsolution = solve_it(num_yo_yo_A + num_yo_yo_B - 10, time)\nans = solution[time]", "\nA = 6\nB = 9\nnum_yo_yos = 10\nans = math.gcd(A, B) * num_yo_yos", "\nA = 6\nB = 9\nnum_yoyos = 10\nans = A * B * num_yoyos", "\nA = 6\nB = 9\nnum_yoyos = 10\nans = A * B * num_yoyos", "\nA = 6\nB = 9\nnum_yoyos = 10\nans = math.gcd(A, B) * num_yoyos", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\ntime_to_produce_10_yoyos = 10 / total_speed\nans = time_to_produce_10_yoyos", "\nA = 6\nB = 9\nnum_of_yoyos = 10\nans = math.gcd(A, B) * num_of_yoyos", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntotal_speed = machine_a_speed + machine_b_speed\ntime_to_produce_10_yoyos = 10 / total_speed\nans = math.ceil(time_to_produce_10_yoyos)", "\nmachine_a_speed = 1 / 6\nmachine_b_speed = 1 / 9\ntime_to_produce_10_yo_yos = 1 / (machine_a_speed + machine_b_speed)\nans = time_to_produce_10_yo_yos", "\nminutes = Symbol('minutes', positive=True)\nmachine_a_production = minutes // 6\nmachine_b_production = minutes // 9\nsolution = solve_it(machine_a_production + machine_b_production - 10, minutes)\nans = solution[minutes]", "\nmachine_a_time = 6\nmachine_b_time = 9\nnum_yoyos = 10\nans = math.gcd(machine_a_time, machine_b_time) * num_yoyos", "\nminutes = Symbol('minutes', positive=True)\nmachine_A_output = minutes / 6\nmachine_B_output = minutes / 9\nsolution = solve_it(machine_A_output + machine_B_output - 10, minutes)\nans = solution[minutes]", "\nmachine_A_speed = 10 / 6\nmachine_B_speed = 10 / 9\nmachine_A_speed_per_minute = 1 / 6\nmachine_B_speed_per_minute = 1 / 9\nans = 10 / (machine_A_speed_per_minute + machine_B_speed_per_minute)", "\n# Hint: Use LCM\nmachine_A_speed = 6\nmachine_B_speed = 9\nlcm = math.gcd(machine_A_speed, machine_B_speed)\nans = 10 * lcm"], "generated_prediction": "36.0", "options": ["A)24 minutes", "B)32 minutes", "C)36 minutes", "D)64 minutes", "E)72 minutes"], "answer": "C", "prediction": "C"}
{"question": "Add: +45 and -30", "generated": ["\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 - 30", "\nans = 45 + (-30)", "\nans = 45 + (-30)", "\nans = 45 + (-30)", "\nans = 45 + (-30)"], "generated_prediction": "15", "options": ["A)-30", "B)+30", "C)0", "D)15", "E)-15"], "answer": "D", "prediction": "D"}
{"question": "In how many ways can the letters of the word \"PROBLEC\" be rearranged to make 7 letter words such that none of the letters repeat?", "generated": ["\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nans = math.factorial(7)", "\nimport math\nans = math.factorial(7)", "\nfrom math import factorial\nans = factorial(7) / factorial(2)", "\nfrom math import factorial\nans = factorial(7) / factorial(2)", "\nimport math\nans = math.factorial(7) / math.factorial(2)", "\nnum_letters = 7\nnum_words = math.factorial(num_letters)\nans = num_words", "\nfrom math import factorial\nans = factorial(7)", "\nfrom math import factorial\nans = factorial(7)", "\nfrom math import factorial\nans = factorial(7)", "\nword = 'PROBLEC'\nunique_letters = set(word)\nans = math.factorial(len(word)) // math.factorial(len(word) - len(unique_letters))", "\nfrom math import factorial\nans = factorial(7)", "\n# Answer: 7! / (2! * 2!)\nans = math.factorial(7) / (math.factorial(2) * math.factorial(2))", "\n# The number of ways to arrange n distinct objects is n!\nans = math.factorial(7)", "\n# P R O B L E C\n# 2 2 1 1 1 1 1\n# 7! / 2!2!1!1!1!1!\nans = math.factorial(7) / math.factorial(2) / math.factorial(2) / math.factorial(1) / math.factorial(1) / math.factorial(1) / math.factorial(1)", "\n# The number of ways to arrange n distinct objects is n!\nans = math.factorial(8)", "\nword = 'PROBLEC'\nunique_letters = set(word)\nnum_unique_letters = len(unique_letters)\nnum_repeated_letters = len(word) - num_unique_letters\nnum_arrangements = math.factorial(num_unique_letters) * math.factorial(num_repeated_letters)\nans = num_arrangements", "\nword = 'PROBLEC'\nnum_letters = len(word)\nnum_unique_letters = len(set(word))\nnum_repeated_letters = num_letters - num_unique_letters\nnum_permutations = math.factorial(num_letters)\nnum_permutations_with_repeated_letters = math.factorial(num_letters - num_repeated_letters)\nans = num_permutations / num_permutations_with_repeated_letters"], "generated_prediction": "5040", "options": ["A)2!", "B)3!", "C)7!", "D)8!", "E)9!"], "answer": "C", "prediction": "C"}
{"question": "Let A and B be independent events with P (A) = 0.2 and P(B) = 0.8. Find P(A/B)?", "generated": ["\nA = 0.2\nB = 0.8\nans = A / B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nP_A = 0.2\nP_B = 0.8\nP_A_and_B = P_A * P_B\nP_A_given_B = P_A_and_B / P_B\nans = P_A_given_B", "\nP_A = 0.2\nP_B = 0.8\nP_A_and_B = P_A * P_B\nP_A_given_B = P_A_and_B / P_B\nans = P_A_given_B", "\nA = 0.2\nB = 0.8\nans = A / B", "\nP_A = 0.2\nP_B = 0.8\nP_A_given_B = P_A / P_B\nans = P_A_given_B", "\nP_A = 0.2\nP_B = 0.8\nP_A_given_B = P_A / P_B\nans = P_A_given_B", "\nP_A = 0.2\nP_B = 0.8\nP_A_given_B = P_A / P_B\nans = P_A_given_B", "\nA = 0.2\nB = 0.8\nP_A_given_B = A / B\nans = P_A_given_B", "\nA = 0.2\nB = 0.8\nP_A_given_B = A / B\nans = P_A_given_B", "\nA = 0.2\nB = 0.8\nP_A_given_B = A / B\nans = P_A_given_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nP_A_and_B = P_A * P_B\nP_A_given_B = P_A_and_B / P_B\nans = P_A_given_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nP_A_and_B = P_A * P_B\nP_A_given_B = P_A_and_B / P_B\nans = P_A_given_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nP_A_and_B = P_A * P_B\nP_A_given_B = P_A_and_B / P_B\nans = P_A_given_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nP_A_given_B = P_A * P_B / P_B\nans = P_A_given_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nP_A_given_B = P_A * P_B / P_B\nans = P_A_given_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nP_A_B = P_A / P_B\nans = P_A_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nans = P_A / P_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nP_A_and_B = P_A * P_B\nP_A_or_B = P_A + P_B - P_A_and_B\nP_A_given_B = P_A_and_B / P_B\nans = P_A_given_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nP_A_given_B = P_A / P_B\nans = P_A_given_B", "\nA = Symbol('A')\nB = Symbol('B')\nP_A = 0.2\nP_B = 0.8\nans = P_A / P_B", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it(A * B - 0.2, A)\nans = solution[A]"], "generated_prediction": "0.25", "options": ["A)0.2", "B)0.4", "C)0.6", "D)1.2", "E)1.5"], "answer": "A", "prediction": "A"}
{"question": "Consider there is an staircase elevator and you are coming down. If you walk 20 steps and stop, then you reach bottom in 10 minutes. If you walk 10 steps and stop, you reach to the ground in 20 minutes. What is the speed of the elevator?", "generated": ["\nspeed = Symbol('speed', positive=True)\nsolution = solve_it(20 / speed - 10, 10 / speed - 20)\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\nsolution = solve_it(speed * 10 - 20, speed)\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\nsolution = solve_it(20 / speed - 10, speed)\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\nsolution = solve_it(20 / speed - 10, speed)\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\nsolution = solve_it(20 / speed - 10, speed)\nans = solution[speed]", "\nsteps = Symbol('steps', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_for_20_steps = 10\ntime_for_10_steps = 20\nsolution = solve_it([steps / speed - time_for_20_steps, steps / speed - time_for_10_steps], [steps, speed])\nans = solution[speed]", "\nsteps = Symbol('steps', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_for_20_steps = 10\ntime_for_10_steps = 20\nsolution = solve_it([steps / speed - time_for_20_steps, steps / speed - time_for_10_steps], [steps, speed])\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\nsolution = solve_it(20 / (10 * speed) - 10 / (20 * speed), speed)\nans = solution[speed]", "\nsteps = Symbol('steps', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_20_steps = 10\ntime_10_steps = 20\nsolution = solve_it([steps / speed - time_20_steps, steps / speed - time_10_steps], [steps, speed])\nans = solution[speed]", "\noptions = [1, 2, 3, 4]\nfor option in options:\n    if 20 / 10 == option + 10 and 10 / 20 == option + 10:\n        ans = option\n        break", "\nspeed = Symbol('speed', positive=True)\nsteps = 20\ntime = 10\nsolution = solve_it(steps / speed - time, speed)\nans = solution[speed]", "\nsteps = Symbol('steps', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([steps * time - 20 * 10, steps * time - 10 * 20], [steps, time])\nans = solution[steps]", "\nsteps = Symbol('steps', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([steps / time - 2, steps / time - 1], [steps, time])\nans = solution[steps]", "\nsteps = Symbol('steps', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([steps * time - 20 * 10, steps * time - 10 * 20], [steps, time])\nans = solution[steps]", "\nsteps = Symbol('steps', positive=True)\ntime_for_20_steps = 10\ntime_for_10_steps = 20\nsolution = solve_it([steps / time_for_20_steps - steps / time_for_10_steps], [steps])\nans = solution[steps]", "\nsteps = Symbol('steps', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_taken_for_20_steps = 10\ntime_taken_for_10_steps = 20\nsolution = solve_it([steps / speed - time_taken_for_20_steps, steps / speed - time_taken_for_10_steps], [steps, speed])\nans = solution[speed]", "\nsteps = Symbol('steps', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_reach_bottom = 10\ntime_to_reach_ground = 20\nsolution = solve_it([steps / speed - time_to_reach_bottom, steps / speed - time_to_reach_ground], [steps, speed])\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\ntime_for_20_steps = 10\ntime_for_10_steps = 20\nsolution = solve_it(speed * time_for_20_steps - 20, speed * time_for_10_steps - 10, speed)\nans = solution[speed]", "\nsteps_per_minute = Symbol('steps_per_minute', positive=True)\ntime_to_reach_bottom_with_20_steps = 10\ntime_to_reach_bottom_with_10_steps = 20\nsolution = solve_it(steps_per_minute * time_to_reach_bottom_with_20_steps - 20, steps_per_minute)\nans = solution[steps_per_minute]", "\noptions = [1, 2, 3, 4]\nfor option in options:\n    if option * 20 + 10 == 10 * 20 / option:\n        ans = option\n        break", "\nsteps = Symbol('steps', positive=True)\ntime_to_reach_bottom = Symbol('time_to_reach_bottom', positive=True)\nsolution = solve_it([steps * time_to_reach_bottom - 10 * 20, steps * time_to_reach_bottom - 10 * 20], [steps, time_to_reach_bottom])\nans = solution[steps] / solution[time_to_reach_bottom]", "\nsteps = Symbol('steps', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_reach_bottom = 10\ntime_to_reach_bottom_with_less_steps = 20\nsolution = solve_it([steps / speed - time_to_reach_bottom, steps / speed - time_to_reach_bottom_with_less_steps], [steps, speed])\nans = solution[speed]", "\nsteps = Symbol('steps', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([steps / time - 20 / 10, steps / time - 10 / 20], [steps, time])\nans = solution[steps] / solution[time]", "\nsteps_per_minute = Symbol('steps_per_minute', positive=True)\ntime_20_steps = 10\ntime_10_steps = 20\nsolution = solve_it(steps_per_minute * time_20_steps - 20, steps_per_minute * time_10_steps - 10, steps_per_minute)\nans = solution[steps_per_minute]", "\nspeed = Symbol('speed', positive=True)\ntime_to_reach_bottom_by_walking_20_steps = 10\ntime_to_reach_bottom_by_walking_10_steps = 20\nsolution = solve_it([speed * time_to_reach_bottom_by_walking_20_steps - 20, speed * time_to_reach_bottom_by_walking_10_steps - 10], speed)\nans = solution[speed]", "\nsteps = Symbol('steps', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_reach_bottom_with_20_steps = 10\ntime_to_reach_bottom_with_10_steps = 20\nsolution = solve_it([steps / speed - time_to_reach_bottom_with_20_steps, 2 * steps / speed - time_to_reach_bottom_with_10_steps], [steps, speed])\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\ntime_to_reach_bottom_by_walking_20_steps = 10\ntime_to_reach_bottom_by_walking_10_steps = 20\nsolution = solve_it([speed * time_to_reach_bottom_by_walking_20_steps - 20, speed * time_to_reach_bottom_by_walking_10_steps - 10], speed)\nans = solution[speed]", "\nsteps_per_minute = Symbol('steps_per_minute', positive=True)\ntime_to_reach_bottom_when_walking_20_steps = 10\ntime_to_reach_bottom_when_walking_10_steps = 20\nsolution = solve_it([steps_per_minute * time_to_reach_bottom_when_walking_20_steps - 20, steps_per_minute * time_to_reach_bottom_when_walking_10_steps - 10], steps_per_minute)\nans = solution[steps_per_minute]", "\nsteps = Symbol('steps', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_reach_bottom_when_walk_20_steps = 10\ntime_to_reach_bottom_when_walk_10_steps = 20\nsolution = solve_it([steps / speed - time_to_reach_bottom_when_walk_20_steps, 2 * steps / speed - time_to_reach_bottom_when_walk_10_steps], [steps, speed])\nans = solution[speed]", "\nsteps_per_minute = Symbol('steps_per_minute', positive=True)\ntime_to_reach_bottom = 10\ntime_to_reach_ground = 20\nsolution = solve_it([steps_per_minute * time_to_reach_bottom - 20, steps_per_minute * time_to_reach_ground - 10], steps_per_minute)\nans = solution[steps_per_minute]"], "generated_prediction": "2.0", "options": ["A)1 step/minute", "B)2 step/minute", "C)3 step/minute", "D)4 step/minute", "E)None of the above"], "answer": "A", "prediction": "B"}
{"question": "Last year, a Home Appliance Store sold an average(arithmetic mean) of 42 microwave ovens per month. In the first 10 months of this year,the store has sold an average(arithmetic mean) of only 20 microwave ovens per month. What was the average number of microwave ovens sold per month during the entire 22 months period ?", "generated": ["\ntotal_ovens_sold = 42 * 10 + 20 * 10\ntotal_months = 10 + 10\nans = total_ovens_sold / total_months", "\ntotal_ovens_sold = 42 * 10 + 20 * 10\ntotal_months = 10 + 10\nans = total_ovens_sold / total_months", "\ntotal_ovens_sold = 42 * 10 + 20 * 10\ntotal_months = 10 + 10\nans = total_ovens_sold / total_months", "\ntotal_months = 22\ntotal_sales = 42 * 10 + 20 * 10\nans = total_sales / total_months", "\ntotal_months = 22\ntotal_sales = 42 * 10 + 20 * 10\nans = total_sales / total_months", "\nmonths = 22\ntotal_ovens_sold = 42 * 10 + 20 * 10\nans = total_ovens_sold / months", "\nnum_months = 22\ntotal_sales = 42 * 10 + 20 * 12\nans = total_sales / num_months", "\ntotal_months = 22\ntotal_microwave_ovens = 42 * 10 + 20 * 10\nans = total_microwave_ovens / total_months", "\ntotal_months = 22\ntotal_microwave_ovens = 42 * 10 + 20 * 10\nans = total_microwave_ovens / total_months", "\ntotal_months = 22\ntotal_microwave_ovens = 42 * 10 + 20 * 10\nans = total_microwave_ovens / total_months", "\ntotal_months = 22\ntotal_microwave_ovens = 42 * 10 + 20 * 10\nans = total_microwave_ovens / total_months", "\ntotal_ovens_sold = 42 * 10 + 20 * 10\ntotal_months = 22\nans = total_ovens_sold / total_months", "\ntotal_ovens_sold = 42 * 10 + 20 * 10\ntotal_months = 22\nans = total_ovens_sold / total_months", "\nmonths = 22\ntotal_sales = 42 * 10 + 20 * 10\nans = total_sales / months", "\ntotal_months = 22\ntotal_ovens_sold = 42 * 10 + 20 * 10\nans = total_ovens_sold / total_months", "\ntotal_months = 22\ntotal_ovens_sold = 42 * 10 + 20 * 10\nans = total_ovens_sold / total_months", "\ntotal_months = 22\ntotal_ovens_sold = 42 * 10 + 20 * 10\nans = total_ovens_sold / total_months", "\ntotal_num_ovens_sold = 42 * 10 + 20 * 10\ntotal_num_months = 10 + 10\nans = total_num_ovens_sold / total_num_months", "\ntotal_months = 22\ntotal_ovens_sold = 42 * 10 + 20 * 12\nans = total_ovens_sold / total_months", "\ntotal_months = 22\ntotal_microwave_ovens_sold = 42 * 10 + 20 * 10\nans = total_microwave_ovens_sold / total_months", "\nnum_months = 22\ntotal_sales_last_year = 42 * 10\ntotal_sales_this_year = 20 * 10\ntotal_sales = total_sales_last_year + total_sales_this_year\nans = total_sales / num_months", "\ntotal_num_of_ovens_sold = 42 * 10 + 20 * 10\ntotal_num_of_months = 10 + 10\nans = total_num_of_ovens_sold / total_num_of_months", "\nnum_months = 22\ntotal_sales_last_year = 42 * 10\ntotal_sales_this_year = 20 * 10\ntotal_sales = total_sales_last_year + total_sales_this_year\nans = total_sales / num_months", "\nnum_months = 22\ntotal_sales_last_year = 42 * 12\ntotal_sales_this_year = 20 * 10\ntotal_sales = total_sales_last_year + total_sales_this_year\nans = total_sales / num_months", "\ntotal_months = 22\ntotal_sold_ovens = 42 * 10 + 20 * 10\nans = total_sold_ovens / total_months", "\ntotal_months = 22\ntotal_sales_last_year = 42 * 10\ntotal_sales_this_year = 20 * 10\ntotal_sales = total_sales_last_year + total_sales_this_year\naverage_sales = total_sales / total_months\nans = average_sales", "\ntotal_sales_last_year = 42 * 12\ntotal_sales_this_year = 20 * 10\ntotal_sales_22_months = total_sales_last_year + total_sales_this_year\nans = total_sales_22_months / 22", "\nnum_months = 22\nnum_ovens_sold_last_year = 42 * 10\nnum_ovens_sold_this_year = 20 * 10\ntotal_num_ovens_sold = num_ovens_sold_last_year + num_ovens_sold_this_year\nans = total_num_ovens_sold / num_months", "\ntotal_num_ovens = 42 * 10 + 20 * 10\ntotal_num_months = 10 + 10\nans = total_num_ovens / total_num_months", "\ntotal_sales_in_22_months = 42 * 10 + 20 * 10\naverage_sales_in_22_months = total_sales_in_22_months / 22\nans = average_sales_in_22_months"], "generated_prediction": "28.181818181818183", "options": ["A)21", "B)30", "C)31", "D)32", "E)None of the above"], "answer": "D", "prediction": "D"}
{"question": "An exam is given in a certain class. The average (arithmetic mean) of the highest score and the lowest score is equal to x. If the average score for the entire class is equal to y and there are z students in the class, where z > 5, then in terms of x, y, and z, what is the average score for the class excluding the highest and lowest scorers?", "generated": ["\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score_excluding_highest_and_lowest_scorers = (z * y - 2 * x) / (z - 2)", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z', positive=True)\naverage_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_score_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_lowest = (z * y - 2 * x) / (z - 2)\nans = average_excluding_highest_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\nsolution = solve_it([x - (y + z) / 2, x - (y - z) / 2], [x, z])\nx = solution[x]\nz = solution[z]\nans = (z * y - 2 * x) / (z - 2)", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_score_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_score_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_score_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\nsolution = solve_it([x - (y + z) / 2, x - (y - z) / 2], [x, z])\nans = (solution[y] * solution[z] - 2 * solution[x]) / (solution[z] - 2)", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score = (x + y) / 2\naverage_score_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_score_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_score_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\nsolution = solve_it([x - (y + z) / 2, x - (y - z) / 2], [x, z])\nans = (y * z - 2 * solution[x]) / (z - 2)", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score = (x + y) / 2\naverage_score_excluding_highest_and_lowest_scorers = (z * y - 2 * x) / (z - 2)\nans = average_score_excluding_highest_and_lowest_scorers", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_high_low = (z * y - 2 * x) / (z - 2)\nans = average_excluding_high_low", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\nsolution = solve_it([x - (y + z) / 2, y - (x + z) / 2, z - (x + y) / 2], [x, y, z])\nans = (solution[x] + solution[y]) / 2", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score_excluding_high_and_low = (y * z - 2 * x) / (z - 2)\nans = average_score_excluding_high_and_low", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score = (z * y - 2 * x) / (z - 2)\nans = average_score", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_score = y\naverage_score_excluding_highest_and_lowest = (z * y - 2 * x) / (z - 2)\nans = average_score_excluding_highest_and_lowest", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_excluding_highest_and_lowest = Symbol('average_excluding_highest_and_lowest')\nsolution = solve_it([average_excluding_highest_and_lowest - (y * z - 2 * x) / (z - 2), z > 5], average_excluding_highest_and_lowest)\nans = solution[average_excluding_highest_and_lowest]", "\nx = Symbol('x')\ny = Symbol('y')\nz = Symbol('z')\naverage_of_highest_and_lowest_scores = x\naverage_of_all_scores = y\nnum_students = z\nsolution = solve_it([average_of_highest_and_lowest_scores - (z * y - 2 * x) / z, average_of_all_scores - (z * y - 2 * x) / (z - 2)], [x, y])\nans = solution[y]"], "generated_prediction": "(-2*x + y*z)/(z - 2)", "options": ["A)(zy \u2013 2x)/z", "B)(zy \u2013 2)/z", "C)(zx \u2013 y)/(z \u2013 2)", "D)(zy \u2013 2x)/(z -2)", "E)(zy \u2013 x)/(z + 2)"], "answer": "D", "prediction": "D"}
{"question": "[5 + ? \u00d7 19 - 15 - 7]/[13 \u00d7 13 - 156] = 6", "generated": ["\noptions = [4, 4.5, 5, 5.5, 6.5]\nfor option in options:\n    if (5 + option * 19 - 15 - 7) / (13 * 13 - 156) == 6:\n        ans = option\n        break", "\noptions = [4, 4.5, 5, 5.5, 6.5]\nfor option in options:\n    if (5 + option * 19 - 15 - 7) / (13 * 13 - 156) == 6:\n        ans = option\n        break", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nsolution = solve_it(5 + x * 19 - 15 - 7 - 6 * (13 * 13 - 156), x)\nans = solution[x]", "\nsolution = solve_it(5 + x * 19 - 15 - 7 - 6 * (13 * 13 - 156), x)\nans = solution[x]", "\nX = Symbol('X')\nans = solve_it((5 + X * 19 - 15 - 7) / (13 * 13 - 156) - 6, X)", "\nX = Symbol('X')\nans = solve_it((5 + X * 19 - 15 - 7) / (13 * 13 - 156) - 6, X)", "\nX = Symbol('X')\nans = solve_it((5 + X * 19 - 15 - 7) / (13 * 13 - 156) - 6, X)", "\nans = (5 + 6 * 19 - 15 - 7) / (13 * 13 - 156)", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)\nans = ans[x]", "\nx = Symbol('x')\nans = solve_it((5 + x * 19 - 15 - 7)/(13 * 13 - 156) - 6, x)", "\nmissing_number = Symbol('missing_number', positive=True)\nsolution = solve_it((5 + missing_number * 19 - 15 - 7) / (13 * 13 - 156) - 6, missing_number)\nans = solution[missing_number]", "\nx = Symbol('x', positive=True)\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x', positive=True)\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x', positive=True)\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x', positive=True)\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x', positive=True)\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x', real=True)\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\nx = Symbol('x', positive=True)\nans = solve_it((5 + x * 19 - 15 - 7) / (13 * 13 - 156) - 6, x)", "\na = Symbol('a', positive=True)\nans = solve_it((5 + a * 19 - 15 - 7) / (13 * 13 - 156) - 6, a)", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nnum3 = Symbol('num3', positive=True)\nnum4 = Symbol('num4', positive=True)\nsolution = solve_it([num1 + num2 * 19 - 15 - 7, num3 * 13 - 156], [num1, num2, num3])\nans = (solution[num1], solution[num2], solution[num3])"], "generated_prediction": "{x: 5}", "options": ["A)4", "B)4.5", "C)5", "D)5.5", "E)6.5"], "answer": "C", "prediction": "C"}
{"question": "A grocer makes a 25% profit on the selling price for each bag of flour it sells. If he sells each bag for $100 and makes $3,000 in profit, how many bags did he sell?", "generated": ["\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nprofit_percentage = 25\nsolution = solve_it(selling_price * profit_percentage / 100 - profit, selling_price)\nans = solution[selling_price]", "\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nprofit_percentage = 25\nsolution = solve_it(selling_price * profit_percentage / 100 - profit, selling_price)\nans = solution[selling_price]", "\nselling_price = 100\nprofit = 3000\nprofit_percentage = 25\nnum_bags = profit / (selling_price * profit_percentage / 100)\nans = num_bags", "\nselling_price = 100\nprofit = 3000\nprofit_percentage = 25\nnum_bags = profit / (selling_price * profit_percentage / 100)\nans = num_bags", "\nselling_price = 100\nprofit = 3000\nprofit_percentage = 25\nnum_bags = profit / (selling_price * profit_percentage / 100)\nans = num_bags", "\nselling_price = 100\nprofit = 3000\nprofit_percentage = 25\nnum_bags = profit / (selling_price * profit_percentage / 100)\nans = num_bags", "\nselling_price = 100\nprofit = 3000\nprofit_percentage = 25\nnum_bags = profit / (selling_price * profit_percentage / 100)\nans = num_bags", "\nselling_price = 100\nprofit = 3000\nprofit_rate = 25\nnum_bags_sold = profit / (selling_price * profit_rate / 100)\nans = num_bags_sold", "\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nprofit_percent = 25\nsolution = solve_it(selling_price * profit_percent / 100 - profit, selling_price)\nans = solution[selling_price]", "\nselling_price = 100\nprofit = 3000\nprofit_percentage = 25\nbags_sold = profit / (selling_price * profit_percentage / 100)\nans = bags_sold", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nsolution = solve_it([selling_price - cost_price - 0.25 * cost_price, selling_price * 100 - profit], [cost_price, selling_price])\nans = solution[selling_price]", "\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nprofit_percentage = 25\nsolution = solve_it(selling_price * (1 + profit_percentage / 100) - profit - selling_price, selling_price)\nans = solution[selling_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nsolution = solve_it([selling_price - cost_price - cost_price / 4, selling_price * 100 - profit], [cost_price, selling_price])\nans = solution[selling_price]", "\nselling_price = 100\nprofit = 3000\nprofit_rate = 25\nnum_bags = profit / (selling_price * profit_rate / 100)\nans = num_bags", "\nselling_price = Symbol('selling_price', positive=True)\nprofit = Symbol('profit', positive=True)\nprofit_percentage = 25\nsolution = solve_it([selling_price * profit_percentage / 100 - profit, selling_price - 100], [selling_price, profit])\nans = solution[profit]", "\nselling_price = 100\nprofit = 3000\nprofit_percent = 25\nsolution = solve_it(selling_price * profit_percent / 100 - profit, selling_price)\nans = solution[selling_price]", "\ncost_per_bag = Symbol('cost_per_bag', positive=True)\nselling_price = 100\nprofit = 3000\nsolution = solve_it(cost_per_bag * (1 + 25 / 100) - selling_price - profit, cost_per_bag)\nans = solution[cost_per_bag]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nsolution = solve_it([selling_price - cost_price - profit, selling_price - 100], [cost_price, selling_price])\nans = solution[selling_price] / 100", "\nselling_price = Symbol('selling_price', positive=True)\nprofit = Symbol('profit', positive=True)\nprofit_percentage = 25\nprofit_amount = 3000\nsolution = solve_it([selling_price * profit_percentage / 100 - profit, selling_price * profit - profit_amount], [selling_price, profit])\nans = solution[profit]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = Symbol('profit', positive=True)\nnum_bags = Symbol('num_bags', positive=True)\nsolution = solve_it([cost_price * num_bags + profit - selling_price * num_bags, selling_price - cost_price - 25], [cost_price, num_bags])\nans = solution[num_bags]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nsolution = solve_it([selling_price - cost_price - profit, selling_price - 100], [cost_price, selling_price])\nans = int(solution[selling_price] / 100)", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 100\nprofit = 3000\nsolution = solve_it(selling_price - cost_price - 0.25 * selling_price - profit, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nsolution = solve_it([cost_price - selling_price * 0.75, selling_price * 100 - profit], [cost_price, selling_price])\nans = solution[selling_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = Symbol('profit', positive=True)\nnum_bags = Symbol('num_bags', positive=True)\nsolution = solve_it([cost_price * num_bags + profit - selling_price * num_bags, selling_price - 1.25 * cost_price, profit - 3000], [cost_price, selling_price, num_bags])\nans = solution[num_bags]", "\nselling_price = Symbol('selling_price', positive=True)\ncost_price = Symbol('cost_price', positive=True)\nprofit = 3000\nprofit_percentage = 25\nsolution = solve_it([selling_price - cost_price - profit / 100 * cost_price, profit - profit_percentage * cost_price], [selling_price, cost_price])\nans = int(profit / (solution[selling_price] - solution[cost_price]))", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nsolution = solve_it([selling_price - cost_price - (selling_price - cost_price) / 4, selling_price * 100 - profit], [cost_price, selling_price])\nans = solution[selling_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = Symbol('profit', positive=True)\nprofit_percentage = Symbol('profit_percentage', positive=True)\nnum_bags = Symbol('num_bags', positive=True)\nsolution = solve_it([cost_price + profit - selling_price, profit_percentage * cost_price - profit, num_bags * selling_price - 3000], [cost_price, selling_price, profit, profit_percentage, num_bags])\nans = solution[num_bags]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nsolution = solve_it([cost_price - (1 - 0.25) * selling_price, selling_price * 100 - profit], [cost_price, selling_price])\nans = int(solution[selling_price])", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 3000\nsolution = solve_it([selling_price - cost_price - profit, selling_price - 100], [cost_price, selling_price])\nans = 100 / (solution[selling_price] - solution[cost_price])", "\nselling_price = Symbol('selling_price', positive=True)\ncost_price = Symbol('cost_price', positive=True)\nprofit = 3000\nprofit_percentage = 25\nsolution = solve_it([selling_price - cost_price - profit, (selling_price - cost_price) / cost_price - profit_percentage / 100], [selling_price, cost_price])\nans = int(solution[cost_price] / 100)"], "generated_prediction": "120.0", "options": ["A)12", "B)16", "C)24", "D)30", "E)40"], "answer": "C", "prediction": "D"}
{"question": "Alex and Jacob works at a toy shop that make toys. Alex takes 7 hours to make a toy, and Jacob takes 9 hours to make a toy. During a month, both of them makes 35 toys in total. If both of them have worked for almost similar number of hours how many toys have been prepared by Jacob?", "generated": ["\nalex_hours = Symbol('alex_hours', positive=True)\njacob_hours = Symbol('jacob_hours', positive=True)\nalex_toys = alex_hours / 7\njacob_toys = jacob_hours / 9\nsolution = solve_it([alex_toys + jacob_toys - 35, alex_hours - jacob_hours], [alex_hours, jacob_hours])\nans = solution[jacob_toys]", "\nalex_time = 7\njacob_time = 9\ntotal_toys = 35\nalex_toys = total_toys * alex_time / (alex_time + jacob_time)\njacob_toys = total_toys - alex_toys\nans = jacob_toys", "\nalex_time = 7\njacob_time = 9\ntotal_toys = 35\nalex_toys = total_toys * alex_time / (alex_time + jacob_time)\njacob_toys = total_toys - alex_toys\nans = jacob_toys", "\nalex_time = 7\njacob_time = 9\ntotal_toys = 35\nalex_toys = total_toys * alex_time / (alex_time + jacob_time)\njacob_toys = total_toys - alex_toys\nans = jacob_toys", "\nalex_hour = Symbol('alex_hour', positive=True)\njacob_hour = Symbol('jacob_hour', positive=True)\nalex_toys = alex_hour / 7\njacob_toys = jacob_hour / 9\nsolution = solve_it([alex_toys + jacob_toys - 35, alex_hour - jacob_hour], [alex_hour, jacob_hour])\nans = solution[jacob_toys]", "\nalex_hour = Symbol('alex_hour', positive=True)\njacob_hour = Symbol('jacob_hour', positive=True)\nalex_toys = alex_hour / 7\njacob_toys = jacob_hour / 9\nsolution = solve_it([alex_toys + jacob_toys - 35, alex_hour - jacob_hour], [alex_hour, jacob_hour])\nans = solution[jacob_toys]", "\nalex_hour = 7\njacob_hour = 9\ntotal_toys = 35\nalex_toys = total_toys * alex_hour / (alex_hour + jacob_hour)\njacob_toys = total_toys - alex_toys\nans = jacob_toys", "\nalex_hour = 7\njacob_hour = 9\ntotal_toys = 35\nalex_toys = total_toys * alex_hour / (alex_hour + jacob_hour)\njacob_toys = total_toys - alex_toys\nans = jacob_toys", "\nalex_hour = 7\njacob_hour = 9\ntotal_toys = 35\nalex_toys = total_toys * alex_hour / (alex_hour + jacob_hour)\njacob_toys = total_toys - alex_toys\nans = jacob_toys", "\nalex_time = Symbol('alex_time', positive=True)\njacob_time = Symbol('jacob_time', positive=True)\nalex_toys = alex_time / 7\njacob_toys = jacob_time / 9\nsolution = solve_it([alex_toys + jacob_toys - 35, alex_time - jacob_time], [alex_time, jacob_time])\nans = solution[jacob_toys]", "\nalex_toys = Symbol('alex_toys', positive=True)\njacob_toys = Symbol('jacob_toys', positive=True)\ntotal_toys = 35\nalex_time = 7\njacob_time = 9\nsolution = solve_it([alex_toys + jacob_toys - total_toys, alex_toys * alex_time + jacob_toys * jacob_time], [alex_toys, jacob_toys])\nans = solution[jacob_toys]", "\nalex_time = 7\njacob_time = 9\ntotal_toys = 35\nalex_toys = (alex_time * total_toys) / (alex_time + jacob_time)\njacob_toys = total_toys - alex_toys\nans = jacob_toys", "\nalex_toys = Symbol('alex_toys', positive=True)\njacob_toys = Symbol('jacob_toys', positive=True)\nalex_time = 7\njacob_time = 9\ntotal_toys = 35\nsolution = solve_it([alex_toys * alex_time - jacob_toys * jacob_time, alex_toys + jacob_toys - total_toys], [alex_toys, jacob_toys])\nans = solution[jacob_toys]", "\nalex_time = 7\njacob_time = 9\ntotal_toys = 35\ntotal_time = total_toys * (alex_time + jacob_time)\njacob_toys = total_time / jacob_time\nans = jacob_toys", "\nalex_toys_per_hour = 1 / 7\njacob_toys_per_hour = 1 / 9\ntotal_toys = 35\nalex_hours = total_toys / alex_toys_per_hour\njacob_hours = total_toys / jacob_toys_per_hour\njacob_toys = jacob_hours * jacob_toys_per_hour\nans = jacob_toys", "\nalex_hours = 7\njacob_hours = 9\ntotal_hours = 35 * (alex_hours + jacob_hours)\njacob_toys = total_hours / jacob_hours\nans = jacob_toys", "\nalex_hour = 7\njacob_hour = 9\ntotal_toys = 35\nalex_toys = (alex_hour * total_toys) / (alex_hour + jacob_hour)\njacob_toys = total_toys - alex_toys\nans = jacob_toys", "\nalex_speed = 1 / 7\njacob_speed = 1 / 9\ntotal_toys = 35\ntotal_time = total_toys / (alex_speed + jacob_speed)\njacob_toys = jacob_speed * total_time\nans = math.ceil(jacob_toys)", "\nalex_hour = Symbol('alex_hour', positive=True)\njacob_hour = Symbol('jacob_hour', positive=True)\nalex_toy_per_hour = 1 / 7\njacob_toy_per_hour = 1 / 9\ntotal_toy = 35\nsolution = solve_it([alex_hour * alex_toy_per_hour + jacob_hour * jacob_toy_per_hour - total_toy, alex_hour - jacob_hour], [alex_hour, jacob_hour])\nans = solution[jacob_hour] * jacob_toy_per_hour", "\nalex_hour = Symbol('alex_hour', positive=True)\njacob_hour = Symbol('jacob_hour', positive=True)\nalex_toys = 7\njacob_toys = 9\nsolution = solve_it([alex_hour * alex_toys + jacob_hour * jacob_toys - 35, alex_hour - jacob_hour], [alex_hour, jacob_hour])\nans = solution[jacob_hour] * jacob_toys", "\nalex_time = 7\njacob_time = 9\ntotal_time = 35 * (alex_time + jacob_time)\nalex_time = total_time / 2\njacob_time = total_time / 2\nans = total_time / jacob_time", "\nalex_hour = 7\njacob_hour = 9\ntotal_toys = 35\njacob_toys = (alex_hour * total_toys) / (alex_hour + jacob_hour)\nans = math.ceil(jacob_toys)", "\nalex_toys = Symbol('alex_toys', positive=True)\njacob_toys = Symbol('jacob_toys', positive=True)\nalex_time = 7\njacob_time = 9\ntotal_toys = 35\ntotal_time = alex_time * alex_toys + jacob_time * jacob_toys\nsolution = solve_it([alex_toys + jacob_toys - total_toys, alex_time * alex_toys - jacob_time * jacob_toys], [alex_toys, jacob_toys])\nans = solution[jacob_toys]", "\nalex_time = 7\njacob_time = 9\ntotal_time = 35 * (alex_time + jacob_time)\njacob_time_taken = total_time / 2\njacob_toys = jacob_time_taken / jacob_time\nans = jacob_toys", "\nalex_toys = Symbol('alex_toys', positive=True)\njacob_toys = Symbol('jacob_toys', positive=True)\nalex_hours = 7\njacob_hours = 9\ntotal_toys = 35\ntotal_hours = alex_hours * alex_toys + jacob_hours * jacob_toys\nsolution = solve_it([alex_toys + jacob_toys - total_toys, alex_hours * alex_toys - jacob_hours * jacob_toys], [alex_toys, jacob_toys])\nans = solution[jacob_toys]", "\nalex_time = 7\njacob_time = 9\ntotal_time = 35\njacob_toys = total_time * jacob_time / (alex_time + jacob_time)\nans = math.ceil(jacob_toys)", "\nalex_speed = 1 / 7\njacob_speed = 1 / 9\ntotal_toys = 35\nalex_toys = total_toys * alex_speed / (alex_speed + jacob_speed)\njacob_toys = total_toys - alex_toys\nans = jacob_toys", "\nalex_hours = Symbol('alex_hours', positive=True)\njacob_hours = Symbol('jacob_hours', positive=True)\ntotal_toys = 35\ntotal_hours = alex_hours + jacob_hours\nsolution = solve_it([alex_hours - 7 * total_hours / 35, jacob_hours - 9 * total_hours / 35], [alex_hours, jacob_hours])\nans = solution[jacob_hours]", "\nalex_hours = 7\njacob_hours = 9\ntotal_hours = 35 * (alex_hours + jacob_hours)\njacob_hours_spent = total_hours / 2\njacob_toys_made = jacob_hours_spent / jacob_hours\nans = jacob_toys_made", "\nalex_hour = 7\njacob_hour = 9\ntotal_toys = 35\nalex_toys = Symbol('alex_toys', positive=True)\njacob_toys = Symbol('jacob_toys', positive=True)\nsolution = solve_it([alex_hour * alex_toys + jacob_hour * jacob_toys - 35 * (alex_hour + jacob_hour), alex_toys - jacob_toys], [alex_toys, jacob_toys])\nans = solution[jacob_toys]"], "generated_prediction": "19.6875", "options": ["A)15", "B)16", "C)17", "D)18", "E)19"], "answer": "A", "prediction": "E"}
{"question": "John likes to have lightly flavored tea every evening. In a 50% strong milk tea, he replaces 15% of it with milk twice. Then, he replaces 10 percent of the resultant solution with more milk.\nWhat is the final concentration of tea John drinks?", "generated": ["", "\nstrong_milk_tea = 50\nmilk_tea_after_first_replacement = strong_milk_tea * (1 - 0.15)\nmilk_tea_after_second_replacement = milk_tea_after_first_replacement * (1 - 0.1)\nans = milk_tea_after_second_replacement", "\nstrong_tea = 50\nstrong_tea_after_first_milk_addition = strong_tea - 15\nstrong_tea_after_second_milk_addition = strong_tea_after_first_milk_addition - 10\nans = strong_tea_after_second_milk_addition", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nsolution = solve_it([tea_concentration * 0.85 * 0.9 - 0.5 * tea_concentration, tea_concentration + milk_concentration - 1], [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\nmilk_concentration = Symbol('milk_concentration', positive=True)\ntea_concentration = Symbol('tea_concentration', positive=True)\nsolution = solve_it([milk_concentration * 0.85 + tea_concentration * 0.15 - 0.5, milk_concentration * 0.9 + tea_concentration * 0.1 - 0.5], [milk_concentration, tea_concentration])\nans = solution[tea_concentration]", "\nmilk_percentage = Symbol('milk_percentage', positive=True)\ntea_percentage = Symbol('tea_percentage', positive=True)\nsolution = solve_it([milk_percentage + tea_percentage - 50, milk_percentage + tea_percentage - 35, milk_percentage + tea_percentage - 25], [milk_percentage, tea_percentage])\nans = solution[tea_percentage]", "\ndef calculate_concentration(concentration, replace_percent):\n    return (concentration - replace_percent) / (1 - replace_percent)", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nsolution = solve_it([0.5 * tea_concentration + 0.5 * milk_concentration - 0.85 * 0.5 * tea_concentration,\n                     0.85 * 0.5 * tea_concentration + 0.15 * milk_concentration - 0.9 * 0.85 * 0.5 * tea_concentration],\n                    [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nsolution = solve_it([tea_concentration + milk_concentration - 50,\n                     tea_concentration - 0.85 * (tea_concentration + milk_concentration),\n                     tea_concentration - 0.9 * (tea_concentration - 0.85 * (tea_concentration + milk_concentration))],\n                    [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\noriginal_tea_concentration = 50\ntea_concentration_after_first_milk_addition = original_tea_concentration * (1 - 0.15)\ntea_concentration_after_second_milk_addition = tea_concentration_after_first_milk_addition * (1 - 0.1)\nans = tea_concentration_after_second_milk_addition", "\ndef get_concentration(initial_concentration, replaced_concentration, replaced_percentage):\n    return initial_concentration * (1 - replaced_percentage / 100) + replaced_concentration * replaced_percentage / 100", "\nmilk_percentage = Symbol('milk_percentage', positive=True)\ntea_percentage = Symbol('tea_percentage', positive=True)\nsolution = solve_it([milk_percentage + tea_percentage - 50, milk_percentage + 0.15 * tea_percentage - 50, milk_percentage + 0.15 * (milk_percentage + 0.15 * tea_percentage) - 50], [milk_percentage, tea_percentage])\nans = solution[tea_percentage]", "\ndef get_concentration(concentration, replaced_percentage):\n    return (concentration * (100 - replaced_percentage) / 100)", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nsolution = solve_it([0.5 * tea_concentration + 0.5 * milk_concentration - 0.15 * 0.5 * tea_concentration - 0.85 * 0.5 * milk_concentration, 0.85 * 0.5 * tea_concentration + 0.15 * 0.5 * milk_concentration - 0.9 * 0.85 * 0.5 * tea_concentration - 0.1 * 0.85 * 0.5 * milk_concentration], [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\ndef calculate_concentration(concentration, replacement_percentage):\n    return (concentration * (100 - replacement_percentage) / 100) * (100 - replacement_percentage) / 100", "\ndef replace_with_milk(tea_concentration, milk_concentration):\n    return (tea_concentration * (100 - milk_concentration) / 100) + milk_concentration", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nsolution = solve_it([milk_concentration - 0.5, tea_concentration + 0.15 * milk_concentration - 0.5, tea_concentration + 0.1 * (tea_concentration + 0.15 * milk_concentration) - 0.5], [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\ndef calculate_final_concentration(initial_concentration, replaced_concentration, replaced_percentage):\n    return (initial_concentration - replaced_percentage * replaced_concentration) / (1 - replaced_percentage)", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nmilk_concentration_after_first_replacement = 0.85 * tea_concentration + 0.15 * milk_concentration\nmilk_concentration_after_second_replacement = 0.9 * milk_concentration_after_first_replacement + 0.1 * milk_concentration\nsolution = solve_it([milk_concentration_after_first_replacement - 50, milk_concentration_after_second_replacement - 50], [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nsolution = solve_it([tea_concentration - 0.5 * (1 - 0.15), tea_concentration - 0.5 * (1 - 0.15) * (1 - 0.15), tea_concentration - 0.5 * (1 - 0.15) * (1 - 0.15) * (1 - 0.1)], [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\nmilk_percentage = Symbol('milk_percentage', positive=True)\ntea_percentage = Symbol('tea_percentage', positive=True)\nsolution = solve_it([milk_percentage + tea_percentage - 50, milk_percentage - 15, milk_percentage - 10], [milk_percentage, tea_percentage])\nans = solution[tea_percentage]", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = 1 - tea_concentration\nmilk_added = 0.15 * tea_concentration\ntea_concentration_after_first_addition = tea_concentration - milk_added\nmilk_added = 0.15 * tea_concentration_after_first_addition\ntea_concentration_after_second_addition = tea_concentration_after_first_addition - milk_added\nmilk_added = 0.10 * tea_concentration_after_second_addition\ntea_concentration_after_third_addition = tea_concentration_after_second_addition - milk_added\nans = tea_concentration_after_third_addition", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nsolution = solve_it([(1 - 0.15) * 0.5 * tea_concentration + 0.15 * milk_concentration - 0.5 * tea_concentration,\n                     (1 - 0.1) * 0.5 * tea_concentration + 0.1 * milk_concentration - 0.5 * tea_concentration],\n                    [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nsolution = solve_it([tea_concentration - 0.5, milk_concentration - 0.5, (tea_concentration - 0.15) * 0.85 - 0.5, (tea_concentration - 0.15) * 0.85 - 0.1], [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\nmilk_percentage = Symbol('milk_percentage', positive=True)\ntea_percentage = Symbol('tea_percentage', positive=True)\nsolution = solve_it([milk_percentage - 0.5, tea_percentage - 0.5, milk_percentage - 0.15, tea_percentage - 0.85, milk_percentage - 0.85, tea_percentage - 0.75, milk_percentage - 0.95, tea_percentage - 0.65], [milk_percentage, tea_percentage])\nans = solution[tea_percentage]", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = 50 - tea_concentration\nmilk_concentration_after_first_addition = milk_concentration * (1 - 0.15)\nmilk_concentration_after_second_addition = milk_concentration_after_first_addition * (1 - 0.1)\nsolution = solve_it(milk_concentration_after_second_addition - milk_concentration, tea_concentration)\nans = solution[tea_concentration]", "\nmilk_concentration = 0.5\nmilk_added_first = 0.15\nmilk_added_second = 0.1\nmilk_added_third = 0.1\nmilk_added_fourth = 0.1\nfinal_milk_concentration = milk_concentration * (1 - milk_added_first) * (1 - milk_added_second) * (1 - milk_added_third) * (1 - milk_added_fourth)\nans = 1 - final_milk_concentration", "\ntea_concentration = Symbol('tea_concentration', positive=True)\nmilk_concentration = Symbol('milk_concentration', positive=True)\nsolution = solve_it([tea_concentration - 0.5,\n                     (tea_concentration - 0.15) * (milk_concentration + 0.15) - 0.5 * milk_concentration,\n                     (tea_concentration - 0.1) * (milk_concentration + 0.1) - 0.5 * milk_concentration],\n                    [tea_concentration, milk_concentration])\nans = solution[tea_concentration]", "\nmilk_percentage = Symbol('milk_percentage', positive=True)\ntea_percentage = 50\nmilk_percentage_after_first_addition = milk_percentage + 15\nmilk_percentage_after_second_addition = milk_percentage_after_first_addition + 10\nsolution = solve_it(milk_percentage_after_second_addition - milk_percentage, milk_percentage)\nmilk_percentage_after_second_addition = solution[milk_percentage_after_second_addition]\nans = tea_percentage - milk_percentage_after_second_addition", "\nmilk_percentage = Symbol('milk_percentage', positive=True)\ntea_percentage = Symbol('tea_percentage', positive=True)\nsolution = solve_it([milk_percentage - 0.15 * (0.5 + 0.15), tea_percentage - 0.85 * (0.5 + 0.15), milk_percentage - 0.1 * (0.85 * (0.5 + 0.15) + 0.1)], [milk_percentage, tea_percentage])\nans = solution[tea_percentage]"], "generated_prediction": "38.25", "options": ["A)15.38%", "B)42%", "C)39.86%", "D)22.35%", "E)32.51%"], "answer": "E", "prediction": "C"}
{"question": "In a class 1/16 of the students study math, 1/10 of the students study bio, 1/8 of the students study english. The total number of students is a 4 digit number. Find the diffrence between maximum number of students and minimum number of students.", "generated": ["\nstudents = Symbol('students', positive=True)\nsolution = solve_it([students / 16, students / 10, students / 8], students)\nans = solution[students]", "\nstudents = Symbol('students', positive=True)\nsolution = solve_it([students / 16, students / 10, students / 8], students)\nans = max(solution) - min(solution)", "\nstudents = Symbol('students', positive=True)\nsolution = solve_it([students / 16, students / 10, students / 8], students)\nans = max(solution) - min(solution)", "\nstudents = Symbol('students', positive=True)\nmath_students = students / 16\nbio_students = students / 10\nenglish_students = students / 8\nsolution = solve_it(math_students + bio_students + english_students - students, students)\nans = solution[students]", "\nstudents = Symbol('students', positive=True)\nsolution = solve_it(students / 16 + students / 10 + students / 8 - students, students)\nans = solution[students]", "\nstudents = Symbol('students', positive=True)\nsolution = solve_it(students * (1/16 + 1/10 + 1/8) - 1000, students)\nans = solution[students] - 1000", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_studying_math = total_students / 16\nstudents_studying_bio = total_students / 10\nstudents_studying_english = total_students / 8\nsolution = solve_it([students_studying_math + students_studying_bio + students_studying_english - total_students], [total_students])\nans = solution[total_students]", "\nmath_students = 1 / 16\nbio_students = 1 / 10\nenglish_students = 1 / 8\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([math_students - total_students, bio_students - total_students, english_students - total_students], total_students)\nans = max(solution) - min(solution)", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_studying_math = num_students / 16\nnum_students_studying_bio = num_students / 10\nnum_students_studying_english = num_students / 8\nsolution = solve_it([num_students_studying_math + num_students_studying_bio + num_students_studying_english - num_students], [num_students])\nans = int(solution[num_students])", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_studying_math = total_students / 16\nstudents_studying_bio = total_students / 10\nstudents_studying_english = total_students / 8\nsolution = solve_it([students_studying_math + students_studying_bio + students_studying_english - total_students, total_students - 9999], [total_students])\nans = solution[total_students] - 1000", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_studying_math = total_students / 16\nstudents_studying_bio = total_students / 10\nstudents_studying_english = total_students / 8\nsolution = solve_it([students_studying_math + students_studying_bio + students_studying_english - total_students, total_students - 9999], [total_students])\nans = solution[total_students] - 1000", "\nmath_students = Symbol('math_students', positive=True)\nbio_students = Symbol('bio_students', positive=True)\nenglish_students = Symbol('english_students', positive=True)\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([math_students - total_students / 16, bio_students - total_students / 10, english_students - total_students / 8, total_students - math.floor(total_students / 1000) * 1000], [math_students, bio_students, english_students, total_students])\nans = solution[total_students] - solution[math_students]", "\nstudents = Symbol('students', positive=True)\nsolution = solve_it([students / 16 - 1, students / 10 - 1, students / 8 - 1], students)\nans = max(solution) - min(solution)", "\nmath_students = 1 / 16\nbio_students = 1 / 10\nenglish_students = 1 / 8\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([math_students * total_students - 1000, bio_students * total_students - 1000, english_students * total_students - 1000], total_students)\nans = int(solution[total_students]) - 1000", "\nmath_students = 1 / 16\nbio_students = 1 / 10\nenglish_students = 1 / 8\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([math_students * total_students - 1000, bio_students * total_students - 1000, english_students * total_students - 1000], total_students)\nans = int(solution[total_students]) - 1000", "\nmath_students = 1 / 16\nbio_students = 1 / 10\nenglish_students = 1 / 8\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it(math_students * total_students - bio_students * total_students - english_students * total_students, total_students)\nans = solution[total_students] - 1000", "\nstudents = Symbol('students', positive=True)\nstudents_math = students / 16\nstudents_bio = students / 10\nstudents_english = students / 8\nsolution = solve_it([students_math - students_bio, students_bio - students_english, students_math - students_english], students)\nans = solution[students]", "\nmath_students = Symbol('math_students', positive=True)\nbio_students = Symbol('bio_students', positive=True)\nenglish_students = Symbol('english_students', positive=True)\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([math_students - total_students / 16, bio_students - total_students / 10, english_students - total_students / 8, total_students - 10000], [math_students, bio_students, english_students, total_students])\nans = solution[total_students] - solution[math_students]", "\nstudents = Symbol('students', positive=True)\nstudents_math = students / 16\nstudents_bio = students / 10\nstudents_english = students / 8\nsolution = solve_it([students_math + students_bio + students_english - students, students - 1000], students)\nans = solution[students] - 1000", "\nstudents = Symbol('students', positive=True)\nnum_students_studying_math = students * 1 / 16\nnum_students_studying_bio = students * 1 / 10\nnum_students_studying_english = students * 1 / 8\nsolution = solve_it([num_students_studying_math - num_students_studying_bio, num_students_studying_bio - num_students_studying_english], students)\nans = solution[students]", "\nmath_students = 1/16\nbio_students = 1/10\nenglish_students = 1/8\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([math_students * total_students, bio_students * total_students, english_students * total_students], total_students)\ntotal_students = solution[total_students]\nans = math.floor(total_students) - math.ceil(total_students)", "\nmath_students = 1 / 16\nbio_students = 1 / 10\nenglish_students = 1 / 8\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([math_students * total_students, bio_students * total_students, english_students * total_students], total_students)\ntotal_students = solution[total_students]\nmin_students = math.ceil(total_students * math_students)\nmax_students = math.floor(total_students * english_students)\nans = max_students - min_students", "\nmath_students = 1 / 16\nbio_students = 1 / 10\nenglish_students = 1 / 8\nnum_students = Symbol('num_students', positive=True)\nsolution = solve_it([math_students * num_students - 1, bio_students * num_students - 1, english_students * num_students - 1], num_students)\nnum_students = solution[num_students]\nans = num_students - 1", "\nmath_students = 1/16\nbio_students = 1/10\nenglish_students = 1/8\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([math_students * total_students - 1, bio_students * total_students - 1, english_students * total_students - 1], total_students)\nans = solution[total_students]", "\nstudents_studying_math = Symbol('students_studying_math', positive=True)\nstudents_studying_bio = Symbol('students_studying_bio', positive=True)\nstudents_studying_english = Symbol('students_studying_english', positive=True)\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([students_studying_math - 1/16 * total_students, students_studying_bio - 1/10 * total_students, students_studying_english - 1/8 * total_students, total_students - 10000], [students_studying_math, students_studying_bio, students_studying_english, total_students])\ndifference = solution[total_students] - solution[students_studying_math]\nans = int(difference)", "\nstudents = Symbol('students', positive=True)\nmath_students = students / 16\nbio_students = students / 10\nenglish_students = students / 8\nsolution = solve_it([math_students + bio_students + english_students - students, math_students + bio_students + english_students - students - 1], students)\nans = solution[students] - solution[students] - 1", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_studying_math = total_students / 16\nstudents_studying_bio = total_students / 10\nstudents_studying_english = total_students / 8\nsolution = solve_it([students_studying_math + students_studying_bio + students_studying_english - total_students, students_studying_math - students_studying_bio, students_studying_math - students_studying_english, students_studying_bio - students_studying_english, total_students - 9999], [total_students])\nans = solution[total_students] - 9999", "\nmath_students = 1 / 16\nbio_students = 1 / 10\nenglish_students = 1 / 8\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([total_students * math_students - 1000, total_students * bio_students - 1000, total_students * english_students - 1000], total_students)\ntotal_students = solution[total_students]\nmax_students = total_students + 1000\nmin_students = total_students - 1000\nans = max_students - min_students", "\nstudents = Symbol('students', positive=True)\nmath_students = students * 1 / 16\nbio_students = students * 1 / 10\nenglish_students = students * 1 / 8\nsolution = solve_it([math_students - bio_students, math_students - english_students], [students])\nstudents = solution[students]\nmax_students = math.ceil(students / 1000) * 1000\nmin_students = math.floor(students / 1000) * 1000\nans = max_students - min_students", "\nstudents = Symbol('students', positive=True)\nmath_students = students / 16\nbio_students = students / 10\nenglish_students = students / 8\nsolution = solve_it([math_students - bio_students, bio_students - english_students], [students])\nmax_students = solution[students]\nmin_students = max_students - math_students\nans = max_students - min_students"], "generated_prediction": "2478.26", "options": ["A)8880", "B)8870", "C)8890", "D)7890", "E)6780"], "answer": "A", "prediction": "A"}
{"question": "On a normal day Bill usually averages about 15 mph when riding his bicycle. On a windy day, his speed is reduced by 4 mph. How far can Bill travel on a windy day in 21 minutes? Round to the nearest hundredth.", "generated": ["\nspeed = 15 - 4\ntime = 21 / 60\ndistance = speed * time\nans = round(distance, 2)", "\nspeed = 15 - 4\ntime = 21 / 60\ndistance = speed * time\nans = distance", "\nspeed = 15 - 4\ntime = 21 / 60\ndistance = speed * time\nans = round(distance, 2)", "\nspeed = 15 - 4\ntime = 21 / 60\ndistance = speed * time\nans = distance", "\nspeed = 15 - 4\ntime = 21 / 60\ndistance = speed * time\nans = round(distance, 2)", "\nspeed = 15 - 4\ntime = 21 / 60\ndistance = speed * time\nans = round(distance, 2)", "\nspeed = 15 - 4\ntime = 21 / 60\ndistance = speed * time\nans = distance", "\ndistance = (15 - 4) * 21 / 60\nans = round(distance, 2)", "\ndistance = (15 - 4) * 21 / 60\nans = round(distance, 2)", "\ntime = 21 / 60\nspeed = 15 - 4\ndistance = speed * time\nans = round(distance, 2)", "\ntime = 21 / 60\nspeed = 15 - 4\ndistance = speed * time\nans = distance", "\ntime = 21 / 60\nspeed = 15 - 4\ndistance = speed * time\nans = round(distance, 2)", "\ndistance = Symbol('distance', positive=True)\nspeed = 15 - 4\ntime = 21 / 60\nsolution = solve_it(distance - speed * time, distance)\nans = solution[distance]", "\nwindy_day_speed = 15 - 4\ntime = 21 / 60\ndistance = windy_day_speed * time\nans = round(distance, 2)", "\ndistance = Symbol('distance', positive=True)\nspeed = 15 - 4\ntime = 21 / 60\nsolution = solve_it(distance / speed - time, distance)\nans = solution[distance]", "\ntime = 21 / 60\nnormal_speed = 15\nwindy_speed = normal_speed - 4\ndistance = windy_speed * time\nans = distance", "\navg_speed = 15\nwindy_speed = avg_speed - 4\ntime = 21 / 60\ndistance = windy_speed * time\nans = distance", "\navg_speed = 15\nwindy_speed = avg_speed - 4\ntime = 21 / 60\ndistance = windy_speed * time\nans = round(distance, 2)", "\ndistance = Symbol('distance', positive=True)\nspeed = 15\ntime = 21 / 60\nsolution = solve_it(distance / speed - time, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ntime = 21 / 60\nnormal_speed = 15\nwindy_speed = normal_speed - 4\nsolution = solve_it(distance / windy_speed - time, distance)\nans = solution[distance]", "\navg_speed = 15\nwindy_speed = 11\ntime = 21 / 60\ndistance = time * windy_speed\nans = round(distance, 2)", "\nspeed = 15 - 4\ndistance = speed * 21 / 60\nans = round(distance, 2)", "\ndistance = Symbol('distance', positive=True)\ntime = 21 / 60\nspeed_on_normal_day = 15\nspeed_on_windy_day = 11\nsolution = solve_it(distance / speed_on_normal_day - distance / speed_on_windy_day - time, distance)\nans = solution[distance]", "\ntime = 21 / 60\navg_speed = 15\nwindy_speed = avg_speed - 4\ndistance = windy_speed * time\nans = round(distance, 2)", "\nspeed = 15 - 4\ndistance = speed * 21 / 60\nans = round(distance, 2)", "\ndistance = Symbol('distance', positive=True)\ntime = 21 / 60\naverage_speed = 15\nwindy_speed = average_speed - 4\nans = windy_speed * time", "\nspeed_on_normal_day = 15\nspeed_on_windy_day = speed_on_normal_day - 4\ntime = 21 / 60\ndistance = speed_on_windy_day * time\nans = round(distance, 2)", "\nnormal_speed = 15\nwindy_speed = 11\ntime = 21 / 60\ndistance = windy_speed * time\nans = distance", "\ndistance = Symbol('distance', positive=True)\nnormal_speed = 15\nwindy_speed = 11\ntime = 21 / 60\nsolution = solve_it(distance / normal_speed - time, distance)\nans = solution[distance]", "\n# Hint: Use the formula: distance = speed * time\ndistance = Symbol('distance', positive=True)\nspeed = 15 - 4\ntime = 21 / 60\nans = distance = speed * time"], "generated_prediction": "3.85", "options": ["A)2 miles", "B)2.25 miles", "C)3.25 miles", "D)3.85 miles", "E)2.85 miles"], "answer": "D", "prediction": "D"}
{"question": "A retailer sold an appliance for 40 percent above cost, which represented a gross profit of $20.00. For what price did the retailer sell the appliance?", "generated": ["\ncost = Symbol('cost', positive=True)\ngross_profit = 20\nsolution = solve_it(cost * 1.4 - cost - gross_profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\ngross_profit = 20\nsolution = solve_it(cost * 1.4 - cost - gross_profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\ngross_profit = 20\nsolution = solve_it(cost * 1.4 - cost - gross_profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\ngross_profit = 20\nsolution = solve_it(cost * 1.4 - cost - gross_profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\ngross_profit = 20\nsolution = solve_it(cost * 1.4 - cost - gross_profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\ngross_profit = 20\nsolution = solve_it(cost * 1.4 - cost - gross_profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\ngross_profit = 20\nsolution = solve_it(cost * 1.4 - cost - gross_profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\ngross_profit = 20\nsolution = solve_it(cost * 1.4 - cost - gross_profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprice = 1.4 * cost\nprofit = 20\nsolution = solve_it(price - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprice = cost * 1.4\nprofit = 20\nsolution = solve_it(price - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprice = cost * 1.4\nprofit = 20\nsolution = solve_it(price - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nsolution = solve_it(cost * 1.4 - 20, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nsolution = solve_it(cost * 1.4 - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprice = cost * 1.4\ngross_profit = 20\nsolution = solve_it(price - cost - gross_profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\nprofit = 20\nselling_price = cost * 1.4\nsolution = solve_it(selling_price - cost - profit, cost)\nans = solution[cost]", "\ncost = Symbol('cost', positive=True)\ngross_profit = 20\nprofit_percentage = 40\nsolution = solve_it(cost * (1 + profit_percentage / 100) - gross_profit - cost, cost)\nans = solution[cost]", "\nselling_price = Symbol('selling_price', positive=True)\ncost_price = Symbol('cost_price', positive=True)\nprofit = 20\nsolution = solve_it([selling_price - cost_price - profit, selling_price - 1.4 * cost_price], [selling_price, cost_price])\nans = solution[selling_price]", "\nprice = Symbol('price', positive=True)\ncost = Symbol('cost', positive=True)\nsolution = solve_it([price - cost - 20, price - 1.4 * cost], [price, cost])\nans = solution[price]"], "generated_prediction": "50.0", "options": ["A)$27.30", "B)$51.00", "C)$63.00", "D)$70.00", "E)$91.00"], "answer": "D", "prediction": "B"}
{"question": "At 6% per annum simple interest, Rahul borrowed Rs. 500. What amount will he pay to clear the debt after 4 years", "generated": ["\namount = 500\ninterest = 0.06 * 4 * amount\nans = amount + interest", "\namount = 500\ninterest_rate = 6\ninterest = amount * interest_rate * 4 / 100\nans = amount + interest", "\namount = 500\ninterest_rate = 6\ninterest = amount * interest_rate * 4 / 100\nans = amount + interest", "\ninterest_rate = 6\namount = 500\ninterest = amount * 4 * interest_rate / 100\nans = amount + interest", "\namount = 500\ninterest_rate = 6\nyears = 4\nans = amount * (1 + interest_rate / 100 * years)", "\ninterest_rate = 6\namount = 500\ninterest = 4 * interest_rate * amount / 100\nans = amount + interest", "\ninterest_rate = 6\namount = 500\ninterest = 4 * interest_rate * amount / 100\nans = amount + interest", "\namount = 500\ninterest_rate = 6\ninterest = amount * interest_rate / 100 * 4\nans = amount + interest", "\namount = 500\ninterest_rate = 6\nduration = 4\nans = amount * (1 + interest_rate / 100 * duration)", "\namount = 500\ninterest_rate = 6\ntime = 4\nans = amount * (1 + interest_rate / 100 * time)", "\namount = 500\ninterest_rate = 6\ntime = 4\nans = amount * (1 + interest_rate / 100 * time)", "\namount = 500\ninterest_rate = 6\ntime = 4\nans = amount * (1 + interest_rate / 100 * time)", "\ninterest_rate = 6\namount = 500\ntime = 4\nans = amount * (1 + interest_rate / 100 * time)", "\namount = 500\ninterest_rate = 0.06\ntime = 4\nans = amount * (1 + interest_rate * time)", "\namount = 500\ninterest_rate = 6\nduration = 4\nans = amount * (1 + interest_rate * duration / 100)", "\namount_borrowed = 500\ninterest_rate = 6\ntime = 4\nans = amount_borrowed * (1 + interest_rate / 100 * time)", "\namount = 500\ninterest_rate = 6\nyears = 4\nans = amount + amount * interest_rate * years / 100", "\namount = 500\ninterest_rate = 6\ntime = 4\nans = amount + amount * interest_rate * time / 100", "\namount = 500\ninterest_rate = 6\nyears = 4\nsimple_interest = amount * years * interest_rate / 100\nans = amount + simple_interest", "\namount = 500\ninterest_rate = 6\nyears = 4\nans = amount + amount * interest_rate / 100 * years", "\namount_borrowed = 500\ninterest_rate = 6\nyears = 4\namount_to_be_paid = amount_borrowed * (1 + interest_rate * years / 100)\nans = amount_to_be_paid", "\namount = 500\ninterest_rate = 6\nduration = 4\nans = amount + duration * interest_rate / 100 * amount", "\ninterest_rate = 6\namount_borrowed = 500\nyears = 4\ninterest = amount_borrowed * interest_rate * years / 100\nans = amount_borrowed + interest", "\namount = 500\ninterest_rate = 6\ntime = 4\namount_to_pay = amount * (1 + interest_rate / 100 * time)\nans = amount_to_pay", "\namount = 500\ninterest_rate = 6\ntime = 4\ninterest = amount * time * interest_rate / 100\nans = amount + interest", "\namount_borrowed = 500\ninterest_rate = 6\ninterest = amount_borrowed * interest_rate * 4 / 100\nans = amount_borrowed + interest", "\namount = 500\ninterest_rate = 6\ntime = 4\ninterest = amount * interest_rate * time / 100\nans = amount + interest", "\namount = 500\ninterest_rate = 6\nduration = 4\ninterest = amount * interest_rate * duration / 100\nans = amount + interest", "\namount = 500\ninterest_rate = 6\ntime = 4\ninterest = amount * interest_rate * time / 100\nans = amount + interest", "\namount = 500\ninterest_rate = 6\ntime = 4\ninterest = amount * interest_rate * time / 100\nans = amount + interest"], "generated_prediction": "620.0", "options": ["A)750", "B)700", "C)620", "D)600", "E)None of these"], "answer": "C", "prediction": "C"}
{"question": "A computer routine was developed to generate two numbers (x,y) the first being a random number between 0 and 100 inclusive, and the second being less than or equal to the square root of the first. Each of the following pair satisfies the routine except", "generated": ["\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\nans = 'A'", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] > 100 or option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] > 100 or option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] > 100 or option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] > 100 or option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] > 100 or option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] > 100 or option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] > 100 or option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] <= 100 and option[1] <= math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    x, y = option\n    if y > math.sqrt(x):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] < 0 or option[0] > 100 or option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99,10), (85,9), (50,7), (1,1), (1,0)]\nfor option in options:\n    if option[0] <= 100 and option[1] <= math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] >= 0 and option[0] <= 100 and option[1] <= math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] < 0 or option[0] > 100 or option[1] > math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] >= 0 and option[0] <= 100 and option[1] <= math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] >= 0 and option[0] <= 100 and option[1] <= math.sqrt(option[0]):\n        ans = option\n        break", "\noptions = [(99,10), (85,9), (50,7), (1,1), (1,0)]\nfor option in options:\n    if option[0] >= 0 and option[0] <= 100 and option[1] <= math.sqrt(option[0]):\n        ans = option\n        break", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x >= 0, x <= 100, y <= math.sqrt(x)], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x >= 0, x <= 100, y <= math.sqrt(x)], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it(x - y ** 2, y)\nans = solution[y]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it(y - math.sqrt(x), x)\nans = solution[x]", "\noptions = [(99, 10), (85, 9), (50, 7), (1, 1), (1, 0)]\nfor option in options:\n    if option[0] >= 0 and option[0] <= 100 and option[1] <= math.sqrt(option[0]):\n        continue\n    else:\n        ans = option\n        break", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it(y - math.sqrt(x), x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it(y - math.sqrt(x), x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it(y - math.sqrt(x), y)\nans = solution[y]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it(x - 100, y - math.sqrt(x))\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x >= 0, x <= 100, y <= x ** 0.5], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x >= 0, x <= 100, y <= x ** 0.5], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it(x - 100, y - math.sqrt(x))\nans = (solution[x], solution[y])"], "generated_prediction": "(99, 10)", "options": ["A)(99,10)", "B)(85,9)", "C)(50,7)", "D)(1,1)", "E)(1,0)"], "answer": "A", "prediction": "A"}
{"question": "A jeep travels a certain distance taking 6 hours in the forward journey. During the return journey, it increased its speed by 12km/hr and took 4 hours. What is the distance travelled by the jeep?", "generated": ["\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nsolution = solve_it([distance / speed - 6, distance / (speed + 12) - 4], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nsolution = solve_it([distance / speed - 6, distance / (speed + 12) - 4], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nforward_journey_time = 6\nreturn_journey_time = 4\nsolution = solve_it([distance / speed - forward_journey_time, distance / (speed + 12) - return_journey_time], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nsolution = solve_it([distance / (speed + 12) - 4, distance / speed - 6], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nforward_time = 6\nreturn_time = 4\nsolution = solve_it([distance / forward_speed - forward_time, distance / return_speed - return_time, return_speed - forward_speed - 12], [distance, forward_speed, return_speed])\nans = solution[distance]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime_forward_journey = 6\ntime_return_journey = 4\nsolution = solve_it([speed * time_forward_journey - distance, (speed + 12) * time_return_journey - distance], [speed, distance])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nforward_journey_time = 6\nreturn_journey_time = 4\nsolution = solve_it([speed * forward_journey_time - distance, (speed + 12) * return_journey_time - distance], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nforward_time = 6\nreturn_time = 4\nsolution = solve_it([distance / forward_speed - forward_time, distance / (return_speed + 12) - return_time], [distance, forward_speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_forward = 6\ntime_return = 4\nsolution = solve_it([distance / speed - time_forward, distance / (speed + 12) - time_return], [distance, speed])\nans = solution[distance]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime_forward_journey = 6\ntime_return_journey = 4\nspeed_return_journey = speed + 12\nsolution = solve_it([speed * time_forward_journey - distance, speed_return_journey * time_return_journey - distance], [speed, distance])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = 6\ntime_return = 4\nspeed_return = speed + 12\nsolution = solve_it([distance / speed - time, distance / speed_return - time_return], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_taken_forward_journey = 6\ntime_taken_return_journey = 4\nsolution = solve_it([distance / speed - time_taken_forward_journey, distance / (speed + 12) - time_taken_return_journey], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nforward_journey_time = 6\nreturn_journey_time = 4\nforward_journey_speed = speed\nreturn_journey_speed = speed + 12\nsolution = solve_it([distance / forward_journey_speed - forward_journey_time, distance / return_journey_speed - return_journey_time], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nforward_time = 6\nreturn_time = 4\nsolution = solve_it([forward_speed * forward_time - distance, return_speed * return_time - distance], [forward_speed, return_speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nsolution = solve_it([distance / forward_speed - 6, distance / return_speed - 4], [distance, forward_speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nsolution = solve_it([distance / forward_speed - 6, distance / return_speed - 4], [distance, forward_speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nsolution = solve_it([distance / forward_speed - 6, distance / return_speed - 4], [distance, forward_speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([speed * time - distance, (speed + 12) * (time - 4) - distance], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nforward_time = 6\nreturn_time = 4\nsolution = solve_it([distance / forward_speed - forward_time, distance / return_speed - return_time], [distance, forward_speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nforward_time = 6\nreturn_time = 4\nsolution = solve_it([distance / forward_speed - forward_time, distance / return_speed - return_time], [distance, forward_speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([speed * time - distance, (speed + 12) * (time - 4) - distance], [speed, distance])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nforward_speed = speed\nreturn_speed = speed + 12\nsolution = solve_it([distance / forward_speed - 6, distance / return_speed - 4], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nsolution = solve_it([distance / forward_speed - 6, distance / return_speed - 4], [distance, forward_speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nforward_speed = Symbol('forward_speed', positive=True)\nreturn_speed = Symbol('return_speed', positive=True)\nsolution = solve_it([distance / forward_speed - 6, distance / return_speed - 4], [distance, forward_speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_forward = distance / 6\nspeed_backward = distance / 4 + 12\nsolution = solve_it(speed_forward - speed_backward, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([distance / speed - time, distance / (speed + 12) - (time - 4)], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_forward_journey = 6\ntime_return_journey = 4\nspeed_increase = 12\nsolution = solve_it([distance / speed - time_forward_journey, distance / (speed + speed_increase) - time_return_journey], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nforward_journey_time = 6\nreturn_journey_time = 4\nforward_journey_speed = speed\nreturn_journey_speed = speed + 12\nsolution = solve_it([forward_journey_time * forward_journey_speed - distance, return_journey_time * return_journey_speed - distance], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\nspeed_increase = 12\ntime_forward_journey = 6\ntime_return_journey = 4\nsolution = solve_it([distance / speed - time_forward_journey, distance / (speed + speed_increase) - time_return_journey], [distance, speed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_taken = 6\ntime_taken_return = 4\nspeed_return = speed + 12\nsolution = solve_it([distance / speed - time_taken, distance / speed_return - time_taken_return], [distance, speed])\nans = solution[distance]"], "generated_prediction": "144.0", "options": ["A)126km", "B)144km", "C)127km", "D)228km", "E)128km"], "answer": "B", "prediction": "B"}
{"question": "When I was 2 years old, my brother was half my age. Now I am 60 years old, how old is my brother?", "generated": ["\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(2 * brother_age - 60, brother_age)\nans = solution[brother_age]", "\nmy_age = Symbol('my_age', positive=True)\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it([my_age - 2, brother_age - my_age / 2, my_age - 60], [my_age, brother_age])\nans = solution[brother_age]", "\nmy_age = Symbol('my_age', positive=True)\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it([my_age - 2, brother_age - my_age / 2, my_age - 60], [my_age, brother_age])\nans = solution[brother_age]", "\nmy_age = Symbol('my_age', positive=True)\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it([my_age - 2, brother_age - my_age / 2, my_age - 60], [my_age, brother_age])\nans = solution[brother_age]", "\nmy_age = Symbol('my_age', positive=True)\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it([my_age - 2, brother_age - my_age / 2, my_age - 60], [my_age, brother_age])\nans = solution[brother_age]", "\nmy_age = Symbol('my_age', positive=True)\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it([my_age - 2, brother_age - my_age / 2, my_age - 60], [my_age, brother_age])\nans = solution[brother_age]", "\nmy_age = Symbol('my_age', positive=True)\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it([my_age - 2, brother_age - my_age / 2, my_age - 60], [my_age, brother_age])\nans = solution[brother_age]", "\nmy_age = Symbol('my_age', positive=True)\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it([my_age - 2, brother_age - my_age / 2, brother_age - 60], [my_age, brother_age])\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age / 2 - 2, brother_age)\nans = solution[brother_age] + 60", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age / 2 - 2 + 60 - brother_age, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age / 2 - 2 + 60 - brother_age, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age / 2 - 2 + 60 - brother_age, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age / 2 - 2 + 60 - brother_age, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age / 2 - 2 + 60 - brother_age, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age - (60 - brother_age) / 2 - 2, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(60 - brother_age - 2 * (brother_age / 2), brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age - 2 - brother_age / 2, brother_age)\nans = solution[brother_age] + 60", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age - 2 - brother_age / 2, brother_age)\nans = solution[brother_age] + 60", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age - 60 + 2 - brother_age / 2, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age - 2 * brother_age / 2 - 60, brother_age)\nans = solution[brother_age]", "\nmy_age = Symbol('my_age', positive=True)\nmy_brother_age = Symbol('my_brother_age', positive=True)\nsolution = solve_it(my_brother_age - my_age / 2 - 2, my_age)\nans = solution[my_age] + my_brother_age", "\nbrother_age = Symbol('brother_age', positive=True)\nbrother_age_when_i_was_2 = brother_age / 2\nbrother_age_now = 60\nsolution = solve_it(brother_age_now - brother_age_when_i_was_2 - 58, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nmy_age = 2\nmy_age_when_brother_was_half_my_age = 60\nsolution = solve_it(my_age + brother_age - my_age_when_brother_was_half_my_age, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age - (60 - 2) / 2, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nmy_age = 2\nmy_age_when_brother_was_half_my_age = 60\nsolution = solve_it(brother_age - my_age - my_age_when_brother_was_half_my_age, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age - 0.5 * 2 - 60, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nsolution = solve_it(brother_age - 2 * brother_age - 60, brother_age)\nans = solution[brother_age]", "\nbrother_age = Symbol('brother_age', positive=True)\nmy_age = 2\nsolution = solve_it(brother_age / my_age - 0.5, brother_age)\nans = solution[brother_age] + 60", "\nage_of_brother = Symbol('age_of_brother', positive=True)\nage_of_me = 2\nage_of_brother_when_i_was_2 = age_of_brother / 2\nage_of_me_now = 60\nage_of_brother_now = age_of_brother_when_i_was_2 + age_of_me_now - age_of_me\nsolution = solve_it(age_of_brother_now - age_of_brother, age_of_brother)\nans = solution[age_of_brother]", "\nbrother_age = Symbol('brother_age', positive=True)\nmy_age_when_brother_was_half_my_age = 2\nmy_age_now = 60\nsolution = solve_it(brother_age - my_age_when_brother_was_half_my_age - my_age_now, brother_age)\nans = solution[brother_age]"], "generated_prediction": "116.0", "options": ["A)A)59", "B)B)69", "C)C)79", "D)D)89", "E)E)99"], "answer": "A", "prediction": "E"}
{"question": "The original retail price of an appliance was 60 percent more than its wholesale cost. If the appliance was actually sold for 20 percent less than the original retail price, then it was sold for what percent more than its wholesale cost?", "generated": ["\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = wholesale_cost * 1.6\nsale_price = retail_price * 0.8\nans = (sale_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = wholesale_cost * 1.6\nactual_price = retail_price * 0.8\nans = (actual_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = wholesale_cost * 1.6\nactual_price = retail_price * 0.8\nans = (actual_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = wholesale_cost * 1.6\nactual_price = retail_price * 0.8\nans = (actual_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = 1.6 * wholesale_cost\nactual_price = 0.8 * retail_price\nans = (actual_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\ndiscounted_retail_price = 0.8 * original_retail_price\nsolution = solve_it(discounted_retail_price / wholesale_cost - 1, wholesale_cost)\nans = solution[wholesale_cost]", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\ndiscount_price = 0.8 * original_retail_price\nans = (discount_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = wholesale_cost * 1.6\ndiscounted_price = retail_price * 0.8\nsolution = solve_it(discounted_price / wholesale_cost - 1.2, wholesale_cost)\nans = solution[wholesale_cost]", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\nactual_retail_price = 0.8 * original_retail_price\nans = (actual_retail_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\nactual_retail_price = 0.8 * original_retail_price\nans = (actual_retail_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = wholesale_cost * 1.6\nactual_price = retail_price * 0.8\nsolution = solve_it(actual_price - wholesale_cost, wholesale_cost)\nans = (solution[wholesale_cost] - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\nactual_retail_price = 0.8 * original_retail_price\nans = (actual_retail_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\nactual_retail_price = 0.8 * original_retail_price\nans = (actual_retail_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = wholesale_cost * 1.6\ndiscounted_price = retail_price * 0.8\nsolution = solve_it(discounted_price / wholesale_cost - 1, wholesale_cost)\nans = solution[wholesale_cost]", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = wholesale_cost * 1.6\nactual_retail_price = original_retail_price * 0.8\npercent_profit = (actual_retail_price - wholesale_cost) / wholesale_cost * 100\nans = percent_profit", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = wholesale_cost * 1.6\nactual_retail_price = original_retail_price * 0.8\nans = (actual_retail_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\nactual_retail_price = 0.8 * original_retail_price\nans = (actual_retail_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = wholesale_cost * 1.6\nactual_price = retail_price * 0.8\nsolution = solve_it(actual_price - wholesale_cost, wholesale_cost)\nans = solution[wholesale_cost] / actual_price", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = wholesale_cost * 1.6\ndiscount = 0.2\nactual_retail_price = original_retail_price * (1 - discount)\nsolution = solve_it(actual_retail_price / wholesale_cost - 1, wholesale_cost)\nans = solution[wholesale_cost]", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = Symbol('retail_price', positive=True)\nsold_price = Symbol('sold_price', positive=True)\nsolution = solve_it([retail_price - wholesale_cost - 0.6 * wholesale_cost, sold_price - retail_price - 0.2 * retail_price], [wholesale_cost, retail_price, sold_price])\nans = (solution[sold_price] - solution[wholesale_cost]) / solution[wholesale_cost]", "\nwholesale_price = Symbol('wholesale_price', positive=True)\noriginal_retail_price = wholesale_price * 1.6\nsale_price = original_retail_price * 0.8\nsolution = solve_it(sale_price - wholesale_price - 0.2 * wholesale_price, wholesale_price)\nans = solution[wholesale_price]", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = 1.6 * wholesale_cost\ndiscounted_price = 0.8 * retail_price\nsolution = solve_it(discounted_price - wholesale_cost, wholesale_cost)\nans = solution[wholesale_cost]", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\ndiscount_percentage = 0.8\ndiscounted_retail_price = original_retail_price * discount_percentage\nsolution = solve_it(discounted_retail_price - wholesale_cost, wholesale_cost)\nans = solution[wholesale_cost] / discounted_retail_price", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = 1.6 * wholesale_cost\ndiscounted_price = 0.8 * retail_price\nsolution = solve_it(discounted_price - wholesale_cost, wholesale_cost)\nans = (discounted_price - solution[wholesale_cost]) / solution[wholesale_cost]", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nretail_price = wholesale_cost * 1.6\ndiscounted_price = retail_price * 0.8\nsolution = solve_it(discounted_price - wholesale_cost - 0.2 * wholesale_cost, wholesale_cost)\nans = solution[wholesale_cost]", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\nactual_retail_price = 0.8 * original_retail_price\npercent_more_than_wholesale_cost = (actual_retail_price - wholesale_cost) / wholesale_cost\nans = percent_more_than_wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = wholesale_cost * 1.6\nactual_retail_price = original_retail_price * 0.8\nactual_retail_price_as_percent_of_wholesale_cost = actual_retail_price / wholesale_cost\nans = actual_retail_price_as_percent_of_wholesale_cost - 1", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = 1.6 * wholesale_cost\nactual_retail_price = 0.8 * original_retail_price\npercent_more_than_wholesale_cost = (actual_retail_price - wholesale_cost) / wholesale_cost\nans = percent_more_than_wholesale_cost", "\noriginal_retail_price = Symbol('original_retail_price', positive=True)\nwholesale_cost = Symbol('wholesale_cost', positive=True)\nsolution = solve_it(original_retail_price - wholesale_cost - 0.6 * wholesale_cost, original_retail_price)\noriginal_retail_price = solution[original_retail_price]\nsolution = solve_it(original_retail_price - 0.8 * original_retail_price - wholesale_cost, wholesale_cost)\nwholesale_cost = solution[wholesale_cost]\nans = (original_retail_price - wholesale_cost) / wholesale_cost", "\nwholesale_cost = Symbol('wholesale_cost', positive=True)\noriginal_retail_price = wholesale_cost * 1.6\nactual_retail_price = original_retail_price * 0.8\nactual_retail_price_percent_more_than_wholesale_cost = (actual_retail_price - wholesale_cost) / wholesale_cost * 100\nans = actual_retail_price_percent_more_than_wholesale_cost"], "generated_prediction": "0.28", "options": ["A)20%", "B)28%", "C)36%", "D)40%", "E)42%"], "answer": "B", "prediction": "B"}
{"question": "On a map, the length of the road from Town F to Town G is measured to be 20 inches. On this map, 1/4 inch represents an actual distance of 10 miles. What is the actual distance, in miles, from Town F to Town G along this road?", "generated": ["\ndistance = 20 * 10 / 4\nans = distance", "\nmap_distance = 20\nscale = 1 / 4\nactual_distance = map_distance * scale * 10\nans = actual_distance", "\nactual_distance = 20 * 10 / 4\nans = actual_distance", "\ndistance_on_map = 20\nactual_distance_per_inch = 10 / 4\nans = distance_on_map * actual_distance_per_inch", "\nmap_distance = 20\nmap_scale = 1 / 4\nactual_distance = map_distance * map_scale * 10\nans = actual_distance", "\ndistance_on_map = 20\ndistance_on_map_in_miles = 10 / 4\nactual_distance = distance_on_map * distance_on_map_in_miles\nans = actual_distance", "\ndistance_on_map = 20\ndistance_on_map_in_miles = 10 / 4\nactual_distance = distance_on_map * distance_on_map_in_miles\nans = actual_distance", "\ndistance_on_map = 20\ndistance_on_map_in_miles = distance_on_map * 10 / 4\nans = distance_on_map_in_miles", "\ndistance_on_map = 20\ndistance_on_map_in_miles = 10 / 4\nactual_distance = distance_on_map * distance_on_map_in_miles\nans = actual_distance", "\ndistance_on_map = 20\ndistance_on_map_in_miles = 10 / 4\nactual_distance = distance_on_map * distance_on_map_in_miles\nans = actual_distance", "\ndistance_on_map = 20\ndistance_on_map_in_miles = 10 / 4\nactual_distance = distance_on_map * distance_on_map_in_miles\nans = actual_distance", "\ndistance = Symbol('distance', positive=True)\nmap_distance = 20\nmap_scale = 10 / 4\nsolution = solve_it(distance - map_distance * map_scale, distance)\nans = solution[distance]", "\ndistance_on_map = 20\ndistance_on_map_in_miles = distance_on_map * 10 / 4\nactual_distance = distance_on_map_in_miles * 10\nans = actual_distance", "\ndistance_on_map = 20\ndistance_on_map_in_miles = 10\nactual_distance = distance_on_map * distance_on_map_in_miles / 4\nans = actual_distance", "\nmap_distance = 20\nactual_distance_per_inch = 10 / 4\nactual_distance = map_distance * actual_distance_per_inch\nans = actual_distance", "\ndistance_on_map = 20\ndistance_on_map_in_miles = 10\nactual_distance = distance_on_map * distance_on_map_in_miles / 4\nans = actual_distance", "\ndistance = Symbol('distance')\nmap_distance = 20\nscale = 1 / 4\nsolution = solve_it(distance - map_distance * scale * 10, distance)\nans = solution[distance]", "\nmap_distance = 20\nactual_distance = 10\nans = map_distance * actual_distance / 4", "\nmap_distance = 20\nactual_distance_per_inch = 10 / 4\nactual_distance = map_distance * actual_distance_per_inch\nans = actual_distance", "\nmap_distance = 20\nactual_distance = 10\nscale = actual_distance / map_distance\nactual_distance_from_f_to_g = scale * 20\nans = actual_distance_from_f_to_g", "\nmap_distance = 20\nactual_distance_per_inch = 10 / 4\nactual_distance = map_distance * actual_distance_per_inch\nans = actual_distance", "\nmap_distance = 20\nactual_distance = 10\nactual_distance_from_town_f_to_town_g = (map_distance / 4) * actual_distance\nans = actual_distance_from_town_f_to_town_g", "\nmap_distance = 20\nactual_distance = 10\nans = map_distance * actual_distance / 4", "\nactual_distance = Symbol('actual_distance', positive=True)\nmap_distance = 20\nmap_scale = 1 / 4\nsolution = solve_it(actual_distance - map_distance * map_scale * 10, actual_distance)\nans = solution[actual_distance]", "\nmap_distance = 20\nactual_distance = 10\nmap_to_actual_distance_ratio = 1 / 4\nactual_distance_between_towns = map_distance * actual_distance / map_to_actual_distance_ratio\nans = actual_distance_between_towns", "\nmap_distance = 20\nactual_distance = 10\ndistance_on_map = 1 / 4\nactual_distance_from_f_to_g = distance_on_map * map_distance / actual_distance\nans = actual_distance_from_f_to_g", "\nmap_distance = 20\nactual_distance = 10\nactual_distance_from_town_f_to_town_g = map_distance * actual_distance / 4\nans = actual_distance_from_town_f_to_town_g", "\nmap_distance = 20\nactual_distance = 10\nactual_distance_from_town_f_to_town_g = map_distance * actual_distance / 4\nans = actual_distance_from_town_f_to_town_g", "\nmap_distance = 20\nactual_distance = 10\nactual_distance_from_town_f_to_town_g = map_distance * actual_distance / 4\nans = actual_distance_from_town_f_to_town_g", "\nlength_on_map = 20\nlength_on_map_in_miles = 20 * 10 / 4\nactual_distance = length_on_map_in_miles * 10\nans = actual_distance"], "generated_prediction": "50.0", "options": ["A)800", "B)720", "C)960", "D)1140", "E)1160"], "answer": "A", "prediction": "A"}
{"question": "When folded into two equal halves a rectangular sheet had a perimeter of 48cm for each part folded along one set of sides and the same is 66cm when folded along the other set of sides. Find the area of the sheet.", "generated": ["\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nsolution = solve_it([2 * (length + width) - 48, 2 * (length + width) - 66], [length, width])\nans = solution[length] * solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([width * 2 + height * 2 - 48, width * 2 + height * 2 - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * width + 2 * height - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = Symbol('area', positive=True)\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66, width * height - area], [width, height, area])\nans = solution[area]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([width + height - 48, 2 * width + 2 * height - 66], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = width * height\nsolution = solve_it([2 * (width + height) - 48, 2 * (width + height) - 66], [width, height])\nans = solution[width] * solution[height]"], "generated_prediction": "None", "options": ["A)1584", "B)1120", "C)792", "D)1320", "E)1200"], "answer": "B", "prediction": "A"}
{"question": "Suppose you can travel from a place M to a place N by 3 buses, from place N to place O by 4 buses, from place O to place P by 1 buses and from place P to place Q by 3 buses. In how many ways can you travel from M to Q ?", "generated": ["\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nans = 3 * 4 * 1 * 3", "\nnum_ways = 3 * 4 * 1 * 3\nans = num_ways", "\nnum_ways = 3 * 4 * 1 * 3\nans = num_ways", "\nways_to_travel_from_M_to_Q = 3 * 4 * 1 * 3\nans = ways_to_travel_from_M_to_Q", "\nm_to_n = 3\nn_to_o = 4\no_to_p = 1\np_to_q = 3\nans = m_to_n * n_to_o * o_to_p * p_to_q", "\nfrom math import factorial\nans = factorial(3) * factorial(4) * factorial(1) * factorial(3)"], "generated_prediction": "36", "options": ["A)24", "B)36", "C)72", "D)84", "E)None"], "answer": "B", "prediction": "B"}
{"question": "A rectangular solid, 3 x 4 x 15, is inscribed in a sphere, so that all eight of its vertices are on the sphere. What is the diameter of the sphere?", "generated": ["\nwidth = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(diameter ** 2 - (width ** 2 + height ** 2 + length ** 2), diameter)\nans = solution[diameter]", "\nwidth = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(diameter ** 2 - (width ** 2 + height ** 2 + length ** 2), diameter)\nans = solution[diameter]", "\nwidth = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(diameter ** 2 - (width ** 2 + height ** 2 + length ** 2), diameter)\nans = solution[diameter]", "\nwidth = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(diameter ** 2 - (width ** 2 + height ** 2 + length ** 2), diameter)\nans = solution[diameter]", "\nwidth = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(diameter ** 2 - (width ** 2 + height ** 2 + length ** 2), diameter)\nans = solution[diameter]", "\nwidth = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(diameter ** 2 - (width ** 2 + height ** 2 + length ** 2), diameter)\nans = math.sqrt(solution[diameter])", "\nwidth = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(diameter ** 2 - (width ** 2 + height ** 2 + length ** 2), diameter)\nans = math.sqrt(solution[diameter])", "\nwidth = 3\nheight = 4\ndepth = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(diameter ** 2 - (width ** 2 + height ** 2 + depth ** 2), diameter)\nans = solution[diameter]", "\nwidth = 3\nheight = 4\ndepth = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(diameter ** 2 - (width ** 2 + height ** 2 + depth ** 2), diameter)\nans = math.sqrt(solution[diameter])", "\nwidth = 3\nheight = 4\nlength = 15\nradius = Symbol('radius', positive=True)\nsolution = solve_it(2 * radius - math.sqrt(width ** 2 + height ** 2 + length ** 2), radius)\nans = solution[radius]", "\nwidth = 3\nheight = 4\nlength = 15\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it(sphere_radius ** 2 - (width / 2) ** 2 - (height / 2) ** 2 - (length / 2) ** 2, sphere_radius)\nans = solution[sphere_radius] * 2", "\nwidth = 3\nheight = 4\nlength = 15\nradius = Symbol('radius', positive=True)\nsolution = solve_it(radius ** 2 - (width / 2) ** 2 - (height / 2) ** 2 - (length / 2) ** 2, radius)\nans = 2 * solution[radius]", "\nwidth = 3\nheight = 4\nlength = 15\nradius = Symbol('radius', positive=True)\nsolution = solve_it(radius ** 2 - (width / 2) ** 2 - (height / 2) ** 2 - (length / 2) ** 2, radius)\nans = 2 * solution[radius]", "\nwidth = 3\nheight = 4\nlength = 15\ndiameter = 2 * math.sqrt(width ** 2 + height ** 2 + length ** 2)\nans = diameter", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\ndepth = Symbol('depth', positive=True)\nradius = Symbol('radius', positive=True)\nsolution = solve_it([width * height * depth - 3 * 4 * 15, radius - math.sqrt(width ** 2 + height ** 2 + depth ** 2)], [width, height, depth, radius])\nans = 2 * solution[radius]", "\nwidth = 3\nheight = 4\nlength = 15\nvolume = width * height * length\nradius = math.cbrt(volume / (4 * math.pi / 3))\nans = radius * 2", "\nwidth = 3\nheight = 4\ndepth = 15\nradius = Symbol('radius', positive=True)\nsolution = solve_it(radius ** 2 - (width / 2) ** 2, radius)\nans = 2 * solution[radius]", "\nwidth = 3\nheight = 4\nlength = 15\nradius = Symbol('radius', positive=True)\nsolution = solve_it(radius ** 2 - width ** 2 / 4 - height ** 2 / 4 - length ** 2 / 4, radius)\nans = math.sqrt(solution[radius]) * 2", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\ndepth = Symbol('depth', positive=True)\nradius = Symbol('radius', positive=True)\nsolution = solve_it([width ** 2 + height ** 2 + depth ** 2 - radius ** 2, width * height * depth - 15 * 4 * 3], [radius, width])\nans = 2 * solution[radius]", "\nwidth = 3\nheight = 4\nlength = 15\ndiameter = math.sqrt((width ** 2 + height ** 2 + length ** 2) * 2)\nans = diameter", "\nwidth = 3\nheight = 4\ndepth = 15\ndiameter = 2 * math.sqrt(width ** 2 + height ** 2 + depth ** 2)\nans = diameter", "\nwidth = 3\nheight = 4\nlength = 15\ndiameter = Symbol('diameter', positive=True)\nsolution = solve_it(math.sqrt(width ** 2 + height ** 2 + length ** 2) - diameter / 2, diameter)\nans = solution[diameter]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\ndepth = Symbol('depth', positive=True)\nradius = Symbol('radius', positive=True)\nsolution = solve_it([width ** 2 + height ** 2 + depth ** 2 - radius ** 2,\n                     width ** 2 + height ** 2 + depth ** 2 - radius ** 2,\n                     width ** 2 + height ** 2 + depth ** 2 - radius ** 2,\n                     width ** 2 + height ** 2 + depth ** 2 - radius ** 2,\n                     width ** 2 + height ** 2 + depth ** 2 - radius ** 2,\n                     width ** 2 + height ** 2 + depth ** 2 - radius ** 2,\n                     width ** 2 + height ** 2 + depth ** 2 - radius ** 2,\n                     width ** 2 + height ** 2 + depth ** 2 - radius ** 2,\n                     width - 3,\n                     height - 4,\n                     depth - 15], [width, height, depth, radius])\nans = 2 * solution[radius]", "\nwidth = 3\nheight = 4\ndepth = 15\nvolume = width * height * depth\nradius = Symbol('radius', positive=True)\nsolution = solve_it(radius ** 3 - volume, radius)\nans = solution[radius] * 2", "\nwidth = 3\nheight = 4\nlength = 15\nradius = (width ** 2 + height ** 2 + length ** 2) ** 0.5 / 2\nans = radius * 2", "\nwidth = 3\nheight = 4\nlength = 15\nvolume = width * height * length\nradius = Symbol('radius', positive=True)\nsolution = solve_it(volume - 4 / 3 * math.pi * radius ** 3, radius)\nans = solution[radius] * 2", "\nwidth = 3\nheight = 4\ndepth = 15\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it(sphere_radius ** 2 - width ** 2 - height ** 2 - depth ** 2, sphere_radius)\nans = solution[sphere_radius] * 2", "\nwidth = 3\nheight = 4\ndepth = 15\nradius = Symbol('radius', positive=True)\nsolution = solve_it(radius ** 2 - width ** 2 / 4 - height ** 2 / 4 - depth ** 2 / 4, radius)\nans = solution[radius] * 2", "\nwidth = 3\nheight = 4\ndepth = 15\ndiameter = Symbol('diameter', positive=True)\nradius = diameter / 2\nsolution = solve_it([radius ** 2 - width ** 2 / 4 - height ** 2 / 4 - depth ** 2 / 4, radius ** 2 - (width / 2) ** 2 - (height / 2) ** 2 - (depth / 2) ** 2], [diameter])\nans = solution[diameter]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nlength = Symbol('length', positive=True)\nradius = Symbol('radius', positive=True)\nsolution = solve_it([width * height * length - 3 * 4 * 15, (width ** 2 + height ** 2 + length ** 2) ** 0.5 - radius, 2 * radius - 2 * (width + height + length)], [width, height, length, radius])\nans = solution[radius]"], "generated_prediction": "15.81", "options": ["A) 13.3542", "B) 15.8113", "C) 18.3451", "D) 19.5667", "E) 20.8888"], "answer": "B", "prediction": "B"}
{"question": "A starts travel towards south 3km, then travel 5 km towards east, and again travels 3 km to north, and finally travels 2km towards west. In the end how far from is A from home?", "generated": ["\nimport numpy as np", "\ndistance_from_home = math.sqrt(3 ** 2 + 5 ** 2 + 3 ** 2 + 2 ** 2)\nans = distance_from_home", "\nimport math", "\nimport math\ndistance = math.sqrt(3 ** 2 + 5 ** 2) + 3 + 2\nans = distance", "\nimport numpy as np\nimport math", "\nimport numpy as np\nA = np.array([3, 5, 3, 2])\nB = np.array([0, 0, 0, 0])\nans = np.linalg.norm(A - B)", "\nimport numpy as np\nA = np.array([0, 0])\nB = np.array([3, 0])\nC = np.array([3, 5])\nD = np.array([0, 5])\nE = np.array([0, 3])\nans = np.linalg.norm(A - E)", "\nimport numpy as np\nimport math", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x - 3, y - 5, x - 3, y - 2], [x, y])\nans = math.sqrt(solution[x] ** 2 + solution[y] ** 2)", "\nimport math\ndistance_from_home = math.sqrt(3 ** 2 + 5 ** 2 + 3 ** 2 + 2 ** 2)\nans = distance_from_home", "\nimport math\ndistance = math.sqrt(3 ** 2 + 5 ** 2 + 3 ** 2 + 2 ** 2)\nans = distance", "\nimport math\ndistance = math.sqrt(3 ** 2 + 5 ** 2 + 3 ** 2 + 2 ** 2)\nans = distance", "\nimport math\ndistance_from_home = math.sqrt(3 ** 2 + 5 ** 2 + 3 ** 2 + 2 ** 2)\nans = distance_from_home", "\nimport numpy as np\nA = np.array([0, 0])\nB = np.array([3, 0])\nC = np.array([3, 5])\nD = np.array([0, 5])\nE = np.array([0, 3])\nF = np.array([-2, 3])\ndistance = np.linalg.norm(A - F)\nans = distance", "\nimport math\ndistance_from_home = math.sqrt(3 ** 2 + 5 ** 2 + 3 ** 2 + 2 ** 2)\nans = distance_from_home", "\nimport math\nx = Symbol('x')\ny = Symbol('y')\ndistance = math.sqrt(x ** 2 + y ** 2)\nsolution = solve_it([x - 3, y - 5, x + 3, y - 2], [x, y])\nans = distance.subs({x: solution[x], y: solution[y]})", "\nimport numpy as np\nimport math\nA = np.array([3, 5, 3, 2])\nB = np.array([0, 0, 0, 0])\nans = math.sqrt(np.sum((A - B) ** 2))", "\nimport numpy as np\nA = np.array([0, 0])\nB = np.array([3, 0])\nC = np.array([3, 5])\nD = np.array([0, 5])\nE = np.array([0, 3])\ndistance = np.linalg.norm(A - E)\nans = distance", "\nimport math\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ndistance = math.sqrt(x ** 2 + y ** 2)\nsolution = solve_it([x - 3, y - 5, x + 3, y - 2], [x, y])\nans = distance.subs([(x, solution[x]), (y, solution[y])])", "\nimport math\nx = Symbol('x')\ny = Symbol('y')\ndistance = Symbol('distance', positive=True)\nsolution = solve_it([(x - 3) ** 2 + (y - 5) ** 2 - distance ** 2, (x - 3) ** 2 + (y + 3) ** 2 - distance ** 2, (x + 2) ** 2 + (y + 3) ** 2 - distance ** 2], [x, y, distance])\nans = solution[distance]", "\ndistance_from_home = Symbol('distance_from_home', positive=True)\nsolution = solve_it(distance_from_home ** 2 - (3 + 5 + 3 + 2) ** 2, distance_from_home)\nans = solution[distance_from_home]", "\nimport numpy as np\nA = np.array([3, 5, 3, 2])\nB = np.array([0, 0])\nans = np.linalg.norm(A - B)", "\nimport math\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ndistance = Symbol('distance', positive=True)\nsolution = solve_it([math.sqrt(x ** 2 + 3 ** 2) - distance, math.sqrt((x + 5) ** 2 + y ** 2) - distance, math.sqrt((x + 5) ** 2 + (y + 3) ** 2) - distance, math.sqrt((x + 5 - 2) ** 2 + (y + 3) ** 2) - distance], [x, y, distance])\nans = solution[distance]", "\nimport math\nx = Symbol('x')\ny = Symbol('y')\ndistance = math.sqrt(x ** 2 + y ** 2)\nsolution = solve_it([x - 3, y - 5, x + 3, y - 2], [x, y])\nans = distance.subs(solution)", "\nfrom sympy.geometry import Point, Line\nA = Point(0, 0)\nB = Point(3, 0)\nC = Point(3, 5)\nD = Point(0, 2)\ndistance_AB = Line(A, B).length\ndistance_BC = Line(B, C).length\ndistance_CD = Line(C, D).length\ndistance_DA = Line(D, A).length\nans = distance_AB + distance_BC + distance_CD + distance_DA", "\nimport math\na_x = 3\na_y = 5\nb_x = -3\nb_y = 2\ndistance = math.sqrt((a_x - b_x) ** 2 + (a_y - b_y) ** 2)\nans = distance", "\nimport math\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x + 3 - 5, y + 5 - 3, x - y - 2], [x, y])\nans = math.sqrt(solution[x] ** 2 + solution[y] ** 2)", "\nimport math\nx = Symbol('x')\ny = Symbol('y')\ndistance = math.sqrt(x ** 2 + y ** 2)\nsolution = solve_it([x - 3, x - 5, x - 3, x - 2, distance - 3], [x, y])\nans = solution[distance]", "\nimport math\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ndistance_from_home = math.sqrt(x ** 2 + y ** 2)\nsolution = solve_it([x - 3, x - 5 + y, y - 3 + x, y - 2], [x, y])\nans = distance_from_home.subs(solution)", "\nimport numpy as np\nimport matplotlib.pyplot as plt\nstart = np.array([0, 0])\ntravel_1 = np.array([0, -3])\ntravel_2 = np.array([5, 0])\ntravel_3 = np.array([0, 3])\ntravel_4 = np.array([-2, 0])\nend = start + travel_1 + travel_2 + travel_3 + travel_4\nplt.plot([start[0], travel_1[0], travel_2[0], travel_3[0], travel_4[0], end[0]], [start[1], travel_1[1], travel_2[1], travel_3[1], travel_4[1], end[1]])\nplt.show()\nans = np.linalg.norm(end)"], "generated_prediction": "6.855654600401044", "options": ["A)3km", "B)2km", "C)4km", "D)5km", "E)6km"], "answer": "A", "prediction": "E"}
{"question": "While selling a watch, a shopkeeper gives a discount of 5%. If he gives a discount of 7%, he earns Rs. 15 less as profit. The marked price of the watch is:", "generated": ["\nmarked_price = Symbol('marked_price', positive=True)\nprofit_with_5_percent_discount = 0.95 * marked_price\nprofit_with_7_percent_discount = 0.93 * marked_price\nsolution = solve_it(profit_with_5_percent_discount - profit_with_7_percent_discount - 15, marked_price)\nans = solution[marked_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price_with_5_percent_discount = 0.95 * cost_price\nselling_price_with_7_percent_discount = 0.93 * cost_price\nsolution = solve_it(selling_price_with_5_percent_discount - selling_price_with_7_percent_discount - 15, cost_price)\nans = solution[cost_price]", "\nmarked_price = Symbol('marked_price', positive=True)\nprofit_with_5_percent_discount = 0.05 * marked_price\nprofit_with_7_percent_discount = 0.07 * marked_price\nsolution = solve_it(profit_with_5_percent_discount - profit_with_7_percent_discount - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\nprofit_with_5_percent_discount = 0.05 * marked_price\nprofit_with_7_percent_discount = 0.07 * marked_price\nsolution = solve_it(profit_with_5_percent_discount - profit_with_7_percent_discount - 15, marked_price)\nans = solution[marked_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price_with_5_percent_discount = cost_price * 0.95\nselling_price_with_7_percent_discount = cost_price * 0.93\nsolution = solve_it(selling_price_with_5_percent_discount - selling_price_with_7_percent_discount - 15, cost_price)\nans = solution[cost_price]", "\nmarked_price = Symbol('marked_price', positive=True)\nprofit_with_5_percent_discount = (95 / 100) * marked_price - marked_price\nprofit_with_7_percent_discount = (93 / 100) * marked_price - marked_price\nsolution = solve_it(profit_with_5_percent_discount - profit_with_7_percent_discount - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\nprice_after_5_percent_discount = marked_price * 95 / 100\nprice_after_7_percent_discount = marked_price * 93 / 100\nsolution = solve_it(price_after_5_percent_discount - price_after_7_percent_discount - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\nprofit_with_5_percent_discount = marked_price * 0.05\nprofit_with_7_percent_discount = marked_price * 0.07\nsolution = solve_it(profit_with_7_percent_discount - profit_with_5_percent_discount - 15, marked_price)\nans = solution[marked_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price_with_5_percent_discount = cost_price * (1 - 5 / 100)\nselling_price_with_7_percent_discount = cost_price * (1 - 7 / 100)\nsolution = solve_it(selling_price_with_5_percent_discount - selling_price_with_7_percent_discount - 15, cost_price)\nans = solution[cost_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nsolution = solve_it(discount_5 - discount_7 - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nsolution = solve_it(discount_5 - discount_7 - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nsolution = solve_it(discount_5 - discount_7 - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nsolution = solve_it(discount_5 - discount_7 - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nsolution = solve_it(discount_5 - discount_7 - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nsolution = solve_it(discount_7 - discount_5 - 15, marked_price)\nans = solution[marked_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price_with_5_percent_discount = cost_price * (1 - 5 / 100)\nselling_price_with_7_percent_discount = cost_price * (1 - 7 / 100)\nsolution = solve_it(selling_price_with_5_percent_discount - selling_price_with_7_percent_discount - 15, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nprofit_with_5_percent_discount = 0.05 * cost_price\nprofit_with_7_percent_discount = 0.07 * cost_price\nsolution = solve_it(profit_with_7_percent_discount - profit_with_5_percent_discount - 15, cost_price)\nans = solution[cost_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nsolution = solve_it(discount_5 - discount_7 - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nsolution = solve_it(discount_5 - discount_7 - 15, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_1 = 0.05\ndiscount_2 = 0.07\nprofit_1 = marked_price * discount_1\nprofit_2 = marked_price * discount_2 - 15\nsolution = solve_it(profit_1 - profit_2, marked_price)\nans = solution[marked_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05\ndiscount_7 = 0.07\nprofit_5 = marked_price * discount_5\nprofit_7 = marked_price * discount_7 - 15\nsolution = solve_it(profit_5 - profit_7, marked_price)\nans = solution[marked_price]", "\ncost = Symbol('cost', positive=True)\ndiscount = 0.05\nprofit = 15\nsolution = solve_it(cost * discount - profit, cost)\nans = solution[cost]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount_5 = 0.05 * marked_price\ndiscount_7 = 0.07 * marked_price\nprofit_5 = marked_price - discount_5\nprofit_7 = marked_price - discount_7\nsolution = solve_it(profit_5 - profit_7 - 15, marked_price)\nans = solution[marked_price]", "\ncost_price = Symbol('cost_price', positive=True)\ndiscount_5 = 0.05\ndiscount_7 = 0.07\nprofit_5 = cost_price * discount_5\nprofit_7 = cost_price * discount_7 - 15\nsolution = solve_it(profit_5 - profit_7, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = cost_price * (1 - 5 / 100)\nselling_price_with_7_percent_discount = cost_price * (1 - 7 / 100)\nsolution = solve_it(selling_price - selling_price_with_7_percent_discount - 15, cost_price)\nans = solution[cost_price]", "\nmarked_price = Symbol('marked_price', positive=True)\ndiscount = 5\nprofit = -15\nprofit_with_discount = marked_price * (100 - discount) / 100\nprofit_with_7_percent_discount = marked_price * (100 - 7) / 100\nsolution = solve_it(profit_with_7_percent_discount - profit_with_discount - profit, marked_price)\nans = solution[marked_price]", "\ncost_price = Symbol('cost_price', positive=True)\nprofit = Symbol('profit', positive=True)\nselling_price = cost_price + profit\ndiscount_5 = 0.95\ndiscount_7 = 0.93\nsolution = solve_it([selling_price * discount_5 - cost_price - 15, selling_price * discount_7 - cost_price - profit], [cost_price, profit])\nans = solution[cost_price]", "\ndiscount_rate = Symbol('discount_rate', positive=True)\nprofit = Symbol('profit', positive=True)\ndiscount_rate_1 = 5\ndiscount_rate_2 = 7\nprofit_1 = profit\nprofit_2 = profit - 15\nsolution = solve_it([profit_1 - (100 - discount_rate_1) / 100 * profit_1, profit_2 - (100 - discount_rate_2) / 100 * profit_2], [profit, discount_rate])\nans = solution[profit]", "\ncost_price = Symbol('cost_price', positive=True)\ndiscount_5 = 0.05\ndiscount_7 = 0.07\ndiscount_difference = discount_7 - discount_5\nprofit_difference = 15\nsolution = solve_it(cost_price * discount_difference - profit_difference, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = Symbol('profit', positive=True)\nsolution = solve_it([selling_price - cost_price - profit, selling_price - cost_price * 0.95 - profit + 15, selling_price - cost_price * 0.93 - profit], [cost_price, profit])\nans = solution[selling_price]"], "generated_prediction": "750.0", "options": ["A)Rs. 697.50", "B)Rs. 712.50", "C)Rs. 787.50", "D)Rs. 750", "E)Rs. 780"], "answer": "D", "prediction": "D"}
{"question": "A student instead of finding the value of 7/8 of a number, found the value of 7/18 of the number. If his answer differed from the actual one by 770, find the that number.", "generated": ["\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 7 / 8 - number * 7 / 18 - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 7 / 8 - number * 7 / 18 - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 7 / 8 - number * 7 / 18 - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 7 / 8 - number * 7 / 18 - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 7 / 8 - number * 7 / 18 - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 7 / 8 - number * 7 / 18 - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 7 / 8 - number * 7 / 18 - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(actual_answer - wrong_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(actual_answer - wrong_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(actual_answer - wrong_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(wrong_answer - actual_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(wrong_answer - actual_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(wrong_answer - actual_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(wrong_answer - actual_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(wrong_answer - actual_answer - 770, number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(7 / 8 * num - 7 / 18 * num - 770, num)\nans = solution[num]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num * 7 / 8 - num * 7 / 18 - 770, num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(wrong_answer - actual_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nwrong_answer = 7 / 18 * number\nsolution = solve_it(wrong_answer - actual_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_value = 7 / 8 * number\nwrong_value = 7 / 18 * number\nsolution = solve_it(actual_value - wrong_value - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_value = 7 / 8 * number\nincorrect_value = 7 / 18 * number\nsolution = solve_it(incorrect_value - actual_value - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nmistaken_answer = 7 / 18 * number\nsolution = solve_it(mistaken_answer - actual_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nstudent_answer = 7 / 18 * number\nsolution = solve_it(student_answer - actual_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7/8 * number\nwrong_answer = 7/18 * number\nsolution = solve_it(wrong_answer - actual_answer - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_ans = 7 / 8 * number\nwrong_ans = 7 / 18 * number\nsolution = solve_it(actual_ans - wrong_ans - 770, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nactual_value = 7 / 8 * number\nstudent_value = 7 / 18 * number\nsolution = solve_it(student_value - actual_value - 770, number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nactual_value = 7 / 8 * num\nwrong_value = 7 / 18 * num\nsolution = solve_it(actual_value - wrong_value - 770, num)\nans = solution[num]", "\nnum = Symbol('num', positive=True)\nactual_value = 7 / 8 * num\nwrong_value = 7 / 18 * num\nsolution = solve_it(wrong_value - actual_value - 770, num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\nactual_answer = 7 / 8 * number\nstudent_answer = 7 / 18 * number\nsolution = solve_it(actual_answer - student_answer - 770, number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nactual_value = 7 * num / 8\nwrong_value = 7 * num / 18\nsolution = solve_it(wrong_value - actual_value - 770, num)\nans = solution[num]"], "generated_prediction": "1584.0", "options": ["A)1584", "B)2520", "C)1728", "D)1656", "E)None"], "answer": "A", "prediction": "A"}
{"question": "The monthly salary S of a shop assistant is the sum of a fixed salary of $500 plus 5% of all monthly sales. What should the monthly sales be so that her monthly salary reaches $1500?", "generated": ["\nmonthly_sales = Symbol('monthly_sales', positive=True)\nmonthly_salary = 500 + 0.05 * monthly_sales\nsolution = solve_it(monthly_salary - 1500, monthly_sales)\nans = solution[monthly_sales]", "\nmonthly_sales = Symbol('monthly_sales', positive=True)\nsalary = 500 + 0.05 * monthly_sales\nsolution = solve_it(salary - 1500, monthly_sales)\nans = solution[monthly_sales]", "\nmonthly_sales = Symbol('monthly_sales', positive=True)\nsalary = 500 + 0.05 * monthly_sales\nsolution = solve_it(salary - 1500, monthly_sales)\nans = solution[monthly_sales]", "\nfixed_salary = 500\nsales = Symbol('sales', positive=True)\nsolution = solve_it(fixed_salary + 0.05 * sales - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\nmonthly_sales = Symbol('monthly_sales', positive=True)\ntotal_salary = fixed_salary + 0.05 * monthly_sales\nsolution = solve_it(total_salary - 1500, monthly_sales)\nans = solution[monthly_sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\nsales = Symbol('sales', positive=True)\nsalary = fixed_salary + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\npercentage_of_sales = 0.05\ntarget_salary = 1500\nsales = (target_salary - fixed_salary) / percentage_of_sales\nans = sales", "\nfixed_salary = 500\npercentage_of_sales = 0.05\ntarget_salary = 1500\nsales = (target_salary - fixed_salary) / percentage_of_sales\nans = sales", "\nfixed_salary = 500\npercentage_of_sales = 0.05\ntotal_salary = 1500\nsales = (total_salary - fixed_salary) / percentage_of_sales\nans = sales", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\nsales = Symbol('sales', positive=True)\nsalary = fixed_salary + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\nsales = Symbol('sales', positive=True)\nsalary = fixed_salary + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\npercent_of_sales = 0.05\ndesired_salary = 1500\nsales = (desired_salary - fixed_salary) / percent_of_sales\nans = sales", "\nfixed_salary = 500\nsales = Symbol('sales', positive=True)\nsalary = fixed_salary + sales * 0.05\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\npercent_of_sales = 0.05\nmonthly_sales = Symbol('monthly_sales', positive=True)\nmonthly_salary = fixed_salary + percent_of_sales * monthly_sales\nsolution = solve_it(monthly_salary - 1500, monthly_sales)\nans = solution[monthly_sales]", "\nfixed_salary = 500\nsales = Symbol('sales', positive=True)\nmonthly_salary = fixed_salary + 0.05 * sales\nsolution = solve_it(monthly_salary - 1500, sales)\nans = solution[sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 1500\nfixed_salary = 500\nsolution = solve_it(sales * 0.05 + fixed_salary - salary, sales)\nans = solution[sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\nmonthly_sales = Symbol('monthly_sales', positive=True)\nsalary = fixed_salary + 0.05 * monthly_sales\nsolution = solve_it(salary - 1500, monthly_sales)\nans = solution[monthly_sales]", "\nsales = Symbol('sales', positive=True)\nsalary = 500 + 0.05 * sales\nsolution = solve_it(salary - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\nsales = Symbol('sales', positive=True)\nmonthly_salary = fixed_salary + 0.05 * sales\nsolution = solve_it(monthly_salary - 1500, sales)\nans = solution[sales]", "\nfixed_salary = 500\npercentage_of_sales = 5\nsalary_target = 1500\nsales_target = (salary_target - fixed_salary) / (percentage_of_sales / 100)\nans = sales_target"], "generated_prediction": "20000.0", "options": ["A)$50000", "B)$40000", "C)$30000", "D)$20000", "E)None of these"], "answer": "D", "prediction": "D"}
{"question": "An aeroplane flies along the four sides of a square at the speeds of 200, 400, 600 and 800km/hr. Find the average speed of the plane around the field?", "generated": ["\naverage_speed = (200 + 400 + 600 + 800) / 4\nans = average_speed", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\nans = (speed_1 + speed_2 + speed_3 + speed_4) / 4", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\nans = (speed_1 + speed_2 + speed_3 + speed_4) / 4", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\nans = (speed_1 + speed_2 + speed_3 + speed_4) / 4", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\nans = (speed_1 + speed_2 + speed_3 + speed_4) / 4", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\nans = (speed_1 + speed_2 + speed_3 + speed_4) / 4", "\nspeed1 = 200\nspeed2 = 400\nspeed3 = 600\nspeed4 = 800\nans = (speed1 + speed2 + speed3 + speed4) / 4", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\nans = (speed_1 + speed_2 + speed_3 + speed_4) / 4", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\nans = (speed_1 + speed_2 + speed_3 + speed_4) / 4", "\nsides = [200, 400, 600, 800]\nans = sum(sides) / len(sides)", "\nsides = [200, 400, 600, 800]\nans = sum(sides) / len(sides)", "\naverage_speed = Symbol('average_speed', positive=True)\nsolution = solve_it(average_speed - (200 + 400 + 600 + 800) / 4, average_speed)\nans = solution[average_speed]", "\ntotal_distance = 4 * 100\ntotal_time = total_distance / (200 + 400 + 600 + 800)\nans = total_distance / total_time", "\ntotal_distance = 4 * 100\ntotal_time = total_distance / (200 + 400 + 600 + 800)\nans = total_distance / total_time", "\nsides = [200, 400, 600, 800]\ntotal_distance = sum(sides)\ntotal_time = total_distance / (sum(sides) / len(sides))\nans = total_distance / total_time", "\naverage_speed = Symbol('average_speed', positive=True)\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\nsolution = solve_it(average_speed * 4 - (speed_1 + speed_2 + speed_3 + speed_4), average_speed)\nans = solution[average_speed]", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * (speed_1 + speed_2 + speed_3 + speed_4)\ntotal_time = 4 * (1 / speed_1 + 1 / speed_2 + 1 / speed_3 + 1 / speed_4)\nans = total_distance / total_time", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * (speed_1 + speed_2 + speed_3 + speed_4)\ntotal_time = 4 * (1 / speed_1 + 1 / speed_2 + 1 / speed_3 + 1 / speed_4)\nans = total_distance / total_time", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * math.sqrt(2)\ntotal_time = (1 / speed_1) + (1 / speed_2) + (1 / speed_3) + (1 / speed_4)\nans = total_distance / total_time", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * math.sqrt(2)\ntotal_time = (1 / speed_1 + 1 / speed_2 + 1 / speed_3 + 1 / speed_4)\nans = total_distance / total_time", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * speed_1\nans = total_distance / (speed_1 / speed_1 + speed_2 / speed_2 + speed_3 / speed_3 + speed_4 / speed_4)", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * math.sqrt(2)\ntotal_time = total_distance / (speed_1 + speed_2 + speed_3 + speed_4)\navg_speed = total_distance / total_time\nans = avg_speed", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\navg_speed = (speed_1 + speed_2 + speed_3 + speed_4) / 4\nans = avg_speed", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * speed_1\ntotal_time = total_distance / speed_1\navg_speed = total_distance / total_time\nans = avg_speed", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * speed_1\ntotal_time = total_distance / speed_1\navg_speed = total_distance / total_time\nans = avg_speed", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * speed_1\ntotal_time = total_distance / speed_1\nans = total_distance / total_time", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * speed_1\ntotal_time = total_distance / speed_1 + total_distance / speed_2 + total_distance / speed_3 + total_distance / speed_4\nans = total_distance / total_time", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * speed_1\ntotal_time = total_distance / speed_1\nans = total_distance / total_time", "\nspeed_1 = 200\nspeed_2 = 400\nspeed_3 = 600\nspeed_4 = 800\ntotal_distance = 4 * speed_1\ntotal_time = total_distance / speed_2 + total_distance / speed_3 + total_distance / speed_4\nans = total_distance / total_time", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime_taken_to_fly_along_side = distance / speed\ntotal_time_taken = 4 * time_taken_to_fly_along_side\naverage_speed = 4 * distance / total_time_taken\nsolution = solve_it(average_speed - 200, distance)\nans = solution[distance]"], "generated_prediction": "500.0", "options": ["A)384", "B)562", "C)458", "D)156", "E)452"], "answer": "A", "prediction": "B"}
{"question": "Jack buys 18 sharpeners (white and brown) for rs. 100. If he pays 1 rupee more for each white than brown sharpeners. How many of white and how many brown sharpeners did he buy?", "generated": ["\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners * 1 + brown_sharpeners * 1 - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\ntotal_sharpeners = 18\ntotal_cost = 100\nsolution = solve_it([white_sharpeners + brown_sharpeners - total_sharpeners, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - total_cost], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\ntotal_sharpeners = 18\ntotal_cost = 100\nsolution = solve_it([white_sharpeners + brown_sharpeners - total_sharpeners, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - total_cost], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\ntotal_sharpeners = 18\ntotal_cost = 100\nsolution = solve_it([white_sharpeners + brown_sharpeners - total_sharpeners, white_sharpeners + brown_sharpeners + white_sharpeners - total_cost], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nnum_white_sharpeners = Symbol('num_white_sharpeners', positive=True)\nnum_brown_sharpeners = Symbol('num_brown_sharpeners', positive=True)\ntotal_sharpeners = 18\ntotal_cost = 100\nsolution = solve_it([num_white_sharpeners + num_brown_sharpeners - total_sharpeners, num_white_sharpeners + num_brown_sharpeners - total_cost], [num_white_sharpeners, num_brown_sharpeners])\nans = (solution[num_white_sharpeners], solution[num_brown_sharpeners])", "\nnum_white = Symbol('num_white', positive=True)\nnum_brown = Symbol('num_brown', positive=True)\ncost_white = Symbol('cost_white', positive=True)\ncost_brown = Symbol('cost_brown', positive=True)\nsolution = solve_it([num_white + num_brown - 18, cost_white + cost_brown - 100, cost_white - cost_brown - 1], [num_white, num_brown, cost_white, cost_brown])\nans = (solution[num_white], solution[num_brown])", "\nnum_white = Symbol('num_white', positive=True)\nnum_brown = Symbol('num_brown', positive=True)\ntotal_num = 18\ntotal_cost = 100\nsolution = solve_it([num_white + num_brown - total_num, num_white - num_brown - 1, num_white + num_brown - total_cost], [num_white, num_brown])\nans = (solution[num_white], solution[num_brown])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nnum_white = Symbol('num_white', positive=True)\nnum_brown = Symbol('num_brown', positive=True)\ntotal_cost = 100\ncost_per_white = cost_per_brown + 1\nsolution = solve_it([num_white * cost_per_white + num_brown * cost_per_brown - total_cost, num_white + num_brown - 18], [num_white, num_brown])\nans = (solution[num_white], solution[num_brown])", "\nnum_brown = Symbol('num_brown', positive=True)\nnum_white = Symbol('num_white', positive=True)\ntotal_num = 18\ntotal_cost = 100\nsolution = solve_it([num_brown + num_white - total_num, num_brown + num_white * 2 - total_cost], [num_brown, num_white])\nans = (solution[num_brown], solution[num_white])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\nsolution = solve_it([white_sharpeners + brown_sharpeners - 18, white_sharpeners - brown_sharpeners - 1, white_sharpeners + brown_sharpeners - 100], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\ntotal_sharpeners = 18\ntotal_cost = 100\ncost_per_white_sharpeners = 1\nsolution = solve_it([white_sharpeners + brown_sharpeners - total_sharpeners, white_sharpeners * (cost_per_white_sharpeners + 1) + brown_sharpeners - total_cost], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\ntotal_sharpeners = 18\ntotal_cost = 100\ncost_of_white_sharpeners = white_sharpeners + 1\ncost_of_brown_sharpeners = brown_sharpeners\nsolution = solve_it([white_sharpeners + brown_sharpeners - total_sharpeners, cost_of_white_sharpeners * white_sharpeners + cost_of_brown_sharpeners * brown_sharpeners - total_cost], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nnum_white = Symbol('num_white', positive=True)\nnum_brown = Symbol('num_brown', positive=True)\nprice_white = Symbol('price_white', positive=True)\nprice_brown = Symbol('price_brown', positive=True)\nsolution = solve_it([num_white + num_brown - 18, price_white * num_white + price_brown * num_brown - 100, price_white - price_brown - 1], [num_white, num_brown, price_white])\nans = (solution[num_white], solution[num_brown])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\ntotal_sharpeners = 18\ntotal_cost = 100\nsolution = solve_it([white_sharpeners + brown_sharpeners - total_sharpeners, white_sharpeners + brown_sharpeners * 2 - total_cost], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nwhite_sharpeners = Symbol('white_sharpeners', positive=True)\nbrown_sharpeners = Symbol('brown_sharpeners', positive=True)\ntotal_sharpeners = 18\ntotal_price = 100\nsolution = solve_it([white_sharpeners + brown_sharpeners - total_sharpeners, white_sharpeners + brown_sharpeners * 1 - total_price], [white_sharpeners, brown_sharpeners])\nans = (solution[white_sharpeners], solution[brown_sharpeners])", "\nnum_white = Symbol('num_white', positive=True)\nnum_brown = Symbol('num_brown', positive=True)\ntotal_num = 18\ntotal_cost = 100\nsolution = solve_it([num_white + num_brown - total_num, num_white * (num_brown + 1) - total_cost], [num_white, num_brown])\nans = (solution[num_white], solution[num_brown])"], "generated_prediction": "(None, None)", "options": ["A)10,8", "B)9,8", "C)7,8", "D)5,6", "E)11,12"], "answer": "A", "prediction": "A"}
{"question": "Hoses A and B spout water at different constant rates, and hose A can fill a certain pool in 8 hours. Hose A filled the pool alone for the first 2 hours and the two hoses, working together, then finished filling the pool in another 3 hours. How many hours would it have taken hose B, working alone, to fill the entire pool?", "generated": ["\nrate_a = Symbol('rate_a', positive=True)\nrate_b = Symbol('rate_b', positive=True)\npool_size = Symbol('pool_size', positive=True)\nsolution = solve_it([rate_a * 8 - pool_size, rate_a * 2 + rate_b * 3 - pool_size], [rate_a, rate_b, pool_size])\nans = solution[pool_size] / solution[rate_b]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nsolution = solve_it([A * 2 + A * B * 3 - 8 * A, A * B * 3 - 8 * B], [A, B])\nans = 8 / solution[B]", "\nA_speed = Symbol('A_speed', positive=True)\nB_speed = Symbol('B_speed', positive=True)\npool_size = Symbol('pool_size', positive=True)\nsolution = solve_it([A_speed * 8 - pool_size, A_speed * 2 + B_speed * 3 - pool_size], [A_speed, B_speed])\nans = solution[B_speed] * 8", "\nrate_A = Symbol('rate_A', positive=True)\nrate_B = Symbol('rate_B', positive=True)\npool_volume = Symbol('pool_volume', positive=True)\ntime_A = 8\ntime_A_B = 3\nsolution = solve_it([rate_A * time_A - pool_volume, rate_A * time_A_B + rate_B * time_A_B - pool_volume], [rate_A, rate_B])\nans = pool_volume / solution[rate_B]", "\nA_speed = Symbol('A_speed', positive=True)\nB_speed = Symbol('B_speed', positive=True)\npool_size = Symbol('pool_size', positive=True)\nsolution = solve_it([A_speed * 2 + A_speed * B_speed * 3 - pool_size * 8, A_speed * B_speed * 3 - pool_size * 8], [A_speed, B_speed])\nans = solution[B_speed]", "\nrate_of_A = Symbol('rate_of_A', positive=True)\nrate_of_B = Symbol('rate_of_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_taken_by_A_alone = 8\ntime_taken_by_A_and_B = 3\nsolution = solve_it([rate_of_A * time_taken_by_A_alone - pool_size, rate_of_A * time_taken_by_A_and_B + rate_of_B * time_taken_by_A_and_B - pool_size], [rate_of_A, rate_of_B])\nans = pool_size / solution[rate_of_B]", "\nrate_of_A = Symbol('rate_of_A', positive=True)\nrate_of_B = Symbol('rate_of_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_taken_by_A_alone = 8\ntime_taken_by_A_and_B_together = 3\nsolution = solve_it([rate_of_A * time_taken_by_A_alone - pool_size, rate_of_A * time_taken_by_A_and_B_together + rate_of_B * time_taken_by_A_and_B_together - pool_size], [rate_of_A, rate_of_B])\nans = pool_size / solution[rate_of_B]", "\nrate_of_hose_A = Symbol('rate_of_hose_A', positive=True)\nrate_of_hose_B = Symbol('rate_of_hose_B', positive=True)\npool_volume = Symbol('pool_volume', positive=True)\nsolution = solve_it([rate_of_hose_A * 2 + rate_of_hose_B * 3 - pool_volume, rate_of_hose_A * 8 - pool_volume], [rate_of_hose_A, rate_of_hose_B])\nans = pool_volume / solution[rate_of_hose_B]", "\nrate_of_A = Symbol('rate_of_A', positive=True)\nrate_of_B = Symbol('rate_of_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_to_fill_pool_with_A = 8\ntime_to_fill_pool_with_B = Symbol('time_to_fill_pool_with_B', positive=True)\nsolution = solve_it([rate_of_A * time_to_fill_pool_with_A - pool_size, rate_of_A * 2 + rate_of_B * 3 - pool_size], [pool_size, time_to_fill_pool_with_B])\nans = solution[time_to_fill_pool_with_B]", "\nrate_of_A = Symbol('rate_of_A', positive=True)\nrate_of_B = Symbol('rate_of_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_taken_by_A = 8\ntime_taken_by_A_and_B = 3\nsolution = solve_it([rate_of_A * time_taken_by_A - pool_size, rate_of_A * time_taken_by_A_and_B + rate_of_B * time_taken_by_A_and_B - pool_size], [rate_of_A, rate_of_B])\nrate_of_A = solution[rate_of_A]\nrate_of_B = solution[rate_of_B]\nans = pool_size / rate_of_B", "\nrate_of_hose_a = Symbol('rate_of_hose_a', positive=True)\nrate_of_hose_b = Symbol('rate_of_hose_b', positive=True)\npool_capacity = Symbol('pool_capacity', positive=True)\ntime_taken_by_hose_a_alone = 8\ntime_taken_by_hose_a_and_b_together = 3\nsolution = solve_it([rate_of_hose_a * 2 + rate_of_hose_b * 3 - pool_capacity, rate_of_hose_a * 8 - pool_capacity], [rate_of_hose_a, rate_of_hose_b])\nans = pool_capacity / solution[rate_of_hose_b]", "\nrate_of_hose_A = Symbol('rate_of_hose_A', positive=True)\nrate_of_hose_B = Symbol('rate_of_hose_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\npool_filled_by_hose_A_in_2_hours = 2 * rate_of_hose_A\npool_filled_by_hose_A_and_B_in_3_hours = 3 * (rate_of_hose_A + rate_of_hose_B)\npool_filled_by_hose_A_in_8_hours = 8 * rate_of_hose_A\nsolution = solve_it([pool_filled_by_hose_A_in_2_hours + pool_filled_by_hose_A_and_B_in_3_hours - pool_filled_by_hose_A_in_8_hours, pool_filled_by_hose_A_in_2_hours - pool_size], [rate_of_hose_", "\nA = Symbol('A')\nB = Symbol('B')\ntime_taken_by_A = 2\ntime_taken_by_B = 3\nsolution = solve_it(A * (time_taken_by_A + time_taken_by_B) - B * time_taken_by_B, A)\nans = solution[A]", "\nrate_of_A = Symbol('rate_of_A', positive=True)\nrate_of_B = Symbol('rate_of_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_to_fill_pool_with_A = 8\ntime_to_fill_pool_with_A_and_B = 3\nsolution = solve_it([rate_of_A * time_to_fill_pool_with_A - pool_size, rate_of_A * time_to_fill_pool_with_A_and_B + rate_of_B * time_to_fill_pool_with_A_and_B - pool_size], [rate_of_A, rate_of_B])\nans = solution[rate_of_B] * time_to_fill_pool_with_A_and_B", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\npool_filling_time = 8\nsolution = solve_it([A * 2 + A * B * 3 - pool_filling_time * A, A * 2 + A * B * 3 - pool_filling_time * B], [A, B])\nans = solution[B]", "\nrate_of_hose_A = Symbol('rate_of_hose_A', positive=True)\nrate_of_hose_B = Symbol('rate_of_hose_B', positive=True)\npool_volume = Symbol('pool_volume', positive=True)\ntime_taken_by_hose_A_alone = 2\ntime_taken_by_hose_A_and_B_together = 3\ntime_taken_by_hose_A_alone_to_fill_pool = 8\nsolution = solve_it([rate_of_hose_A * time_taken_by_hose_A_alone + rate_of_hose_B * time_taken_by_hose_A_alone - pool_volume, rate_of_hose_A * time_taken_by_hose_A_and_B_together + rate_of_hose_B * time_taken_by_hose_A_and_B_together - pool_volume, rate_of_hose_A * time_taken_by_h", "\nhose_a_rate = Symbol('hose_a_rate', positive=True)\nhose_b_rate = Symbol('hose_b_rate', positive=True)\npool_volume = Symbol('pool_volume', positive=True)\nsolution = solve_it([hose_a_rate * 2 + hose_b_rate * 3 - pool_volume, hose_a_rate * 8 - pool_volume], [hose_a_rate, hose_b_rate, pool_volume])\nans = solution[pool_volume] / solution[hose_b_rate]", "\nrate_of_A = Symbol('rate_of_A', positive=True)\nrate_of_B = Symbol('rate_of_B', positive=True)\ntime_taken_by_A = 8\ntime_taken_by_A_and_B = 3\nsolution = solve_it([rate_of_A * time_taken_by_A - rate_of_A * 2 - rate_of_B * time_taken_by_A_and_B, rate_of_A + rate_of_B - rate_of_A * time_taken_by_A_and_B], [rate_of_A, rate_of_B])\nans = solution[rate_of_B] * time_taken_by_A", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\npool_size = Symbol('pool_size', positive=True)\nsolution = solve_it([A * 2 + A * B * 3 - pool_size * 8, A * 2 + A * B * 3 - pool_size * 12], [A, B])\nans = solution[B]", "\nrate_of_A = Symbol('rate_of_A', positive=True)\nrate_of_B = Symbol('rate_of_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\npool_filled_by_A_in_2_hours = 2 * rate_of_A\npool_filled_by_A_and_B_in_3_hours = 3 * (rate_of_A + rate_of_B)\npool_filled_by_A_in_8_hours = 8 * rate_of_A\nsolution = solve_it([pool_filled_by_A_in_2_hours + pool_filled_by_A_and_B_in_3_hours - pool_filled_by_A_in_8_hours, pool_filled_by_A_in_2_hours + pool_filled_by_A_and_B_in_3_hours - pool_size], [rate_of_A, rate_of_B])\nans = pool_size / solution[rate_of_B]", "\nrate_A = Symbol('rate_A', positive=True)\nrate_B = Symbol('rate_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_A = 8\ntime_AB = 3\nsolution = solve_it([rate_A * time_A - pool_size, rate_A * time_AB + rate_B * time_AB - pool_size], [rate_A, rate_B])\nans = solution[rate_B] * time_A", "\nhose_a_speed = Symbol('hose_a_speed', positive=True)\nhose_b_speed = Symbol('hose_b_speed', positive=True)\npool_size = Symbol('pool_size', positive=True)\nhose_a_speed_for_2_hours = 2 * hose_a_speed\nhose_b_speed_for_3_hours = 3 * hose_b_speed\nsolution = solve_it([hose_a_speed_for_2_hours + hose_b_speed_for_3_hours - pool_size, hose_a_speed - 8 * hose_b_speed], [hose_a_speed, hose_b_speed])\nans = 8 / solution[hose_b_speed]", "\nrate_of_hose_A = Symbol('rate_of_hose_A', positive=True)\nrate_of_hose_B = Symbol('rate_of_hose_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_taken_by_A = 8\ntime_taken_by_A_and_B = 3\nsolution = solve_it([rate_of_hose_A * 2 + rate_of_hose_B * 3 - pool_size, rate_of_hose_A * 8 - pool_size], [rate_of_hose_A, rate_of_hose_B])\nans = pool_size / solution[rate_of_hose_B]", "\nrate_of_A = Symbol('rate_of_A', positive=True)\nrate_of_B = Symbol('rate_of_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_taken_by_A = 8\ntime_taken_by_A_and_B = 3\ntime_taken_by_B = Symbol('time_taken_by_B', positive=True)\nsolution = solve_it([rate_of_A * time_taken_by_A - pool_size, rate_of_A * 2 + rate_of_B * time_taken_by_A_and_B - pool_size, rate_of_B * time_taken_by_B - pool_size], [rate_of_A, rate_of_B, time_taken_by_B])\nans = solution[time_taken_by_B]", "\nrate_of_hose_a = Symbol('rate_of_hose_a', positive=True)\nrate_of_hose_b = Symbol('rate_of_hose_b', positive=True)\npool_volume = Symbol('pool_volume', positive=True)\ntime_taken_by_hose_a_alone = 8\ntime_taken_by_hose_a_and_b_together = 3\ntime_taken_by_hose_a_alone_for_2_hours = 2\nsolution = solve_it([rate_of_hose_a * time_taken_by_hose_a_alone - pool_volume, rate_of_hose_a * time_taken_by_hose_a_alone_for_2_hours + rate_of_hose_b * time_taken_by_hose_a_and_b_together - pool_volume], [rate_of_hose_a, rate_of_hose_b, pool_volume])\nans = solution[rate_of_hose_b] *", "\nrate_of_hose_A = Symbol('rate_of_hose_A', positive=True)\nrate_of_hose_B = Symbol('rate_of_hose_B', positive=True)\npool_volume = Symbol('pool_volume', positive=True)\ntime_to_fill_pool_alone_A = 8\ntime_to_fill_pool_alone_B = Symbol('time_to_fill_pool_alone_B', positive=True)\ntime_to_fill_pool_together = 3\nsolution = solve_it([rate_of_hose_A * 2 + rate_of_hose_B * time_to_fill_pool_alone_B - pool_volume, rate_of_hose_A * time_to_fill_pool_alone_A + rate_of_hose_B * time_to_fill_pool_alone_B - pool_volume, time_to_fill_pool_alone_B - time_to_fill_pool_together], [rate_of_hose_A, rate_of_hose_B, time_to", "\nrate_of_hose_A = Symbol('rate_of_hose_A', positive=True)\nrate_of_hose_B = Symbol('rate_of_hose_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_taken_by_hose_A_alone = 8\ntime_taken_by_hose_A_and_B_together = 3\nsolution = solve_it([rate_of_hose_A * time_taken_by_hose_A_alone - pool_size, rate_of_hose_A * time_taken_by_hose_A_and_B_together + rate_of_hose_B * time_taken_by_hose_A_and_B_together - pool_size], [rate_of_hose_A, rate_of_hose_B])\nans = pool_size / solution[rate_of_hose_B]", "\nhose_a_rate = Symbol('hose_a_rate', positive=True)\nhose_b_rate = Symbol('hose_b_rate', positive=True)\ntime_to_fill_pool_alone = 8\ntime_to_fill_pool_together = 3\npool_filled_by_hose_a_alone = 2 * hose_a_rate\npool_filled_by_hose_a_and_b_together = 3 * (hose_a_rate + hose_b_rate)\nsolution = solve_it([pool_filled_by_hose_a_alone + pool_filled_by_hose_a_and_b_together - time_to_fill_pool_alone * hose_a_rate, pool_filled_by_hose_a_and_b_together - time_to_fill_pool_together * (hose_a_rate + hose_b_rate)], [hose_a_rate, hose_b_rate])\nans = solution[hose_b_rate] * time_to_fill_pool_alone", "\nrate_of_A = Symbol('rate_of_A', positive=True)\nrate_of_B = Symbol('rate_of_B', positive=True)\npool_size = Symbol('pool_size', positive=True)\ntime_taken_by_A = 8\ntime_taken_by_A_and_B = 3\ntime_taken_by_B = time_taken_by_A_and_B - 2\nsolution = solve_it([rate_of_A * time_taken_by_A - pool_size, rate_of_A * time_taken_by_A_and_B + rate_of_B * time_taken_by_B - pool_size], [rate_of_A, rate_of_B])\nans = time_taken_by_B * solution[rate_of_B] / solution[rate_of_B]", "\nA = Symbol('A')\nB = Symbol('B')\ntime_to_fill_pool_by_A = 8\ntime_to_fill_pool_by_A_and_B = 3\ntime_to_fill_pool_by_B_alone = Symbol('time_to_fill_pool_by_B_alone')\nsolution = solve_it([A * 2 + A * B * time_to_fill_pool_by_B_alone - A * time_to_fill_pool_by_A, A * B * time_to_fill_pool_by_B_alone - A * B * time_to_fill_pool_by_A_and_B], [time_to_fill_pool_by_B_alone])\nans = solution[time_to_fill_pool_by_B_alone]"], "generated_prediction": "4.0", "options": ["A)8", "B)15", "C)12", "D)6", "E)3"], "answer": "A", "prediction": "D"}
{"question": "If 120 is reduced to 96, what is the reduction percent?", "generated": ["\noriginal_value = 120\nreduced_value = 96\nans = (original_value - reduced_value) / original_value", "\noriginal_value = 120\nreduced_value = 96\nans = (original_value - reduced_value) / original_value", "\noriginal_value = 120\nreduced_value = 96\nans = (original_value - reduced_value) / original_value", "\noriginal_value = 120\nreduced_value = 96\nans = (original_value - reduced_value) / original_value", "\noriginal_value = 120\nreduced_value = 96\nans = (original_value - reduced_value) / original_value", "\noriginal_value = 120\nreduced_value = 96\nans = (original_value - reduced_value) / original_value", "\noriginal = 120\nreduced = 96\nreduction_percent = (original - reduced) / original * 100\nans = reduction_percent", "\noriginal = 120\nreduced = 96\nreduction = original - reduced\nans = reduction / original", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = 100 * (original_value - reduced_value) / original_value\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction = original_value - reduced_value\nans = reduction / original_value", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction = original_value - reduced_value\nans = reduction / original_value", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = (original_value - reduced_value) / original_value * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction = original_value - reduced_value\nans = reduction / original_value", "\noriginal_value = 120\nreduced_value = 96\nreduction_percent = 100 * (original_value - reduced_value) / original_value\nans = reduction_percent", "\noriginal = 120\nreduced = 96\nreduction = original - reduced\nreduction_percent = reduction / original * 100\nans = reduction_percent", "\noriginal_value = 120\nreduced_value = 96\nreduction = original_value - reduced_value\nans = reduction / original_value", "\noriginal_value = 120\nreduced_value = 96\nreduction = original_value - reduced_value\nans = reduction / original_value"], "generated_prediction": "0.2", "options": ["A)30%", "B)40%", "C)20%", "D)10%", "E)5%"], "answer": "C", "prediction": "C"}
{"question": "I know a 5 digit number having a property that with a 1 after it, it is three times as large as it would be with a 1 before it.\nWhat is that number?", "generated": ["\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number + 1 - 3 * (number + 1) * 1000, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 100000 + 1 - 3 * (number + 100000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 100000 + 1 - 3 * (number + 100000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 1000 * number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 100000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1001 - 3 * (number * 100000 + 1), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 100000 + 1 - 3 * (1 + number), number)\nans = int(solution[number])", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + 1 - 3 * (number + 100000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 100000 + 1 - 3 * (1 + number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 100000 + 1 - 3 * (1 + number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 10000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 10000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 10000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 10000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 10000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 1000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 1000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 1000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 1000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 1000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 10000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 10000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 10000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 100000 + 1 - 3 * (number * 100000 + 1), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 1000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 1000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + 1 - 3 * (number + 1000), number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num * 1000 + num - 3 * (num + 1000), num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1000 + number - 3 * (number + 1000), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 3 - (number * 100000 + 1), number)\nans = solution[number]"], "generated_prediction": "3.01", "options": ["A)42857", "B)32456", "C)76523", "D)24567", "E)43566"], "answer": "A", "prediction": "A"}
{"question": "At Daifu university, 24% of all students are members of both a chess club and a swim team. If 20% of members of the swim team are not members of the chess club, what percentage of all Daifu students are members of the swim team?", "generated": ["\nswim_team_members = 0.24 * 0.8 + 0.2\nans = swim_team_members", "\nnum_students = 100\nchess_club_members = 0.24 * num_students\nswim_team_members = 0.2 * (num_students - chess_club_members) + chess_club_members\nans = swim_team_members / num_students", "\nnum_students = 100\nnum_students_in_both_clubs = 24\nnum_students_in_swim_team_only = 20\nnum_students_in_swim_team = num_students_in_both_clubs + num_students_in_swim_team_only\nans = num_students_in_swim_team / num_students", "\ntotal_students = 100\nstudents_in_chess_club = 24\nstudents_in_swim_team = 20\nstudents_in_both = students_in_chess_club - students_in_swim_team\nstudents_in_swim_team_only = students_in_swim_team - students_in_both\nans = students_in_swim_team_only / total_students", "\ntotal_students = 100\nstudents_in_chess_club = 24\nstudents_in_swim_team = 20\nstudents_in_both = students_in_chess_club - students_in_swim_team\nstudents_in_swim_team = total_students - students_in_both\nans = students_in_swim_team / total_students", "\ntotal_students = 100\nstudents_in_chess_club = 24\nstudents_in_swim_team = 20\nstudents_in_both = 24\nstudents_in_swim_team_only = students_in_swim_team - students_in_both\nans = (students_in_swim_team_only + students_in_both) / total_students", "\nswim_team_members = Symbol('swim_team_members', positive=True)\nchess_club_members = Symbol('chess_club_members', positive=True)\nall_students = 100\nsolution = solve_it([swim_team_members + chess_club_members - 24, swim_team_members - chess_club_members - 20], [swim_team_members, chess_club_members])\nans = solution[swim_team_members] / all_students", "\ntotal_students = 100\nchess_club_members = 24\nswim_team_members = 20\nsolution = solve_it([total_students * chess_club_members - 24, total_students * swim_team_members - 20], [total_students, chess_club_members])\nans = solution[chess_club_members]", "\ntotal_students = 100\npercentage_students_in_both_clubs = 24\npercentage_students_in_swim_club_only = 20\npercentage_students_in_swim_club = percentage_students_in_both_clubs + percentage_students_in_swim_club_only\nans = percentage_students_in_swim_club", "\nstudents_in_chess_club = 0.24\nstudents_in_swim_team = 0.2\nstudents_in_both_clubs = students_in_chess_club - students_in_swim_team\nstudents_in_swim_team = students_in_both_clubs / (1 - students_in_swim_team)\nans = students_in_swim_team", "\nswim_team_members = Symbol('swim_team_members', positive=True)\nchess_club_members = Symbol('chess_club_members', positive=True)\ntotal_students = 100\nsolution = solve_it([swim_team_members + chess_club_members - 24, swim_team_members - 20], [swim_team_members, chess_club_members])\nans = solution[swim_team_members]", "\ntotal_students = 100\nchess_club_members = 0.24 * total_students\nswim_team_members = 0.2 * (1 - chess_club_members) + chess_club_members\nans = swim_team_members / total_students", "\ntotal_students = 100\nstudents_in_chess_club = 24\nstudents_in_swim_team = 20\nstudents_in_both = 24\nstudents_in_swim_team_but_not_chess_club = students_in_swim_team - students_in_both\nans = students_in_swim_team_but_not_chess_club / total_students", "\nnum_students = 100\nnum_students_in_chess_club = 24\nnum_students_in_swim_team = 20\nnum_students_in_both = num_students_in_chess_club - num_students_in_swim_team\nnum_students_in_swim_team = num_students - num_students_in_both\nans = num_students_in_swim_team / num_students", "\nstudents = 100\nchess_club_members = 0.24 * students\nswim_team_members = 0.2 * students\nswim_team_members_not_in_chess_club = 0.2 * swim_team_members\nswim_team_members_in_chess_club = swim_team_members - swim_team_members_not_in_chess_club\nans = swim_team_members_in_chess_club / chess_club_members", "\nswim_team_members = Symbol('swim_team_members', positive=True)\nchess_club_members = Symbol('chess_club_members', positive=True)\ntotal_students = 100\nsolution = solve_it([swim_team_members * chess_club_members - 24, swim_team_members - 20, chess_club_members - 80], [swim_team_members, chess_club_members])\nans = solution[swim_team_members]", "\ntotal_students = 100\nchess_club_students = 24\nswim_team_students = 20\nchess_club_and_swim_team_students = 24\nchess_club_not_swim_team_students = chess_club_students - chess_club_and_swim_team_students\nswim_team_students = chess_club_and_swim_team_students + chess_club_not_swim_team_students\nans = swim_team_students / total_students", "\nstudents = 100\nstudents_in_both_clubs = 24\nstudents_in_swim_team_not_in_chess_club = 20\nstudents_in_swim_team = students_in_both_clubs + students_in_swim_team_not_in_chess_club\nans = students_in_swim_team / students", "\nchess_club_members = 24\nswim_team_members = 20\nnon_chess_club_members = 100 - chess_club_members\nchess_club_members_not_in_swim_team = chess_club_members - swim_team_members\nswim_team_members_not_in_chess_club = non_chess_club_members - chess_club_members_not_in_swim_team\nans = (swim_team_members + swim_team_members_not_in_chess_club) / 100", "\ntotal_students = 100\nchess_club_members = 24\nswim_team_members = 20\nsolution = solve_it([total_students * chess_club_members / 100 - 24, total_students * swim_team_members / 100 - 20], [total_students, chess_club_members])\nans = solution[swim_team_members]", "\nswim_team_members = Symbol('swim_team_members', positive=True)\nchess_club_members = Symbol('chess_club_members', positive=True)\ntotal_students = 100\nchess_club_and_swim_team_members = 0.24 * total_students\nswim_team_members_not_in_chess_club = 0.2 * swim_team_members\nsolution = solve_it([chess_club_and_swim_team_members - chess_club_members * swim_team_members, chess_club_members - swim_team_members - swim_team_members_not_in_chess_club], [chess_club_members, swim_team_members])\nans = solution[swim_team_members] / total_students", "\ntotal_students = 100\nchess_club_students = 24\nswim_team_students = 20\nsolution = solve_it([chess_club_students - swim_team_students, total_students - chess_club_students], [swim_team_students, total_students])\nans = solution[swim_team_students]", "\nchess_club_members = 0.24\nswim_team_members = 0.2\nnon_chess_club_members = 0.8\ntotal_students = 1\nswim_team_members = chess_club_members / (chess_club_members + non_chess_club_members)\nans = swim_team_members / total_students", "\nstudents = 100\nchess_club_members = 0.24 * students\nswim_team_members = 0.2 * students\nswim_team_members_not_in_chess_club = 0.2 * swim_team_members\nswim_team_members_in_chess_club = swim_team_members - swim_team_members_not_in_chess_club\nchess_club_members_not_in_swim_team = chess_club_members - swim_team_members_in_chess_club\nswim_team_members_not_in_chess_club = swim_team_members - swim_team_members_in_chess_club\nans = (swim_team_members_in_chess_club + swim_team_members_not_in_chess_club) / students", "\nswim_team_members = Symbol('swim_team_members', positive=True)\nchess_club_members = Symbol('chess_club_members', positive=True)\ntotal_students = 100\nchess_club_and_swim_team_members = 24\nchess_club_members_not_in_swim_team = 20\nsolution = solve_it([swim_team_members - chess_club_and_swim_team_members - chess_club_members_not_in_swim_team, total_students - chess_club_and_swim_team_members - chess_club_members_not_in_swim_team], [swim_team_members, chess_club_members])\nans = solution[swim_team_members] / total_students", "\ntotal_students = 100\nchess_club_members = 24\nswim_team_members = 20\nsolution = solve_it([total_students * chess_club_members - total_students * chess_club_members * swim_team_members / 100, total_students * swim_team_members - total_students * chess_club_members * swim_team_members / 100], [chess_club_members, swim_team_members])\nans = solution[swim_team_members]", "\nstudents_in_swim_team = Symbol('students_in_swim_team', positive=True)\nstudents_in_chess_club = Symbol('students_in_chess_club', positive=True)\nstudents_in_both = 0.24\nstudents_in_swim_team_not_in_chess_club = 0.2\nsolution = solve_it([students_in_both - students_in_chess_club * students_in_swim_team, students_in_swim_team - students_in_swim_team_not_in_chess_club - students_in_chess_club], [students_in_chess_club, students_in_swim_team])\nans = solution[students_in_swim_team]", "\nstudents = 100\nchess_club_members = 24\nswim_team_members = 20\nnon_chess_club_members = swim_team_members\nsolution = solve_it([chess_club_members - non_chess_club_members, non_chess_club_members - swim_team_members], [non_chess_club_members, swim_team_members])\nans = solution[swim_team_members]", "\nchess_club_members = 0.24\nswim_team_members = 0.2\nnon_chess_club_members = 0.8\nswim_team_members_not_in_chess_club = swim_team_members * non_chess_club_members\nswim_team_members_in_chess_club = swim_team_members - swim_team_members_not_in_chess_club\nswim_team_members_not_in_chess_club = swim_team_members - swim_team_members_in_chess_club\nans = (swim_team_members_in_chess_club + swim_team_members_not_in_chess_club) / (1 - chess_club_members)", "\nchess_club_members = 0.24\nswim_team_members = 0.2\nnon_chess_club_members = 0.8\nnon_swim_team_members = 0.8\nswim_team_members_not_in_chess_club = 0.2 * non_chess_club_members\nans = swim_team_members_not_in_chess_club / non_swim_team_members"], "generated_prediction": "0.392", "options": ["A)20%", "B)30%", "C)40%", "D)50%", "E)60%"], "answer": "B", "prediction": "B"}
{"question": "If the population of a city increases by 5 % annually, what will be the population of the city in 2 years time if its current population is 78000?", "generated": ["\npopulation = Symbol('population', positive=True)\nsolution = solve_it(population * (1 + 5 / 100) ** 2 - 78000, population)\nans = solution[population]", "\npopulation = 78000\ngrowth_rate = 0.05\nans = population * (1 + growth_rate) ** 2", "\npopulation = 78000\nfor i in range(2):\n    population = population * 1.05\nans = population", "\npopulation = 78000\nfor i in range(2):\n    population = population * (1 + 5 / 100)\nans = population", "\npopulation = 78000\nfor i in range(2):\n    population = population * 1.05\nans = population", "\npopulation = 78000\nfor _ in range(2):\n    population = population * 1.05\nans = population", "\npopulation = 78000\nannual_increase = 0.05\npopulation_in_2_years = population * (1 + annual_increase) ** 2\nans = population_in_2_years", "\ncurrent_population = 78000\nannual_growth_rate = 0.05\npopulation_in_2_years = current_population * (1 + annual_growth_rate) ** 2\nans = population_in_2_years", "\ncurrent_population = 78000\npopulation_increase_rate = 0.05\npopulation_in_2_years = current_population * (1 + population_increase_rate) ** 2\nans = population_in_2_years", "\npopulation = 78000\nfor year in range(2):\n    population = population * 1.05\nans = population", "\npopulation = Symbol('population', positive=True)\ngrowth_rate = 5\nsolution = solve_it(population * (1 + growth_rate / 100) ** 2 - 78000, population)\nans = solution[population]", "\npopulation = Symbol('population', positive=True)\npopulation_increase = 0.05\nsolution = solve_it(population * (1 + population_increase) ** 2 - 78000, population)\nans = solution[population]", "\npopulation = 78000\nfor year in range(2):\n    population = population * 1.05\nans = population", "\ncurrent_population = 78000\nannual_increase = 0.05\npopulation_in_2_years = current_population * (1 + annual_increase) ** 2\nans = population_in_2_years", "\npopulation = Symbol('population', positive=True)\nincrease_percentage = 5\nsolution = solve_it(population * (1 + increase_percentage / 100) ** 2 - 78000, population)\nans = solution[population]", "\npopulation = Symbol('population', positive=True)\npopulation_in_2_years = population * (1 + 0.05) ** 2\nsolution = solve_it(population_in_2_years - 78000, population)\nans = solution[population]", "\npopulation = Symbol('population', positive=True)\npopulation_in_2_years = population * (1 + 0.05) ** 2\nsolution = solve_it(population_in_2_years - 85800, population)\nans = solution[population]", "\npopulation = Symbol('population', positive=True)\nincrease_percentage = 5\nnum_years = 2\nsolution = solve_it(population * (1 + increase_percentage / 100) ** num_years - 78000, population)\nans = solution[population]", "\npopulation = Symbol('population', positive=True)\nsolution = solve_it(population * 1.05 ** 2 - 78000, population)\nans = solution[population]", "\npopulation = 78000\nannual_increase_percentage = 5\npopulation_in_2_years = population * (1 + annual_increase_percentage / 100) ** 2\nans = population_in_2_years", "\ncurrent_population = 78000\npopulation_increase = 0.05\npopulation_in_2_years = current_population * (1 + population_increase) ** 2\nans = population_in_2_years", "\npopulation = Symbol('population', positive=True)\nsolution = solve_it(population * 1.05 ** 2 - 78000, population)\nans = solution[population]", "\npopulation = Symbol('population', positive=True)\nans = population * (1 + 5 / 100) ** 2", "\npopulation = 78000\npopulation_in_2_years = population * (1.05 ** 2)\nans = population_in_2_years", "\npopulation = Symbol('population', positive=True)\npopulation_increase_rate = 0.05\nsolution = solve_it(population * (1 + population_increase_rate) ** 2 - 78000, population)\nans = solution[population]", "\npopulation = Symbol('population', positive=True)\nsolution = solve_it(population * 1.05 ** 2 - 78000, population)\nans = solution[population]", "\npopulation = 78000\npopulation_increase_rate = 0.05\npopulation_in_2_years = population * (1 + population_increase_rate) ** 2\nans = population_in_2_years", "\npopulation = Symbol('population', positive=True)\nsolution = solve_it(population * 1.05 ** 2 - 78000, population)\nans = solution[population]", "\ncurrent_population = 78000\nannual_increase_percentage = 5\npopulation_in_2_years = current_population * (1 + annual_increase_percentage / 100) ** 2\nans = population_in_2_years", "\ncurrent_population = 78000\nannual_increase_percentage = 5\npopulation_in_2_years = current_population * (1 + annual_increase_percentage / 100) ** 2\nans = population_in_2_years"], "generated_prediction": "85995.0", "options": ["A)81900", "B)85995", "C)85800", "D)90000", "E)None of these"], "answer": "B", "prediction": "B"}
{"question": "Two cars start at the same time from opposite ends of a highway that is 50 miles long. One car is riding at 12 mph and the second car is riding at 13 mph. How long after they begin will they meet?", "generated": ["\nspeed_1 = 12\nspeed_2 = 13\ndistance = 50\nans = distance / (speed_1 + speed_2)", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\nans = distance / (speed_1 + speed_2)", "\ndistance = 50\ncar1_speed = 12\ncar2_speed = 13\ntime_taken = distance / (car1_speed + car2_speed)\nans = time_taken", "\nspeed_1 = 12\nspeed_2 = 13\ndistance = 50\ntime = distance / (speed_1 + speed_2)\nans = time", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = distance / (speed_1 + speed_2)\nans = time", "\ndistance = 50\ncar_1_speed = 12\ncar_2_speed = 13\ntime = distance / (car_1_speed + car_2_speed)\nans = time", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = distance / (speed_1 + speed_2)\nans = time", "\ndistance = 50\ncar_1_speed = 12\ncar_2_speed = 13\ntime_to_meet = distance / (car_1_speed + car_2_speed)\nans = time_to_meet", "\ndistance = 50\ncar_1_speed = 12\ncar_2_speed = 13\ntime_to_meet = distance / (car_1_speed + car_2_speed)\nans = time_to_meet", "\ncar1_speed = 12\ncar2_speed = 13\ndistance = 50\ntime = Symbol('time', positive=True)\nsolution = solve_it(car1_speed * time - car2_speed * time - distance, time)\nans = solution[time]", "\ndistance = 50\ncar1_speed = 12\ncar2_speed = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance / car1_speed + distance / car2_speed - time, time)\nans = solution[time]", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime_to_meet = distance / (speed_1 + speed_2)\nans = time_to_meet", "\ndistance = 50\nspeed1 = 12\nspeed2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance - speed1 * time - speed2 * time, time)\nans = solution[time]", "\ndistance = 50\ncar1_speed = 12\ncar2_speed = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance - car1_speed * time - car2_speed * time, time)\nans = solution[time]", "\ndistance = 50\nspeed_car_1 = 12\nspeed_car_2 = 13\ntime_to_meet = distance / (speed_car_1 + speed_car_2)\nans = time_to_meet", "\ndistance = 50\nspeed_of_first_car = 12\nspeed_of_second_car = 13\ntime = distance / (speed_of_first_car + speed_of_second_car)\nans = time", "\ndistance = 50\nspeed_of_car_1 = 12\nspeed_of_car_2 = 13\ntime_to_meet = distance / (speed_of_car_1 + speed_of_car_2)\nans = time_to_meet", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance / speed_1 + distance / speed_2 - time, time)\nans = solution[time]", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance - speed_1 * time - speed_2 * time, time)\nans = solution[time]", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance - speed_1 * time - speed_2 * time, time)\nans = solution[time]", "\ndistance = 50\nspeed_car_1 = 12\nspeed_car_2 = 13\ntime_taken = distance / (speed_car_1 + speed_car_2)\nans = math.ceil(time_taken)", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance - speed_1 * time - speed_2 * time, time)\nans = solution[time]", "\ndistance = 50\ncar_1_speed = 12\ncar_2_speed = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(car_1_speed * time - car_2_speed * time - distance, time)\nans = solution[time]", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance / speed_1 - distance / speed_2 - time, time)\nans = solution[time]", "\ndistance = 50\nspeed_car_1 = 12\nspeed_car_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance / speed_car_1 - distance / speed_car_2 - time, time)\nans = solution[time]", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance / speed_1 + distance / speed_2 - time, time)\nans = solution[time]", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance - (speed_1 + speed_2) * time, time)\nans = solution[time]", "\ndistance = 50\nspeed_1 = 12\nspeed_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance - time * speed_1 - time * speed_2, time)\nans = solution[time]", "\ndistance = 50\nspeed_car_1 = 12\nspeed_car_2 = 13\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance / speed_car_1 - distance / speed_car_2 - time, time)\nans = solution[time]", "\ndistance = 50\ncar_1_speed = 12\ncar_2_speed = 13\ntime_taken = distance / (car_1_speed + car_2_speed)\nans = time_taken"], "generated_prediction": "2.0", "options": ["A) 1", "B) 1.25", "C) 1.50", "D) 1.75", "E) 2"], "answer": "E", "prediction": "E"}
{"question": "A shopkeeper employed a servant at a monthly salary of 1500. In addition to it, he agreed to pay him a commission of 15% on the monthly sale. How much sale in Rupees should the servant do if he wants his monthly income as 6000?", "generated": ["\nsalary = 1500\ncommission = 0.15\ntarget_income = 6000\nsolution = solve_it(salary + commission * x - target_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 0.15\ntarget_income = 6000\nsolution = solve_it(salary + commission * x - target_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 0.15\ntarget_income = 6000\nsolution = solve_it(salary + commission * x - target_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 0.15\ntarget_income = 6000\nsolution = solve_it(salary + commission * x - target_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission_rate = 0.15\nmonthly_income = 6000\nsolution = solve_it(salary + commission_rate * x - monthly_income, x)\nans = solution[x]", "\nmonthly_salary = 1500\ncommission = 0.15\nmonthly_income = 6000\nsolution = solve_it(monthly_salary + commission * x - monthly_income, x)\nans = solution[x]", "\nmonthly_salary = 1500\ncommission = 0.15\nmonthly_income = 6000\nsolution = solve_it(monthly_salary + commission * x - monthly_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission_rate = 0.15\nincome = 6000\nsolution = solve_it(salary + commission_rate * x - income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 0.15\nincome = 6000\nsolution = solve_it(salary + commission * x - income, x)\nans = solution[x]", "\nmonthly_salary = 1500\ncommission = 0.15\ntarget_income = 6000\nsolution = solve_it(monthly_salary + commission * x - target_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 0.15\nmonthly_income = 6000\nsolution = solve_it(salary + commission * monthly_income - 6000, monthly_income)\nans = solution[monthly_income]", "\nsalary = 1500\ncommission = 0.15\nincome = 6000\nsolution = solve_it(salary + commission * x - income, x)\nans = solution[x]", "\nsalary = 1500\ncommission_rate = 0.15\ntarget_income = 6000\nsolution = solve_it(salary + commission_rate * x - target_income, x)\nans = solution[x]", "\nmonthly_salary = 1500\ncommission = 0.15\ndesired_monthly_income = 6000\nsolution = solve_it(monthly_salary + commission * x - desired_monthly_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 0.15\nincome = 6000\nsolution = solve_it(salary + commission * income - 6000, income)\nans = solution[income]", "\nsalary = 1500\ncommission = 0.15\nincome = 6000\nsolution = solve_it(salary + commission * income - 6000, income)\nans = solution[income]", "\nmonthly_salary = 1500\ncommission = 0.15\nmonthly_income = 6000\nsolution = solve_it(monthly_salary + commission * monthly_sale - monthly_income, monthly_sale)\nans = solution[monthly_sale]", "\nmonthly_salary = 1500\ncommission = 0.15\nmonthly_income = 6000\nsolution = solve_it(monthly_salary + commission * monthly_income - monthly_income, monthly_income)\nans = solution[monthly_income]", "\nmonthly_income = 6000\nmonthly_salary = 1500\ncommission = 0.15\nsolution = solve_it(monthly_income - monthly_salary - commission * monthly_sale, monthly_sale)\nans = solution[monthly_sale]", "\nsalary = 1500\ncommission_rate = 0.15\ntotal_income = 6000\nsolution = solve_it(salary + commission_rate * x - total_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 15\nincome = 6000\nsolution = solve_it(salary + commission / 100 * income - 6000, income)\nans = solution[income]", "\nmonthly_salary = 1500\ncommission_rate = 0.15\nmonthly_income = 6000\nsolution = solve_it(monthly_salary + commission_rate * x - monthly_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 0.15\nmonthly_income = 6000\nsolution = solve_it(salary + commission * x - monthly_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 0.15\nmonthly_income = 6000\nsolution = solve_it(salary + commission * x - monthly_income, x)\nans = solution[x]", "\nmonthly_salary = 1500\ncommission_rate = 0.15\nmonthly_income = 6000\nsolution = solve_it(monthly_salary + commission_rate * x - monthly_income, x)\nans = solution[x]", "\nmonthly_salary = 1500\ncommission_rate = 0.15\nmonthly_income = 6000\nsolution = solve_it(monthly_salary + monthly_income * commission_rate - monthly_income, monthly_income)\nans = solution[monthly_income]", "\nsalary = 1500\ncommission = 0.15\nmonthly_income = 6000\nsolution = solve_it(salary + commission * x - monthly_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission = 0.15\nmonthly_income = 6000\nsolution = solve_it(salary + commission * x - monthly_income, x)\nans = solution[x]", "\nmonthly_salary = 1500\ncommission_rate = 0.15\ndesired_monthly_income = 6000\nsolution = solve_it(monthly_salary + commission_rate * x - desired_monthly_income, x)\nans = solution[x]", "\nsalary = 1500\ncommission_percentage = 15\nmonthly_income_target = 6000\ncommission_target = monthly_income_target - salary\nsolution = solve_it(commission_percentage / 100 * sale - commission_target, sale)\nans = solution[sale]"], "generated_prediction": "None", "options": ["A)30000", "B)415000", "C)31500", "D)50000", "E)None of these"], "answer": "A", "prediction": "A"}
{"question": "A man borrows Rs.360 If he pays it back in 12 monthly installments of Rs.31.50, what is his interest rate?", "generated": ["\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 360\namount_with_simple_interest = amount * (1 + 12 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - 12 * 31.5, interest_rate)\nans = solution[interest_rate]", "\namount_borrowed = 360\namount_paid_back = 12 * 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount_borrowed * (1 + interest_rate / 100) - amount_paid_back, interest_rate)\nans = solution[interest_rate]", "\nloan = 360\nmonthly_payment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(loan * (1 + interest_rate / 100) - 12 * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\namount = 360\nmonthly_payment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount * (1 + interest_rate / 100) - 12 * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 360\nmonthly_payment = 31.50\nsolution = solve_it(amount * (1 + interest_rate / 100) - 12 * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\namount = 360\nmonthly_payment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount * (1 + interest_rate / 100) ** 12 - 12 * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 360\nmonthly_payment = 31.50\nsolution = solve_it(amount * (1 + interest_rate / 100) ** 12 - 12 * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 360\nmonthly_payment = 31.50\nsolution = solve_it(amount * (1 + interest_rate / 100) ** 12 - 12 * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\namount = 360\nmonthly_payment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount * (1 + interest_rate / 100) ** 12 - 12 * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 360\nmonthly_installment = 31.5\nsolution = solve_it(amount * (1 + interest_rate / 100) - 12 * monthly_installment, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 360\nmonthly_installment = 31.5\nsolution = solve_it(amount * (1 + interest_rate / 100) - 12 * monthly_installment, interest_rate)\nans = solution[interest_rate]", "\namount = 360\nmonthly_installment = 31.50\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount * (1 + interest_rate / 100) - 12 * monthly_installment, interest_rate)\nans = solution[interest_rate]", "\namount = 360\nmonthly_payment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount * (1 + interest_rate / 100) ** 12 - monthly_payment * 12, interest_rate)\nans = solution[interest_rate]", "\namount = 360\ninterest_rate = Symbol('interest_rate', positive=True)\nmonthly_payment = 31.50\nsolution = solve_it(amount * (1 + interest_rate / 100) - 12 * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\nprincipal = 360\nmonthly_installment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(principal * interest_rate / 1200 - monthly_installment, interest_rate)\nans = solution[interest_rate]", "\nprincipal = 360\nmonthly_payment = 31.50\ninterest_rate = Symbol('interest_rate', positive=True)\ntotal_payment = 12 * monthly_payment\nsolution = solve_it(total_payment - principal, interest_rate)\nans = solution[interest_rate]", "\namount = 360\ninstallment = 31.5\nnum_installments = 12\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount * (1 + interest_rate / 100) ** num_installments - installment * num_installments, interest_rate)\nans = solution[interest_rate]", "\nprincipal = 360\ninterest_rate = Symbol('interest_rate', positive=True)\ninstallment = 31.50\nsolution = solve_it(principal * interest_rate / 100 - installment, interest_rate)\nans = solution[interest_rate]", "\nborrowed_amount = 360\nmonthly_installment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\namount_after_12_months = borrowed_amount * (1 + interest_rate / 100) ** 12\nsolution = solve_it(amount_after_12_months - 12 * monthly_installment, interest_rate)\nans = solution[interest_rate]", "\nprincipal = 360\nmonthly_payment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\ntotal_payment = 12 * monthly_payment\nsolution = solve_it(total_payment - principal - principal * interest_rate / 100 * 12, interest_rate)\nans = solution[interest_rate]", "\nloan = 360\nmonthly_payment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\ntotal_payment = 12 * monthly_payment\nsolution = solve_it(total_payment - loan - interest_rate * loan / 100, interest_rate)\nans = solution[interest_rate]", "\namount = 360\ninterest_rate = Symbol('interest_rate', positive=True)\nmonthly_payment = 31.5\nnumber_of_months = 12\nsolution = solve_it(amount * (1 + interest_rate / 100) ** number_of_months - number_of_months * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\nloan_amount = 360\nmonthly_payment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\ntotal_repayment = 12 * monthly_payment\nsolution = solve_it(total_repayment - loan_amount - interest_rate * loan_amount / 100, interest_rate)\nans = solution[interest_rate]", "\namount = 360\nmonthly_payment = 31.5\nnum_months = 12\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount * (1 + interest_rate / 100) ** num_months - amount - num_months * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\nborrowed_amount = 360\ninstallment_amount = 31.5\nnum_installments = 12\ninterest_rate = Symbol('interest_rate', positive=True)\ntotal_amount = borrowed_amount * (1 + interest_rate / 100)\nsolution = solve_it(total_amount - num_installments * installment_amount, interest_rate)\nans = solution[interest_rate]", "\nloan_amount = 360\ninterest_rate = Symbol('interest_rate', positive=True)\nmonthly_installment = 31.5\ntotal_interest_paid = 12 * monthly_installment - loan_amount\nsolution = solve_it(total_interest_paid / loan_amount - interest_rate / 100, interest_rate)\nans = solution[interest_rate]", "\namount = 360\nmonthly_payment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\ntotal_interest = amount * (1 + interest_rate / 100) - amount\nsolution = solve_it(total_interest - 12 * monthly_payment, interest_rate)\nans = solution[interest_rate]", "\nprinciple = 360\nmonthly_installment = 31.5\nnum_of_months = 12\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(principle * (1 + interest_rate / 100) ** num_of_months - monthly_installment * num_of_months, interest_rate)\nans = solution[interest_rate]", "\nprincipal = 360\ninterest_rate = Symbol('interest_rate', positive=True)\nmonthly_installment = 31.5\ntotal_amount_to_be_paid = principal * (1 + interest_rate / 100)\nsolution = solve_it(total_amount_to_be_paid - 12 * monthly_installment, interest_rate)\nans = solution[interest_rate]", "\nprincipal = 360\ninstallment = 31.5\ninterest_rate = Symbol('interest_rate', positive=True)\ntotal_interest = 12 * installment - principal\nans = total_interest / principal * 100"], "generated_prediction": "5.0", "options": ["A)1.5%", "B)4.5%", "C)10%", "D)5%", "E)12%"], "answer": "D", "prediction": "D"}
{"question": "The price of a product is reduced by 30% . By what percentage should it be increased to make it 100%", "generated": ["\nprice = Symbol('price', positive=True)\nreduced_price = price * 0.7\nans = (price - reduced_price) / reduced_price", "\nprice_after_reduction = 70\nprice_after_increase = 100\nans = (price_after_increase - price_after_reduction) / price_after_reduction", "\nprice = Symbol('price', positive=True)\nreduced_price = price * 0.7\nans = (price - reduced_price) / reduced_price * 100", "\nprice = Symbol('price', positive=True)\nreduced_price = price * 0.7\nans = (price - reduced_price) / reduced_price * 100", "\npercentage_reduced = 30\npercentage_increased = 100 - percentage_reduced\nans = percentage_increased", "\nprice = Symbol('price', positive=True)\nprice_after_reduction = price * 0.7\nprice_after_increase = price_after_reduction * 1.43\nsolution = solve_it(price_after_increase - price, price)\nans = solution[price]", "\nprice = Symbol('price', positive=True)\nprice_after_reduction = price * 0.7\nprice_after_increase = price_after_reduction * 1.43\nsolution = solve_it(price_after_increase - price, price)\nans = solution[price]", "\nprice_reduced = 70\nprice_increased = 100\nans = (price_increased - price_reduced) / price_reduced * 100", "\nprice = Symbol('price', positive=True)\nprice_after_reduction = price * 0.7\nprice_after_increase = price_after_reduction * 1.4286\nsolution = solve_it(price_after_increase - price, price)\nans = solution[price]", "\nprice_reduction_percentage = 30\nprice_increase_percentage = 100 / (100 - price_reduction_percentage) - 100\nans = price_increase_percentage", "\nprice = Symbol('price', positive=True)\nreduced_price = price * 0.7\nincrease_percentage = 100 / reduced_price - 1\nans = increase_percentage * 100", "\nprice = Symbol('price', positive=True)\ndiscount = 30\nsolution = solve_it(price * (1 - discount / 100) - price * (1 + 100 / 100), price)\nans = solution[price]", "\nprice = Symbol('price', positive=True)\nreduced_price = price * (1 - 0.3)\nsolution = solve_it(reduced_price / price - 1, price)\nans = solution[price]", "\nprice = Symbol('price', positive=True)\nreduced_price = price * 0.7\nincreased_price = reduced_price * 1.4286\nsolution = solve_it(increased_price - price, price)\nans = solution[price]", "\nprice = Symbol('price', positive=True)\ndiscount = 0.3\nsolution = solve_it(price * (1 - discount) - price * (1 + discount), price)\nans = solution[price]", "\nprice = Symbol('price', positive=True)\ndiscount = 0.3\nsolution = solve_it(price * (1 - discount) - price * (1 + discount), price)\nans = solution[price]", "\nprice = Symbol('price', positive=True)\nreduction_percentage = 30\nsolution = solve_it(price * (1 - reduction_percentage / 100) - price * (1 + reduction_percentage / 100), price)\nans = solution[price]", "\nprice_after_reduction = 0.7\nprice_after_increase = 1\nsolution = solve_it(price_after_increase - price_after_reduction * (1 + x / 100), x)\nans = solution[x]", "\nprice_after_reduction = 0.7\nprice_after_increase = 1\nsolution = solve_it(price_after_increase - price_after_reduction * (1 + x / 100), x)\nans = solution[x]", "\nprice_reduced_by_30_percent = 0.7\nprice_increased_by_percent = 1 / price_reduced_by_30_percent\nans = (price_increased_by_percent - 1) * 100", "\npercent_reduction = 30\npercent_increase = 100 / (100 - percent_reduction)\nans = percent_increase - 100", "\nprice = Symbol('price', positive=True)\nreduction = 0.3\nsolution = solve_it(price * (1 - reduction) - price * (1 + reduction), price)\nans = solution[price]", "\nprice = 100\nreduced_price = 70\nans = (100 - reduced_price) / reduced_price", "\noriginal_price = 100\nreduced_price = original_price * 0.7\npercentage_increase = (original_price - reduced_price) / reduced_price\nans = percentage_increase * 100", "\nprice = 100\nprice_after_discount = price * 0.7\nans = (price - price_after_discount) / price_after_discount * 100", "\nprice = Symbol('price', positive=True)\nprice_after_reduction = price * 0.7\nprice_after_increase = price_after_reduction * (1 + x)\nsolution = solve_it(price_after_increase - price, x)\nans = solution[x] * 100", "\nprice_after_discount = 70\nprice_after_increase = 100\npercent_increase = (price_after_increase - price_after_discount) / price_after_discount * 100\nans = percent_increase", "\nproduct_price = Symbol('product_price', positive=True)\nreduced_price = product_price * 0.7\nincreased_price = reduced_price * 1.43\nsolution = solve_it(increased_price - product_price, product_price)\nans = solution[product_price]", "\nprice = Symbol('price', positive=True)\nprice_after_reduction = price * 0.7\nprice_after_increase = price_after_reduction * (100 + x) / 100\nsolution = solve_it(price_after_increase - price, x)\nans = solution[x]", "\nprice = Symbol('price', positive=True)\nreduced_price = price * 0.7\nincrease_percentage = (1 - reduced_price / price) * 100\nans = 100 / (1 - increase_percentage / 100)"], "generated_prediction": "42.857142857142854", "options": ["A)41.86%", "B)42.86%", "C)43.86%", "D)44.86%", "E)45.86%"], "answer": "B", "prediction": "B"}
{"question": "I have a money pouch containing Rs. 700. There are equal number of 25 paise coins, 50 paise coins and one rupee coins.\nHow many of each are there?", "generated": ["\nnum_25_paise = Symbol('num_25_paise', positive=True)\nnum_50_paise = Symbol('num_50_paise', positive=True)\nnum_1_rupee = Symbol('num_1_rupee', positive=True)\nsolution = solve_it([num_25_paise + num_50_paise + num_1_rupee, 0.25 * num_25_paise + 0.5 * num_50_paise + num_1_rupee - 700], [num_25_paise, num_50_paise, num_1_rupee])\nans = (solution[num_25_paise], solution[num_50_paise], solution[num_1_rupee])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_amount = 700\nsolution = solve_it([num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins, num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins - total_amount], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_money = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins * 1\nsolution = solve_it([total_coins - total_coins, total_money - 700], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_money = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins * 1\nsolution = solve_it([total_coins - total_coins, total_money - 700], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_money = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins * 1\nsolution = solve_it([total_coins - total_coins, total_money - 700], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_amount = 700\nsolution = solve_it([num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins, num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins - total_amount], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_value = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins * 1\nsolution = solve_it([total_coins - total_coins, total_value - 700], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_amount = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins * 1\nsolution = solve_it([total_coins - total_coins, total_amount - 700], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise = Symbol('num_25_paise', positive=True)\nnum_50_paise = Symbol('num_50_paise', positive=True)\nnum_1_rupee = Symbol('num_1_rupee', positive=True)\nsolution = solve_it([num_25_paise + num_50_paise + num_1_rupee, num_25_paise * 0.25 + num_50_paise * 0.5 + num_1_rupee - 700], [num_25_paise, num_50_paise, num_1_rupee])\nans = (solution[num_25_paise], solution[num_50_paise], solution[num_1_rupee])", "\nnum_25_paise = Symbol('num_25_paise', positive=True)\nnum_50_paise = Symbol('num_50_paise', positive=True)\nnum_1_rupee = Symbol('num_1_rupee', positive=True)\ntotal_coins = num_25_paise + num_50_paise + num_1_rupee\ntotal_amount = num_25_paise * 0.25 + num_50_paise * 0.5 + num_1_rupee\nsolution = solve_it([total_coins - total_coins, total_amount - 700], [num_25_paise, num_50_paise, num_1_rupee])\nans = (solution[num_25_paise], solution[num_50_paise], solution[num_1_rupee])", "\nnum_25_paise = Symbol('num_25_paise', positive=True)\nnum_50_paise = Symbol('num_50_paise', positive=True)\nnum_1_rupee = Symbol('num_1_rupee', positive=True)\ntotal_amount = 700\nsolution = solve_it([num_25_paise + num_50_paise + num_1_rupee, num_25_paise * 0.25 + num_50_paise * 0.5 + num_1_rupee - total_amount], [num_25_paise, num_50_paise, num_1_rupee])\nans = (solution[num_25_paise], solution[num_50_paise], solution[num_1_rupee])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_rupee_coins = Symbol('num_rupee_coins', positive=True)\ntotal_coins = num_25_paise_coins + num_50_paise_coins + num_rupee_coins\ntotal_money = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_rupee_coins\nsolution = solve_it([total_coins - total_coins, total_money - 700], [num_25_paise_coins, num_50_paise_coins, num_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_num_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_amount = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins * 1\nsolution = solve_it([total_num_coins - total_num_coins, total_amount - 700], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_amount = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins\nsolution = solve_it([total_coins - total_coins, total_amount - 700], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_amount = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins\nsolution = solve_it([total_coins - total_coins, total_amount - 700], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_amount = 700\nsolution = solve_it([num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins - total_amount / 0.25, num_25_paise_coins - num_50_paise_coins, num_50_paise_coins - num_1_rupee_coins], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_amount = num_25_paise_coins * 0.25 + num_50_paise_coins * 0.5 + num_1_rupee_coins\nsolution = solve_it([total_coins - total_coins, total_amount - 7], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_amount = 700\nsolution = solve_it([num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins - total_amount / 0.25, num_25_paise_coins - num_50_paise_coins - num_1_rupee_coins], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise = Symbol('num_25_paise', positive=True)\nnum_50_paise = Symbol('num_50_paise', positive=True)\nnum_1_rupee = Symbol('num_1_rupee', positive=True)\nsolution = solve_it([num_25_paise + num_50_paise + num_1_rupee - 700,\n                     num_25_paise + num_50_paise * 2 + num_1_rupee * 100 - 700],\n                    [num_25_paise, num_50_paise, num_1_rupee])\nans = (solution[num_25_paise], solution[num_50_paise], solution[num_1_rupee])", "\nnum_25_paise = Symbol('num_25_paise', positive=True)\nnum_50_paise = Symbol('num_50_paise', positive=True)\nnum_1_rupee = Symbol('num_1_rupee', positive=True)\ntotal_amount = 700\ntotal_coins = num_25_paise + num_50_paise + num_1_rupee\nsolution = solve_it([total_coins - total_amount / 0.25, num_25_paise - num_50_paise, num_50_paise - num_1_rupee], [num_25_paise, num_50_paise, num_1_rupee])\nans = (solution[num_25_paise], solution[num_50_paise], solution[num_1_rupee])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_money = 700\nsolution = solve_it([0.25 * num_25_paise_coins + 0.5 * num_50_paise_coins + 1 * num_1_rupee_coins - total_money, num_25_paise_coins - num_50_paise_coins, num_50_paise_coins - num_1_rupee_coins], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_amount = 700\ntotal_num_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\nsolution = solve_it([num_25_paise_coins + num_50_paise_coins * 2 + num_1_rupee_coins * 100 - total_amount, num_25_paise_coins - num_50_paise_coins, num_50_paise_coins - num_1_rupee_coins], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_num_coins = num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins\ntotal_amount = 700\nsolution = solve_it([num_25_paise_coins + num_50_paise_coins * 2 + num_1_rupee_coins * 4 - total_amount, total_num_coins - num_25_paise_coins - num_50_paise_coins - num_1_rupee_coins], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\nsolution = solve_it([0.25 * num_25_paise_coins + 0.5 * num_50_paise_coins + num_1_rupee_coins - 700, num_25_paise_coins - num_50_paise_coins, num_50_paise_coins - num_1_rupee_coins], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_money = 700\nsolution = solve_it([0.25 * num_25_paise_coins + 0.5 * num_50_paise_coins + num_1_rupee_coins - total_money, num_25_paise_coins - num_50_paise_coins, num_50_paise_coins - num_1_rupee_coins], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise = Symbol('num_25_paise', positive=True)\nnum_50_paise = Symbol('num_50_paise', positive=True)\nnum_1_rupee = Symbol('num_1_rupee', positive=True)\nsolution = solve_it([num_25_paise + num_50_paise + num_1_rupee - 700, num_25_paise + 2 * num_50_paise + 4 * num_1_rupee - 700], [num_25_paise, num_50_paise, num_1_rupee])\nans = (solution[num_25_paise], solution[num_50_paise], solution[num_1_rupee])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_money = 700\nsolution = solve_it([0.25 * num_25_paise_coins + 0.5 * num_50_paise_coins + num_1_rupee_coins - total_money, num_25_paise_coins - num_50_paise_coins, num_25_paise_coins - num_1_rupee_coins], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise = Symbol('num_25_paise', positive=True)\nnum_50_paise = Symbol('num_50_paise', positive=True)\nnum_1_rupee = Symbol('num_1_rupee', positive=True)\ntotal_value = 700\nsolution = solve_it([25 * num_25_paise + 50 * num_50_paise + 100 * num_1_rupee - total_value, num_25_paise - num_50_paise, num_50_paise - num_1_rupee], [num_25_paise, num_50_paise, num_1_rupee])\nans = (solution[num_25_paise], solution[num_50_paise], solution[num_1_rupee])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_money = 700\nsolution = solve_it([num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins - total_money / 0.25,\n                     num_25_paise_coins - num_50_paise_coins,\n                     num_25_paise_coins - num_1_rupee_coins],\n                    [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])", "\nnum_25_paise_coins = Symbol('num_25_paise_coins', positive=True)\nnum_50_paise_coins = Symbol('num_50_paise_coins', positive=True)\nnum_1_rupee_coins = Symbol('num_1_rupee_coins', positive=True)\ntotal_money = 700\nsolution = solve_it([num_25_paise_coins + num_50_paise_coins + num_1_rupee_coins - total_money, num_25_paise_coins - num_50_paise_coins, num_25_paise_coins - num_1_rupee_coins], [num_25_paise_coins, num_50_paise_coins, num_1_rupee_coins])\nans = (solution[num_25_paise_coins], solution[num_50_paise_coins], solution[num_1_rupee_coins])"], "generated_prediction": "[400.0, 400.0, 400.0]", "options": ["A)453", "B)651", "C)400", "D)487", "E)286"], "answer": "C", "prediction": "C"}
{"question": "A man spends Rs. 3500 per month and saves 12 1/2% of his income. His monthly income is ?", "generated": ["\nincome = Symbol('income', positive=True)\nsaving = 0.125 * income\nsolution = solve_it(income - 3500 - saving, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nsaving = 0.125 * income\nsolution = solve_it(income - 3500 - saving, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nsavings = 0.125 * income\nsolution = solve_it(savings - 3500, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nsavings = 0.125 * income\nsolution = solve_it(savings + 3500 - income, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsavings = income * 12.5 / 100\nsolution = solve_it(income - expense - savings, income)\nans = solution[income]", "\nexpense = 3500\nsaving = 0.125\nincome = expense / (1 - saving)\nans = income", "\nmonthly_income = Symbol('monthly_income', positive=True)\nmonthly_expense = 3500\nmonthly_savings = 0.125 * monthly_income\nsolution = solve_it(monthly_income - monthly_expense - monthly_savings, monthly_income)\nans = solution[monthly_income]", "\nmonthly_income = Symbol('monthly_income', positive=True)\nmonthly_expense = 3500\nmonthly_savings = 0.125 * monthly_income\nsolution = solve_it(monthly_income - monthly_expense - monthly_savings, monthly_income)\nans = solution[monthly_income]", "\nspending = 3500\nsaving = 0.125\nincome = spending / (1 - saving)\nans = income", "\nincome = Symbol('income', positive=True)\nexpenses = 3500\nsavings = 0.125 * income\nsolution = solve_it(income - expenses - savings, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nsaving = 12.5 / 100\nsolution = solve_it(income * saving + 3500, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsavings = 0.125 * income\nsolution = solve_it(income - expense - savings, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsavings = 0.125 * income\nsolution = solve_it(income - expense - savings, income)\nans = solution[income]", "\nexpenses = 3500\nsaving = 0.125\nincome = expenses / (1 - saving)\nans = income", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsavings = 0.125 * income\nsolution = solve_it(income - expense - savings, income)\nans = solution[income]", "\nmonthly_income = Symbol('monthly_income', positive=True)\nmonthly_expense = 3500\nmonthly_savings = 0.125 * monthly_income\nsolution = solve_it(monthly_savings + monthly_expense - monthly_income, monthly_income)\nans = solution[monthly_income]", "\nmonthly_expense = 3500\nmonthly_saving = 0.125\nmonthly_income = monthly_expense / (1 - monthly_saving)\nans = monthly_income", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsaving = income * 12.5 / 100\nsolution = solve_it(saving + expense - income, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nspending = 3500\nsaving = income * 12.5 / 100\nsolution = solve_it(income - spending - saving, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsavings = income * 0.125\nsolution = solve_it(income - expense - savings, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsavings = income * 0.125\nsolution = solve_it(income - expense - savings, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nspent = 3500\nsaved = 0.125 * income\nsolution = solve_it(income - spent - saved, income)\nans = solution[income]", "\nsavings = Symbol('savings', positive=True)\nexpenses = 3500\nsolution = solve_it(savings / (expenses + savings) - 0.125, savings)\nans = solution[savings] + expenses", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsaving = 0.125 * income\nsolution = solve_it(income - expense - saving, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsaving = 0.125 * income\nsolution = solve_it(income - expense - saving, income)\nans = solution[income]", "\nsaving_rate = 12.5 / 100\nincome = Symbol('income', positive=True)\nexpenses = 3500\nsolution = solve_it(income * saving_rate - expenses, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nspending = 3500\nsaving = income * 0.125\nsolution = solve_it(income - spending - saving, income)\nans = solution[income]", "\nincome = Symbol('income', positive=True)\nexpense = 3500\nsaving = income * 0.125\nsolution = solve_it(income - expense - saving, income)\nans = solution[income]", "\nmonthly_income = Symbol('monthly_income', positive=True)\nmonthly_expenditure = 3500\nmonthly_savings = 0.125 * monthly_income\nsolution = solve_it(monthly_income - monthly_expenditure - monthly_savings, monthly_income)\nans = solution[monthly_income]", "\nmonthly_income = Symbol('monthly_income', positive=True)\nmonthly_expenditure = 3500\nmonthly_savings = 0.125 * monthly_income\nsolution = solve_it(monthly_savings + monthly_expenditure - monthly_income, monthly_income)\nans = solution[monthly_income]"], "generated_prediction": "4000.0", "options": ["A)Rs. 4400", "B)Rs. 4270", "C)Rs. 4000", "D)Rs. 3937.50", "E)None of these"], "answer": "C", "prediction": "C"}
{"question": "Five dozen toys are packed in a box and 98 boxes are kept in a tempo. How many tempos can lift 29400 toys in one round ?", "generated": ["\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\nnum_tempos = 29400 / toys_per_tempo\nans = math.ceil(num_tempos)", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\nnum_tempos = 29400 / toys_per_tempo\nans = math.ceil(num_tempos)", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\nnum_tempos = 29400 / toys_per_tempo\nans = math.ceil(num_tempos)", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\nnum_tempos = 29400 / toys_per_tempo\nans = math.ceil(num_tempos)", "\nnum_toys_per_box = 5 * 12\nnum_boxes_per_tempo = 98\nnum_toys_per_tempo = num_toys_per_box * num_boxes_per_tempo\nnum_tempos = 29400 / num_toys_per_tempo\nans = math.ceil(num_tempos)", "\nnum_toys_per_box = 5 * 12\nnum_boxes_per_tempo = 98\nnum_toys_per_tempo = num_toys_per_box * num_boxes_per_tempo\nnum_tempos = 29400 / num_toys_per_tempo\nans = math.ceil(num_tempos)", "\nnum_toys_per_box = 5 * 12\nnum_boxes_per_tempo = 98\nnum_toys_per_tempo = num_toys_per_box * num_boxes_per_tempo\nnum_tempos = 29400 / num_toys_per_tempo\nans = math.ceil(num_tempos)", "\nnum_toys_per_box = 5 * 12\nnum_boxes_per_tempo = 98\nnum_toys_per_tempo = num_toys_per_box * num_boxes_per_tempo\nnum_tempos = 29400 / num_toys_per_tempo\nans = math.ceil(num_tempos)", "\nnum_toys_per_box = 5 * 12\nnum_boxes_per_tempo = 98\nnum_toys_per_tempo = num_toys_per_box * num_boxes_per_tempo\nnum_tempos = 29400 / num_toys_per_tempo\nans = math.ceil(num_tempos)", "\nnum_toys_per_box = 5 * 12\nnum_boxes_per_tempo = 98\nnum_toys_per_tempo = num_toys_per_box * num_boxes_per_tempo\nnum_tempos = 29400 / num_toys_per_tempo\nans = math.ceil(num_tempos)", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntempos_required = 29400 / toys_per_tempo\nans = math.ceil(tempos_required)", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntempos_required = 29400 / toys_per_tempo\nans = math.ceil(tempos_required)", "\nnum_toys_per_box = 5 * 12\nnum_boxes_per_tempo = 98\nnum_toys_per_tempo = num_toys_per_box * num_boxes_per_tempo\nnum_toys = 29400\nans = math.ceil(num_toys / num_toys_per_tempo)", "\nnum_toys_in_box = 5 * 12\nnum_boxes_in_tempo = 98\nnum_toys_in_tempo = num_toys_in_box * num_boxes_in_tempo\nnum_toys_to_lift = 29400\nans = math.ceil(num_toys_to_lift / num_toys_in_tempo)", "\ntoys_in_box = 5 * 12\nboxes_in_tempo = 98\ntoys_in_tempo = toys_in_box * boxes_in_tempo\ntoys_to_lift = 29400\nans = toys_to_lift // toys_in_tempo", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nans = total_toys // toys_per_tempo", "\nnum_toys = 5 * 12\nnum_boxes = 98\nnum_tempos = 29400 / (num_toys * num_boxes)\nans = math.ceil(num_tempos)", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nans = total_toys / toys_per_tempo", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nans = total_toys / toys_per_tempo", "\nnum_toys_in_box = 5 * 12\nnum_boxes_in_tempo = 98\nnum_toys_in_tempo = num_toys_in_box * num_boxes_in_tempo\nnum_toys_to_be_lifted = 29400\nans = num_toys_to_be_lifted // num_toys_in_tempo", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nans = total_toys // toys_per_tempo", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nans = total_toys / toys_per_tempo", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nans = total_toys / toys_per_tempo", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nans = total_toys / toys_per_tempo", "\ntempo_capacity = Symbol('tempo_capacity', positive=True)\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\nsolution = solve_it(toys_per_tempo - tempo_capacity, tempo_capacity)\nans = math.ceil(29400 / solution[tempo_capacity])", "\ntoys_per_box = 5 * 12\nboxes_per_tempo = 98\ntoys_per_tempo = toys_per_box * boxes_per_tempo\ntotal_toys = 29400\nans = total_toys / toys_per_tempo", "\ntoys_in_a_box = 5 * 12\nboxes_in_a_tempo = 98\ntoys_in_a_tempo = toys_in_a_box * boxes_in_a_tempo\ntempos_needed = 29400 / toys_in_a_tempo\nans = math.ceil(tempos_needed)", "\nnum_toys = 5 * 12\nnum_boxes = 98\nnum_toys_in_a_box = num_toys * num_boxes\nnum_toys_in_a_tempo = num_toys_in_a_box * 6\nnum_tempos = 29400 / num_toys_in_a_tempo\nans = math.ceil(num_tempos)", "\nnum_toys_in_box = 5 * 12\nnum_boxes_in_tempo = 98\nnum_toys_in_tempo = num_toys_in_box * num_boxes_in_tempo\nnum_toys_to_be_lifted = 29400\nans = math.ceil(num_toys_to_be_lifted / num_toys_in_tempo)", "\nnum_toys_in_box = 5 * 12\nnum_boxes_in_tempo = 98\nnum_toys_in_tempo = num_toys_in_box * num_boxes_in_tempo\nnum_toys_to_be_lifted = 29400\nnum_tempos_needed = math.ceil(num_toys_to_be_lifted / num_toys_in_tempo)\nans = num_tempos_needed"], "generated_prediction": "5", "options": ["A)4", "B)5", "C)7", "D)6", "E)8"], "answer": "B", "prediction": "B"}
{"question": "There are 10 oranges in a basket. Find the no. of ways in which 2 oranges are chosen from the basket?", "generated": ["\nn = 10\nr = 2\nans = math.factorial(n) / (math.factorial(r) * math.factorial(n - r))", "\nn = 10\nr = 2\nans = math.factorial(n) / (math.factorial(r) * math.factorial(n - r))", "\nn = 10\nr = 2\nans = math.factorial(n) / (math.factorial(r) * math.factorial(n - r))", "\nn = 10\nr = 2\nans = math.factorial(n) / (math.factorial(r) * math.factorial(n - r))", "\nn = 10\nr = 2\nans = math.factorial(n) / (math.factorial(r) * math.factorial(n - r))", "\nans = math.factorial(10) / (math.factorial(2) * math.factorial(8))", "\nans = math.factorial(10) / (math.factorial(2) * math.factorial(10 - 2))", "\nfrom math import factorial\nans = factorial(10) / (factorial(2) * factorial(8))", "\nfrom math import factorial\nans = factorial(10) / (factorial(2) * factorial(8))", "\nfrom math import factorial\nans = factorial(10) / (factorial(8) * factorial(2))", "\nfrom math import factorial\nans = factorial(10) / (factorial(2) * factorial(8))", "\nn = 10\nk = 2\nans = math.factorial(n) / math.factorial(k) / math.factorial(n - k)", "\nfrom math import factorial\nans = factorial(10) / (factorial(2) * factorial(10 - 2))", "\nfrom math import factorial\nans = factorial(10) / factorial(10 - 2)", "\nfrom math import factorial\nans = factorial(10) / factorial(10 - 2)", "\nimport math\nans = math.factorial(10) / math.factorial(2) / math.factorial(8)", "\nfrom math import factorial\nans = factorial(10) / factorial(8) / factorial(2)", "\nnum_oranges = 10\nnum_ways = math.factorial(num_oranges) / (math.factorial(2) * math.factorial(num_oranges - 2))\nans = num_ways", "\nfrom itertools import combinations\nnum_oranges = 10\nnum_chosen = 2\nans = len(list(combinations(range(num_oranges), num_chosen)))", "\nfrom itertools import combinations\nnum_oranges = 10\nnum_choices = 2\nans = len(list(combinations(range(num_oranges), num_choices)))", "\nfrom sympy.utilities.iterables import multiset_permutations\nans = len(list(multiset_permutations([1, 1, 0, 0, 0, 0, 0, 0, 0, 0])))", "\nfrom itertools import combinations\nans = len(list(combinations(range(10), 2)))", "\nfrom itertools import combinations\nans = len(list(combinations(range(10), 2)))", "\nfrom itertools import combinations\nfrom sympy import factorial\nans = len(list(combinations(range(10), 2)))", "\nimport math\nans = math.factorial(10) / (math.factorial(10 - 2) * math.factorial(2))", "\nimport itertools\noranges = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nans = len(list(itertools.combinations(oranges, 2)))", "\nnum_oranges = 10\nnum_ways = math.factorial(num_oranges) / math.factorial(num_oranges - 2)\nans = num_ways", "\nimport math\nans = math.factorial(10) / (math.factorial(2) * math.factorial(10 - 2))", "\nfrom itertools import combinations\nans = len(list(combinations(range(10), 2)))", "\nnum_oranges = 10\nnum_ways = num_oranges * (num_oranges - 1)\nans = num_ways"], "generated_prediction": "45.0", "options": ["A)45", "B)90", "C)120", "D)150", "E)180"], "answer": "A", "prediction": "A"}
{"question": "A company contracts to paint 3 houses. Mr.Brown can paint a house in 6 days while Mr.Black would take 8 days and Mr.Blue 12 days. After 8 days Mr.Brown goes on vacation and Mr. Black begins to work for a period of 6 days. How many days will it take Mr.Blue to complete the contract?", "generated": ["\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nans = 1 / (brown_speed + black_speed + blue_speed)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work = 8 * brown_speed\nblack_work = 6 * black_speed\nblue_work = 1 - brown_work - black_work\nans = blue_work / blue_speed", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work = 8 * brown_speed\nblack_work = 6 * black_speed\nblue_work = 1 - brown_work - black_work\nans = blue_work / blue_speed", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work = 8 * brown_speed\nblack_work = 6 * black_speed\ntotal_work = 1\nans = (total_work - brown_work - black_work) / blue_speed", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_days = 8\nblack_work_days = 6\nans = (brown_speed * brown_work_days + black_speed * black_work_days) / blue_speed", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\ntime_taken_by_brown = 8\ntime_taken_by_black = 6\ntime_taken_by_blue = (1 - brown_speed * time_taken_by_brown - black_speed * time_taken_by_black) / blue_speed\nans = time_taken_by_blue", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\ntime_taken_by_brown = 8\ntime_taken_by_black = 6\ntime_taken_by_blue = (3 - time_taken_by_brown * brown_speed - time_taken_by_black * black_speed) / blue_speed\nans = math.ceil(time_taken_by_blue)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_working_days = 8\nblack_working_days = 6\nans = brown_working_days / brown_speed + black_working_days / black_speed + 3 / blue_speed", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_time = 8\nblack_work_time = 6\ntotal_work_time = brown_work_time / brown_speed + black_work_time / black_speed + 3 / blue_speed\nans = math.ceil(total_work_time)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_time = 8\nblack_work_time = 6\ntotal_work_time = brown_work_time * brown_speed + black_work_time * black_speed + blue_speed\nans = math.ceil(total_work_time)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_time = 8\nblack_work_time = 6\ntotal_work_time = brown_work_time * brown_speed + black_work_time * black_speed + blue_speed\nans = math.ceil(total_work_time)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_time = 8\nblack_work_time = 6\ntotal_work_time = brown_work_time * brown_speed + black_work_time * black_speed + blue_speed\nans = total_work_time", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_time = 8\nblack_work_time = 6\nans = (brown_work_time + black_work_time) / (brown_speed + black_speed)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_time = 8\nblack_work_time = 6\nans = (brown_work_time + black_work_time) / (brown_speed + black_speed)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_time = 8\nblack_work_time = 6\ntotal_work_time = brown_work_time + black_work_time\nans = total_work_time / (brown_speed + black_speed)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_time = 8\nblack_work_time = 6\ntotal_work_time = brown_work_time + black_work_time\nans = total_work_time / (brown_speed + black_speed)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_time = 8\nblack_work_time = 6\ntotal_work_time = brown_work_time + black_work_time\nans = total_work_time / (brown_speed + black_speed)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_days = 8\nblack_work_days = 6\ntotal_work_days = brown_work_days + black_work_days\nans = total_work_days / (brown_speed + black_speed)", "\ndays_brown = 6\ndays_black = 8\ndays_blue = 12\ndays_brown_work = 8\ndays_black_work = 6\ndays_blue_work = days_brown_work + days_black_work\nans = days_blue_work * days_blue / days_blue_work", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\ntotal_time = 8 / brown_speed + 6 / black_speed + (1 - 8 / brown_speed - 6 / black_speed) / blue_speed\nans = math.ceil(total_time)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\ntotal_time = 8 / brown_speed + 6 / black_speed + (1 - 8 / brown_speed - 6 / black_speed) / blue_speed\nans = math.ceil(total_time)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work = 8 * brown_speed\nblack_work = 6 * black_speed\nans = 1 - brown_work - black_work", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nspeed_before_brown_leaves = brown_speed + black_speed\nspeed_after_brown_leaves = black_speed + blue_speed\ntime_to_complete_contract = 1 / speed_after_brown_leaves\nans = math.ceil(time_to_complete_contract)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nspeed_after_8_days = brown_speed + black_speed\nspeed_after_14_days = speed_after_8_days + blue_speed\nans = 1 / speed_after_14_days", "\ndays_taken_by_brown = 6\ndays_taken_by_black = 8\ndays_taken_by_blue = 12\ndays_taken_by_brown_and_black = days_taken_by_brown * days_taken_by_black / (days_taken_by_brown + days_taken_by_black)\ndays_taken_by_blue_and_black = days_taken_by_blue * days_taken_by_black / (days_taken_by_blue + days_taken_by_black)\ndays_taken_by_blue_and_black_and_brown = days_taken_by_blue_and_black * days_taken_by_brown / (days_taken_by_blue_and_black + days_taken_by_brown)\nans = days_taken_by_blue_and_black_and_brown", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_work_days = 8\nblack_work_days = 6\ntotal_work_days = brown_work_days + black_work_days\nans = math.ceil((3 - total_work_days * (brown_speed + black_speed)) / blue_speed)", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\ntotal_work = 3\nbrown_work_in_8_days = 8 * brown_speed\nblack_work_in_6_days = 6 * black_speed\ntotal_work_in_14_days = brown_work_in_8_days + black_work_in_6_days\nblue_work_in_remaining_days = total_work - total_work_in_14_days\nans = blue_work_in_remaining_days / blue_speed", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_and_black_speed = brown_speed + black_speed\nbrown_and_black_speed_for_6_days = brown_and_black_speed * 6\nblue_speed_for_remaining_days = blue_speed * (1 - brown_and_black_speed_for_6_days)\nans = 1 / blue_speed_for_remaining_days", "\nbrown_speed = 1 / 6\nblack_speed = 1 / 8\nblue_speed = 1 / 12\nbrown_and_black_speed = brown_speed + black_speed\nbrown_and_black_and_blue_speed = brown_and_black_speed + blue_speed\nbrown_and_black_and_blue_time = 1 / brown_and_black_and_blue_speed\nbrown_and_black_time = 1 / brown_and_black_speed\nbrown_and_black_and_blue_time = brown_and_black_and_blue_time - brown_and_black_time\nans = math.ceil(brown_and_black_and_blue_time)", "\ndays_to_paint_one_house = {'Brown': 6, 'Black': 8, 'Blue': 12}\ndays_to_paint_three_houses = {name: days_to_paint_one_house[name] * 3 for name in days_to_paint_one_house}\ndays_after_brown_leaves = 8\ndays_after_black_joins = 6\ndays_to_paint_three_houses['Black'] = days_to_paint_three_houses['Black'] - days_after_brown_leaves\ndays_to_paint_three_houses['Blue'] = days_to_paint_three_houses['Blue'] - days_after_brown_leaves - days_after_black_joins\nans = days_to_paint_three_houses['Blue']"], "generated_prediction": "48.00000000000001", "options": ["A)7", "B)8", "C)10", "D)11", "E)12"], "answer": "D", "prediction": "E"}
{"question": "Train A leaves a station every 16 minutes and Train B leaves every 17 minutes. If both trains just left the station simultaneously, how long until they do so again?", "generated": ["\ntrain_A = 16\ntrain_B = 17\nans = train_A * train_B", "\ntrain_a_frequency = 16\ntrain_b_frequency = 17\nans = train_a_frequency * train_b_frequency", "\ntrain_a_frequency = 16\ntrain_b_frequency = 17\nans = train_a_frequency * train_b_frequency", "\ntrain_a_frequency = 16\ntrain_b_frequency = 17\nans = train_a_frequency * train_b_frequency", "\ntrain_A_frequency = 16\ntrain_B_frequency = 17\nans = train_A_frequency * train_B_frequency", "\ntrain_A_frequency = 16\ntrain_B_frequency = 17\nans = train_A_frequency * train_B_frequency", "\ntrain_a_time = 16\ntrain_b_time = 17\nans = train_a_time * train_b_time", "\ntrain_a_time = 16\ntrain_b_time = 17\nans = train_a_time * train_b_time", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nans = train_a_interval * train_b_interval / math.gcd(train_a_interval, train_b_interval)", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nans = train_a_interval * train_b_interval", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nans = train_a_interval * train_b_interval", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nans = train_a_interval * train_b_interval", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nans = train_a_interval * train_b_interval", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nans = train_a_interval * train_b_interval", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nans = train_a_interval * train_b_interval", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nans = train_a_interval * train_b_interval", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nans = train_a_interval * train_b_interval", "\ntrain_A_interval = 16\ntrain_B_interval = 17\nans = train_A_interval * train_B_interval", "\ntrain_A_interval = 16\ntrain_B_interval = 17\nans = train_A_interval * train_B_interval", "\ntrain_a_minutes = 16\ntrain_b_minutes = 17\nans = train_a_minutes * train_b_minutes", "\ntrain_a_minutes = 16\ntrain_b_minutes = 17\nans = train_a_minutes * train_b_minutes", "\ntrain_a_minutes = 16\ntrain_b_minutes = 17\nans = train_a_minutes * train_b_minutes", "\ntrain_a_leaves_every = 16\ntrain_b_leaves_every = 17\nans = train_a_leaves_every * train_b_leaves_every / math.gcd(train_a_leaves_every, train_b_leaves_every)", "\ntrain_a_leaves_every = 16\ntrain_b_leaves_every = 17\nans = train_a_leaves_every * train_b_leaves_every / math.gcd(train_a_leaves_every, train_b_leaves_every)", "\ntrain_a_leaves_every_x_minutes = 16\ntrain_b_leaves_every_x_minutes = 17\nans = train_a_leaves_every_x_minutes * train_b_leaves_every_x_minutes", "\ntrain_a_speed = 1 / 16\ntrain_b_speed = 1 / 17\ntime_to_meet_again = 1 / (train_a_speed + train_b_speed)\nans = time_to_meet_again", "\ntrain_a_frequency = 16\ntrain_b_frequency = 17\nans = train_a_frequency * train_b_frequency / math.gcd(train_a_frequency, train_b_frequency)", "\ntrain_a_frequency = 16\ntrain_b_frequency = 17\nans = train_a_frequency * train_b_frequency / math.gcd(train_a_frequency, train_b_frequency)", "\ntrain_a_time = 16\ntrain_b_time = 17\nans = train_a_time * train_b_time / math.gcd(train_a_time, train_b_time)", "\ntrain_a_interval = 16\ntrain_b_interval = 17\nleast_common_multiple = train_a_interval * train_b_interval\nans = least_common_multiple / (train_a_interval + train_b_interval)"], "generated_prediction": "272", "options": ["A)272 minutes", "B)304 minutes", "C)190 minutes", "D)70 minutes", "E)35 minutes"], "answer": "A", "prediction": "A"}
{"question": "A hollow cube of size 5cm is taken, with the thickness of 1cm. It is made of smaller cubes of size 1cm .If the outer surface of the cube is painted how many faces of the smaller cubes remain unpainted?", "generated": ["\nnum_faces = 6 * (5**2 - 3**2)\nans = num_faces", "\nnum_small_cubes = 5 ** 3\nnum_faces_unpainted = num_small_cubes - 6 * (5 - 2) ** 2\nans = num_faces_unpainted", "\nnum_cubes = 5 ** 3\nnum_faces = 6 * num_cubes\nnum_faces_painted = 6 * (num_cubes - 1)\nans = num_faces - num_faces_painted", "\nnum_cubes = 5 ** 3\nnum_faces_per_cube = 6\nnum_faces_painted = num_cubes * num_faces_per_cube - num_cubes\nnum_faces_unpainted = num_cubes * num_faces_per_cube - num_faces_painted\nans = num_faces_unpainted", "\nnum_small_cubes = 5 ** 3\nnum_faces_of_small_cubes = 6 * num_small_cubes\nnum_faces_of_big_cube = 6 * 5 ** 2\nnum_faces_of_small_cubes_unpainted = num_faces_of_small_cubes - num_faces_of_big_cube\nans = num_faces_of_small_cubes_unpainted", "\nnum_cubes = 5 ** 3\nnum_faces = 6 * num_cubes\nnum_faces_painted = 6 * (num_cubes - 1)\nnum_faces_not_painted = num_faces - num_faces_painted\nans = num_faces_not_painted", "\nnum_faces = 6\nnum_faces_painted = 6 * (5 ** 2)\nnum_faces_unpainted = num_faces * (3 ** 3) - num_faces_painted\nans = num_faces_unpainted", "\nnum_cubes = 5 * 5 * 5\nnum_faces = 6 * num_cubes\nnum_faces_painted = 6 * (num_cubes - 1)\nnum_faces_unpainted = num_faces - num_faces_painted\nans = num_faces_unpainted", "\nnum_cubes = 5 ** 3\nnum_faces_per_cube = 6\nnum_faces_painted = num_cubes * num_faces_per_cube\nnum_faces_unpainted = num_faces_painted - num_faces_per_cube\nans = num_faces_unpainted", "\ncube_size = 5\nsmaller_cube_size = 1\nnum_smaller_cubes = (cube_size - smaller_cube_size) ** 3\nnum_faces_painted = 6 * num_smaller_cubes\nnum_faces_unpainted = 6 * (num_smaller_cubes - 1)\nans = num_faces_unpainted", "\ncube_size = 5\nthickness = 1\nsmall_cube_size = 1\nnum_small_cubes = (cube_size - thickness) ** 3\nnum_faces_painted = (cube_size - thickness) ** 2 * 6\nnum_faces_unpainted = num_small_cubes * 6 - num_faces_painted\nans = num_faces_unpainted", "\nnum_cubes = 5 ** 3\nnum_faces_painted = 6 * num_cubes\nnum_faces_unpainted = 6 * (num_cubes - 1)\nans = num_faces_unpainted", "\nnum_small_cubes = 5 ** 3\nnum_faces_of_small_cubes = num_small_cubes * 6\nnum_faces_of_big_cubes = 6 * (5 - 2) ** 2\nnum_faces_of_small_cubes_not_painted = num_faces_of_small_cubes - num_faces_of_big_cubes\nans = num_faces_of_small_cubes_not_painted", "\nnum_cubes = 5 ** 3\nnum_faces = 6 * num_cubes\nnum_faces_painted = 6 * (num_cubes - 1)\nnum_faces_unpainted = num_faces - num_faces_painted\nans = num_faces_unpainted", "\nouter_cube_size = 5\ninner_cube_size = outer_cube_size - 2\nnum_cubes = inner_cube_size ** 3\nnum_faces = num_cubes * 6\nnum_faces_painted = 6 * (outer_cube_size ** 2)\nans = num_faces - num_faces_painted", "\nside = 5\nthickness = 1\nnum_small_cubes = (side - 2 * thickness) ** 3\nnum_faces_of_small_cubes = num_small_cubes * 6\nnum_faces_of_big_cube = 6 * side ** 2\nnum_faces_of_small_cubes_unpainted = num_faces_of_small_cubes - num_faces_of_big_cube\nans = num_faces_of_small_cubes_unpainted", "\nnum_small_cubes = 5 ** 3\nnum_faces_of_small_cubes = 6 * num_small_cubes\nnum_faces_of_big_cube = 6 * (5 ** 2)\nans = num_faces_of_small_cubes - num_faces_of_big_cube", "\ncube_size = 5\nsmaller_cube_size = 1\nnum_smaller_cubes = (cube_size - 2 * smaller_cube_size) ** 3\nnum_faces_painted = 6 * num_smaller_cubes\nnum_faces_not_painted = 6 * num_smaller_cubes - num_faces_painted\nans = num_faces_not_painted", "\nnum_small_cubes = 5 ** 3\nnum_faces_painted = 2 * (5 ** 2 + 5 ** 2 + 5 ** 2)\nnum_faces_unpainted = 6 * num_small_cubes - num_faces_painted\nans = num_faces_unpainted", "\ncube_size = 5\nsmall_cube_size = 1\nnum_small_cubes = (cube_size - 2 * small_cube_size) ** 3\nnum_small_cubes_with_painted_surface = 6 * num_small_cubes\nnum_small_cubes_with_unpainted_surface = num_small_cubes - num_small_cubes_with_painted_surface\nans = num_small_cubes_with_unpainted_surface", "\nnum_small_cubes = 5 ** 3\nnum_faces_of_small_cubes = 6 * num_small_cubes\nnum_faces_of_hollow_cube = 6 * (5 - 2) ** 2\nnum_faces_of_small_cubes_unpainted = num_faces_of_small_cubes - num_faces_of_hollow_cube\nans = num_faces_of_small_cubes_unpainted", "\nnum_cubes = 5 ** 3\nnum_faces_of_each_cube = 6\nnum_faces_of_all_cubes = num_cubes * num_faces_of_each_cube\nnum_faces_of_outer_cubes = num_cubes * num_faces_of_each_cube - (num_cubes - 8) * num_faces_of_each_cube\nans = num_faces_of_all_cubes - num_faces_of_outer_cubes", "\ncube_size = 5\nsmaller_cube_size = 1\nnum_smaller_cubes = (cube_size - smaller_cube_size) ** 3\nnum_faces_unpainted = num_smaller_cubes * 6 - 6 * (cube_size - smaller_cube_size) ** 2\nans = num_faces_unpainted", "\ncube_size = 5\nsmaller_cube_size = 1\nnum_smaller_cubes = (cube_size - 2 * smaller_cube_size) ** 3\nnum_faces_of_smaller_cubes = num_smaller_cubes * 6\nnum_faces_of_big_cube = 6 * (cube_size ** 2)\nnum_faces_of_smaller_cubes_painted = num_faces_of_big_cube - num_faces_of_smaller_cubes\nans = num_faces_of_smaller_cubes_painted", "\ncube_size = 5\nsmall_cube_size = 1\nnum_small_cubes_per_side = cube_size / small_cube_size\nnum_small_cubes = num_small_cubes_per_side ** 3\nnum_faces_painted = num_small_cubes_per_side * 3\nnum_faces_unpainted = num_small_cubes * 6 - num_faces_painted\nans = num_faces_unpainted", "\nside_length = 5\nthickness = 1\nnum_small_cubes = (side_length - 2 * thickness) ** 3\nnum_faces_to_be_painted = (side_length - 2 * thickness) ** 2 * 6\nnum_faces_painted = num_small_cubes * 6\nans = num_faces_painted - num_faces_to_be_painted", "\nnum_cubes = 5\nnum_faces_per_cube = 6\nnum_faces_per_small_cube = 6\nnum_faces_per_small_cube_painted = num_faces_per_cube * num_cubes - num_faces_per_small_cube\nans = num_faces_per_small_cube - num_faces_per_small_cube_painted", "\ncube_size = 5\nsmaller_cube_size = 1\nnum_smaller_cubes = cube_size ** 3\nnum_faces_to_paint = 6 * (cube_size - 2)\nnum_faces_painted = num_smaller_cubes * num_faces_to_paint\nnum_faces_unpainted = 6 * num_smaller_cubes - num_faces_painted\nans = num_faces_unpainted", "\nnum_cubes = 5\nnum_cubes_on_surface = num_cubes * num_cubes * 6\nnum_cubes_on_edge = num_cubes * num_cubes * 12\nnum_cubes_on_corner = num_cubes * num_cubes * 8\nnum_cubes_on_surface_and_edge = num_cubes_on_surface + num_cubes_on_edge\nnum_cubes_on_surface_and_edge_and_corner = num_cubes_on_surface_and_edge + num_cubes_on_corner\nnum_cubes_in_total = num_cubes * num_cubes * num_cubes\nans = num_cubes_in_total - num_cubes_on_surface_and_edge_and_corner", "\nnum_cubes_in_side = 5\nnum_cubes_in_side_with_thickness = num_cubes_in_side - 2\nnum_cubes_in_side_with_thickness_squared = num_cubes_in_side_with_thickness ** 2\nnum_cubes_in_side_squared = num_cubes_in_side ** 2\nnum_cubes_in_side_with_thickness_cubed = num_cubes_in_side_with_thickness ** 3\nnum_cubes_in_side_cubed = num_cubes_in_side ** 3\nnum_cubes_in_hollow_cube = num_cubes_in_side_cubed - num_cubes_in_side_with_thickness_cubed\nnum_faces_in_hollow_cube = 6 * num_cubes_in_hollow_cube\nnum_faces_in_small_cubes = 6 * num_cubes_in_side_with_thickness_squared\n"], "generated_prediction": "6", "options": ["A)438", "B)550", "C)500", "D)450", "E)498"], "answer": "A", "prediction": "A"}
{"question": "In a chocolate store, all chocolates are either vanilla or cocoa flavored only. 10% of the chocolates are cocoa flavored, 90% of the rest are squashed. What percentage of the chocolates are both vanilla flavored and not squashed?", "generated": ["\npercent_cocoa = 10\npercent_squashed = 90\npercent_vanilla = 100 - percent_cocoa\npercent_vanilla_not_squashed = percent_vanilla - percent_squashed\nans = percent_vanilla_not_squashed", "\nchocolates_total = 100\nchocolates_cocoa = 10\nchocolates_vanilla = chocolates_total - chocolates_cocoa\nchocolates_vanilla_squashed = 0.9 * chocolates_vanilla\nchocolates_vanilla_not_squashed = chocolates_vanilla - chocolates_vanilla_squashed\nans = chocolates_vanilla_not_squashed / chocolates_total", "\ncocoa_flavored = 0.1\nvanilla_flavored = 1 - cocoa_flavored\nsquashed = 0.9\nnot_squashed = 1 - squashed\nvanilla_not_squashed = vanilla_flavored * not_squashed\nans = vanilla_not_squashed", "\ntotal_chocolates = 100\ncocoa_flavored_chocolates = 10\nvanilla_flavored_chocolates = total_chocolates - cocoa_flavored_chocolates\nsquashed_chocolates = 0.9 * vanilla_flavored_chocolates\nnot_squashed_chocolates = vanilla_flavored_chocolates - squashed_chocolates\nans = not_squashed_chocolates / total_chocolates", "\nnum_chocolates = 100\nnum_cocoa_flavored = 10\nnum_vanilla_flavored = num_chocolates - num_cocoa_flavored\nnum_squashed = 0.9 * num_vanilla_flavored\nnum_vanilla_not_squashed = num_vanilla_flavored - num_squashed\nans = num_vanilla_not_squashed / num_chocolates", "\ntotal_chocolates = 100\ncocoa_flavored_chocolates = 10\nvanilla_flavored_chocolates = total_chocolates - cocoa_flavored_chocolates\nsquashed_chocolates = 0.9 * vanilla_flavored_chocolates\nnot_squashed_chocolates = vanilla_flavored_chocolates - squashed_chocolates\nans = not_squashed_chocolates / total_chocolates", "\ncocoa_flavored = 0.1\nvanilla_flavored = 1 - cocoa_flavored\nsquashed = 0.9\nnot_squashed = 1 - squashed\nvanilla_not_squashed = vanilla_flavored * not_squashed\nans = vanilla_not_squashed * 100", "\ntotal_chocolates = 100\ncocoa_chocolates = 10\nvanilla_chocolates = total_chocolates - cocoa_chocolates\nsquashed_chocolates = 0.9 * vanilla_chocolates\nvanilla_not_squashed_chocolates = vanilla_chocolates - squashed_chocolates\nans = vanilla_not_squashed_chocolates / total_chocolates", "\ntotal_chocolates = 100\ncocoa_chocolates = 10\nvanilla_chocolates = total_chocolates - cocoa_chocolates\nsquashed_chocolates = 0.9 * vanilla_chocolates\nvanilla_not_squashed_chocolates = vanilla_chocolates - squashed_chocolates\nans = vanilla_not_squashed_chocolates / total_chocolates", "\ntotal_chocolates = 100\ncocoa_chocolates = 10\nvanilla_chocolates = total_chocolates - cocoa_chocolates\nsquashed_chocolates = 0.9 * vanilla_chocolates\nvanilla_not_squashed = vanilla_chocolates - squashed_chocolates\nans = vanilla_not_squashed / total_chocolates", "\ntotal_chocolates = 100\ncocoa_flavored_chocolates = 10\nvanilla_flavored_chocolates = total_chocolates - cocoa_flavored_chocolates\nsquashed_chocolates = 0.9 * vanilla_flavored_chocolates\nvanilla_flavored_and_not_squashed_chocolates = vanilla_flavored_chocolates - squashed_chocolates\nans = vanilla_flavored_and_not_squashed_chocolates / total_chocolates", "\ncocoa_flavored_chocolates = 0.1\nsquashed_chocolates = 0.9 * (1 - cocoa_flavored_chocolates)\nvanilla_flavored_chocolates = 1 - cocoa_flavored_chocolates\nvanilla_flavored_not_squashed_chocolates = vanilla_flavored_chocolates - squashed_chocolates\nans = vanilla_flavored_not_squashed_chocolates", "\ntotal_chocolates = 100\ncocoa_flavored_chocolates = 10\nvanilla_flavored_chocolates = total_chocolates - cocoa_flavored_chocolates\nsquashed_chocolates = 0.9 * vanilla_flavored_chocolates\nunsquashed_chocolates = vanilla_flavored_chocolates - squashed_chocolates\nans = unsquashed_chocolates / total_chocolates", "\nchocolates = 100\ncocoa_flavored = 10\nvanilla_flavored = chocolates - cocoa_flavored\nsquashed = 90 * vanilla_flavored / 100\nnot_squashed = vanilla_flavored - squashed\nans = not_squashed / chocolates", "\ntotal_chocolates = 100\ncocoa_flavored = 10\nvanilla_flavored = total_chocolates - cocoa_flavored\nsquashed = 90\nnot_squashed = total_chocolates - squashed\nvanilla_flavored_and_not_squashed = vanilla_flavored - squashed\nans = vanilla_flavored_and_not_squashed / total_chocolates", "\ntotal_chocolates = 100\ncocoa_flavored = 10\nvanilla_flavored = total_chocolates - cocoa_flavored\nsquashed = 90\nnot_squashed = total_chocolates - squashed\nvanilla_not_squashed = vanilla_flavored - not_squashed\nans = vanilla_not_squashed / total_chocolates", "\npercentage_cocoa_flavored = 10\npercentage_squashed = 90\npercentage_vanilla_flavored_not_squashed = 100 - percentage_cocoa_flavored - percentage_squashed\nans = percentage_vanilla_flavored_not_squashed", "\nvanilla_chocolates = Symbol('vanilla_chocolates', positive=True)\ncocoa_chocolates = 0.1 * 100\nsquashed_chocolates = 0.9 * (100 - cocoa_chocolates)\nvanilla_not_squashed_chocolates = vanilla_chocolates - squashed_chocolates\nsolution = solve_it(vanilla_chocolates + cocoa_chocolates - 100, vanilla_chocolates)\nans = vanilla_not_squashed_chocolates / solution[vanilla_chocolates]", "\ncocoa_flavored = 0.1\nvanilla_flavored = 1 - cocoa_flavored\nsquashed = 0.9 * vanilla_flavored\nunsquashed = 1 - squashed\nvanilla_flavored_unsquashed = unsquashed - cocoa_flavored\nans = vanilla_flavored_unsquashed", "\nvanilla_chocolates = Symbol('vanilla_chocolates', positive=True)\ncocoa_chocolates = 0.1 * 100\nsquashed_chocolates = 0.9 * (100 - cocoa_chocolates)\nvanilla_chocolates_not_squashed = vanilla_chocolates - squashed_chocolates\nsolution = solve_it(vanilla_chocolates_not_squashed - cocoa_chocolates, vanilla_chocolates)\nans = solution[vanilla_chocolates]", "\ntotal_chocolates = 100\ncocoa_flavored_chocolates = 10\nvanilla_flavored_chocolates = total_chocolates - cocoa_flavored_chocolates\nsquashed_chocolates = 0.9 * vanilla_flavored_chocolates\nvanilla_not_squashed_chocolates = vanilla_flavored_chocolates - squashed_chocolates\nans = vanilla_not_squashed_chocolates / total_chocolates", "\nnum_chocolates = 100\nchocolates_cocoa_flavored = 10\nchocolates_vanilla_flavored = num_chocolates - chocolates_cocoa_flavored\nchocolates_vanilla_flavored_squashed = 0.9 * chocolates_vanilla_flavored\nchocolates_vanilla_flavored_not_squashed = chocolates_vanilla_flavored - chocolates_vanilla_flavored_squashed\nans = chocolates_vanilla_flavored_not_squashed / num_chocolates", "\ntotal_chocolates = 100\ncocoa_flavored_chocolates = 10\nvanilla_flavored_chocolates = total_chocolates - cocoa_flavored_chocolates\nsquashed_chocolates = 0.9 * vanilla_flavored_chocolates\nvanilla_flavored_not_squashed_chocolates = vanilla_flavored_chocolates - squashed_chocolates\nans = vanilla_flavored_not_squashed_chocolates / total_chocolates", "\ntotal_chocolates = 100\ncocoa_flavored_chocolates = 10\nvanilla_flavored_chocolates = total_chocolates - cocoa_flavored_chocolates\nsquashed_chocolates = 0.9 * vanilla_flavored_chocolates\nvanilla_flavored_not_squashed_chocolates = vanilla_flavored_chocolates - squashed_chocolates\nans = vanilla_flavored_not_squashed_chocolates / total_chocolates", "\ntotal_chocolates = 100\ncocoa_flavored_chocolates = 10\nvanilla_flavored_chocolates = total_chocolates - cocoa_flavored_chocolates\nsquashed_chocolates = 0.9 * vanilla_flavored_chocolates\nvanilla_flavored_not_squashed_chocolates = vanilla_flavored_chocolates - squashed_chocolates\nans = vanilla_flavored_not_squashed_chocolates / total_chocolates", "\nnum_chocolates = 100\nnum_cocoa_flavored = 10\nnum_squashed = 90\nnum_vanilla_flavored = num_chocolates - num_cocoa_flavored\nnum_vanilla_flavored_not_squashed = num_vanilla_flavored - num_squashed\nans = num_vanilla_flavored_not_squashed / num_chocolates", "\ntotal_chocolates = 100\ncocoa_chocolates = 10\nvanilla_chocolates = total_chocolates - cocoa_chocolates\nsquashed_chocolates = vanilla_chocolates * 0.9\nvanilla_unsquashed_chocolates = vanilla_chocolates - squashed_chocolates\nans = vanilla_unsquashed_chocolates / total_chocolates", "\ntotal_chocolates = 100\ncocoa_flavored = 10\nvanilla_flavored = total_chocolates - cocoa_flavored\nsquashed = 90\nvanilla_flavored_and_not_squashed = vanilla_flavored - squashed\nans = vanilla_flavored_and_not_squashed / total_chocolates", "\nchocolates_not_cocoa_flavored = 90\nchocolates_squashed = 90 * 0.9\nchocolates_vanilla_flavored_not_squashed = chocolates_not_cocoa_flavored - chocolates_squashed\nchocolates_vanilla_flavored = chocolates_not_cocoa_flavored + 10\nans = chocolates_vanilla_flavored_not_squashed / chocolates_vanilla_flavored", "\nvanilla_not_squashed = Symbol('vanilla_not_squashed', positive=True)\nvanilla_squashed = Symbol('vanilla_squashed', positive=True)\ncocoa_not_squashed = Symbol('cocoa_not_squashed', positive=True)\ncocoa_squashed = Symbol('cocoa_squashed', positive=True)\nsolution = solve_it([0.1 * (cocoa_not_squashed + cocoa_squashed) - cocoa_squashed, 0.9 * (vanilla_not_squashed + vanilla_squashed) - vanilla_squashed, vanilla_not_squashed + vanilla_squashed + cocoa_not_squashed + cocoa_squashed - 1], [vanilla_not_squashed, vanilla_squashed, cocoa_not_squashed, cocoa_squashed])\nans = solution[vanilla_not_squashed]"], "generated_prediction": "0.09", "options": ["A)1%", "B)2%", "C)5%", "D)9%", "E)10%"], "answer": "D", "prediction": "D"}
{"question": "There is well of depth 30m and frog is at bottom of the well. He jumps 3m up one day and falls back 2m down the same day. How many days will it take for the frog to come out of the well?", "generated": ["\ndepth = 30\njump = 3\nfall = 2\nnum_days = math.ceil(depth / (jump - fall))\nans = num_days", "\ndepth = 30\nup_jump = 3\ndown_jump = 2\nnum_days = math.ceil(depth / (up_jump - down_jump))\nans = num_days", "\ndepth = 30\nup_jump = 3\ndown_jump = 2\nnum_days = math.ceil(depth / (up_jump - down_jump))\nans = num_days", "\ndepth = 30\njump_up = 3\njump_down = 2\nnum_days = math.ceil(depth / (jump_up - jump_down))\nans = num_days", "\ndepth = 30\njump_up = 3\njump_down = 2\nnum_days = math.ceil(depth / (jump_up - jump_down))\nans = num_days", "\ndepth = 30\njump_height = 3\nfall_height = 2\nnum_days = math.ceil(depth / jump_height)\nans = num_days", "\nheight = 30\njump_height = 3\nfall_height = 2\nnum_days = math.ceil(height / (jump_height - fall_height))\nans = num_days", "\ndepth = 30\njump = 3\nfall = 2\ndays = Symbol('days', positive=True)\nsolution = solve_it(depth - jump * days + fall * days, days)\nans = solution[days]", "\ndepth = 30\njump_up = 3\njump_down = 2\nnum_days = 0\nwhile depth > 0:\n    depth = depth - jump_up + jump_down\n    num_days += 1\nans = num_days", "\ndepth = 30\njump_up = 3\njump_down = 2\nnum_days = 0\nwhile depth > 0:\n    depth = depth - jump_up + jump_down\n    num_days += 1\nans = num_days", "\ndepth = 30\njump = 3\nfall = 2\ndays = 0\nwhile depth > 0:\n    days += 1\n    depth -= jump\n    depth += fall\nans = days", "\ndepth = 30\njump = 3\nfall = 2\ndays = 0\nwhile depth > 0:\n    days += 1\n    depth -= jump\n    depth += fall\nans = days", "\ndepth = 30\njump_distance = 3\nfall_distance = 2\ndays = 0\nwhile depth > 0:\n    depth -= jump_distance\n    days += 1\n    if depth > 0:\n        depth += fall_distance\n        days += 1\nans = days", "\ndepth = 30\njump_up = 3\njump_down = 2\ndays = 0\nwhile depth > 0:\n    depth = depth - jump_up + jump_down\n    days = days + 1\nans = days", "\ndepth = 30\njump = 3\nfall = 2\ndays = Symbol('days', positive=True)\nsolution = solve_it(depth - jump * days + fall * (days - 1) * days / 2, days)\nans = solution[days]", "\ndepth = 30\njump_distance = 3\nfall_distance = 2\nnum_days = Symbol('num_days', positive=True)\nsolution = solve_it(depth - num_days * (jump_distance - fall_distance), num_days)\nans = solution[num_days]", "\ndepth = 30\njump_distance = 3\nfall_distance = 2\ndays = Symbol('days', positive=True)\nsolution = solve_it(depth - jump_distance * days + fall_distance * days, days)\nans = solution[days]", "\ndepth = 30\njump_distance = 3\nfall_distance = 2\ndays = 0\nwhile depth > 0:\n    depth = depth - jump_distance\n    if depth > 0:\n        depth = depth + fall_distance\n    days = days + 1\nans = days", "\ndepth = 30\njump_up = 3\njump_down = 2\nnum_days = 0\nwhile depth > 0:\n    depth -= jump_up\n    num_days += 1\n    if depth > 0:\n        depth += jump_down\n        num_days += 1\nans = num_days", "\ndepth = 30\njump = 3\nfall = 2\ndays = 0\nwhile depth > 0:\n    days += 1\n    depth -= jump\n    depth += fall\nans = days", "\ndepth = 30\njump_up = 3\njump_down = 2\nnum_days = Symbol('num_days', positive=True)\ntotal_jump = num_days * (jump_up - jump_down)\nsolution = solve_it(total_jump - depth, num_days)\nans = solution[num_days]", "\ndepth = 30\njump_up = 3\njump_down = 2\ndays = 0\nwhile depth > 0:\n    days += 1\n    depth -= jump_up\n    depth += jump_down\nans = days", "\ndepth = 30\njump = 3\nfall = 2\nnum_days = Symbol('num_days', positive=True)\nsolution = solve_it(depth - jump * num_days + fall * (num_days - 1), num_days)\nans = solution[num_days]", "\ndepth = 30\njump = 3\nfall = 2\nnum_days = math.ceil(depth / jump)\nans = num_days", "\ndepth = 30\njump_distance = 3\nfall_distance = 2\ndays = 0\nwhile depth > 0:\n    depth = depth - jump_distance\n    if depth < 0:\n        break\n    depth = depth + fall_distance\n    days = days + 1\nans = days", "\ndepth = 30\njump_distance = 3\nfall_distance = 2\ndays = math.ceil(depth / (jump_distance - fall_distance))\nans = days", "\nwell_depth = 30\njump_height = 3\nfall_height = 2\nnum_days = well_depth / (jump_height - fall_height)\nans = math.ceil(num_days)", "\ndepth = 30\njump_up = 3\nfall_down = 2\ndays = 0\nwhile depth > 0:\n    depth = depth - jump_up + fall_down\n    days += 1\nans = days", "\ndepth = 30\njump_up = 3\njump_down = 2\ndays = 0\nwhile depth > 0:\n    days += 1\n    depth -= jump_up\n    if depth > 0:\n        depth += jump_down\nans = days", "\ndepth = 30\njump_distance = 3\nfall_distance = 2\ntotal_distance = depth + jump_distance\nnum_days = math.ceil(total_distance / (jump_distance - fall_distance))\nans = num_days"], "generated_prediction": "30", "options": ["A)25 days", "B)26 days", "C)27 days", "D)28 days", "E)29 days"], "answer": "D", "prediction": "B"}
{"question": "The sum of the 5 consecutive two digit odd numbers when divided by 10 becomes a perfect square, which of the following can be one of these 5 numbers?", "generated": ["\ndef is_perfect_square(n):\n    return math.sqrt(n) == int(math.sqrt(n))", "\noptions = [47, 91, 41, 67, 44]\nfor option in options:\n    if (option + 1 + option + 3 + option + 5 + option + 7 + option + 9) % 10 == 0:\n        ans = option\n        break", "\nnumbers = [47, 91, 41, 67, 44]\nfor number in numbers:\n    if (number + 3) % 10 == 0:\n        ans = number\n        break", "\nfor num in range(41, 91, 2):\n    if math.sqrt(num + 2 + num + 4 + num + 6 + num + 8 + num + 10) % 10 == 0:\n        ans = num\n        break", "\nfor num in range(41, 50):\n    if (num + 2 + 4 + 6 + 8) % 10 == 0:\n        ans = num\n        break", "\noptions = [47, 91, 41, 67, 44]\nfor option in options:\n    if (option + option + 2 + option + 4 + option + 6 + option + 8) % 10 == 0:\n        ans = option\n        break", "\noptions = [47, 91, 41, 67, 44]\nfor option in options:\n    if (option + option + 4 + option + 4 + 4 + option + 4 + 4 + 4) % 10 == 0:\n        ans = option\n        break", "\noptions = [47, 91, 41, 67, 44]\nfor option in options:\n    if (option + 3 + 5 + 7 + 9) % 10 == 0:\n        ans = option\n        break", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 5 + 10, number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num * 5 + 10 - math.sqrt(num * 5), num)\nans = solution[num]", "\nfor num in range(10, 100):\n    if num % 2 == 1:\n        sum = 0\n        for i in range(5):\n            sum += num + 2 * i\n        if math.sqrt(sum / 10) % 1 == 0:\n            ans = num\n            break", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * (number + 2) * (number + 4) * (number + 6) * (number + 8) / 10 - k ** 2, number)\nans = solution[number]", "\noptions = [47, 91, 41, 67, 44]\nfor option in options:\n    if (option + option + 4 + option + 8 + option + 12 + option + 16) % 10 == 0:\n        ans = option\n        break", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number ** 2 - (number + 2) ** 2 + (number + 4) ** 2 - (number + 6) ** 2 + (number + 8) ** 2, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number ** 2 - (number + 2) ** 2 - (number + 4) ** 2 - (number + 6) ** 2 - (number + 8) ** 2, number)\nans = solution[number]", "\nfor i in range(1, 100, 2):\n    if (i + 3 + 5 + 7 + 9) % 10 == 0:\n        ans = i\n        break", "\nfor number in range(10, 100):\n    if number % 2 == 1:\n        sum_of_numbers = number + number + 2 + number + 4 + number + 6\n        if math.sqrt(sum_of_numbers) % 10 == 0:\n            ans = number\n            break", "\nfor i in range(10, 100, 2):\n    sum_of_5_numbers = i + i + 2 + i + 4 + i + 6\n    if math.sqrt(sum_of_5_numbers / 10) % 1 == 0:\n        ans = i\n        break", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number ** 2 - (number + 2) ** 2 + (number + 4) ** 2 - (number + 6) ** 2 + (number + 8) ** 2, number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num ** 2 - (num + 2 + num + 4 + num + 6 + num + 8 + num + 10) / 10, num)\nans = solution[num]", "\nfor i in range(1, 10):\n    if (i * 10 + 1 + (i * 10 + 3) + (i * 10 + 5) + (i * 10 + 7) + (i * 10 + 9)) % 10 == 0:\n        ans = (i * 10 + 1, i * 10 + 3, i * 10 + 5, i * 10 + 7, i * 10 + 9)\n        break", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number ** 2 - (number + 2) ** 2 - (number + 4) ** 2 - (number + 6) ** 2 - (number + 8) ** 2, number)\nans = solution[number]", "\nfor i in range(1, 100, 2):\n    if math.sqrt(i + i + 2 + i + 4 + i + 6) % 10 == 0:\n        ans = i\n        break", "\nfor i in range(1, 100):\n    if i % 2 == 1:\n        sum_of_5_consecutive_numbers = i + i + 2 + i + 4 + i + 6\n        if math.sqrt(sum_of_5_consecutive_numbers / 10) == int(math.sqrt(sum_of_5_consecutive_numbers / 10)):\n            ans = i\n            break", "\nfor num in range(1, 100, 2):\n    if (num + 3 + 5 + 7 + 9) % 10 == 0:\n        ans = num\n        break", "\nfor i in range(1, 10):\n    if math.sqrt((5 * i + 2) / 10) % 1 == 0:\n        ans = i * 10 + 7\n        break", "\nfor i in range(41, 91):\n    if i % 2 == 1:\n        if (i + 2 + i + 4 + i + 6 + i + 8 + i + 10) % 10 == 0:\n            ans = i\n            break", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num * 5 + 10 - math.sqrt(num * 5), num)\nans = solution[num] * 10 + 7", "\nfor num in range(10, 100):\n    if num % 2 == 1:\n        sum_of_5_consecutive_numbers = num + num + 2 + num + 4 + num + 6 + num + 8\n        if math.sqrt(sum_of_5_consecutive_numbers / 10) % 1 == 0:\n            ans = num\n            break", "\nfor i in range(1, 10):\n    num = i * 10 + 1\n    sum_of_nums = num * 5 + 10 * (4 + 1) * 4 / 2\n    if math.sqrt(sum_of_nums) % 1 == 0:\n        ans = num\n        break"], "generated_prediction": "44", "options": ["A)47", "B)91", "C)41", "D)67", "E)44"], "answer": "C", "prediction": "E"}
{"demonstration": "\n# Write Python Code to solve the following questions. Store your result as a variable named 'ans'.\nfrom sympy import Symbol\nfrom sympy import simplify\nimport math\nfrom sympy import solve_it\n# solve_it(equations, variable): solving the equations and return the variable value.\n\n# Question: In a flight of 600 km, an aircraft was slowed down due to bad weather. Its average speed for the trip was reduced by 200 km/hr and the time of flight increased by 30 minutes. The duration of the flight is:\n# Answer option: ['A)1 hour', 'B)2 hours', 'C)3 hours', 'D)4 hours', 'E)5 hours']\nduration = Symbol('duration', positive=True)\ndelay = 30 / 60\ntotal_disntace = 600\noriginal_speed = total_disntace / duration\nreduced_speed = total_disntace / (duration + delay)\nsolution = solve_it(original_speed - reduced_speed - 200, duration)\nans = solution[duration]\n\n# Question: M men agree to purchase a gift for Rs. D. If 3 men drop out how much more will each have to contribute towards the purchase of the gift?\n# Answer options: ['A)D/(M-3)', 'B)MD/3', 'C)M/(D-3)', 'D)3D/(M2-3M)', 'E)None of these']\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)\n\n# Question: A sum of money at simple interest amounts to Rs. 815 in 3 years and to Rs. 854 in 4 years. The sum is:\n# Answer option: ['A)Rs. 650', 'B)Rs. 690', 'C)Rs. 698', 'D)Rs. 700', 'E)None of these']\ndeposit = Symbol('deposit', positive=True)\ninterest = Symbol('interest', positive=True)\nmoney_in_3_years = deposit + 3 * interest\nmoney_in_4_years = deposit + 4 * interest\nsolution = solve_it([money_in_3_years - 815, money_in_4_years - 854], [deposit, interest])\nans = solution[deposit]\n\n# Question: Find out which of the following values is the multiple of X, if it is divisible by 9 and 12?\n# Answer option: ['A)36', 'B)15', 'C)17', 'D)5', 'E)7']\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break\n\n# Question: 35% of the employees of a company are men. 60% of the men in the company speak French and 40% of the employees of the company speak French. What is % of the women in the company who do not speak French?\n# Answer option: ['A)4%', 'B)10%', 'C)96%', 'D)90.12%', 'E)70.77%']\nnum_women = 65\nmen_speaking_french = 0.6 * 35\nemployees_speaking_french = 0.4 * 100\nwomen_speaking_french = employees_speaking_french - men_speaking_french\nwomen_not_speaking_french=num_women - women_speaking_french\nans = women_not_speaking_french / num_women\n\n# Question: In one hour, a boat goes 11 km/hr along the stream and 5 km/hr against the stream. The speed of the boat in still water (in km/hr) is:\n# Answer option: ['A)4 kmph', 'B)5 kmph', 'C)6 kmph', 'D)7 kmph', 'E)8 kmph']\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nalong_stream_speed = 11\nagainst_stream_speed = 5\nsolution = solve_it([boat_speed + stream_speed - along_stream_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[boat_speed]\n\n# Question: The difference between simple interest and C.I. at the same rate for Rs.5000 for 2 years in Rs.72. The rate of interest is?\n# Answer option: ['A)10%', 'B)12%', 'C)6%', 'D)8%', 'E)4%']\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]\n\n# Question: The area of a rectangle is 15 square centimeters and the perimeter is 16 centimeters. What are the dimensions of the rectangle?\n# Answer option: ['A)2&4', 'B)3&5', 'C)4&6', 'D)5&7', 'E)6&8']\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 15\npermimeter = 16\nsolution = solve_it([width * height - area, 2 * (width + height) - permimeter], [width, height])\nans = (solution[width], solution[height])\n"}
{"question": "In a class, 8% of total students are interested in Football. 4/5 of total students are interested in Cricket. 10% of total students are interested in Basketball and remaining 20 students are not interested in any games. How many students are there in the class?", "generated": ["\nnum_students = Symbol('num_students', positive=True)\nfootball_students = 0.08 * num_students\ncricket_students = 0.8 * num_students\nbasketball_students = 0.1 * num_students\nsolution = solve_it([football_students + cricket_students + basketball_students + 20 - num_students], [num_students])\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nstudents_interested_in_football = 0.08 * num_students\nstudents_interested_in_cricket = 0.8 * num_students\nstudents_interested_in_basketball = 0.1 * num_students\nsolution = solve_it(students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + 20 - num_students, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nstudents_interested_in_football = 0.08 * num_students\nstudents_interested_in_cricket = 0.8 * num_students\nstudents_interested_in_basketball = 0.1 * num_students\nsolution = solve_it(students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + 20 - num_students, num_students)\nans = solution[num_students]", "\ntotal_students = Symbol('total_students', positive=True)\nfootball_students = 0.08 * total_students\ncricket_students = 0.8 * total_students\nbasketball_students = 0.1 * total_students\nsolution = solve_it(football_students + cricket_students + basketball_students + 20 - total_students, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nsolution = solve_it(students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + 20 - total_students, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nfootball_students = 0.08 * total_students\ncricket_students = 0.8 * total_students\nbasketball_students = 0.1 * total_students\nsolution = solve_it(football_students + cricket_students + basketball_students + 20 - total_students, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nfootball_students = 0.08 * total_students\ncricket_students = 0.8 * total_students\nbasketball_students = 0.1 * total_students\nsolution = solve_it(football_students + cricket_students + basketball_students + 20 - total_students, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball - total_students + 20], [total_students])\nans = solution[total_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_interested_in_football = 0.08 * num_students\nnum_students_interested_in_cricket = 0.8 * num_students\nnum_students_interested_in_basketball = 0.1 * num_students\nnum_students_interested_in_no_game = 20\nsolution = solve_it([num_students_interested_in_football + num_students_interested_in_cricket + num_students_interested_in_basketball + num_students_interested_in_no_game - num_students], [num_students])\nans = solution[num_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = total_students * 0.08\nstudents_interested_in_cricket = total_students * 0.8\nstudents_interested_in_basketball = total_students * 0.1\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students], [total_students])\nans = solution[total_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_football = 0.08 * num_students\nnum_students_cricket = 0.8 * num_students\nnum_students_basketball = 0.1 * num_students\nnum_students_no_games = 20\nsolution = solve_it([num_students_football + num_students_cricket + num_students_basketball + num_students_no_games - num_students], [num_students])\nans = solution[num_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students, students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball - total_students], [total_students])\nans = solution[total_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_interested_in_football = 0.08 * num_students\nnum_students_interested_in_cricket = 0.8 * num_students\nnum_students_interested_in_basketball = 0.1 * num_students\nnum_students_interested_in_any_game = num_students_interested_in_football + num_students_interested_in_cricket + num_students_interested_in_basketball\nsolution = solve_it(num_students - num_students_interested_in_any_game - 20, num_students)\nans = solution[num_students]", "\nfootball = Symbol('football', positive=True)\ncricket = Symbol('cricket', positive=True)\nbasketball = Symbol('basketball', positive=True)\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([football + cricket + basketball + 20 - total_students, football / total_students - 0.08, cricket / total_students - 0.8, basketball / total_students - 0.1], [football, cricket, basketball, total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 0.08 * total_students\nstudents_interested_in_cricket = 0.8 * total_students\nstudents_interested_in_basketball = 0.1 * total_students\nstudents_interested_in_no_games = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_interested_in_no_games - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\ninterested_in_football = 0.08 * total_students\ninterested_in_cricket = (4 / 5) * total_students\ninterested_in_basketball = 0.1 * total_students\ninterested_in_none = 20\nsolution = solve_it([interested_in_football + interested_in_cricket + interested_in_basketball + interested_in_none - total_students], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nnum_students_interested_in_football = 8 / 100 * total_students\nnum_students_interested_in_cricket = 4 / 5 * total_students\nnum_students_interested_in_basketball = 10 / 100 * total_students\nsolution = solve_it(total_students - num_students_interested_in_football - num_students_interested_in_cricket - num_students_interested_in_basketball - 20, total_students)\nans = solution[total_students]", "\nnum_students = Symbol('num_students', positive=True)\nstudents_interested_in_football = 0.08 * num_students\nstudents_interested_in_cricket = 0.8 * num_students\nstudents_interested_in_basketball = 0.1 * num_students\nstudents_interested_in_no_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_interested_in_no_game - num_students], [num_students])\nans = solution[num_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 8\nstudents_interested_in_cricket = 4 / 5 * total_students\nstudents_interested_in_basketball = 10\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students, students_interested_in_cricket - students_not_interested_in_any_game], [total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 8\nstudents_interested_in_cricket = 4 * total_students / 5\nstudents_interested_in_basketball = 10\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([total_students * students_interested_in_football / 100, total_students * students_interested_in_cricket / 100, total_students * students_interested_in_basketball / 100, total_students - students_not_interested_in_any_game], total_students)\nans = solution[total_students]", "\nfootball_students = Symbol('football_students', positive=True)\ncricket_students = Symbol('cricket_students', positive=True)\nbasketball_students = Symbol('basketball_students', positive=True)\ntotal_students = Symbol('total_students', positive=True)\nsolution = solve_it([football_students / total_students - 0.08, cricket_students / total_students - 0.8, basketball_students / total_students - 0.1, cricket_students + basketball_students + football_students + 20 - total_students], [football_students, cricket_students, basketball_students, total_students])\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_interested_in_football = 8\nstudents_interested_in_cricket = 4 / 5 * total_students\nstudents_interested_in_basketball = 10\nstudents_not_interested_in_any_game = 20\nsolution = solve_it([students_interested_in_football + students_interested_in_cricket + students_interested_in_basketball + students_not_interested_in_any_game - total_students, students_interested_in_cricket - students_interested_in_football], [total_students])\nans = solution[total_students]"], "generated_prediction": "1000.0", "options": ["A)850", "B)800", "C)900", "D)950", "E)1000"], "answer": "E", "prediction": "E"}
{"question": "Q is as much younger than R as he is older than T. If the sum of the ages of R and T is 50 years. What is definitely the difference between R and Q's age?", "generated": ["\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([R - Q - (Q - T), R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([R - Q - T, R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([R - Q - (Q - T), R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([R - Q - T, R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([R - Q - Q + T, R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - T, R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nT = Symbol('T', positive=True)\nQ = Symbol('Q', positive=True)\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, T, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([R - Q - (R - T), R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q, T])\nans = solution[Q] - solution[R]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - T, Q + R - 50], [Q, R])\nans = solution[Q] - solution[R]", "\nR = Symbol('R')\nT = Symbol('T')\nQ = Symbol('Q')\nsolution = solve_it([Q - R - R + T, R + T - 50], [Q, R, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([R - Q - Q + T, R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([R - Q - (Q - T), R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([R - Q - (Q - T), R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q])\nans = solution[Q] - solution[R]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([R - Q - (Q - T), R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - T, R + T - 50], [Q, R, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R', positive=True)\nQ = Symbol('Q', positive=True)\nT = Symbol('T', positive=True)\nsolution = solve_it([Q - R - T, R + T - 50], [Q, R, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([Q - R - (R - T), R + T - 50], [Q, R, T])\nans = solution[Q] - solution[R]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([Q - R - (R - T), R + T - 50], [Q, R, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nsolution = solve_it([Q - R - (R - T), R + T - 50], [R, Q, T])\nans = solution[R] - solution[Q]", "\nR = Symbol('R')\nQ = Symbol('Q')\nT = Symbol('T')\nage_difference_between_R_and_Q = R - Q\nage_difference_between_Q_and_T = Q - T\nsolution = solve_it([age_difference_between_R_and_Q + age_difference_between_Q_and_T - 50, age_difference_between_R_and_Q - age_difference_between_Q_and_T], [R, Q, T])\nans = abs(solution[R] - solution[Q])"], "generated_prediction": "2*T - 50", "options": ["A)22", "B)27", "C)29", "D)Cannot be determined", "E)None of the above"], "answer": "D", "prediction": "B"}
{"question": "Calculate the maximum distance you can travel with $8.50 on a cab which charges $3.50 for the first quarter-mile and 10 cents for each additional quarter mile.", "generated": ["\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.1 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.25 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.25 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + 0.25 * distance\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\nquarter_miles = Symbol('quarter_miles', positive=True)\ncost = 3.5 + 0.1 * quarter_miles\nsolution = solve_it(cost - 8.5, quarter_miles)\nans = solution[quarter_miles]", "\ndistance = Symbol('distance', positive=True)\ncost = 3.5 + distance * 0.25 * 0.1\nsolution = solve_it(cost - 8.5, distance)\nans = solution[distance]", "\nnum_quarters = Symbol('num_quarters', positive=True)\ncost = 3.5 + 0.1 * num_quarters\nsolution = solve_it(cost - 8.5, num_quarters)\nans = solution[num_quarters] * 0.25", "\ncost = Symbol('cost', positive=True)\ndistance = Symbol('distance', positive=True)\nsolution = solve_it(cost - 3.5 - 0.1 * distance, distance)\nans = solution[distance]", "\ncost = 8.5\ndistance = Symbol('distance', positive=True)\nsolution = solve_it(cost - 3.5 - 0.1 * distance, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ntotal_cost = 3.50 + 0.1 * distance\nsolution = solve_it(total_cost - 8.5, distance)\nans = solution[distance]", "\nnum_quarters = Symbol('num_quarters', positive=True)\ncost = 3.5 + 0.1 * num_quarters\nsolution = solve_it(cost - 8.5, num_quarters)\nans = solution[num_quarters] / 4", "\ndistance = Symbol('distance', positive=True)\nmoney = 8.5\nsolution = solve_it(money - 3.5 - distance * 0.25, distance)\nans = solution[distance]", "\nquarter_mile_cost = 3.5\nadditional_quarter_mile_cost = 0.1\nmile_cost = quarter_mile_cost + 3 * additional_quarter_mile_cost\nmax_distance = 8.5 / mile_cost\nans = max_distance", "\nquarter_mile_cost = 3.5\nadditional_quarter_mile_cost = 0.1\nmax_distance = math.floor(8.5 / (quarter_mile_cost + additional_quarter_mile_cost))\nans = max_distance * 0.25", "\nmoney = 8.5\ncost_per_quarter_mile = 3.5\ntotal_distance = 0\nwhile money >= cost_per_quarter_mile:\n    money -= cost_per_quarter_mile\n    total_distance += 0.25\n    cost_per_quarter_mile = 0.1\nans = total_distance", "\nquarter_mile_cost = 3.5\nadditional_quarter_mile_cost = 0.1\nmax_distance = 0\nwhile True:\n    max_distance += 0.25\n    cost = quarter_mile_cost + additional_quarter_mile_cost * max_distance\n    if cost > 8.5:\n        break\nans = max_distance", "\nquarter_mile = 0.25\ncost_per_quarter_mile = 0.1\ncost_per_mile = 4\ncost_per_quarter_mile_after_first = cost_per_quarter_mile + cost_per_mile\nmax_distance = 8.5 / cost_per_quarter_mile_after_first\nans = max_distance / quarter_mile"], "generated_prediction": "50.0", "options": ["A)11.75 miles", "B)12.75 miles", "C)17.75 miles", "D)14.75 miles", "E)10.75 miles"], "answer": "B", "prediction": "A"}
{"question": "In IPL season, Sachin current batting average is 51. In the finals, he scores 78 runs, then is batting average will be 54. Find out the total number of matches played by Sachin in this season.", "generated": ["\ncurrent_average = 51\nnew_average = 54\nruns_scored = 78\nmatches_played = Symbol('matches_played', positive=True)\nsolution = solve_it(matches_played * current_average + runs_scored - (matches_played + 1) * new_average, matches_played)\nans = solution[matches_played]", "\ncurrent_average = 51\nnew_average = 54\nruns_scored = 78\nmatches_played = Symbol('matches_played', positive=True)\nsolution = solve_it(matches_played * current_average + runs_scored - (matches_played + 1) * new_average, matches_played)\nans = solution[matches_played]", "\ntotal_runs = Symbol('total_runs', positive=True)\nnum_matches = Symbol('num_matches', positive=True)\ncurrent_average = 51\nnew_average = 54\nsolution = solve_it([total_runs / num_matches - current_average, (total_runs + 78) / (num_matches + 1) - new_average], [total_runs, num_matches])\nans = solution[num_matches]", "\ntotal_runs = Symbol('total_runs', positive=True)\ntotal_matches = Symbol('total_matches', positive=True)\ncurrent_average = 51\nnew_average = 54\nsolution = solve_it([total_runs / total_matches - current_average, (total_runs + 78) / (total_matches + 1) - new_average], [total_runs, total_matches])\nans = solution[total_matches]", "\ncurrent_average = 51\nnew_average = 54\nruns_scored = 78\nmatches_played = (runs_scored - current_average) / (new_average - current_average)\nans = matches_played", "\nmatches = Symbol('matches', positive=True)\ninitial_average = 51\nfinal_average = 54\nruns_scored = 78\nsolution = solve_it((matches * initial_average + runs_scored) / (matches + 1) - final_average, matches)\nans = solution[matches]", "\nmatches = Symbol('matches', positive=True)\ncurrent_average = 51\nruns_scored_in_finals = 78\nnew_average = 54\nsolution = solve_it((matches * current_average + runs_scored_in_finals) / (matches + 1) - new_average, matches)\nans = solution[matches]", "\nmatches = Symbol('matches', positive=True)\nruns = Symbol('runs', positive=True)\ncurrent_average = 51\nnew_average = 54\nnew_runs = 78\nsolution = solve_it([runs / matches - current_average, (runs + new_runs) / (matches + 1) - new_average], [matches, runs])\nans = solution[matches]", "\ntotal_runs = Symbol('total_runs', positive=True)\ntotal_matches = Symbol('total_matches', positive=True)\ncurrent_average = 51\nnew_average = 54\nnew_runs = 78\nsolution = solve_it([total_runs + new_runs - total_matches * new_average, total_runs / total_matches - current_average], [total_runs, total_matches])\nans = solution[total_matches]", "\ntotal_runs = Symbol('total_runs', positive=True)\ntotal_matches = Symbol('total_matches', positive=True)\ncurrent_average = 51\nnew_average = 54\nnew_runs = 78\nsolution = solve_it([total_runs / total_matches - current_average, (total_runs + new_runs) / (total_matches + 1) - new_average], [total_runs, total_matches])\nans = solution[total_matches]", "\nbatting_average = Symbol('batting_average', positive=True)\ncurrent_batting_average = 51\nruns_scored = 78\nsolution = solve_it(batting_average * (batting_average + runs_scored) - current_batting_average * (current_batting_average + runs_scored), batting_average)\nans = solution[batting_average]", "\nmatches = Symbol('matches', positive=True)\nruns = Symbol('runs', positive=True)\naverage = 51\nruns_in_final = 78\nnew_average = 54\nsolution = solve_it([matches * average - runs, (matches + 1) * new_average - (runs + runs_in_final)], [matches, runs])\nans = solution[matches]", "\ntotal_runs = Symbol('total_runs', positive=True)\nnum_matches = Symbol('num_matches', positive=True)\ncurrent_avg = 51\nnew_avg = 54\nsolution = solve_it([total_runs + 78 - (num_matches + 1) * new_avg, num_matches * current_avg - total_runs], [total_runs, num_matches])\nans = solution[num_matches]", "\ntotal_runs = Symbol('total_runs', positive=True)\ntotal_matches = Symbol('total_matches', positive=True)\ncurrent_average = 51\nfinal_average = 54\nruns_in_final_match = 78\nsolution = solve_it([total_runs / total_matches - current_average, (total_runs + runs_in_final_match) / (total_matches + 1) - final_average], [total_runs, total_matches])\nans = solution[total_matches]", "\ncurrent_average = 51\nnew_average = 54\nnew_runs = 78\nmatches = Symbol('matches', positive=True)\nsolution = solve_it((matches * current_average + new_runs) / (matches + 1) - new_average, matches)\nans = solution[matches]", "\nruns_before_final = 51 * 6\nruns_after_final = (runs_before_final + 78) * 7\ntotal_matches = 7\nans = total_matches", "\nbatting_average = Symbol('batting_average', positive=True)\nruns_scored = Symbol('runs_scored', positive=True)\nnum_matches = Symbol('num_matches', positive=True)\nsolution = solve_it([batting_average * num_matches - runs_scored, (batting_average * num_matches + 78) / (num_matches + 1) - 54], [batting_average, num_matches])\nans = solution[num_matches]", "\nmatches = Symbol('matches', positive=True)\ncurrent_average = 51\nnew_average = 54\nnew_runs = 78\nnew_runs_needed = matches * new_average - matches * current_average + new_runs\nsolution = solve_it(new_runs_needed, matches)\nans = solution[matches]", "\nmatches = Symbol('matches', positive=True)\nruns = Symbol('runs', positive=True)\naverage = 51\nsolution = solve_it([matches * average - runs, (matches + 1) * 54 - (runs + 78)], [matches, runs])\nans = solution[matches]", "\ncurrent_average = 51\nnew_average = 54\nnew_runs = 78\ntotal_runs = (current_average * (new_average - current_average) + new_runs) / new_average\ntotal_matches = total_runs / new_average\nans = total_matches", "\ninitial_avg = 51\nfinal_avg = 54\nruns_in_final = 78\nmatches = Symbol('matches', positive=True)\nsolution = solve_it(matches * initial_avg + runs_in_final - (matches + 1) * final_avg, matches)\nans = solution[matches]", "\ntotal_runs = Symbol('total_runs', positive=True)\ntotal_matches = Symbol('total_matches', positive=True)\nbatting_average = 51\nbatting_average_after_finals = 54\nruns_in_finals = 78\nsolution = solve_it([total_runs / total_matches - batting_average, (total_runs + runs_in_finals) / (total_matches + 1) - batting_average_after_finals], [total_runs, total_matches])\nans = solution[total_matches]", "\nmatches_played = Symbol('matches_played', positive=True)\nruns_scored = Symbol('runs_scored', positive=True)\ncurrent_average = 51\nruns_scored_in_finals = 78\nnew_average = 54\nsolution = solve_it([runs_scored / matches_played - current_average, (runs_scored + runs_scored_in_finals) / (matches_played + 1) - new_average], [runs_scored, matches_played])\nans = solution[matches_played]", "\nbatting_average = Symbol('batting_average', positive=True)\nscore = Symbol('score', positive=True)\nnum_matches = Symbol('num_matches', positive=True)\nsolution = solve_it([batting_average * num_matches - score, (batting_average + 3) * (num_matches + 1) - (score + 78)], [batting_average, score, num_matches])\nans = solution[num_matches]", "\nmatches_played = Symbol('matches_played', positive=True)\nruns_scored = Symbol('runs_scored', positive=True)\ncurrent_average = 51\nruns_scored_in_final = 78\nnew_average = 54\nsolution = solve_it([runs_scored / matches_played - current_average, (runs_scored + runs_scored_in_final) / (matches_played + 1) - new_average], [runs_scored, matches_played])\nans = solution[matches_played]", "\ncurrent_average = 51\nnew_average = 54\nnew_runs = 78\nnew_matches = Symbol('new_matches', positive=True)\nnew_total_runs = new_average * (new_matches + 1)\nsolution = solve_it(new_total_runs - (current_average * new_matches + new_runs), new_matches)\nans = solution[new_matches]", "\ncurrent_average = 51\nruns_scored_in_finals = 78\nnew_average = 54\nmatches_played = (runs_scored_in_finals + current_average * matches_played - new_average * matches_played) / (new_average - current_average)\nans = matches_played", "\nsachin_runs = Symbol('sachin_runs', positive=True)\nnum_matches = Symbol('num_matches', positive=True)\nsachin_runs_before_finals = 51 * (num_matches - 1)\nsachin_runs_after_finals = sachin_runs_before_finals + 78\nsolution = solve_it(sachin_runs_after_finals / num_matches - 54, num_matches)\nans = solution[num_matches]", "\nruns_scored = Symbol('runs_scored', positive=True)\nmatches_played = Symbol('matches_played', positive=True)\nruns_scored_in_finals = 78\ncurrent_batting_average = 51\nnew_batting_average = 54\nsolution = solve_it([runs_scored / matches_played - current_batting_average, runs_scored / matches_played - new_batting_average, runs_scored - runs_scored_in_finals], [runs_scored, matches_played])\nans = solution[matches_played]", "\nmatches_played = Symbol('matches_played', positive=True)\ntotal_runs_scored = Symbol('total_runs_scored', positive=True)\naverage_before_finals = 51\nruns_scored_in_finals = 78\naverage_after_finals = 54\nsolution = solve_it([total_runs_scored / matches_played - average_before_finals, total_runs_scored + runs_scored_in_finals - average_after_finals * (matches_played + 1)], [matches_played, total_runs_scored])\nans = solution[matches_played]"], "generated_prediction": "8.0", "options": ["A)6", "B)8", "C)9", "D)10", "E)11"], "answer": "C", "prediction": "B"}
{"question": "Amy is organizing her bookshelves and finds that she has 10 different types of books. She then codes each book with either a single letter or a pair of two different letters. If each type of book is uniquely represented by either a single letter or pair of letters, what is the smallest number of letters Amy will need to create the codes for all 10 types of books? (Assume the order of letters in a pair does not matter.)", "generated": ["\nans = 10", "\nans = 10", "\nans = 10", "\nans = 10", "\nbooks = 10\nans = math.ceil(math.log(books, 2))", "\nans = math.ceil(math.log(10, 2))", "\nans = math.ceil(math.log(10, 2))", "\nans = math.ceil(math.log(10, 2))", "\nnum_books = 10\nnum_letters = 3", "\nans = math.ceil(math.log(10, 2))", "\nans = math.ceil(math.log(10, 2))", "\nans = math.ceil(math.log(10, 2))", "\nans = math.ceil(math.log(10, 2))", "\nnum_books = 10\nans = math.ceil(math.log(num_books, 2))", "\nnum_books = 10\nans = math.ceil(math.log(num_books, 2))", "\nnum_books = 10\nans = math.ceil(math.log(num_books, 2))", "\nans = math.ceil(math.log(10, 26))", "\nnum_books = 10\nnum_letters = 0\nwhile True:\n    num_codes = num_letters * (num_letters + 1) / 2\n    if num_codes >= num_books:\n        break\n    num_letters += 1\nans = num_letters", "\nnum_books = 10\nnum_letters = 3\nwhile True:\n    if num_books <= num_letters * (num_letters - 1) / 2:\n        break\n    num_letters += 1\nans = num_letters", "\nnum_books = 10\nnum_letters = 3\nwhile math.factorial(num_letters) < num_books:\n    num_letters += 1\nans = num_letters", "\nnum_books = 10\nnum_letters = 3\nnum_pairs = math.ceil(num_books / num_letters)\nnum_letters_required = num_letters + num_pairs\nans = num_letters_required", "\nnum_books = 10\nnum_letters = Symbol('num_letters', positive=True)\nnum_pairs = Symbol('num_pairs', positive=True)\nsolution = solve_it([num_pairs + num_letters - num_books, num_pairs * 2 - num_letters], [num_letters, num_pairs])\nans = solution[num_letters]", "\nnum_books = 10\nnum_codes = math.ceil(math.log2(num_books))\nnum_letters = num_codes\nif num_codes > 1:\n    num_letters += num_codes - 1\nans = num_letters", "\n# Hint: Use the concept of combinations.\nfrom math import factorial\nans = factorial(10) / (factorial(10 - 2) * factorial(2))", "\n# A = 10\n# B = 10 * 9\n# C = 10 * 9 * 8\n# D = 10 * 9 * 8 * 7\n# E = 10 * 9 * 8 * 7 * 6\n# F = 10 * 9 * 8 * 7 * 6 * 5\n# G = 10 * 9 * 8 * 7 * 6 * 5 * 4\n# H = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3\n# I = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2\n# J = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1\n# K = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 * 0\n# L = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 * 0 * 0\n# M = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 * 0 * 0 * 0\n# N = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 * 0 * 0 * 0 * 0\n# O =", "\n# Hint: Use combinations\nimport itertools\nnum_books = 10\nans = len(list(itertools.combinations(range(1, num_books + 1), 2))) + num_books", "\n# Hint: https://www.geeksforgeeks.org/count-possible-decodings-given-digit-sequence/\ndef count_decoding(digits, n):\n    count = [0] * (n + 1)\n    count[0] = 1\n    count[1] = 1\n    for i in range(2, n + 1):\n        count[i] = 0\n        if (digits[i - 1] > '0'):\n            count[i] = count[i - 1]\n        if (digits[i - 2] == '1' or (digits[i - 2] == '2' and digits[i - 1] < '7')):\n            count[i] += count[i - 2]\n    return count[n]\nans = count_decoding('1234567890', 10)", "\n# Hint: Use the concept of combinations\n# https://en.wikipedia.org/wiki/Combination\n# https://docs.sympy.org/latest/modules/functions/combinatorial.html\nfrom sympy.functions.combinatorial.numbers import nC\nnum_books = 10\nnum_codes = Symbol('num_codes', positive=True)\nnum_codes_with_single_letter = nC(num_codes, 1)\nnum_codes_with_two_letters = nC(num_codes, 2)\nsolution = solve_it(num_codes_with_single_letter + num_codes_with_two_letters - num_books, num_codes)\nans = solution[num_codes]", "\n# Hint: Use the formula for combination.\n# nCr = n! / (r! * (n-r)!)\n# nPr = n! / (n-r)!\n# n! = n * (n-1) * (n-2) * ... * 1\n# 0! = 1\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)", "\n# Answer: 5\n# Explanation: The smallest number of letters Amy will need to create the codes for all 10 types of books is 5. She can code each book with either a single letter or a pair of two different letters.\n# If she codes each book with a single letter, she will need 10 letters.\n# If she codes each book with a pair of two different letters, she will need 5 letters.\n# So, the smallest number of letters Amy will need to create the codes for all 10 types of books is 5."], "generated_prediction": "4", "options": ["A)3", "B)4", "C)5", "D)10", "E)20"], "answer": "D", "prediction": "B"}
{"question": "A rectangular piece of 150 sq m has a length which is 1m more than the 4 times the breadth. What is the perimeter of the piece?", "generated": ["\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\narea = 150\nsolution = solve_it([width * length - area, length - 4 * width - 1], [width, length])\nans = 2 * (solution[width] + solution[length])", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\narea = 150\nsolution = solve_it([width * length - area, length - 4 * width - 1], [width, length])\nans = 2 * (solution[width] + solution[length])", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\narea = 150\nsolution = solve_it([width * length - area, length - 4 * width - 1], [width, length])\nans = 2 * (solution[width] + solution[length])", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\narea = 150\nsolution = solve_it([width * length - area, length - 4 * width - 1], [width, length])\nans = 2 * (solution[width] + solution[length])", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\narea = 150\nsolution = solve_it([width * length - area, length - 4 * width - 1], [width, length])\nans = 2 * (solution[width] + solution[length])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 150\nsolution = solve_it([width * height - area, width - 4 * height], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])", "\nlength = Symbol('length', positive=True)\nbreadth = Symbol('breadth', positive=True)\narea = 150\nsolution = solve_it([length * breadth - area, length - 4 * breadth - 1], [length, breadth])\nans = 2 * (solution[length] + solution[breadth])"], "generated_prediction": "62.0", "options": ["A)60 m", "B)61 m", "C)62 m", "D)63 m", "E)64 m"], "answer": "C", "prediction": "C"}
{"question": "One gram of a certain health food contains 9 percent of the minimum daily requirement of vitamin E and 8 percent of the minimum daily requirement of vitamin A. If vitamins E and A are to be obtained from no other source, how many grams of the health food must be eaten daily to provide at least the minimum daily requirement of both vitamins?", "generated": ["\nvitamin_e = Symbol('vitamin_e', positive=True)\nvitamin_a = Symbol('vitamin_a', positive=True)\nsolution = solve_it([vitamin_e - 9, vitamin_a - 8], [vitamin_e, vitamin_a])\nans = solution[vitamin_e]", "\ngrams = Symbol('grams', positive=True)\nvitamin_e = 0.09 * grams\nvitamin_a = 0.08 * grams\nsolution = solve_it([vitamin_e - 1, vitamin_a - 1], grams)\nans = solution[grams]", "\nvitamin_e = Symbol('vitamin_e', positive=True)\nvitamin_a = Symbol('vitamin_a', positive=True)\nvitamin_e_percent = 9\nvitamin_a_percent = 8\nsolution = solve_it([vitamin_e - vitamin_e_percent, vitamin_a - vitamin_a_percent], [vitamin_e, vitamin_a])\nans = solution[vitamin_e]", "\ngrams = Symbol('grams', positive=True)\nvitamin_E_percentage = 9\nvitamin_A_percentage = 8\nsolution = solve_it([grams * vitamin_E_percentage / 100, grams * vitamin_A_percentage / 100], grams)\nans = solution[grams]", "\ngrams = Symbol('grams', positive=True)\nvitamin_e_required = grams * 0.09\nvitamin_a_required = grams * 0.08\nsolution = solve_it([vitamin_e_required - 1, vitamin_a_required - 1], grams)\nans = solution[grams]", "\ngrams_of_food = Symbol('grams_of_food', positive=True)\nvitamin_e_in_food = 0.09 * grams_of_food\nvitamin_a_in_food = 0.08 * grams_of_food\nsolution = solve_it([vitamin_e_in_food - 1, vitamin_a_in_food - 1], grams_of_food)\nans = solution[grams_of_food]", "\ngrams_of_food = Symbol('grams_of_food', positive=True)\nvitamin_e_percent = 9\nvitamin_a_percent = 8\nsolution = solve_it([grams_of_food * vitamin_e_percent / 100 - 1, grams_of_food * vitamin_a_percent / 100 - 1], grams_of_food)\nans = solution[grams_of_food]", "\nvitamin_E_requirement = Symbol('vitamin_E_requirement', positive=True)\nvitamin_A_requirement = Symbol('vitamin_A_requirement', positive=True)\nvitamin_E_percentage = 9\nvitamin_A_percentage = 8\nsolution = solve_it([vitamin_E_requirement * vitamin_E_percentage / 100 - vitamin_E_requirement, vitamin_A_requirement * vitamin_A_percentage / 100 - vitamin_A_requirement], [vitamin_E_requirement, vitamin_A_requirement])\nans = solution[vitamin_E_requirement]", "\nvitamin_E_req = Symbol('vitamin_E_req', positive=True)\nvitamin_A_req = Symbol('vitamin_A_req', positive=True)\nvitamin_E_in_1_gram = 0.09\nvitamin_A_in_1_gram = 0.08\nsolution = solve_it([vitamin_E_req - vitamin_E_in_1_gram, vitamin_A_req - vitamin_A_in_1_gram], [vitamin_E_req, vitamin_A_req])\nans = solution[vitamin_E_req]", "\nvitamin_E = 0.09\nvitamin_A = 0.08\nminimum_daily_requirement = 1\nsolution = solve_it([vitamin_E * minimum_daily_requirement, vitamin_A * minimum_daily_requirement], [vitamin_E, vitamin_A])\nans = solution[vitamin_E]", "\nvitamin_e = Symbol('vitamin_e', positive=True)\nvitamin_a = Symbol('vitamin_a', positive=True)\nvitamin_e_requirement = 9\nvitamin_a_requirement = 8\nsolution = solve_it([vitamin_e - vitamin_e_requirement, vitamin_a - vitamin_a_requirement], [vitamin_e, vitamin_a])\nans = solution[vitamin_e] + solution[vitamin_a]", "\nvitamin_e = Symbol('vitamin_e', positive=True)\nvitamin_a = Symbol('vitamin_a', positive=True)\nvitamin_e_percent = 9\nvitamin_a_percent = 8\nsolution = solve_it([vitamin_e / vitamin_e_percent - vitamin_a / vitamin_a_percent], [vitamin_e])\nans = solution[vitamin_e]", "\nvitamin_e = Symbol('vitamin_e', positive=True)\nvitamin_a = Symbol('vitamin_a', positive=True)\nvitamin_e_percentage = 9\nvitamin_a_percentage = 8\nsolution = solve_it([vitamin_e / vitamin_e_percentage, vitamin_a / vitamin_a_percentage], [vitamin_e, vitamin_a])\nans = solution[vitamin_e]", "\nvitamin_e_percentage = 9\nvitamin_a_percentage = 8\nminimum_daily_requirement_vitamin_e = Symbol('minimum_daily_requirement_vitamin_e', positive=True)\nminimum_daily_requirement_vitamin_a = Symbol('minimum_daily_requirement_vitamin_a', positive=True)\nsolution = solve_it([minimum_daily_requirement_vitamin_e * vitamin_e_percentage / 100, minimum_daily_requirement_vitamin_a * vitamin_a_percentage / 100], [minimum_daily_requirement_vitamin_e, minimum_daily_requirement_vitamin_a])\nans = solution[minimum_daily_requirement_vitamin_e]", "\nvitamin_E_percent = 9\nvitamin_A_percent = 8\nvitamin_E_daily_requirement = Symbol('vitamin_E_daily_requirement', positive=True)\nvitamin_A_daily_requirement = Symbol('vitamin_A_daily_requirement', positive=True)\nsolution = solve_it([vitamin_E_daily_requirement * vitamin_E_percent / 100, vitamin_A_daily_requirement * vitamin_A_percent / 100], [vitamin_E_daily_requirement, vitamin_A_daily_requirement])\nans = solution[vitamin_E_daily_requirement]", "\ngrams = Symbol('grams', positive=True)\ndaily_requirement_vitamin_E = grams * 9 / 100\ndaily_requirement_vitamin_A = grams * 8 / 100\nsolution = solve_it([daily_requirement_vitamin_E - 1, daily_requirement_vitamin_A - 1], grams)\nans = solution[grams]", "\nvitamin_E_percent = 9\nvitamin_A_percent = 8\nminimum_daily_requirement = 100\ngrams_of_health_food = Symbol('grams_of_health_food', positive=True)\nsolution = solve_it([grams_of_health_food * vitamin_E_percent - minimum_daily_requirement, grams_of_health_food * vitamin_A_percent - minimum_daily_requirement], grams_of_health_food)\nans = solution[grams_of_health_food]", "\nvitamin_E_percentage = 9\nvitamin_A_percentage = 8\nvitamin_E_required = Symbol('vitamin_E_required', positive=True)\nvitamin_A_required = Symbol('vitamin_A_required', positive=True)\ngrams_required = Symbol('grams_required', positive=True)\nsolution = solve_it([vitamin_E_required / vitamin_E_percentage - grams_required, vitamin_A_required / vitamin_A_percentage - grams_required], [vitamin_E_required, vitamin_A_required, grams_required])\nans = solution[grams_required]", "\nvitamin_e_daily_requirement = Symbol('vitamin_e_daily_requirement', positive=True)\nvitamin_a_daily_requirement = Symbol('vitamin_a_daily_requirement', positive=True)\nvitamin_e_in_1_gram = 0.09\nvitamin_a_in_1_gram = 0.08\nsolution = solve_it([vitamin_e_in_1_gram * vitamin_e_daily_requirement - 1, vitamin_a_in_1_gram * vitamin_a_daily_requirement - 1], [vitamin_e_daily_requirement, vitamin_a_daily_requirement])\nans = solution[vitamin_e_daily_requirement]", "\nvitamin_E_percentage = 9\nvitamin_A_percentage = 8\nvitamin_E_required = 1\nvitamin_A_required = 1\nvitamin_E_provided = Symbol('vitamin_E_provided', positive=True)\nvitamin_A_provided = Symbol('vitamin_A_provided', positive=True)\nsolution = solve_it([vitamin_E_provided * vitamin_E_percentage / 100 - vitamin_E_required, vitamin_A_provided * vitamin_A_percentage / 100 - vitamin_A_required], [vitamin_E_provided, vitamin_A_provided])\nans = solution[vitamin_E_provided]", "\nvitamin_e_percent = 9\nvitamin_a_percent = 8\nvitamin_e_required = Symbol('vitamin_e_required', positive=True)\nvitamin_a_required = Symbol('vitamin_a_required', positive=True)\ngrams_required = Symbol('grams_required', positive=True)\nsolution = solve_it([vitamin_e_percent * grams_required - vitamin_e_required, vitamin_a_percent * grams_required - vitamin_a_required], [grams_required, vitamin_e_required, vitamin_a_required])\nans = solution[grams_required]", "\nvitamin_E_percentage = 9\nvitamin_A_percentage = 8\nvitamin_E_required = Symbol('vitamin_E_required', positive=True)\nvitamin_A_required = Symbol('vitamin_A_required', positive=True)\ngrams_of_health_food = Symbol('grams_of_health_food', positive=True)\nsolution = solve_it([grams_of_health_food * vitamin_E_percentage / 100 - vitamin_E_required, grams_of_health_food * vitamin_A_percentage / 100 - vitamin_A_required], [grams_of_health_food, vitamin_E_required, vitamin_A_required])\nans = solution[grams_of_health_food]", "\nvitamin_e_percent = 9\nvitamin_a_percent = 8\nvitamin_e_percent_per_gram = Symbol('vitamin_e_percent_per_gram', positive=True)\nvitamin_a_percent_per_gram = Symbol('vitamin_a_percent_per_gram', positive=True)\nsolution = solve_it([vitamin_e_percent_per_gram - vitamin_e_percent / 100, vitamin_a_percent_per_gram - vitamin_a_percent / 100], [vitamin_e_percent_per_gram, vitamin_a_percent_per_gram])\nans = solution[vitamin_e_percent_per_gram] + solution[vitamin_a_percent_per_gram]", "\nvitamin_e_req = Symbol('vitamin_e_req', positive=True)\nvitamin_a_req = Symbol('vitamin_a_req', positive=True)\nvitamin_e_in_1_gram = 9\nvitamin_a_in_1_gram = 8\nsolution = solve_it([vitamin_e_req / vitamin_e_in_1_gram, vitamin_a_req / vitamin_a_in_1_gram], [vitamin_e_req, vitamin_a_req])\nans = solution[vitamin_e_req] + solution[vitamin_a_req]", "\nvitamin_E_required = Symbol('vitamin_E_required', positive=True)\nvitamin_A_required = Symbol('vitamin_A_required', positive=True)\nvitamin_E_in_gram = 0.09\nvitamin_A_in_gram = 0.08\nsolution = solve_it([vitamin_E_in_gram * vitamin_E_required - vitamin_E_required, vitamin_A_in_gram * vitamin_A_required - vitamin_A_required], [vitamin_E_required, vitamin_A_required])\nans = solution[vitamin_E_required]", "\nvitamin_E = Symbol('vitamin_E', positive=True)\nvitamin_A = Symbol('vitamin_A', positive=True)\nvitamin_E_percent = 9\nvitamin_A_percent = 8\nsolution = solve_it([vitamin_E / vitamin_E_percent - vitamin_A / vitamin_A_percent, vitamin_E + vitamin_A - 1], [vitamin_E, vitamin_A])\nans = solution[vitamin_E] + solution[vitamin_A]", "\nvitamin_e_percentage = 9\nvitamin_a_percentage = 8\nvitamin_e_required = Symbol('vitamin_e_required', positive=True)\nvitamin_a_required = Symbol('vitamin_a_required', positive=True)\nsolution = solve_it([vitamin_e_required * vitamin_e_percentage / 100, vitamin_a_required * vitamin_a_percentage / 100], [vitamin_e_required, vitamin_a_required])\nans = solution[vitamin_e_required]", "\nvitamin_E = Symbol('vitamin_E', positive=True)\nvitamin_A = Symbol('vitamin_A', positive=True)\ngrams_of_food = Symbol('grams_of_food', positive=True)\nmin_daily_requirement_vitamin_E = 9 * grams_of_food / 100\nmin_daily_requirement_vitamin_A = 8 * grams_of_food / 100\nsolution = solve_it([min_daily_requirement_vitamin_E - vitamin_E, min_daily_requirement_vitamin_A - vitamin_A], [grams_of_food])\nans = solution[grams_of_food]", "\nvitamin_e_percent = 9\nvitamin_a_percent = 8\nvitamin_e_daily_requirement = Symbol('vitamin_e_daily_requirement', positive=True)\nvitamin_a_daily_requirement = Symbol('vitamin_a_daily_requirement', positive=True)\nfood_grams = Symbol('food_grams', positive=True)\nsolution = solve_it([vitamin_e_daily_requirement * food_grams / 100 - vitamin_e_daily_requirement, vitamin_a_daily_requirement * food_grams / 100 - vitamin_a_daily_requirement], [vitamin_e_daily_requirement, vitamin_a_daily_requirement])\nans = solution[vitamin_e_daily_requirement]", "\nvitamin_E_percentage = 9\nvitamin_A_percentage = 8\nvitamin_E_required = Symbol('vitamin_E_required', positive=True)\nvitamin_A_required = Symbol('vitamin_A_required', positive=True)\nvitamin_E_in_food = Symbol('vitamin_E_in_food', positive=True)\nvitamin_A_in_food = Symbol('vitamin_A_in_food', positive=True)\nsolution = solve_it([vitamin_E_in_food - vitamin_E_required * vitamin_E_percentage, vitamin_A_in_food - vitamin_A_required * vitamin_A_percentage], [vitamin_E_in_food, vitamin_A_in_food])\nans = solution[vitamin_E_in_food] + solution[vitamin_A_in_food]"], "generated_prediction": "None", "options": ["A)8.5", "B)10.5", "C)12.5", "D)14.5", "E)16.5"], "answer": "C", "prediction": "None"}
{"question": "Assistants are needed to prepare for preparation. Each helper can make either 2 large cakes or 35 small cakes/hr. The kitchen is available for 3 hours and 20 large cakes & 700 small cakes are needed. How many helpers are required?", "generated": ["\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes = 2 * num_helpers * 3\nsmall_cakes = 35 * num_helpers * 3\nsolution = solve_it([large_cakes - 20, small_cakes - 700], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes = 2 * num_helpers * 3\nsmall_cakes = 35 * num_helpers * 3\nsolution = solve_it([large_cakes - 20, small_cakes - 700], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes = 2 * num_helpers * 3\nsmall_cakes = 35 * num_helpers * 3\nsolution = solve_it([large_cakes - 20, small_cakes - 700], num_helpers)\nans = solution[num_helpers]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes = 2 * num_assistants * 3\nsmall_cakes = 35 * num_assistants * 3\nsolution = solve_it([large_cakes - 20, small_cakes - 700], num_assistants)\nans = solution[num_assistants]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_hour = 2 * num_helpers\nsmall_cakes_per_hour = 35 * num_helpers\nsolution = solve_it([large_cakes_per_hour * 3 - 20, small_cakes_per_hour * 3 - 700], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_hour = 2 * num_helpers\nsmall_cakes_per_hour = 35 * num_helpers\nsolution = solve_it([large_cakes_per_hour * 3 - 20, small_cakes_per_hour * 3 - 700], num_helpers)\nans = solution[num_helpers]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes_per_hour = 2 * num_assistants\nsmall_cakes_per_hour = 35 * num_assistants\nsolution = solve_it([large_cakes_per_hour * 3 - 20, small_cakes_per_hour * 3 - 700], num_assistants)\nans = solution[num_assistants]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes_per_hour = 2 * num_assistants\nsmall_cakes_per_hour = 35 * num_assistants\nsolution = solve_it([large_cakes_per_hour * 3 - 20, small_cakes_per_hour * 3 - 700], num_assistants)\nans = solution[num_assistants]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes_per_hour = 2 * num_assistants\nsmall_cakes_per_hour = 35 * num_assistants\nsolution = solve_it([large_cakes_per_hour * 3 - 20, small_cakes_per_hour * 3 - 700], num_assistants)\nans = solution[num_assistants]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cake_production = 2 * num_helpers\nsmall_cake_production = 35 * num_helpers\nsolution = solve_it([large_cake_production * 3 - 20, small_cake_production * 3 - 700], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_hour = 2 * num_helpers\nsmall_cakes_per_hour = 35 * num_helpers\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([large_cakes_per_hour * 3 - large_cakes_needed, small_cakes_per_hour * 3 - small_cakes_needed], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_hour = 2 * num_helpers\nsmall_cakes_per_hour = 35 * num_helpers\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([large_cakes_per_hour * 3 - large_cakes_needed, small_cakes_per_hour * 3 - small_cakes_needed], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_helper = 2\nsmall_cakes_per_helper = 35\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([num_helpers * large_cakes_per_helper - large_cakes_needed, num_helpers * small_cakes_per_helper - small_cakes_needed], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_helper = 2\nsmall_cakes_per_helper = 35\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([num_helpers * large_cakes_per_helper - large_cakes_needed, num_helpers * small_cakes_per_helper - small_cakes_needed], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_helper = 2\nsmall_cakes_per_helper = 35\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([num_helpers * large_cakes_per_helper - large_cakes_needed, num_helpers * small_cakes_per_helper - small_cakes_needed], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_helper = 2\nsmall_cakes_per_helper = 35\nlarge_cakes_required = 20\nsmall_cakes_required = 700\nsolution = solve_it([num_helpers * large_cakes_per_helper - large_cakes_required, num_helpers * small_cakes_per_helper - small_cakes_required], num_helpers)\nans = solution[num_helpers]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes_per_hour = 2 * num_assistants\nsmall_cakes_per_hour = 35 * num_assistants\ntime_available = 3\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([large_cakes_per_hour * time_available - large_cakes_needed, small_cakes_per_hour * time_available - small_cakes_needed], num_assistants)\nans = solution[num_assistants]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cake_per_helper = 2\nsmall_cake_per_helper = 35\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([num_helpers * large_cake_per_helper - large_cakes_needed, num_helpers * small_cake_per_helper - small_cakes_needed], num_helpers)\nans = solution[num_helpers]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes_per_assistant = 2\nsmall_cakes_per_assistant = 35\ntime_available = 3\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([num_assistants * large_cakes_per_assistant - large_cakes_needed, num_assistants * small_cakes_per_assistant * time_available - small_cakes_needed], num_assistants)\nans = solution[num_assistants]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cake_rate = 2\nsmall_cake_rate = 35\nlarge_cake_needed = 20\nsmall_cake_needed = 700\nsolution = solve_it([num_helpers * large_cake_rate - large_cake_needed, num_helpers * small_cake_rate - small_cake_needed], num_helpers)\nans = solution[num_helpers]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nnum_large_cakes = 20\nnum_small_cakes = 700\nnum_large_cakes_per_hour = 2 * num_assistants\nnum_small_cakes_per_hour = 35 * num_assistants\nnum_hours = 3\nsolution = solve_it([num_large_cakes_per_hour * num_hours - num_large_cakes, num_small_cakes_per_hour * num_hours - num_small_cakes], num_assistants)\nans = solution[num_assistants]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_made_by_one_helper = 2\nsmall_cakes_made_by_one_helper = 35\ntotal_time = 3\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([num_helpers * large_cakes_made_by_one_helper - large_cakes_needed, num_helpers * small_cakes_made_by_one_helper - small_cakes_needed], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cake_speed = 2\nsmall_cake_speed = 35\navailable_time = 3\nrequired_large_cakes = 20\nrequired_small_cakes = 700\nsolution = solve_it([num_helpers * large_cake_speed - required_large_cakes, num_helpers * small_cake_speed - required_small_cakes], [num_helpers])\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_hour = 2\nsmall_cakes_per_hour = 35\ntime_available = 3\nlarge_cakes_required = 20\nsmall_cakes_required = 700\nsolution = solve_it([num_helpers * large_cakes_per_hour - large_cakes_required, num_helpers * small_cakes_per_hour - small_cakes_required, num_helpers * time_available - large_cakes_required - small_cakes_required], num_helpers)\nans = solution[num_helpers]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_hour = 2\nsmall_cakes_per_hour = 35\nnum_large_cakes = 20\nnum_small_cakes = 700\ntime_available = 3\nsolution = solve_it([num_helpers * large_cakes_per_hour - num_large_cakes, num_helpers * small_cakes_per_hour - num_small_cakes, num_helpers * time_available], num_helpers)\nans = solution[num_helpers]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes_per_hour = 2\nsmall_cakes_per_hour = 35\nhours_available = 3\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([num_assistants * large_cakes_per_hour - large_cakes_needed, num_assistants * small_cakes_per_hour - small_cakes_needed], [num_assistants])\nans = solution[num_assistants]", "\nnum_helpers = Symbol('num_helpers', positive=True)\nlarge_cakes_per_helper = 2\nsmall_cakes_per_helper = 35\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\ntime_available = 3\nsolution = solve_it([num_helpers * large_cakes_per_helper - large_cakes_needed, num_helpers * small_cakes_per_helper * time_available - small_cakes_needed], num_helpers)\nans = solution[num_helpers]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes_per_hour = 2\nsmall_cakes_per_hour = 35\ntotal_time = 3\nlarge_cakes_needed = 20\nsmall_cakes_needed = 700\nsolution = solve_it([num_assistants * large_cakes_per_hour - large_cakes_needed, num_assistants * small_cakes_per_hour - small_cakes_needed], [num_assistants])\nans = solution[num_assistants]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes = Symbol('large_cakes', positive=True)\nsmall_cakes = Symbol('small_cakes', positive=True)\nsolution = solve_it([num_assistants * 2 - large_cakes / 3, num_assistants * 35 - small_cakes / 3], [num_assistants, large_cakes, small_cakes])\nans = solution[num_assistants]", "\nnum_assistants = Symbol('num_assistants', positive=True)\nlarge_cakes_per_hour = 2\nsmall_cakes_per_hour = 35\navailable_time = 3\nrequired_large_cakes = 20\nrequired_small_cakes = 700\nsolution = solve_it([num_assistants * large_cakes_per_hour - required_large_cakes, num_assistants * small_cakes_per_hour - required_small_cakes], [num_assistants])\nans = solution[num_assistants]"], "generated_prediction": "None", "options": ["A)8", "B)10", "C)12", "D)15", "E)19"], "answer": "B", "prediction": "None"}
{"question": "R, S, T, and U are points on a line, and U is the midpoint of line segment ST. If the lengths of line segments RS, RT, and ST are 5, 17, and 22, respectively. What is the length of line segment RU?", "generated": ["\nlength_of_RS = 5\nlength_of_RT = 17\nlength_of_ST = 22\nlength_of_RU = (length_of_RT + length_of_ST) / 2 - length_of_RS\nans = length_of_RU", "\nR = 0\nS = 5\nT = 17\nU = S + (T - S) / 2\nans = T - U", "\nR = 0\nS = 5\nT = 22\nU = Symbol('U')\nsolution = solve_it(U - (S + T) / 2, U)\nans = solution[U]", "\nR = 0\nS = Symbol('S', positive=True)\nT = S + 17\nU = (S + T) / 2\nRU = U - R\nans = RU", "\nR = 0\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = (S + T) / 2\nRS = 5\nRT = 17\nST = 22\nsolution = solve_it([S - R - RS, T - R - RT, U - S - ST], [S, T])\nans = solution[U] - solution[S]", "\nR = 0\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = Symbol('U', positive=True)\nsolution = solve_it([S - R - 5, T - S - 17, U - S - 11], [S, T, U])\nans = T - U", "\nR = Symbol('R')\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nsolution = solve_it([R - S - 5, T - R - 17, T - U - 11], [R, S, T, U])\nans = solution[U] - solution[S]", "\nR = 0\nS = Symbol('S', positive=True)\nT = S + 17\nU = S + 11\nans = T - U", "\nRU = Symbol('RU', positive=True)\nRS = 5\nRT = 17\nST = 22\nsolution = solve_it([RU + RS - RT, RU + RT - ST, RU + ST - 2 * RU], [RU])\nans = solution[RU]", "\nR = 0\nU = Symbol('U')\nT = 22 - U\nS = T - 5\nRU = S - U\nans = solve_it(RU, U)[U]", "\nR = Symbol('R')\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nRS = 5\nRT = 17\nST = 22\nsolution = solve_it([U - S, S - R - RS, T - R - RT, T - S - ST], [R, S, T, U])\nans = solution[U] - solution[S]", "\nlength_of_RS = 5\nlength_of_RT = 17\nlength_of_ST = 22\nlength_of_RU = (length_of_RT - length_of_RS) / 2\nans = length_of_RU", "\nR = 0\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = Symbol('U', positive=True)\nsolution = solve_it([S - R - 5, T - S - 17, U - S - 11], [S, T, U])\nans = solution[U] - solution[R]", "\nR = 0\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = Symbol('U', positive=True)\nsolution = solve_it([S - R - 5, T - S - 17, U - S - 11], [S, T, U])\nans = solution[U] - solution[R]", "\nR = Symbol('R')\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nsolution = solve_it([S - R - 5, T - R - 17, T - S - 22, U - S - (T - S) / 2], [R, S, T, U])\nans = solution[U] - solution[R]", "\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nR = Symbol('R', positive=True)\nU = Symbol('U', positive=True)\nsolution = solve_it([S - U, T - U, R - S - 5, T - R - 17, T - S - 22], [S, T, R, U])\nans = solution[U]", "\nR = Symbol('R')\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nsolution = solve_it([R - S - 5, T - S - 17, T - U - 11], [R, S, T])\nans = solution[U] - solution[R]", "\nR = 0\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = Symbol('U', positive=True)\nsolution = solve_it([R - S - 5, T - S - 17, T - U - 22], [S, T, U])\nans = solution[U] - solution[R]", "\nR = Symbol('R')\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nsolution = solve_it([R - S - 5, T - R - 17, T - S - 22, U - S - (T - S) / 2], [R, S, T, U])\nans = solution[U] - solution[S]", "\nR = Symbol('R')\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nsolution = solve_it([R - S - 5, T - R - 17, T - U - 11], [R, S, T])\nans = solution[U] - solution[R]", "\nR = 0\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = Symbol('U', positive=True)\nsolution = solve_it([U - S, T - U, S - R - 5, T - R - 17, T - S - 22], [S, T, U])\nans = solution[U] - solution[R]", "\nR = Symbol('R')\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nsolution = solve_it([S - R - 5, T - R - 17, T - S - 22, U - S - (T - S) / 2], [R, S, T, U])\nans = solution[U] - solution[R]", "\nR = Symbol('R')\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nRS = 5\nRT = 17\nST = 22\nsolution = solve_it([R - S - RS, R - T - RT, T - S - ST, U - (S + T) / 2], [R, S, T, U])\nans = solution[U] - solution[S]", "\nU = Symbol('U', positive=True)\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nR = Symbol('R', positive=True)\nsolution = solve_it([S - T - U, T - R - 5, S - R - 17], [S, T, U])\nans = solution[U]", "\nR = 0\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = (S + T) / 2\nsolution = solve_it([R - S - 5, T - S - 17, T - U - 22], [S, T])\nans = solution[T] - solution[U]", "\nR = 0\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nlength_RS = 5\nlength_RT = 17\nlength_ST = 22\nsolution = solve_it([S - R - length_RS, T - R - length_RT, U - S - length_ST / 2], [S, T, U])\nans = solution[U] - solution[R]", "\nR = 0\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = Symbol('U', positive=True)\nsolution = solve_it([S - R - 5, T - S - 17, U - S - 11, U - T - 11], [S, T, U])\nans = solution[U] - solution[R]", "\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = Symbol('U', positive=True)\nR = Symbol('R', positive=True)\nsolution = solve_it([S - R - 5, T - R - 17, T - S - 22, U - S - (T - S) / 2], [R, S, T, U])\nans = solution[U] - solution[R]", "\nS = Symbol('S', positive=True)\nT = Symbol('T', positive=True)\nU = Symbol('U', positive=True)\nR = Symbol('R', positive=True)\nsolution = solve_it([S - U - 11, T - U - 11, R - S - 5, T - R - 17, T - S - 22], [S, T, U, R])\nans = solution[R] - solution[U]", "\nR = Symbol('R')\nS = Symbol('S')\nT = Symbol('T')\nU = Symbol('U')\nsolution = solve_it([U - S, S - R - 5, T - U - 17, T - S - 22], [R, S, T, U])\nans = solution[U] - solution[S]"], "generated_prediction": "None", "options": ["A)6", "B)7", "C)8", "D)9", "E)10"], "answer": "A", "prediction": "B"}
{"question": "Six pita breads contain the same amount of falafel as do two rolls. Three rolls contain the same amount of falafel as five baguettes do. Two baguettes contain the same amount of falafel as how many pita breads?", "generated": ["\npita = Symbol('pita', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([6 * pita - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita], [pita, roll, baguette])\nans = solution[pita]", "\npita_bread = Symbol('pita_bread')\nroll = Symbol('roll')\nbaguette = Symbol('baguette')\nsolution = solve_it([pita_bread / 6 - roll / 2, roll / 3 - baguette / 5, baguette / 2 - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([6 * pita_bread - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([6 * pita_breads - 2 * rolls, 3 * rolls - 5 * baguettes, 2 * baguettes - pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([6 * pita_breads - 2 * rolls, 3 * rolls - 5 * baguettes, 2 * baguettes - pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([6 * pita_breads - 2 * rolls, 3 * rolls - 5 * baguettes, 2 * baguettes - pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([6 * pita_breads - 2 * rolls, 3 * rolls - 5 * baguettes, 2 * baguettes - pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([6 * pita_bread - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([6 * pita_bread - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([6 * pita_bread - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([6 * pita_breads - 2 * rolls, 3 * rolls - 5 * baguettes, 2 * baguettes - pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([6 * pita_bread - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([6 * pita_breads - 2 * rolls, 3 * rolls - 5 * baguettes, 2 * baguettes - pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([6 * pita_bread - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([pita_bread - 2 * roll, roll - 3 * baguette, baguette - 2 * pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([6 * pita_breads - 2 * rolls, 3 * rolls - 5 * baguettes, 2 * baguettes - pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([pita_bread * 6 - roll * 2, roll * 3 - baguette * 5, baguette * 2 - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([pita_bread * 6 - roll * 2, roll * 3 - baguette * 5, baguette * 2 - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([pita_breads - 2 * rolls, 3 * rolls - 5 * baguettes, 2 * baguettes - pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads] / solution[baguettes]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([pita_bread * 6 - roll * 2, roll * 3 - baguette * 5, baguette * 2 - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nfalafel_in_pita_breads = pita_breads\nfalafel_in_rolls = 2 * falafel_in_pita_breads\nfalafel_in_baguettes = 5 * falafel_in_rolls / 3\nsolution = solve_it(falafel_in_baguettes - 2 * falafel_in_rolls, pita_breads)\nans = solution[pita_breads]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([pita_bread - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([pita_bread - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nfalafel_per_pita_bread = pita_breads / 6\nfalafel_per_roll = rolls / 2\nfalafel_per_baguette = baguettes / 5\nsolution = solve_it([falafel_per_pita_bread - falafel_per_roll, falafel_per_roll - falafel_per_baguette], [pita_breads, rolls, baguettes])\nans = solution[pita_breads] / 2", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([pita_bread - 2 * roll, 3 * roll - 5 * baguette, 2 * baguette - pita_bread], [pita_bread, roll, baguette])\nans = solution[pita_bread]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([pita_breads / rolls - 2, 3 * rolls / baguettes - 5, 2 * baguettes / pita_breads - 1], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nfalafel_in_pita_breads = pita_breads\nfalafel_in_rolls = 2 * rolls\nfalafel_in_baguettes = 3 * baguettes\nsolution = solve_it([falafel_in_rolls - falafel_in_pita_breads, falafel_in_baguettes - falafel_in_rolls, 2 * falafel_in_baguettes - falafel_in_pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_breads = Symbol('pita_breads', positive=True)\nrolls = Symbol('rolls', positive=True)\nbaguettes = Symbol('baguettes', positive=True)\nsolution = solve_it([pita_breads - 2 * rolls, 3 * rolls - 5 * baguettes, 2 * baguettes - pita_breads], [pita_breads, rolls, baguettes])\nans = solution[pita_breads]", "\npita_bread = Symbol('pita_bread', positive=True)\nroll = Symbol('roll', positive=True)\nbaguette = Symbol('baguette', positive=True)\nsolution = solve_it([pita_bread / roll - 2, roll / baguette - 3, baguette / pita_bread - 5], [pita_bread, roll, baguette])\nans = solution[pita_bread] / 2", "\npita = Symbol('pita')\nroll = Symbol('roll')\nbaguette = Symbol('baguette')\nsolution = solve_it([pita / roll - 2, roll / baguette - 3, baguette / pita - 5], [pita, roll, baguette])\nans = solution[pita] / 2"], "generated_prediction": "None", "options": ["A)12/25", "B)3/2", "C)3", "D)2", "E)25/3"], "answer": "C", "prediction": "None"}
{"question": "A shopkeeper in order to promote his new shop put a discount of 20% on all the items for one day. Now he must sell the items at original price the other day. By what percentage must he increase the price to original?", "generated": ["\noriginal_price = Symbol('original_price', positive=True)\ndiscount_price = original_price * 0.8\nnew_price = discount_price * 1.25\nsolution = solve_it(new_price - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = 100\ndiscounted_price = 80\nsolution = solve_it(original_price - discounted_price - 20, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.8\nincreased_price = discounted_price / 0.8\nans = (increased_price - original_price) / original_price", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount = 20\nsolution = solve_it(original_price - discounted_price - original_price * discount / 100, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = 0.8 * original_price\nnew_price = Symbol('new_price', positive=True)\nsolution = solve_it(new_price - discounted_price - original_price, new_price)\nans = solution[new_price]", "\noriginal_price = 100\ndiscounted_price = 80\nincreased_price = discounted_price * 100 / 80\nans = increased_price - original_price", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * (1 - 20 / 100)\nincreased_price = discounted_price * (1 + x / 100)\nsolution = solve_it(increased_price - original_price, x)\nans = solution[x]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount_percentage = 20\nsolution = solve_it(original_price - discounted_price - original_price * discount_percentage / 100, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount_percentage = 20\nsolution = solve_it(original_price - discounted_price - original_price * discount_percentage / 100, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount = 20\nsolution = solve_it(discounted_price - original_price - discount / 100 * original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.8\nincreased_price = discounted_price * 1.25\nsolution = solve_it(increased_price - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = 0.8 * original_price\nincreased_price = 1.25 * discounted_price\nsolution = solve_it(increased_price - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount = 20\nsolution = solve_it(original_price - discounted_price - discount * discounted_price / 100, discounted_price)\nans = solution[discounted_price]", "\noriginal_price = 100\ndiscounted_price = 80\nans = (original_price - discounted_price) / discounted_price * 100", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.8\nnew_price = discounted_price / 0.8\nans = (new_price - original_price) / original_price", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount_percentage = 20\nsolution = solve_it([discounted_price - original_price * (1 - discount_percentage / 100), discounted_price - original_price * (1 + discount_percentage / 100)], [original_price, discounted_price])\nans = solution[original_price]", "\noriginal_price = 100\ndiscounted_price = 80\nincreased_price = original_price * (discounted_price / original_price) ** 2\nans = (increased_price - original_price) / original_price", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount = 20\nsolution = solve_it([discounted_price / original_price - (100 - discount) / 100, discounted_price - original_price], [original_price, discounted_price])\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = 0.8 * original_price\nincreased_price = 1.25 * discounted_price\nsolution = solve_it(increased_price - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.8\nincreased_price = discounted_price * 1.25\nsolution = solve_it(increased_price - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = 100\ndiscounted_price = 80\nincreased_price = original_price * (discounted_price / 100) ** 2\nans = increased_price - original_price", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = original_price * 0.8\nincreased_price = discounted_price * 1.25\nsolution = solve_it(increased_price - original_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount_rate = 20\nsolution = solve_it(original_price - discounted_price - discounted_price * discount_rate / 100, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount_percentage = 20\nsolution = solve_it([original_price - discounted_price - 0.2 * original_price, original_price - discounted_price - 0.25 * discounted_price], [original_price, discounted_price])\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount_rate = 20\nsolution = solve_it([original_price - discounted_price - 0.2 * original_price, original_price - discounted_price - 0.2 * discounted_price], [original_price, discounted_price])\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount = 20\nsolution = solve_it(original_price - discounted_price - (discount / 100) * original_price, original_price)\noriginal_price = solution[original_price]\nans = (original_price - discounted_price) / discounted_price", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = 0.8 * original_price\nprice_after_discount = original_price / discounted_price\nans = price_after_discount - 1", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount_percentage = 20\nsolution = solve_it([discounted_price / original_price - (100 - discount_percentage) / 100, discounted_price - original_price], [original_price, discounted_price])\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount_percentage = 20\nsolution = solve_it([original_price - discounted_price - 0.2 * original_price, discounted_price - original_price / 1.2], [original_price, discounted_price])\nans = (solution[original_price] - solution[discounted_price]) / solution[discounted_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscounted_price = Symbol('discounted_price', positive=True)\ndiscount = 20\nsolution = solve_it([original_price - discounted_price - discount * original_price / 100, original_price - discounted_price - discount * discounted_price / 100], [original_price, discounted_price])\nans = solution[original_price]"], "generated_prediction": "None", "options": ["A)21%", "B)20%", "C)25%", "D)33%", "E)18%"], "answer": "C", "prediction": "None"}
{"question": "The bus fare for two persons for travelling between Agra and Aligarh id four-thirds the train fare between the same places for one person. The total fare paid by 6 persons travelling by bus and 8 persons travelling by train between the two places is Rs.1512. Find the train fare between the two places for one person?", "generated": ["\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([4 * bus_fare / 3 - train_fare, 6 * bus_fare + 8 * train_fare - 1512], [bus_fare, train_fare])\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([4 * bus_fare / 3 - train_fare, 6 * bus_fare + 8 * train_fare - 1512], [bus_fare, train_fare])\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([4 * bus_fare / 3 - train_fare, 6 * bus_fare + 8 * train_fare - 1512], [bus_fare, train_fare])\nans = solution[train_fare]", "\nbus_fare_per_person = Symbol('bus_fare_per_person', positive=True)\ntrain_fare_per_person = Symbol('train_fare_per_person', positive=True)\ntotal_bus_fare = 6 * bus_fare_per_person\ntotal_train_fare = 8 * train_fare_per_person\nsolution = solve_it([total_bus_fare - 4 * total_train_fare / 3, total_bus_fare + total_train_fare - 1512], [bus_fare_per_person, train_fare_per_person])\nans = solution[train_fare_per_person]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([6 * 2 * bus_fare / 3 - 8 * train_fare, 6 * 2 * bus_fare / 3 + 8 * train_fare - 1512], [bus_fare, train_fare])\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it(6 * bus_fare / 3 - 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([6 * bus_fare - 8 * train_fare - 1512, 2 * bus_fare - 3 * train_fare], [bus_fare, train_fare])\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([bus_fare * 2 - 4 / 3 * train_fare, 6 * bus_fare + 8 * train_fare - 1512], [bus_fare, train_fare])\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 4 / 3 * train_fare\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = Symbol('bus_fare', positive=True)\nsolution = solve_it([6 * bus_fare + 8 * train_fare - 1512, bus_fare - 4 * train_fare / 3], [train_fare, bus_fare])\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = Symbol('bus_fare', positive=True)\nsolution = solve_it([6 * bus_fare + 8 * train_fare - 1512, bus_fare - 4 * train_fare / 3], [train_fare, bus_fare])\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 2 * train_fare / 3\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 2 * train_fare / 3\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 2 * train_fare / 3\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([bus_fare * (2 / 3) - train_fare, 6 * bus_fare + 8 * train_fare - 1512], [bus_fare, train_fare])\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 4 / 3 * train_fare\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 4 / 3 * train_fare\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 4 / 3 * train_fare\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 4 / 3 * train_fare\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 4 / 3 * train_fare\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = train_fare * 4 / 3\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 4 / 3 * train_fare\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare = 4 / 3 * train_fare\nsolution = solve_it(6 * bus_fare + 8 * train_fare - 1512, train_fare)\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([6 * bus_fare / 3 - 8 * train_fare - 1512, bus_fare - train_fare * 4 / 3], [bus_fare, train_fare])\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nbus_fare_for_2_persons = 4 / 3 * train_fare\nsolution = solve_it([bus_fare_for_2_persons * 6 + train_fare * 8 - 1512], [train_fare])\nans = solution[train_fare]", "\nbus_fare_for_two_persons = Symbol('bus_fare_for_two_persons', positive=True)\ntrain_fare_for_one_person = Symbol('train_fare_for_one_person', positive=True)\ntotal_fare = 1512\nsolution = solve_it([bus_fare_for_two_persons * 6 - train_fare_for_one_person * 8 * 4 / 3, bus_fare_for_two_persons * 6 + train_fare_for_one_person * 8 - total_fare], [bus_fare_for_two_persons, train_fare_for_one_person])\nans = solution[train_fare_for_one_person]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([bus_fare * 6 - 4 * train_fare * 8 / 3, bus_fare * 6 + train_fare * 8 - 1512], [bus_fare, train_fare])\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([bus_fare * 6 - 4 * train_fare * 8 / 3, bus_fare * 6 + train_fare * 8 - 1512], [bus_fare, train_fare])\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\nsolution = solve_it([6 * bus_fare / 2 - 8 * train_fare, 6 * bus_fare / 2 - 8 * train_fare - 1512], [bus_fare, train_fare])\nans = solution[train_fare]", "\nbus_fare = Symbol('bus_fare', positive=True)\ntrain_fare = Symbol('train_fare', positive=True)\ntotal_bus_fare = 6 * (2 * bus_fare / 3)\ntotal_train_fare = 8 * train_fare\nsolution = solve_it([total_bus_fare + total_train_fare - 1512, bus_fare - 3 * train_fare], [bus_fare, train_fare])\nans = solution[train_fare]"], "generated_prediction": "94.5", "options": ["A)126", "B)77", "C)88", "D)66", "E)54"], "answer": "A", "prediction": "D"}
{"question": "A rectangle has a length of 8 centimeters and a width of 3 centimeters. Find the perimeter.", "generated": ["\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nlength = 8\nwidth = 3\nans = 2 * (length + width)", "\nwidth = 3\nlength = 8\nans = 2 * (width + length)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)", "\nwidth = 3\nheight = 8\nans = 2 * (width + height)"], "generated_prediction": "22", "options": ["A)18cm", "B)22cm", "C)20cm", "D)30cm", "E)28cm"], "answer": "B", "prediction": "B"}
{"question": "Suppose you want to arrange your English, Hindi, Mathematics, History, Geography and Science books on a shelf. In how many ways can you do it ?", "generated": ["\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nans = math.factorial(6)", "\nbooks = ['English', 'Hindi', 'Mathematics', 'History', 'Geography', 'Science']\nans = math.factorial(len(books))", "\nans = math.factorial(6)", "\nbooks = 6\nans = math.factorial(books)", "\nnum_books = 6\nans = math.factorial(num_books)", "\nnum_books = 6\nnum_ways = math.factorial(num_books)\nans = num_ways", "\nnum_books = 6\nnum_ways = math.factorial(num_books)\nans = num_ways", "\nnum_books = 6\nnum_ways = math.factorial(num_books)\nans = num_ways", "\nnum_books = 6\nnum_ways = math.factorial(num_books)\nans = num_ways", "\nnum_books = 6\nnum_ways = math.factorial(num_books)\nans = num_ways", "\nnum_books = 6\nnum_ways = math.factorial(num_books)\nans = num_ways", "\nfactorial = lambda n: 1 if n == 0 else n * factorial(n - 1)\nans = factorial(6)", "\nimport itertools\nbooks = ['English', 'Hindi', 'Mathematics', 'History', 'Geography', 'Science']\nans = len(list(itertools.permutations(books)))"], "generated_prediction": "720", "options": ["A)520", "B)720", "C)920", "D)None", "E)Cannot be determined"], "answer": "B", "prediction": "B"}
{"question": "A straight picket fence is composed of x pickets each of which is 1/2 inch wide. If there are 6 inches of space between each pair of pickets, which of the following represents the length of fence in feet?", "generated": ["\nx = Symbol('x', positive=True)\nlength = (13 * x + 1) / 24\nans = length", "\nx = Symbol('x', positive=True)\nlength = (13 * x + 1) / 24\nans = length", "\nx = Symbol('x', positive=True)\nlength_of_fence = (13 * x + 1) / 24\nans = length_of_fence", "\nx = Symbol('x', positive=True)\nlength_of_fence = (13 * x + 1) / 24\nans = length_of_fence", "\npickets = Symbol('pickets', positive=True)\nfence_length = (13 * pickets + 1) / 24\nans = fence_length", "\nx = Symbol('x', positive=True)\nans = (13 * x - 12) / 24", "\nx = Symbol('x', positive=True)\nans = (13 * x - 12) / 24", "\nx = Symbol('x', positive=True)\nans = (13 * x - 12) / 24", "\nx = Symbol('x', positive=True)\npicket_width = 0.5\nspace_between_pickets = 6\nlength_of_fence = x * picket_width + (x - 1) * space_between_pickets\nans = length_of_fence / 12", "\nx = Symbol('x', positive=True)\nans = (13 * x - 12) / 24", "\nx = Symbol('x', positive=True)\npicket_width = 1 / 2\nspace_between_pickets = 6\nlength_of_fence = x * picket_width + (x - 1) * space_between_pickets\nans = length_of_fence / 12", "\nx = Symbol('x', positive=True)\npicket_width = 1 / 2\nspace_between_pickets = 6\nlength_of_fence = x * picket_width + (x - 1) * space_between_pickets\nans = length_of_fence / 12", "\nx = Symbol('x', positive=True)\npicket_width = 1 / 2\nspace_between_pickets = 6\nlength_of_fence = x * picket_width + (x - 1) * space_between_pickets\nans = length_of_fence / 12", "\nx = Symbol('x', positive=True)\npicket_width = 1 / 2\nspace_between_pickets = 6\nlength_of_fence = x * picket_width + (x - 1) * space_between_pickets\nans = length_of_fence / 12", "\nx = Symbol('x', positive=True)\npicket_width = 1 / 2\nspace_between_pickets = 6\nlength_of_fence = x * picket_width + (x - 1) * space_between_pickets\nans = length_of_fence / 12", "\nx = Symbol('x', positive=True)\nans = (13 * x - 12) / 24", "\nx = Symbol('x', positive=True)\npicket_width = 1 / 2\nspace_width = 6\nlength = x * picket_width + (x - 1) * space_width\nans = length / 12", "\nx = Symbol('x', positive=True)\nlength_of_picket = 1 / 2\nlength_of_space = 6\nans = (13 * x + 1) / 24", "\nx = Symbol('x', positive=True)\npicket_width = 1 / 2\nspace_between_pickets = 6\ntotal_length = x * picket_width + (x - 1) * space_between_pickets\nans = total_length / 12", "\nx = Symbol('x', positive=True)\nans = (13 * x + 1) / 24", "\nx = Symbol('x', positive=True)\npicket_width = 1/2\nspace_between_pickets = 6\nlength_of_fence = x * picket_width + (x - 1) * space_between_pickets\nans = length_of_fence / 12", "\nx = Symbol('x', positive=True)\nans = (13 * x + 1) / 24", "\nx = Symbol('x', positive=True)\npicket_width = 0.5\nspace_between_pickets = 6\nlength_of_fence = x * picket_width + (x - 1) * space_between_pickets\nans = simplify(length_of_fence / 12)", "\nx = Symbol('x', positive=True)\nans = (13 * x - 12) / 24", "\nx = Symbol('x', positive=True)\npicket_width = 1 / 2\nspace_width = 6\nlength = (x * picket_width + (x - 1) * space_width) / 12\nans = length", "\nx = Symbol('x', positive=True)\nfence_length = (13 * x + 1) / 24\nans = fence_length", "\nx = Symbol('x', positive=True)\npicket_width = 1/2\nspace_between_pickets = 6\ntotal_length = x * picket_width + (x - 1) * space_between_pickets\nans = total_length / 12", "\nx = Symbol('x', positive=True)\nlength = 13 * x / 24\nans = length", "\nx = Symbol('x', positive=True)\nans = (13 * x + 1) / 24", "\nx = Symbol('x', positive=True)\nlength_of_picket = 1 / 2\nlength_of_space = 6\nlength_of_fence = (13 * x + 1) / 24\nans = length_of_fence"], "generated_prediction": "0.541666666666667*x - 1/2", "options": ["A)13x/2", "B)13x/2 - 6", "C)13x/24", "D)(13x+1)/24", "E)(13x-12)/24"], "answer": "E", "prediction": "E"}
{"question": "A ship went on a voyage. After it had traveled 180 miles a plane started with 10 times the speed of the ship. Find the distance when they meet from starting point.", "generated": ["\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = plane_speed * distance_travelled_by_ship / (plane_speed - ship_speed)\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = plane_speed * distance_travelled_by_ship / (plane_speed - ship_speed)\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = plane_speed * distance_travelled_by_ship / (plane_speed - ship_speed)\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = plane_speed * distance_travelled_by_ship / (plane_speed - ship_speed)\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = plane_speed * distance_travelled_by_ship / (plane_speed - ship_speed)\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled = 180\nsolution = solve_it(plane_speed - 10 * ship_speed - distance_travelled, ship_speed)\nans = solution[ship_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = distance_travelled_by_ship * plane_speed / ship_speed\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = distance_travelled_by_ship * (plane_speed / ship_speed - 1)\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = distance_travelled_by_ship * plane_speed / ship_speed\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = distance_travelled_by_ship * plane_speed / ship_speed\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_traveled_by_ship = 180\nsolution = solve_it(plane_speed * distance_traveled_by_ship - 10 * ship_speed * distance_traveled_by_ship, ship_speed)\nans = solution[ship_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = 10 * distance_travelled_by_ship\nsolution = solve_it(distance_travelled_by_plane - distance_travelled_by_ship - plane_speed * distance_travelled_by_ship / ship_speed, plane_speed)\nans = solution[plane_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_traveled_by_ship = 180\ndistance_traveled_by_plane = distance_traveled_by_ship * plane_speed / ship_speed\nans = distance_traveled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = distance_travelled_by_ship * plane_speed / ship_speed\nsolution = solve_it(distance_travelled_by_plane - distance_travelled_by_ship - 10 * distance_travelled_by_ship, ship_speed)\nans = solution[ship_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = distance_travelled_by_ship * plane_speed / ship_speed\nsolution = solve_it(distance_travelled_by_plane - distance_travelled_by_ship - 10 * distance_travelled_by_ship, ship_speed)\nans = solution[ship_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_traveled_by_ship = 180\ndistance_traveled_by_plane = distance_traveled_by_ship * plane_speed / ship_speed\nsolution = solve_it(distance_traveled_by_plane - distance_traveled_by_ship - distance_traveled_by_ship, ship_speed)\nans = solution[ship_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = ship_speed * distance_travelled_by_ship / (plane_speed - ship_speed)\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = 10 * distance_travelled_by_ship\nsolution = solve_it(distance_travelled_by_ship / ship_speed - distance_travelled_by_plane / plane_speed, ship_speed)\nans = solution[ship_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = 10 * distance_travelled_by_ship\nsolution = solve_it(distance_travelled_by_ship - distance_travelled_by_plane / (plane_speed - ship_speed), ship_speed)\nans = solution[ship_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_traveled_by_ship = 180\ndistance_traveled_by_plane = distance_traveled_by_ship * plane_speed / ship_speed\nsolution = solve_it(distance_traveled_by_plane - distance_traveled_by_ship - distance_traveled_by_ship, ship_speed)\nans = solution[ship_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_when_they_meet = Symbol('distance_when_they_meet', positive=True)\nsolution = solve_it([ship_speed + plane_speed - distance_when_they_meet, plane_speed - 10 * ship_speed], [ship_speed, distance_when_they_meet])\nans = solution[distance_when_they_meet]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_when_they_meet = Symbol('distance_when_they_meet', positive=True)\nsolution = solve_it(distance_when_they_meet / ship_speed - distance_when_they_meet / plane_speed - 180, distance_when_they_meet)\nans = solution[distance_when_they_meet]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_travelled_by_ship = 180\ntime_taken_by_ship = distance_travelled_by_ship / ship_speed\ndistance_travelled_by_plane = plane_speed * time_taken_by_ship\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = 10 * ship_speed\ndistance_when_meet = Symbol('distance_when_meet', positive=True)\nsolution = solve_it([plane_speed * distance_when_meet - 180 * ship_speed, distance_when_meet - 180], [ship_speed, distance_when_meet])\nans = solution[distance_when_meet]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = distance_travelled_by_ship * 10\nsolution = solve_it(distance_travelled_by_plane - distance_travelled_by_ship - plane_speed * distance_travelled_by_ship / ship_speed, ship_speed)\nans = solution[ship_speed]", "\nplane_speed = Symbol('plane_speed', positive=True)\nship_speed = Symbol('ship_speed', positive=True)\ndistance_travelled_by_ship = 180\ndistance_travelled_by_plane = distance_travelled_by_ship * plane_speed / ship_speed\nsolution = solve_it(distance_travelled_by_plane - distance_travelled_by_ship, plane_speed)\nans = solution[plane_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_travelled = 180\nsolution = solve_it(plane_speed - 10 * ship_speed, ship_speed)\nship_speed = solution[ship_speed]\ndistance_travelled_by_plane = distance_travelled * plane_speed / (plane_speed - ship_speed)\nans = distance_travelled_by_plane", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_covered_by_ship = 180\ndistance_covered_by_plane = 10 * distance_covered_by_ship\nsolution = solve_it(distance_covered_by_ship - distance_covered_by_plane / (ship_speed + plane_speed), ship_speed)\nans = solution[ship_speed]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ndistance_when_they_meet = Symbol('distance_when_they_meet', positive=True)\nship_distance = 180\nplane_distance = 10 * ship_distance\nsolution = solve_it([plane_speed * distance_when_they_meet - plane_distance, ship_speed * distance_when_they_meet - ship_distance], [distance_when_they_meet, plane_speed])\nans = solution[distance_when_they_meet]", "\nship_speed = Symbol('ship_speed', positive=True)\nplane_speed = Symbol('plane_speed', positive=True)\ntime_taken = Symbol('time_taken', positive=True)\ndistance_travelled = 180\nsolution = solve_it([plane_speed * time_taken - distance_travelled, plane_speed - 10 * ship_speed], [plane_speed, time_taken])\nans = solution[time_taken] * ship_speed"], "generated_prediction": "200.0", "options": ["A)238", "B)289", "C)200", "D)287", "E)187"], "answer": "C", "prediction": "C"}
{"question": "In a large forest, 300 deer were caught, tagged, and returned during 2001. During 2002, 500 deer were caught at random, of which only 20 had tags from the previous year. If the percent of deer in the forest that had tags during the second year and were caught in the 500 deer sample is representative of the percent of the total deer population in the forest with tags, what is the total deer population in the forest (assuming no change in population between 2001 and 2002)?", "generated": ["\ndeer_with_tags = 20\ntotal_deer = deer_with_tags / (deer_with_tags / 500)\nans = total_deer", "\ndeer_population = Symbol('deer_population', positive=True)\nsolution = solve_it(deer_population / 300 - 20 / 500, deer_population)\nans = solution[deer_population]", "\ndeer_with_tags = 20\ndeer_without_tags = 500 - deer_with_tags\ntotal_deer_population = deer_with_tags * 300 / deer_without_tags\nans = total_deer_population", "\nnum_deer_with_tags = 20\ntotal_deer_population = Symbol('total_deer_population', positive=True)\nnum_deer_with_tags_in_total_population = total_deer_population * num_deer_with_tags / 500\nsolution = solve_it(num_deer_with_tags_in_total_population - 300, total_deer_population)\nans = solution[total_deer_population]", "\nnum_deer_caught = 500\nnum_deer_tagged = 20\npercent_deer_tagged = num_deer_tagged / num_deer_caught\ntotal_deer_population = 300 * (percent_deer_tagged / 0.04)\nans = total_deer_population", "\nsample_size = 500\nnum_deer_with_tags = 20\ntotal_deer_population = Symbol('total_deer_population', positive=True)\nnum_deer_with_tags_in_total_population = total_deer_population * num_deer_with_tags / sample_size\nsolution = solve_it(num_deer_with_tags_in_total_population - 300, total_deer_population)\nans = solution[total_deer_population]", "\nnum_deer_with_tag = 20\ntotal_deer_population = Symbol('total_deer_population', positive=True)\nnum_deer_with_tag_in_total_population = total_deer_population * num_deer_with_tag / 500\nsolution = solve_it(num_deer_with_tag_in_total_population - 300, total_deer_population)\nans = solution[total_deer_population]", "\ntotal_deer_population = Symbol('total_deer_population', positive=True)\ndeer_with_tags_in_2001 = 300\ndeer_with_tags_in_2002 = 20\ndeer_caught_in_2002 = 500\nsolution = solve_it(total_deer_population * deer_with_tags_in_2002 / deer_caught_in_2002 - deer_with_tags_in_2001, total_deer_population)\nans = solution[total_deer_population]", "\ntotal_deer = Symbol('total_deer', positive=True)\ntagged_deer_in_2001 = 300\ntagged_deer_in_2002 = 20\ndeer_caught_in_2002 = 500\nsolution = solve_it([total_deer * tagged_deer_in_2002 / deer_caught_in_2002 - tagged_deer_in_2001, total_deer - deer_caught_in_2002], [total_deer])\nans = solution[total_deer]", "\ndeer_with_tags = 300\ndeer_caught = 500\ndeer_with_tags_caught = 20\ndeer_with_tags_caught_percent = deer_with_tags_caught / deer_caught\ndeer_with_tags_percent = deer_with_tags / deer_with_tags_caught_percent\nans = deer_with_tags_percent", "\nnum_deer_in_sample = 500\nnum_deer_in_sample_with_tags = 20\nnum_deer_in_sample_without_tags = num_deer_in_sample - num_deer_in_sample_with_tags\nnum_deer_in_population_with_tags = 300\nnum_deer_in_population_without_tags = num_deer_in_population_with_tags * num_deer_in_sample_without_tags / num_deer_in_sample_with_tags\nans = num_deer_in_population_with_tags + num_deer_in_population_without_tags", "\nnum_deer_with_tags = 20\nnum_deer_caught = 500\nnum_deer_with_tags_in_total = num_deer_with_tags / num_deer_caught * num_deer_caught\nans = num_deer_with_tags_in_total / 0.04", "\nsample_size = 500\nsample_tagged_deer = 20\nsample_tagged_deer_percent = sample_tagged_deer / sample_size\ntotal_deer = sample_size * sample_tagged_deer_percent / 0.2\nans = total_deer", "\ntagged_deer_in_2001 = 300\ntagged_deer_in_2002 = 20\ntotal_deer_in_2002 = 500\npercent_tagged_deer_in_2002 = tagged_deer_in_2002 / total_deer_in_2002\npercent_tagged_deer_in_2001 = tagged_deer_in_2001 / total_deer_in_2001\ntotal_deer_in_2001 = total_deer_in_2002 * percent_tagged_deer_in_2001 / percent_tagged_deer_in_2002\nans = total_deer_in_2001", "\ndeer_in_forest = Symbol('deer_in_forest', positive=True)\ndeer_with_tags_in_forest = 300\ndeer_with_tags_in_sample = 20\ndeer_in_sample = 500\nsolution = solve_it([deer_with_tags_in_sample / deer_in_sample - deer_with_tags_in_forest / deer_in_forest, deer_with_tags_in_forest - 300], [deer_in_forest, deer_with_tags_in_forest])\nans = solution[deer_in_forest]", "\nnum_deer_caught_in_2001 = 300\nnum_deer_caught_in_2002 = 500\nnum_deer_with_tag_in_2002 = 20\nnum_deer_with_tag_in_2001 = num_deer_caught_in_2001 * num_deer_with_tag_in_2002 / num_deer_caught_in_2002\ntotal_deer_population = num_deer_with_tag_in_2001 * num_deer_caught_in_2002 / num_deer_with_tag_in_2002\nans = total_deer_population", "\ndeer_population = Symbol('deer_population', positive=True)\ntagged_deer_in_2001 = 300\ntagged_deer_in_2002 = 20\ndeer_caught_in_2002 = 500\nsolution = solve_it([tagged_deer_in_2002 / deer_caught_in_2002 * deer_population - tagged_deer_in_2001, tagged_deer_in_2002 / deer_caught_in_2002 * deer_population - tagged_deer_in_2002], [deer_population])\nans = solution[deer_population]", "\ntagged_deer_in_2001 = 300\ntagged_deer_in_2002 = 20\ntotal_deer_in_2002 = 500\ntagged_deer_percent_in_2002 = tagged_deer_in_2002 / total_deer_in_2002\ntotal_deer_in_2001 = tagged_deer_in_2001 / tagged_deer_percent_in_2002\nans = total_deer_in_2001", "\ntotal_deer_population = Symbol('total_deer_population', positive=True)\ntagged_deer_population = 300\ndeer_caught_in_2002 = 500\ndeer_caught_in_2002_with_tags = 20\nsolution = solve_it([(deer_caught_in_2002_with_tags / deer_caught_in_2002) * total_deer_population - tagged_deer_population], [total_deer_population])\nans = solution[total_deer_population]", "\ntotal_deer_population = Symbol('total_deer_population', positive=True)\ntagged_deer_population = 300\ntagged_deer_population_in_sample = 20\ntotal_deer_population_in_sample = 500\nsolution = solve_it(tagged_deer_population_in_sample / total_deer_population_in_sample - tagged_deer_population / total_deer_population, total_deer_population)\nans = solution[total_deer_population]", "\ndeer_population = Symbol('deer_population', positive=True)\ndeer_caught_in_2002 = 500\ndeer_caught_in_2001 = 300\ndeer_tagged_in_2001 = 20\nsolution = solve_it([deer_tagged_in_2001 / deer_caught_in_2002 - deer_caught_in_2001 / deer_population, deer_caught_in_2002 + deer_caught_in_2001 - deer_population], [deer_population])\nans = solution[deer_population]", "\nnum_deer_in_forest = Symbol('num_deer_in_forest', positive=True)\nnum_deer_with_tags = 300\nnum_deer_caught = 500\nnum_deer_with_tags_caught = 20\nsolution = solve_it(num_deer_with_tags_caught / num_deer_caught * num_deer_in_forest - num_deer_with_tags, num_deer_in_forest)\nans = solution[num_deer_in_forest]", "\nnum_deer_with_tags_in_2001 = 300\nnum_deer_with_tags_in_2002 = 20\nnum_deer_caught_in_2002 = 500\nnum_deer_with_tags_in_2002_in_population = num_deer_with_tags_in_2002 * num_deer_with_tags_in_2001 / num_deer_caught_in_2002\nans = num_deer_with_tags_in_2002_in_population", "\ntotal_deer_population = Symbol('total_deer_population', positive=True)\ntagged_deer_population = 300\ntagged_deer_caught_in_second_year = 20\ntotal_deer_caught_in_second_year = 500\nsolution = solve_it([tagged_deer_population / total_deer_population - tagged_deer_caught_in_second_year / total_deer_caught_in_second_year, total_deer_caught_in_second_year - total_deer_population], [total_deer_population])\nans = solution[total_deer_population]", "\ntagged_deer_in_2001 = 300\ndeer_caught_in_2002 = 500\ntagged_deer_in_2002 = 20\ntagged_deer_in_2002_percent = tagged_deer_in_2002 / deer_caught_in_2002\ntotal_deer_in_2002 = tagged_deer_in_2002_percent * deer_caught_in_2002 / tagged_deer_in_2001 * tagged_deer_in_2002\nans = total_deer_in_2002", "\nnum_deer_caught_in_2001 = 300\nnum_deer_caught_in_2002 = 500\nnum_deer_with_tags = 20\ntotal_deer_population = Symbol('total_deer_population', positive=True)\nsolution = solve_it(num_deer_with_tags / num_deer_caught_in_2002 - num_deer_caught_in_2001 / total_deer_population, total_deer_population)\nans = solution[total_deer_population]", "\ndeer_caught_and_tagged_in_2001 = 300\ndeer_caught_in_2002 = 500\ndeer_caught_and_tagged_in_2002 = 20\ndeer_caught_and_tagged_in_2001_percent = deer_caught_and_tagged_in_2001 / deer_caught_in_2002\ndeer_caught_and_tagged_in_2002_percent = deer_caught_and_tagged_in_2002 / deer_caught_in_2002\nans = deer_caught_and_tagged_in_2001_percent / deer_caught_and_tagged_in_2002_percent * deer_caught_in_2002", "\ndeer_caught_in_2001 = 300\ndeer_caught_in_2002 = 500\ndeer_caught_in_2002_with_tags = 20\ndeer_with_tags_in_2001 = deer_caught_in_2002_with_tags * deer_caught_in_2001 / deer_caught_in_2002\ndeer_with_tags_in_2002 = deer_with_tags_in_2001 + deer_caught_in_2002_with_tags\ndeer_without_tags_in_2002 = deer_caught_in_2002 - deer_with_tags_in_2002\ntotal_deer_in_2002 = deer_with_tags_in_2002 + deer_without_tags_in_2002\nans = total_deer_in_2002", "\nnum_deer_with_tags_in_2001 = 300\nnum_deer_with_tags_in_2002 = 20\nnum_deer_caught_in_2002 = 500\nnum_deer_with_tags_in_2002_in_total_deer_population = num_deer_with_tags_in_2001 * num_deer_with_tags_in_2002 / num_deer_caught_in_2002\nans = num_deer_with_tags_in_2002_in_total_deer_population", "\nnum_deer_caught_in_2002 = 500\nnum_deer_with_tags_in_2002 = 20\nnum_deer_with_tags_in_2001 = 300\nnum_deer_without_tags_in_2001 = num_deer_caught_in_2002 - num_deer_with_tags_in_2002\npercent_deer_with_tags_in_2001 = num_deer_with_tags_in_2001 / num_deer_caught_in_2002\npercent_deer_without_tags_in_2001 = num_deer_without_tags_in_2001 / num_deer_caught_in_2002\ntotal_deer_population = num_deer_caught_in_2002 / percent_deer_with_tags_in_2001\nans = total_deer_population"], "generated_prediction": "7500.0", "options": ["A)300", "B)500", "C)5000", "D)6000", "E)7500"], "answer": "E", "prediction": "E"}
{"question": "In a railway station, there are two trains going. One in the harbor line and one in the main line, each having a frequency of 10 minutes. The main line service starts at 5 o'clock and the harbor line starts at 5.02 A.M. A man goes to the station every day to catch the first train that comes. What is the probability of the man catching the first train?", "generated": ["\nans = 0.5", "\nans = 0.5", "\nans = 0.5", "\nans = 0.5", "\nans = 0.5", "\nans = 0.9", "\nans = 0.65", "\nans = 1 / 2", "\nans = 1 / 10", "\nans = 1 / 20", "\nprobability = 1 / 10\nans = probability", "\n# Answer option: ['A)0.9', 'B)0.8', 'C)0.6', 'D)0.65', 'E)1.5']\n# Answer option: ['A)0.9', 'B)0.8', 'C)0.6', 'D)0.65', 'E)1.5']\n# Answer option: ['A)0.9', 'B)0.8', 'C)0.6', 'D)0.65', 'E)1.5']\n# Answer option: ['A)0.9', 'B)0.8', 'C)0.6', 'D)0.65', 'E)1.5']\n# Answer option: ['A)0.9', 'B)0.8', 'C)0.6', 'D)0.65', 'E)1.5']\n# Answer option: ['A)0.9', 'B)0.8', 'C)0.6', 'D)0.65', 'E)1.5']\n# Answer option: ['A)0.9', 'B)0", "\ntime_difference = 2 / 60\nprobability = time_difference / 10\nans = probability", "\nnum_trains_in_harbor_line = (60 - 2) / 10\nnum_trains_in_main_line = (60 - 5) / 10\nnum_trains_in_total = num_trains_in_harbor_line + num_trains_in_main_line\nprobability = num_trains_in_main_line / num_trains_in_total\nans = probability", "\n# P(A) = 1/10\n# P(B) = 1/10\nans = 1 / 10 + 1 / 10", "\nmain_line_frequency = 10\nharbor_line_frequency = 10\nmain_line_start_time = 5\nharbor_line_start_time = 5.02\ntime_difference = harbor_line_start_time - main_line_start_time\nmain_line_probability = time_difference / main_line_frequency\nharbor_line_probability = 1 - main_line_probability\nans = main_line_probability + harbor_line_probability", "\n# Answer option: ['A)0.9', 'B)0.8', 'C)0.6', 'D)0.65', 'E)1.5']\ntime_difference = 2 / 60\nprobability_of_catching_main_line_train = time_difference / 10\nprobability_of_catching_harbor_line_train = 1 - probability_of_catching_main_line_train\nans = probability_of_catching_main_line_train + probability_of_catching_harbor_line_train", "\nmain_line_train_frequency = 10\nharbor_line_train_frequency = 10\nmain_line_train_start_time = 5\nharbor_line_train_start_time = 5.02\nmain_line_train_first_arrival_time = main_line_train_start_time\nharbor_line_train_first_arrival_time = harbor_line_train_start_time + harbor_line_train_frequency\nans = 1 / (1 / main_line_train_first_arrival_time + 1 / harbor_line_train_first_arrival_time)", "\n# The probability of catching the first train is 1, since the trains come every 10 minutes.\nans = 1", "\nnum_trains_in_main_line = 12 * 60 / 10\nnum_trains_in_harbor_line = 12 * 60 / 10\nnum_trains_in_2_minutes = 2 / 60\nprobability = num_trains_in_2_minutes / (num_trains_in_main_line + num_trains_in_harbor_line)\nans = probability", "\n# The probability of catching the first train is the probability of catching the harbor line train.\n# The probability of catching the harbor line train is 1/10.\nans = 1 / 10", "\n# P(A) = 0.5, P(B) = 0.5, P(A or B) = P(A) + P(B) - P(A and B)\n# P(A and B) = P(A) * P(B) = 0.5 * 0.5 = 0.25\n# P(A or B) = P(A) + P(B) - P(A and B) = 0.5 + 0.5 - 0.25 = 0.75\nans = 0.75", "\n# Hint: You can use the following functions:\n# math.ceil(x): Return the ceiling of x as a float, the smallest integer value greater than or equal to x.\n# math.floor(x): Return the floor of x as a float, the largest integer value less than or equal to x.\n# math.fabs(x): Return the absolute value of x.\n# math.factorial(x): Return x factorial. Raises ValueError if x is not integral or is negative.\n# math.gcd(a, b): Return the greatest common divisor of the integers a and b.\n# math.modf(x): Return the fractional and integer parts of x. Both results carry the sign of x and are floats.\n# math.trunc(x): Return the Real value x truncated to an Integral (usually a long integer).\n# math.exp(x): Return e**x.\n# math.log(x[, base]): With one argument, return the natural logarithm of x (to base e).\n# math.log10(x): Return the base-10 logarithm of x", "\n# The probability of the man catching the first train is the probability of him catching the main line train + the probability of him catching the harbor line train.\n# The probability of him catching the main line train is 1/10.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the harbor line train is 1/10 * 2/5.\n# The probability of him catching the", "\n# Probability of catching the first train = Probability of catching the harbor line train + Probability of catching the main line train\n# Probability of catching the harbor line train = Probability of catching the harbor line train at the first time + Probability of catching the harbor line train at the second time\n# Probability of catching the harbor line train at the first time = 1/10\n# Probability of catching the harbor line train at the second time = 1/10 * 9/10\n# Probability of catching the main line train = 1/10 * 9/10\n# Probability of catching the first train = 1/10 + 1/10 * 9/10 + 1/10 * 9/10 = 0.65\nans = 0.65", "\n# The probability of catching the first train is the probability of catching the harbor line train plus the probability of catching the main line train.\n# The probability of catching the harbor line train is the probability of catching the first harbor line train plus the probability of catching the second harbor line train.\n# The probability of catching the first harbor line train is the probability of missing the main line train plus the probability of missing the second main line train.\n# The probability of catching the second harbor line train is the probability of missing the first main line train plus the probability of missing the second main line train.\n# The probability of catching the main line train is the probability of catching the first main line train plus the probability of catching the second main line train.\n# The probability of catching the first main line train is the probability of missing the first harbor line train plus the probability of missing the second harbor line train.\n# The probability of catching the second main line train is the probability of missing the first harbor line train plus the probability of missing the second harbor line train.\n# The probability of missing the first harbor line train is 1 - the probability of catching the first harbor line train.\n# The probability of missing the second harbor line train is 1 - the", "\n# The probability of catching the first train is the probability of catching the main line train + the probability of catching the harbor line train.\n# The probability of catching the main line train is the probability of waiting for the first train for 0 minutes + the probability of waiting for the first train for 10 minutes + ... + the probability of waiting for the first train for 50 minutes.\n# The probability of catching the harbor line train is the probability of waiting for the first train for 2 minutes + the probability of waiting for the first train for 12 minutes + ... + the probability of waiting for the first train for 52 minutes.\n# The probability of waiting for the first train for 0 minutes is 1/2.\n# The probability of waiting for the first train for 10 minutes is 1/2 * 1/2.\n# The probability of waiting for the first train for 20 minutes is 1/2 * 1/2 * 1/2.\n# The probability of waiting for the first train for 30 minutes is 1/2 * 1/2 * 1/2 * 1/2.\n# The probability of waiting for the first train for 40 minutes is 1/2 * 1/2 * 1/2 * 1/2 * 1/2.", "\n# The probability of catching the first train is the probability of catching the harbor line train plus the probability of catching the main line train.\n# The probability of catching the harbor line train is the probability of the harbor line train coming before the main line train.\n# The probability of the harbor line train coming before the main line train is the probability of the harbor line train coming before the main line train on the first day plus the probability of the harbor line train coming before the main line train on the second day plus the probability of the harbor line train coming before the main line train on the third day plus the probability of the harbor line train coming before the main line train on the fourth day plus the probability of the harbor line train coming before the main line train on the fifth day.\n# The probability of the harbor line train coming before the main line train on the first day is the probability of the harbor line train coming before the main line train on the first day and the main line train coming on the second day plus the probability of the harbor line train coming before the main line train on the first day and the main line train coming on the third day plus the probability of the harbor line train coming before the main line train on the first day and the main line", "\n# Answer: 0.8\n# Explanation:\n# There are two trains, one in the harbor line and one in the main line. Each train has a frequency of 10 minutes.\n# The main line service starts at 5 o'clock and the harbor line starts at 5.02 A.M.\n# The man goes to the station every day to catch the first train that comes.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0.8.\n# The probability of the man catching the first train is 0", "\n# The probability of man catching the first train is the probability of the harbor line train coming first.\n# The probability of the harbor line train coming first is the probability of the harbor line train coming before the main line train.\n# The probability of the harbor line train coming before the main line train is the probability of the harbor line train coming before the main line train in the first 10 minutes.\n# The probability of the harbor line train coming before the main line train in the first 10 minutes is the probability of the harbor line train coming before the main line train in the first 10 minutes and the main line train not coming in the first 10 minutes.\n# The probability of the harbor line train coming before the main line train in the first 10 minutes is 1/2.\n# The probability of the main line train not coming in the first 10 minutes is 1/10.\n# The probability of the harbor line train coming before the main line train in the first 10 minutes and the main line train not coming in the first 10 minutes is 1/2 * 1/10 = 1/20.\n# The probability of the harbor line train coming before the main line train is the probability of the harbor line train coming before the main line train in the"], "generated_prediction": "0.65", "options": ["A)0.9", "B)0.8", "C)0.6", "D)0.65", "E)1.5"], "answer": "B", "prediction": "D"}
{"question": "The average (arithmetic mean) of the weight of 10 vehicles is 12.2 tons. The average weight of the group of vehicles increased by 2.6 tons after a new heavy duty truck was added to the group? What is the weight in tons of the heavy duty truck?", "generated": ["\nnum_vehicles = 10\navg_weight = 12.2\nnew_avg_weight = 14.8\nnew_vehicle_weight = (num_vehicles + 1) * new_avg_weight - num_vehicles * avg_weight\nans = new_vehicle_weight", "\nweight = Symbol('weight', positive=True)\ntotal_weight = 10 * 12.2\nsolution = solve_it(total_weight + weight - (10 + 1) * (12.2 + 2.6), weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\nnum_vehicles = 10\ntotal_weight = 12.2 * num_vehicles\nsolution = solve_it(total_weight + weight - (total_weight + 2.6 * num_vehicles), weight)\nans = solution[weight]", "\nnum_vehicles = 10\naverage_weight = 12.2\nnew_average_weight = average_weight + 2.6\nnew_heavy_duty_truck_weight = (num_vehicles + 1) * new_average_weight - num_vehicles * average_weight\nans = new_heavy_duty_truck_weight", "\nnum_vehicles = 10\navg_weight = 12.2\navg_weight_after_new_vehicle = 14.8\nnew_vehicle_weight = avg_weight_after_new_vehicle * (num_vehicles + 1) - num_vehicles * avg_weight\nans = new_vehicle_weight", "\nnum_vehicles = 10\ntotal_weight = 12.2 * num_vehicles\nnew_total_weight = total_weight + 2.6\nnew_num_vehicles = num_vehicles + 1\nnew_weight = new_total_weight / new_num_vehicles\nans = new_weight - 12.2", "\nnum_vehicles = 10\navg_weight = 12.2\navg_weight_after_addition = 14.8\nweight_of_new_vehicle = avg_weight_after_addition * (num_vehicles + 1) - num_vehicles * avg_weight\nans = weight_of_new_vehicle", "\nweight = Symbol('weight', positive=True)\naverage_weight = 12.2\nsolution = solve_it(weight - (average_weight * 11 - 2.6 * 10), weight)\nans = solution[weight]", "\nnum_vehicles = 10\ntotal_weight = 12.2 * num_vehicles\nnew_total_weight = total_weight + 2.6 * (num_vehicles + 1)\nnew_num_vehicles = num_vehicles + 1\nnew_avg_weight = new_total_weight / new_num_vehicles\nans = new_avg_weight", "\nweight_of_new_truck = Symbol('weight_of_new_truck', positive=True)\ntotal_weight = 12.2 * 10\nsolution = solve_it(total_weight + weight_of_new_truck - 12.2 * 11, weight_of_new_truck)\nans = solution[weight_of_new_truck]", "\nnum_vehicles = 10\navg_weight = 12.2\nnew_avg_weight = avg_weight + 2.6\nnew_num_vehicles = num_vehicles + 1\nnew_total_weight = new_avg_weight * new_num_vehicles\ntotal_weight = avg_weight * num_vehicles\nheavy_duty_truck_weight = new_total_weight - total_weight\nans = heavy_duty_truck_weight", "\nnum_vehicles = 10\naverage_weight = 12.2\nnew_average_weight = 14.8\nnew_vehicle_weight = (num_vehicles + 1) * new_average_weight - num_vehicles * average_weight\nans = new_vehicle_weight", "\nnum_vehicles = 10\ninitial_average_weight = 12.2\nfinal_average_weight = 14.8\nweight_of_new_vehicle = (num_vehicles * initial_average_weight + final_average_weight) / (num_vehicles + 1)\nans = weight_of_new_vehicle", "\nnum_vehicles = 10\nweight_before_addition = 12.2 * num_vehicles\nweight_after_addition = weight_before_addition + 2.6\nweight_of_new_vehicle = weight_after_addition - weight_before_addition\nans = weight_of_new_vehicle", "\nweight = Symbol('weight', positive=True)\naverage_weight = 12.2\nnum_vehicles = 10\nsolution = solve_it(weight / (num_vehicles + 1) - average_weight - 2.6, weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\nnum_vehicles = 10\ntotal_weight = 10 * 12.2\nsolution = solve_it(weight + total_weight - (num_vehicles + 1) * (12.2 + 2.6), weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\nnum_vehicles = 10\navg_weight = 12.2\navg_weight_after_adding_truck = 14.8\nsolution = solve_it(avg_weight * num_vehicles + weight - avg_weight_after_adding_truck * (num_vehicles + 1), weight)\nans = solution[weight]", "\nnum_vehicles = 10\navg_weight = 12.2\nnew_avg_weight = avg_weight + 2.6\nnew_num_vehicles = num_vehicles + 1\nnew_total_weight = new_num_vehicles * new_avg_weight\ntotal_weight = num_vehicles * avg_weight\nans = new_total_weight - total_weight", "\nweight_of_truck = Symbol('weight_of_truck', positive=True)\nnum_vehicles = 10\navg_weight_before = 12.2\navg_weight_after = avg_weight_before + 2.6\nsolution = solve_it(num_vehicles * avg_weight_before + weight_of_truck - (num_vehicles + 1) * avg_weight_after, weight_of_truck)\nans = solution[weight_of_truck]", "\nnum_vehicles = 10\ntotal_weight = 12.2 * num_vehicles\nnew_total_weight = total_weight + 2.6\nnew_num_vehicles = num_vehicles + 1\nnew_weight = new_total_weight / new_num_vehicles\nans = new_weight", "\nnum_vehicles = 10\navg_weight = 12.2\navg_weight_after_addition = 14.8\nnew_vehicle_weight = (num_vehicles + 1) * avg_weight_after_addition - num_vehicles * avg_weight\nans = new_vehicle_weight", "\nweight_of_new_truck = Symbol('weight_of_new_truck', positive=True)\naverage_weight_of_10_vehicles = 12.2\naverage_weight_of_11_vehicles = average_weight_of_10_vehicles + 2.6\nsolution = solve_it(average_weight_of_11_vehicles - (average_weight_of_10_vehicles * 10 + weight_of_new_truck) / 11, weight_of_new_truck)\nans = solution[weight_of_new_truck]", "\nnum_vehicles = 10\ntotal_weight = 12.2 * num_vehicles\nnew_vehicle_weight = Symbol('new_vehicle_weight', positive=True)\nnew_total_weight = total_weight + new_vehicle_weight\nnew_num_vehicles = num_vehicles + 1\nsolution = solve_it(new_total_weight / new_num_vehicles - 12.2 - 2.6, new_vehicle_weight)\nans = solution[new_vehicle_weight]", "\nnum_vehicles = 10\naverage_weight = 12.2\nnew_average_weight = average_weight + 2.6\nnew_vehicle_weight = (new_average_weight * (num_vehicles + 1)) - (average_weight * num_vehicles)\nans = new_vehicle_weight", "\nnum_vehicles = 10\ntotal_weight = 12.2 * num_vehicles\nnew_vehicle_weight = Symbol('new_vehicle_weight', positive=True)\nnew_total_weight = total_weight + new_vehicle_weight\nnew_average_weight = new_total_weight / (num_vehicles + 1)\nsolution = solve_it(new_average_weight - 12.2 - 2.6, new_vehicle_weight)\nans = solution[new_vehicle_weight]", "\nweight_of_new_truck = Symbol('weight_of_new_truck', positive=True)\nweight_of_old_trucks = 10 * 12.2 - weight_of_new_truck\nnew_average_weight = (weight_of_old_trucks + weight_of_new_truck) / 11\nsolution = solve_it(new_average_weight - (weight_of_old_trucks / 10) - 2.6, weight_of_new_truck)\nans = solution[weight_of_new_truck]", "\nnum_vehicles = 10\naverage_weight = 12.2\nweight_of_new_vehicle = (num_vehicles + 1) * (average_weight + 2.6) - num_vehicles * average_weight\nans = weight_of_new_vehicle", "\ntotal_weight = Symbol('total_weight', positive=True)\nnum_vehicles = 10\navg_weight = 12.2\navg_weight_after_adding_new_vehicle = 14.8\nsolution = solve_it(total_weight / num_vehicles - avg_weight, total_weight)\ntotal_weight_after_adding_new_vehicle = solution[total_weight] + avg_weight_after_adding_new_vehicle\nsolution = solve_it(total_weight_after_adding_new_vehicle / (num_vehicles + 1) - avg_weight_after_adding_new_vehicle, total_weight_after_adding_new_vehicle)\nans = solution[total_weight_after_adding_new_vehicle]", "\nnum_vehicles = 10\nweight_of_new_vehicle = Symbol('weight_of_new_vehicle', positive=True)\naverage_weight_before_adding_new_vehicle = 12.2\naverage_weight_after_adding_new_vehicle = average_weight_before_adding_new_vehicle + 2.6\nsolution = solve_it(average_weight_after_adding_new_vehicle * (num_vehicles + 1) - (average_weight_before_adding_new_vehicle * num_vehicles + weight_of_new_vehicle), weight_of_new_vehicle)\nans = solution[weight_of_new_vehicle]", "\nweight_of_new_truck = Symbol('weight_of_new_truck', positive=True)\nweight_of_old_truck = Symbol('weight_of_old_truck', positive=True)\nweight_of_new_truck_group = weight_of_new_truck + weight_of_old_truck\nweight_of_old_truck_group = weight_of_old_truck\nsolution = solve_it([weight_of_new_truck_group / 10 - 12.2, weight_of_old_truck_group / 9 - 12.2 + 2.6], [weight_of_new_truck, weight_of_old_truck])\nans = solution[weight_of_new_truck]"], "generated_prediction": "40.8", "options": ["A)40.8", "B)41.6", "C)42.2", "D)43.5", "E)44.8"], "answer": "A", "prediction": "A"}
{"question": "Boomtown urban planners expect the city\u2019s population to increase by 10% per year over the next two years. If that projection were to come true, the population two years from now would be exactly double the population of one year ago. Which of the following is closest to the percent population increase in Boomtown over the last year?", "generated": ["\npercent_increase = Symbol('percent_increase', positive=True)\nsolution = solve_it(1.1 ** 2 - (1 + percent_increase / 100) ** 2, percent_increase)\nans = solution[percent_increase]", "\npercent_increase = Symbol('percent_increase', positive=True)\nsolution = solve_it(1.1 ** 2 - (1 + percent_increase / 100) ** 2, percent_increase)\nans = solution[percent_increase]", "\npopulation_increase = Symbol('population_increase', positive=True)\nsolution = solve_it((1 + population_increase / 100) ** 2 - 2, population_increase)\nans = solution[population_increase]", "\npopulation_increase = Symbol('population_increase', positive=True)\nsolution = solve_it(1.1 ** 2 - 2 * (1 + population_increase / 100), population_increase)\nans = solution[population_increase]", "\npopulation = Symbol('population', positive=True)\npopulation_one_year_ago = population / (1 + 0.1)\npopulation_two_years_ago = population / (1 + 0.1) ** 2\nsolution = solve_it(population_one_year_ago - 2 * population_two_years_ago, population)\nans = solution[population]", "\npopulation = Symbol('population', positive=True)\npopulation_after_1_year = population * 1.1\npopulation_after_2_years = population_after_1_year * 1.1\nsolution = solve_it(population_after_2_years - 2 * population_after_1_year, population)\nans = (solution[population] - population_after_1_year) / population_after_1_year", "\ncurrent_population = Symbol('current_population', positive=True)\npopulation_after_one_year = current_population * (1 + 0.1)\npopulation_after_two_years = population_after_one_year * (1 + 0.1)\nsolution = solve_it(population_after_two_years - 2 * population_after_one_year, current_population)\nans = solution[current_population]", "\npopulation_one_year_ago = Symbol('population_one_year_ago', positive=True)\npopulation_two_years_ago = Symbol('population_two_years_ago', positive=True)\nsolution = solve_it([population_one_year_ago * 1.1 - population_two_years_ago, population_one_year_ago * 2 - population_two_years_ago * 1.1], [population_one_year_ago, population_two_years_ago])\nans = (solution[population_one_year_ago] - solution[population_two_years_ago]) / solution[population_two_years_ago]", "\npopulation_increase_in_2_years = 2\npopulation_increase_in_1_year = 1.1\nsolution = solve_it(population_increase_in_2_years - population_increase_in_1_year ** 2, population_increase_in_1_year)\nans = (solution[population_increase_in_1_year] - 1) * 100", "\npopulation = Symbol('population', positive=True)\npopulation_in_1_year = population * 1.1\npopulation_in_2_years = population * 1.1 * 1.1\nsolution = solve_it(population_in_2_years - population_in_1_year - population, population)\nans = solution[population]", "\ncurrent_population = Symbol('current_population', positive=True)\npopulation_in_1_year = current_population * 1.1\npopulation_in_2_year = population_in_1_year * 1.1\nsolution = solve_it(population_in_2_year - 2 * population_in_1_year, current_population)\npopulation_in_1_year = solution[current_population] * 1.1\nans = (population_in_1_year - solution[current_population]) / solution[current_population]", "\npopulation_increase = Symbol('population_increase', positive=True)\npopulation_in_two_years = (1 + population_increase / 100) ** 2\npopulation_in_one_year = (1 + population_increase / 100)\nsolution = solve_it(population_in_two_years - 2 * population_in_one_year, population_increase)\nans = solution[population_increase]", "\npopulation_one_year_ago = Symbol('population_one_year_ago', positive=True)\npopulation_two_years_ago = Symbol('population_two_years_ago', positive=True)\nsolution = solve_it([population_one_year_ago - 1.1 * population_two_years_ago, population_two_years_ago - 2 * population_one_year_ago], [population_one_year_ago, population_two_years_ago])\nans = (solution[population_one_year_ago] - solution[population_two_years_ago]) / solution[population_two_years_ago]", "\npopulation_one_year_ago = Symbol('population_one_year_ago', positive=True)\npopulation_two_years_ago = Symbol('population_two_years_ago', positive=True)\nsolution = solve_it([population_one_year_ago * 1.1 - population_two_years_ago * 2, population_two_years_ago * 1.1 - population_one_year_ago], [population_one_year_ago, population_two_years_ago])\npercent_increase = (solution[population_one_year_ago] - solution[population_two_years_ago]) / solution[population_two_years_ago] * 100\nans = percent_increase", "\npopulation_one_year_ago = Symbol('population_one_year_ago', positive=True)\npopulation_two_years_ago = Symbol('population_two_years_ago', positive=True)\npopulation_one_year_from_now = population_one_year_ago * 1.1\npopulation_two_years_from_now = population_two_years_ago * 1.1 ** 2\nsolution = solve_it([population_two_years_from_now - 2 * population_one_year_from_now, population_one_year_ago - population_two_years_ago * 1.1], [population_one_year_ago, population_two_years_ago])\nans = (solution[population_one_year_ago] - solution[population_two_years_ago]) / solution[population_two_years_ago]", "\npopulation_one_year_ago = Symbol('population_one_year_ago', positive=True)\npopulation_now = population_one_year_ago * 1.1\npopulation_two_years_ago = population_now * 1.1\nsolution = solve_it(population_now - 2 * population_two_years_ago, population_one_year_ago)\nans = (solution[population_one_year_ago] - population_two_years_ago) / population_two_years_ago", "\npopulation = Symbol('population', positive=True)\npopulation_in_1_year = population * 1.1\npopulation_in_2_years = population * 1.1 ** 2\nsolution = solve_it(population_in_2_years - 2 * population_in_1_year, population)\npercent_increase = solution[population] / population_in_1_year\nans = percent_increase", "\npopulation_1_year_ago = Symbol('population_1_year_ago', positive=True)\npopulation_2_years_ago = Symbol('population_2_years_ago', positive=True)\npopulation_1_year_from_now = population_1_year_ago * 1.1\npopulation_2_years_from_now = population_1_year_from_now * 1.1\nsolution = solve_it([population_2_years_from_now - 2 * population_1_year_ago, population_1_year_ago - population_2_years_ago], [population_1_year_ago, population_2_years_ago])\nans = (solution[population_1_year_ago] - solution[population_2_years_ago]) / solution[population_2_years_ago]", "\npopulation_increase = 10\npopulation_increase_in_two_years = population_increase * (1 + population_increase / 100) ** 2\npopulation_increase_in_one_year = population_increase * (1 + population_increase / 100)\nsolution = solve_it(population_increase_in_two_years - 2 * population_increase_in_one_year, population_increase)\nans = solution[population_increase]", "\npopulation_one_year_ago = Symbol('population_one_year_ago', positive=True)\npopulation_two_years_ago = Symbol('population_two_years_ago', positive=True)\nsolution = solve_it([population_one_year_ago - 1.1 * population_two_years_ago, population_two_years_ago - 2 * population_one_year_ago], [population_one_year_ago, population_two_years_ago])\nans = solution[population_one_year_ago] / solution[population_two_years_ago] - 1", "\npopulation_increase = Symbol('population_increase', positive=True)\npopulation_increase_in_2_years = 1.1 ** 2\npopulation_increase_in_1_year = 1.1\nsolution = solve_it(population_increase_in_2_years - 2 * population_increase_in_1_year * (1 + population_increase / 100), population_increase)\nans = solution[population_increase]", "\npopulation_one_year_ago = Symbol('population_one_year_ago', positive=True)\npopulation_two_years_ago = Symbol('population_two_years_ago', positive=True)\npopulation_one_year_ago_increase = 0.1\npopulation_two_years_ago_increase = 0.1\nsolution = solve_it([population_one_year_ago * (1 + population_one_year_ago_increase) - 2 * population_two_years_ago, population_two_years_ago * (1 + population_two_years_ago_increase) - population_one_year_ago], [population_one_year_ago, population_two_years_ago])\nans = (solution[population_one_year_ago] - solution[population_two_years_ago]) / solution[population_two_years_ago]", "\ncurrent_population = Symbol('current_population', positive=True)\nfuture_population = Symbol('future_population', positive=True)\npopulation_increase = Symbol('population_increase', positive=True)\nsolution = solve_it([future_population - current_population * (1 + population_increase / 100), future_population - 2 * current_population], [current_population, population_increase])\nans = solution[population_increase]", "\npopulation_increase = Symbol('population_increase', positive=True)\npopulation_one_year_ago = 1\npopulation_two_years_ago = population_one_year_ago / (1 + population_increase / 100)\npopulation_two_years_from_now = population_one_year_ago * (1 + population_increase / 100) ** 2\nsolution = solve_it(population_two_years_from_now - 2 * population_one_year_ago, population_increase)\nans = solution[population_increase]", "\npop_1_year_ago = Symbol('pop_1_year_ago', positive=True)\npop_2_years_ago = Symbol('pop_2_years_ago', positive=True)\nsolution = solve_it([pop_1_year_ago - pop_2_years_ago * 1.1, pop_1_year_ago * 2 - pop_2_years_ago * 1.1 ** 2], [pop_1_year_ago, pop_2_years_ago])\nans = (solution[pop_1_year_ago] - solution[pop_2_years_ago]) / solution[pop_2_years_ago]", "\npopulation_one_year_ago = Symbol('population_one_year_ago', positive=True)\npopulation_two_years_ago = Symbol('population_two_years_ago', positive=True)\npopulation_one_year_ago_increase = population_one_year_ago * (1 + 0.1)\npopulation_two_years_ago_increase = population_two_years_ago * (1 + 0.1) * (1 + 0.1)\nsolution = solve_it([population_one_year_ago_increase - population_one_year_ago - population_two_years_ago, population_two_years_ago_increase - 2 * population_one_year_ago], [population_one_year_ago, population_two_years_ago])\nans = (solution[population_one_year_ago] - solution[population_two_years_ago]) / solution[population_two_years_ago]", "\npopulation_increase = Symbol('population_increase', positive=True)\npopulation_one_year_ago = 100\npopulation_two_years_ago = population_one_year_ago / (1 + population_increase / 100)\npopulation_two_years_from_now = population_one_year_ago * (1 + population_increase / 100) ** 2\nsolution = solve_it(population_two_years_from_now - 2 * population_one_year_ago, population_increase)\nans = solution[population_increase]", "\npopulation = Symbol('population', positive=True)\npopulation_one_year_ago = population / (1 + 0.1)\npopulation_two_years_ago = population / (1 + 0.1) ** 2\nsolution = solve_it([population_two_years_ago - 2 * population_one_year_ago], [population])\nans = (solution[population] - population_one_year_ago) / population_one_year_ago", "\npopulation_increase = Symbol('population_increase', positive=True)\npopulation_increase_in_two_years = 1.1 ** 2\npopulation_increase_in_one_year = 1.1\nsolution = solve_it(population_increase_in_two_years - 2 * population_increase_in_one_year, population_increase)\nans = solution[population_increase]", "\npopulation_one_year_ago = Symbol('population_one_year_ago', positive=True)\npopulation_two_years_ago = Symbol('population_two_years_ago', positive=True)\npopulation_one_year_ago_after_increase = population_one_year_ago * 1.1\npopulation_two_years_ago_after_increase = population_two_years_ago * 1.1\nsolution = solve_it([population_one_year_ago_after_increase - 2 * population_two_years_ago_after_increase, population_one_year_ago_after_increase - population_one_year_ago], [population_one_year_ago, population_two_years_ago])\nans = (solution[population_one_year_ago] - solution[population_two_years_ago]) / solution[population_two_years_ago]"], "generated_prediction": "None", "options": ["A)20%", "B)40%", "C)50%", "D)65%", "E)75%"], "answer": "D", "prediction": "B"}
{"question": "Arjun and Sajal are friends, each has some money. If Arun gives $30 to Sajal, the Sajal will have twice the money left with Arjun. But, if Sajal gives $10 to Arjun, Arjun will have thrice as much as is left with Sajal. How much money does each have?", "generated": ["\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - Sajal - 30, Sajal - Arjun - 10], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - Sajal - 30, Sajal - Arjun + 10], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - 30 - 2 * Sajal, Arjun + 10 - 3 * (Sajal - 10)], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Sajal + 30 - 2 * Arjun, Arjun + 10 - 3 * Sajal], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - Sajal - 30, Arjun - Sajal + 10], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - Sajal - 30, Arjun - Sajal + 10], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\narjun = Symbol('arjun', positive=True)\nsajal = Symbol('sajal', positive=True)\nsolution = solve_it([arjun - 30 - 2 * sajal, arjun + 10 - 3 * (sajal - 10)], [arjun, sajal])\nans = (solution[arjun], solution[sajal])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - 30 - 2 * Sajal, Sajal - 10 - 3 * Arjun], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\narjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\nsolution = solve_it([arjun_money - 30 - 2 * sajal_money, sajal_money - 10 - 3 * arjun_money], [arjun_money, sajal_money])\nans = (solution[arjun_money], solution[sajal_money])", "\narjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\nsolution = solve_it([arjun_money - 30 - 2 * sajal_money, sajal_money - 10 - 3 * arjun_money], [arjun_money, sajal_money])\nans = (solution[arjun_money], solution[sajal_money])", "\narjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\nsolution = solve_it([arjun_money - 30 - 2 * sajal_money, sajal_money - 10 - 3 * arjun_money], [arjun_money, sajal_money])\nans = (solution[arjun_money], solution[sajal_money])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - Sajal - 30, 2 * Arjun - Sajal - 10, 3 * Sajal - Arjun - 10], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\narjun = Symbol('arjun', positive=True)\nsajal = Symbol('sajal', positive=True)\nsolution = solve_it([sajal + 30 - 2 * (arjun - 30), arjun + 10 - 3 * (sajal - 10)], [arjun, sajal])\nans = (solution[arjun], solution[sajal])", "\narjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\nsolution = solve_it([arjun_money - sajal_money - 30, arjun_money - sajal_money + 10], [arjun_money, sajal_money])\nans = (solution[arjun_money], solution[sajal_money])", "\narjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\nsolution = solve_it([arjun_money - 30 + sajal_money - 2 * arjun_money, sajal_money - 10 + 3 * arjun_money - sajal_money], [arjun_money, sajal_money])\nans = (solution[arjun_money], solution[sajal_money])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - 30 - Sajal, Arjun - 10 + Sajal], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\nArjun_money = Symbol('Arjun_money', positive=True)\nSajal_money = Symbol('Sajal_money', positive=True)\nsolution = solve_it([Arjun_money - (Sajal_money - 30), Arjun_money - 3 * (Sajal_money - 10)], [Arjun_money, Sajal_money])\nans = (solution[Arjun_money], solution[Sajal_money])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - 30 - Sajal, Arjun - 3 * (Sajal - 10)], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\narjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\nsolution = solve_it([arjun_money - 30 - sajal_money / 2, sajal_money - 10 - arjun_money * 3], [arjun_money, sajal_money])\nans = (solution[arjun_money], solution[sajal_money])", "\nArjun = Symbol('Arjun', positive=True)\nSajal = Symbol('Sajal', positive=True)\nsolution = solve_it([Arjun - (Sajal + 30), Sajal - (Arjun - 10)], [Arjun, Sajal])\nans = (solution[Arjun], solution[Sajal])", "\narjun = Symbol('arjun', positive=True)\nsajal = Symbol('sajal', positive=True)\nsolution = solve_it([arjun - (sajal + 30), sajal - (arjun - 10)], [arjun, sajal])\nans = (solution[arjun], solution[sajal])", "\nSajal = Symbol('Sajal', positive=True)\nArjun = Symbol('Arjun', positive=True)\nsolution = solve_it([Sajal + 30 - 2 * (Arjun - 30), Arjun + 10 - 3 * (Sajal - 10)], [Sajal, Arjun])\nans = (solution[Sajal], solution[Arjun])", "\narjun = Symbol('arjun', positive=True)\nsajal = Symbol('sajal', positive=True)\nsolution = solve_it([arjun - 30 + sajal - 2 * sajal, sajal - 10 + arjun - 3 * arjun], [arjun, sajal])\nans = (solution[arjun], solution[sajal])", "\narjun = Symbol('arjun', positive=True)\nsajal = Symbol('sajal', positive=True)\nsolution = solve_it([arjun - 30 - sajal, sajal - 10 - 3 * arjun], [arjun, sajal])\nans = (solution[arjun], solution[sajal])", "\narjun = Symbol('arjun', positive=True)\nsajal = Symbol('sajal', positive=True)\nsolution = solve_it([arjun - 30 - sajal, sajal - 10 - 3 * arjun], [arjun, sajal])\nans = (solution[arjun], solution[sajal])", "\narjun = Symbol('arjun', positive=True)\nsajal = Symbol('sajal', positive=True)\nsolution = solve_it([arjun - 30 - sajal, sajal - 10 - 3 * arjun], [arjun, sajal])\nans = (solution[arjun], solution[sajal])", "\narjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\nsolution = solve_it([arjun_money - 30 - sajal_money, sajal_money - 10 - 3 * arjun_money], [arjun_money, sajal_money])\nans = (solution[arjun_money], solution[sajal_money])", "\nArjun_money = Symbol('Arjun_money', positive=True)\nSajal_money = Symbol('Sajal_money', positive=True)\nsolution = solve_it([Arjun_money - 30 - Sajal_money, Sajal_money - 10 - 3 * Arjun_money], [Arjun_money, Sajal_money])\nans = (solution[Arjun_money], solution[Sajal_money])", "\narjun_money = Symbol('arjun_money', positive=True)\nsajal_money = Symbol('sajal_money', positive=True)\nsolution = solve_it([arjun_money - 30 - sajal_money, sajal_money - 10 - 3 * arjun_money], [arjun_money, sajal_money])\nans = (solution[arjun_money], solution[sajal_money])", "\narjun = Symbol('arjun', positive=True)\nsajal = Symbol('sajal', positive=True)\nsolution = solve_it([arjun - 30 - sajal, arjun - 10 - 3 * sajal], [arjun, sajal])\nans = (solution[arjun], solution[sajal])"], "generated_prediction": "(None, None)", "options": ["A)62, 35", "B)62, 34", "C)34, 62", "D)42, 62", "E)62, 42"], "answer": "B", "prediction": "A"}
{"question": "Julie\u2019s yard is rectangular. One side of the yard is 100 feet wide. The total area of the yard is 3,000 square feet. What is the length of the other side of the yard?", "generated": ["\nlength = Symbol('length', positive=True)\nwidth = 100\narea = 3000\nsolution = solve_it(length * width - area, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nwidth = 100\narea = 3000\nsolution = solve_it(length * width - area, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nwidth = 100\narea = 3000\nsolution = solve_it(length * width - area, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nwidth = 100\narea = 3000\nsolution = solve_it(length * width - area, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nwidth = 100\narea = 3000\nsolution = solve_it(length * width - area, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nwidth = 100\narea = 3000\nsolution = solve_it(length * width - area, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nwidth = 100\narea = 3000\nsolution = solve_it(length * width - area, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nwidth = 100\narea = 3000\nsolution = solve_it(length * width - area, length)\nans = solution[length]", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nwidth = 100\narea = 3000\nheight = area / width\nans = height", "\nwidth = 100\narea = 3000\nheight = area / width\nans = height", "\nwidth = 100\narea = 3000\nlength = area / width\nans = length", "\nlength = Symbol('length', positive=True)\narea = 3000\nwidth = 100\nsolution = solve_it(length * width - area, length)\nans = solution[length]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 3000\nsolution = solve_it([width * height - area, width - 100], [width, height])\nans = solution[height]", "\nwidth = 100\narea = 3000\nsolution = solve_it(width * height - area, height)\nans = solution[height]"], "generated_prediction": "30.0", "options": ["A)30 feet", "B)20 feet", "C)10 feet", "D)50 feet", "E)60 feet"], "answer": "A", "prediction": "A"}
{"question": "The greatest common factor of two positive integers is 11. The least common multiple of these two integers is 7700. If one of the integers is 350, what is the other?", "generated": ["\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcf = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcf - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcf = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcf - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcf = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcf - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcf = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcf - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcf = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcf - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcd = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcd - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcd = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcd - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcd = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcd - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcd = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcd - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcd = 11\nlcm = 7700\nsolution = solve_it([num1 * num2 / gcd - lcm, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum_1 = Symbol('num_1', positive=True)\nnum_2 = Symbol('num_2', positive=True)\ngreatest_common_factor = 11\nleast_common_multiple = 7700\nsolution = solve_it([num_1 * num_2 / greatest_common_factor - least_common_multiple, num_1 - 350], [num_1, num_2])\nans = solution[num_2]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ngcf = 11\nlcm = 7700\nsolution = solve_it([x * y / gcf - lcm, x - 350], [x, y])\nans = solution[y]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ngcf = 11\nlcm = 7700\nsolution = solve_it([x * y / gcf - lcm, x - 350], [x, y])\nans = solution[y]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ngcd = 11\nlcm = 7700\nsolution = solve_it([x * y / gcd - lcm, x - 350], [x, y])\nans = solution[y]", "\ngreatest_common_factor = 11\nleast_common_multiple = 7700\none_of_the_integers = 350\nans = least_common_multiple / one_of_the_integers * greatest_common_factor", "\nnum_1 = 350\nnum_2 = Symbol('num_2', positive=True)\ngcf = 11\nlcm = 7700\nsolution = solve_it([num_1 * num_2 / gcf - lcm, math.gcd(num_1, num_2) - gcf], num_2)\nans = solution[num_2]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ngcf = 11\nlcm = 7700\nx_value = 350\nsolution = solve_it([x * y / gcf - lcm, x - x_value], [x, y])\nans = solution[y]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 * num2 / 11 - 7700, num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 * num2 / 11 - 7700, num1 - 350], [num1, num2])\nans = solution[num2]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ngcf = 11\nlcm = 7700\nx_given = 350\nsolution = solve_it([x * y / gcf - lcm, x - x_given], [x, y])\nans = solution[y]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcd = 11\nlcm = 7700\nsolution = solve_it([gcd - math.gcd(num1, num2), lcm - (num1 * num2) / math.gcd(num1, num2), num1 - 350], [num1, num2])\nans = solution[num2]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcf = 11\nlcm = 7700\nnum1_given = 350\nsolution = solve_it([math.gcd(num1, num2) - gcf, num1 * num2 - lcm, num1 - num1_given], [num1, num2])\nans = solution[num2]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ngreatest_common_factor = 11\nleast_common_multiple = 7700\nsolution = solve_it([x * y / greatest_common_factor - least_common_multiple, x - 350], [x, y])\nans = solution[y]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ngcf = 11\nlcm = 7700\nx_value = 350\nsolution = solve_it([math.gcd(x, y) - gcf, math.lcm(x, y) - lcm, x - x_value], [x, y])\nans = solution[y]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ngreatest_common_factor = 11\nleast_common_multiple = 7700\nx_value = 350\nsolution = solve_it([x * y / greatest_common_factor - least_common_multiple, x - x_value], [x, y])\nans = solution[y]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcf = 11\nlcm = 7700\nnum1_given = 350\nsolution = solve_it([num1 * num2 / gcf - lcm, num1 - num1_given], [num1, num2])\nans = solution[num2]", "\nfirst_number = Symbol('first_number', positive=True)\nsecond_number = Symbol('second_number', positive=True)\ngreatest_common_factor = 11\nleast_common_multiple = 7700\nfirst_number_value = 350\nsolution = solve_it([first_number * second_number / greatest_common_factor - least_common_multiple, first_number - first_number_value], [first_number, second_number])\nans = solution[second_number]", "\nfactor = 11\nmultiple = 7700\nnum = 350\nans = multiple / (num * factor)", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\ngcd = 11\nlcm = 7700\nnum1_given = 350\nsolution = solve_it([num1 * num2 / gcd - lcm, num1 - num1_given], [num1, num2])\nans = solution[num2]", "\ngreatest_common_factor = 11\nleast_common_multiple = 7700\none_of_the_integers = 350\nsolution = solve_it([greatest_common_factor * least_common_multiple - one_of_the_integers * least_common_multiple, greatest_common_factor * least_common_multiple - one_of_the_integers * greatest_common_factor], [greatest_common_factor, least_common_multiple])\nans = solution[greatest_common_factor]"], "generated_prediction": "242.0", "options": ["A)242", "B)308", "C)352", "D)412", "E)456"], "answer": "A", "prediction": "A"}
{"question": "A square piece of cloth is trimmed by 4 feet on one edge to form a rectangular piece, which is then cut diagonally in half to create two triangles. If the area of each of triangle is 70 square feet, what was the perimeter (in feet) of the original piece of square cloth?", "generated": ["\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 70\nsolution = solve_it([width * height - area, 2 * (width + height) - 56], [width, height])\nans = (solution[width], solution[height])", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = 4 * solution[side]", "\nside = Symbol('side', positive=True)\narea_of_triangle = 70\nsolution = solve_it(side ** 2 / 2 - area_of_triangle, side)\nans = solution[side] * 4", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 2 * area, side)\nans = solution[side] * 4", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side] * 4", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 70\nsolution = solve_it([width * height - area, width - height], [width, height])\nans = 2 * (solution[width] + solution[height]) + 4", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - area * 4, side)\nans = solution[side] * 4", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - area * 2, side)\nans = solution[side] * 4", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * side - 4 * area, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - (side - 4) * side / 2 - area, side)\nans = solution[side] * 4", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side] * 2 + 4 * 2", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 70\nsolution = solve_it([width * height - area, width - height], [width, height])\nans = 4 * (solution[width] + solution[height])", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 70\nsolution = solve_it([width * height - area, width - height], [width, height])\nans = 4 * (solution[width] + solution[height])", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - area, side)\nans = solution[side] * 4", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - area, side)\nans = solution[side] * 4", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 70\nsolution = solve_it([width * height - area, width - height], [width, height])\nans = solution[width] * 2 + solution[height] * 2", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it(side ** 2 - 4 * area, side)\nans = solution[side]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 70\nsolution = solve_it([width * height - area, width + height - width - 4], [width, height])\nans = 2 * (solution[width] + solution[height] + 4)", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it([side ** 2 - area, side ** 2 - area, 2 * side - 56], side)\nans = solution[side]", "\nside_of_square = Symbol('side_of_square', positive=True)\narea_of_triangle = 70\narea_of_square = 2 * area_of_triangle\nsolution = solve_it(side_of_square ** 2 - area_of_square, side_of_square)\nside_of_square = solution[side_of_square]\nans = 4 * side_of_square", "\nside = Symbol('side', positive=True)\narea = 70\nsolution = solve_it([side ** 2 - area, side - 4, (side - 4) * side / 2 - area], side)\nans = solution[side] * 4", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 70\nsolution = solve_it([width * height - area, width - height], [width, height])\nwidth = solution[width]\nheight = solution[height]\noriginal_width = width + 4\noriginal_height = height + 4\noriginal_area = original_width * original_height\noriginal_perimeter = 2 * (original_width + original_height)\nsolution = solve_it(original_area - 70, original_perimeter)\nans = solution[original_perimeter]"], "generated_prediction": "16.73", "options": ["A)56", "B)58", "C)60", "D)62", "E)64"], "answer": "A", "prediction": "B"}
{"question": "The length of the ribbon was originally 30 cm. It was reduced in the ratio 5 : 3. What is its length now?", "generated": ["\noriginal_length = 30\nratio = 5 / 3\nans = original_length * ratio", "\nlength = Symbol('length', positive=True)\nsolution = solve_it(5 / 3 * length - 30, length)\nans = solution[length]", "\noriginal_length = 30\nnew_length = original_length * 3 / (3 + 5)\nans = new_length", "\nlength = Symbol('length', positive=True)\nsolution = solve_it(length * 3 / 5 - 30, length)\nans = solution[length]", "\noriginal_length = 30\nreduction_ratio = 5 / 3\nreduced_length = original_length * reduction_ratio\nans = reduced_length", "\noriginal_length = 30\nnew_length = original_length * (5 / 3)\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = Symbol('new_length', positive=True)\nsolution = solve_it(original_length * 5 - new_length * 3, new_length)\nans = solution[new_length]", "\noriginal_length = 30\nnew_length = Symbol('new_length', positive=True)\nsolution = solve_it(original_length * 5 - new_length * 3, new_length)\nans = solution[new_length]", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nreduced_length = original_length * 3 / 5\nans = reduced_length", "\nribbon_length = Symbol('ribbon_length', positive=True)\noriginal_length = 30\nsolution = solve_it(ribbon_length / original_length - 5 / 3, ribbon_length)\nans = solution[ribbon_length]", "\noriginal_length = 30\nreduced_length = original_length * 3 / 5\nans = reduced_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nreduced_length = original_length * 5 / 8\nans = reduced_length", "\noriginal_length = 30\nreduced_length = original_length * 5 / 8\nans = reduced_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nreduced_length = original_length * 5 / 8\nans = reduced_length", "\noriginal_length = 30\nnew_length = original_length * 3 / 5\nans = new_length", "\noriginal_length = 30\nnew_length = original_length * 5 / 8\nans = new_length"], "generated_prediction": "18.0", "options": ["A)18", "B)30", "C)6", "D)15", "E)12"], "answer": "A", "prediction": "A"}
{"question": "M = abc is a three digit number and N = cba, if M > N and M - N + 396c = 990. Then how many values of M are more than 300.", "generated": ["\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - N - 300], [a, b, c])\nans = len(solution[a])", "\nc = Symbol('c')\na = Symbol('a')\nb = Symbol('b')\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nM_minus_N = M - N\nsolution = solve_it([M_minus_N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nN = c * 100 + b * 10 + a\nM = a * 100 + b * 10 + c\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [M, N])\nans = solution[M]", "\nc = Symbol('c', positive=True)\nb = Symbol('b', positive=True)\na = Symbol('a', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a]) + len(solution[b]) + len(solution[c])", "\nc = Symbol('c', positive=True)\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\nc = Symbol('c', positive=True)\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\nc = Symbol('c', positive=True)\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\nc = Symbol('c', positive=True)\nb = Symbol('b', positive=True)\na = Symbol('a', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\nc = Symbol('c', positive=True)\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\nc = Symbol('c', positive=True)\nb = Symbol('b', positive=True)\na = Symbol('a', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\nc = Symbol('c', positive=True)\nb = Symbol('b', positive=True)\na = Symbol('a', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [c, b])\nans = solution[c]", "\nc = Symbol('c', positive=True)\nb = Symbol('b', positive=True)\na = Symbol('a', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300], [a, b, c])\nans = len(solution[a])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = a * b * c\nN = c * b * a\nsolution = solve_it([M - N + 396 * c - 990, M - 300, a - 1, b - 1, c - 1], [a, b, c])\nans = len(solution[a]) + len(solution[b]) + len(solution[c])", "\nc = Symbol('c', positive=True)\nsolution = solve_it(c * 396 + 990 - c * 1000, c)\nans = solution[c]", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nc = Symbol('c', positive=True)\nM = 100 * a + 10 * b + c\nN = 100 * c + 10 * b + a\nsolution = solve_it([M - N + 396 * c - 990], [a, b, c])\nans = 0\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            if solution[a].subs({a: i, b: j, c: k}) and solution[b].subs({a: i, b: j, c: k}) and solution[c].subs({a: i, b: j, c: k}):\n                if 100 * i + 10 * j + k > 300:\n                    ans += 1", "\nc = Symbol('c')\nsolution = solve_it(c * (10 ** 2) + c * (10 ** 1) + c * (10 ** 0) - (9 - c) * (10 ** 2) - (9 - c) * (10 ** 1) - (9 - c) * (10 ** 0) + 396 * c - 990, c)\nans = len([solution[c] for solution[c] in solution[c] if solution[c] > 3])", "\nc = Symbol('c', positive=True)\nsolution = solve_it(990 - 396 * c, c)\nc = solution[c]\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nsolution = solve_it(a * b * c - a * (10 ** 2) + b * (10 ** 1) + c - (10 ** 3) + 396 * c - 990, [a, b])\nans = len(solution[a])"], "generated_prediction": "18.75", "options": ["A)20", "B)30", "C)40", "D)200", "E)None"], "answer": "A", "prediction": "A"}
{"question": "there are more than 501 students in a school such that 20% of them exactly took physics and 28% of them exactly took math. What could be the least possible no of students in the school?", "generated": ["\nstudents = Symbol('students', positive=True)\nphysics_students = 0.2 * students\nmath_students = 0.28 * students\nsolution = solve_it(physics_students + math_students - students - 501, students)\nans = solution[students]", "\nstudents = Symbol('students', positive=True)\nphysics_students = 0.2 * students\nmath_students = 0.28 * students\nsolution = solve_it(physics_students + math_students - students - 501, students)\nans = solution[students]", "\nstudents = Symbol('students', positive=True)\nphysics_students = 0.2 * students\nmath_students = 0.28 * students\nsolution = solve_it(physics_students + math_students - students - 501, students)\nans = solution[students]", "\nstudents = Symbol('students', positive=True)\nphysics_students = 0.2 * students\nmath_students = 0.28 * students\nsolution = solve_it(physics_students + math_students - students - 501, students)\nans = solution[students]", "\nstudents = Symbol('students', positive=True)\nphysics_students = 0.2 * students\nmath_students = 0.28 * students\nsolution = solve_it(physics_students + math_students - students - 501, students)\nans = solution[students]", "\nstudents = Symbol('students', positive=True)\nphysics_students = 0.2 * students\nmath_students = 0.28 * students\nsolution = solve_it(physics_students + math_students - students - 501, students)\nans = solution[students]", "\nstudents = Symbol('students', positive=True)\nphysics_students = 0.2 * students\nmath_students = 0.28 * students\nsolution = solve_it(physics_students + math_students - students - 501, students)\nans = solution[students]", "\ntotal_students = Symbol('total_students', positive=True)\nphysics_students = 0.2 * total_students\nmath_students = 0.28 * total_students\nsolution = solve_it(physics_students + math_students - total_students, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_taking_physics = 0.2 * total_students\nstudents_taking_math = 0.28 * total_students\nsolution = solve_it(students_taking_physics + students_taking_math - total_students, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_taking_physics = 0.2 * total_students\nstudents_taking_math = 0.28 * total_students\nsolution = solve_it(students_taking_physics + students_taking_math - total_students, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_taking_physics = 0.2 * total_students\nstudents_taking_math = 0.28 * total_students\nsolution = solve_it(students_taking_physics + students_taking_math - total_students, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_taking_physics = 0.2 * total_students\nstudents_taking_math = 0.28 * total_students\nsolution = solve_it(students_taking_physics + students_taking_math - total_students, total_students)\nans = solution[total_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_taking_physics = 0.2 * num_students\nnum_students_taking_math = 0.28 * num_students\nsolution = solve_it(num_students_taking_physics + num_students_taking_math - 501, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_taking_physics = 0.2 * num_students\nnum_students_taking_math = 0.28 * num_students\nsolution = solve_it(num_students_taking_physics + num_students_taking_math - 501, num_students)\nans = solution[num_students]", "\ntotal_students = Symbol('total_students', positive=True)\nnum_students_taking_physics = 0.2 * total_students\nnum_students_taking_math = 0.28 * total_students\nsolution = solve_it(num_students_taking_physics + num_students_taking_math - total_students, total_students)\nans = solution[total_students]", "\nstudents = Symbol('students', positive=True)\nstudents_taking_physics = 0.2 * students\nstudents_taking_math = 0.28 * students\nsolution = solve_it(students_taking_physics + students_taking_math - students, students)\nans = solution[students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_taking_physics = total_students * 0.2\nstudents_taking_math = total_students * 0.28\nsolution = solve_it(students_taking_physics + students_taking_math - total_students - 501, total_students)\nans = solution[total_students]", "\nnum_students = Symbol('num_students', positive=True)\nsolution = solve_it(num_students * 0.2 + num_students * 0.28 - num_students * 0.48 - 501, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_taking_physics = 0.2 * num_students\nnum_students_taking_math = 0.28 * num_students\nnum_students_taking_physics_and_math = 0.2 * 0.28 * num_students\nsolution = solve_it(num_students_taking_physics + num_students_taking_math - num_students_taking_physics_and_math - 501, num_students)\nans = solution[num_students]", "\ntotal_students = Symbol('total_students', positive=True)\nstudents_taking_physics = 0.2 * total_students\nstudents_taking_math = 0.28 * total_students\nstudents_taking_physics_and_math = students_taking_physics + students_taking_math - 0.2 * 0.28 * total_students\nsolution = solve_it(students_taking_physics_and_math - 501, total_students)\nans = solution[total_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_taking_physics = 0.2 * num_students\nnum_students_taking_math = 0.28 * num_students\nsolution = solve_it(num_students_taking_physics + num_students_taking_math - num_students - 501, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_taking_physics = 0.2 * num_students\nnum_students_taking_math = 0.28 * num_students\nnum_students_taking_physics_and_math = 0.2 * 0.28 * num_students\nsolution = solve_it([num_students_taking_physics + num_students_taking_math - num_students_taking_physics_and_math - 501], [num_students])\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_taking_physics = 0.2 * num_students\nnum_students_taking_math = 0.28 * num_students\nnum_students_taking_both = 0.08 * num_students\nnum_students_taking_none = num_students - num_students_taking_physics - num_students_taking_math + num_students_taking_both\nsolution = solve_it(num_students_taking_none - 501, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nphysics_students = 0.2 * num_students\nmath_students = 0.28 * num_students\nsolution = solve_it(physics_students + math_students - num_students - 501, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_taking_physics = 0.2 * num_students\nnum_students_taking_math = 0.28 * num_students\nsolution = solve_it(num_students_taking_physics + num_students_taking_math - num_students - 501, num_students)\nans = solution[num_students]", "\ntotal_students = Symbol('total_students', positive=True)\nphysics_students = 0.2 * total_students\nmath_students = 0.28 * total_students\nsolution = solve_it(physics_students + math_students - total_students - 501, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nnum_students_taking_physics = 0.2 * total_students\nnum_students_taking_math = 0.28 * total_students\nnum_students_taking_both = num_students_taking_physics + num_students_taking_math - total_students\nsolution = solve_it(num_students_taking_both - 501, total_students)\nans = solution[total_students]", "\ntotal_students = Symbol('total_students', positive=True)\nphysics_students = 0.2 * total_students\nmath_students = 0.28 * total_students\nsolution = solve_it(physics_students + math_students - total_students - 501, total_students)\nans = solution[total_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_taking_physics = 0.2 * num_students\nnum_students_taking_math = 0.28 * num_students\nnum_students_taking_both = 0.2 * 0.28 * num_students\nsolution = solve_it(num_students_taking_physics + num_students_taking_math - num_students_taking_both - 501, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_students_taking_physics = 0.2 * num_students\nnum_students_taking_math = 0.28 * num_students\nsolution = solve_it(num_students_taking_physics + num_students_taking_math - num_students - 501, num_students)\nans = solution[num_students]"], "generated_prediction": "None", "options": ["A)550", "B)570", "C)600", "D)700", "E)none of these"], "answer": "E", "prediction": "E"}
{"question": "If Raj was one-third as old as Rahim 5 years back and Raj is 17 years old now, How old is Rahim now?", "generated": ["\nRaj_age = Symbol('Raj_age', positive=True)\nRahim_age = Symbol('Rahim_age', positive=True)\nsolution = solve_it([Raj_age - Rahim_age / 3 - 5, Raj_age - 17], [Raj_age, Rahim_age])\nans = solution[Rahim_age]", "\nRaj_age = 17\nRahim_age = Symbol('Rahim_age', positive=True)\nsolution = solve_it(Rahim_age / 3 - (Rahim_age - 5) - Raj_age, Rahim_age)\nans = solution[Rahim_age]", "\nRahim = Symbol('Rahim', positive=True)\nRaj = 17\nRahim_5_years_back = Rahim - 5\nRaj_5_years_back = Raj - 5\nsolution = solve_it(Rahim_5_years_back - 3 * Raj_5_years_back, Rahim)\nans = solution[Rahim]", "\nage_of_raj = 17\nage_of_rahim = Symbol('age_of_rahim', positive=True)\nsolution = solve_it(age_of_rahim - age_of_raj - 5, age_of_rahim)\nans = solution[age_of_rahim]", "\nRahim = Symbol('Rahim', positive=True)\nRaj = 17\nRahim_5_years_back = Rahim - 5\nRaj_5_years_back = Raj - 5\nsolution = solve_it(Rahim_5_years_back - Raj_5_years_back / 3, Rahim)\nans = solution[Rahim]", "\nRahim_age = Symbol('Rahim_age', positive=True)\nRahim_age_5_years_back = Rahim_age - 5\nRaj_age_5_years_back = Rahim_age_5_years_back / 3\nRaj_age = 17\nsolution = solve_it(Rahim_age_5_years_back - Raj_age_5_years_back, Rahim_age)\nans = solution[Rahim_age]", "\nRaj_age = 17\nRahim_age = Symbol('Rahim_age', positive=True)\nRahim_age_5_years_back = Rahim_age - 5\nsolution = solve_it(Rahim_age_5_years_back - Raj_age / 3, Rahim_age)\nans = solution[Rahim_age]", "\nRaj = Symbol('Raj')\nRahim = Symbol('Rahim')\nsolution = solve_it(Raj - 5 - Rahim / 3, [Raj, Rahim])\nans = solution[Rahim] + 17", "\nRaj_age_5_years_back = Symbol('Raj_age_5_years_back', positive=True)\nRahim_age_5_years_back = Symbol('Rahim_age_5_years_back', positive=True)\nRaj_current_age = 17\nsolution = solve_it([Raj_age_5_years_back - Raj_current_age - 5, Raj_age_5_years_back - Rahim_age_5_years_back / 3], [Raj_age_5_years_back, Rahim_age_5_years_back])\nans = solution[Rahim_age_5_years_back]", "\nRaj_age = 17\nRahim_age = Symbol('Rahim_age', positive=True)\nRahim_age_5_years_back = Rahim_age - 5\nRaj_age_5_years_back = Raj_age - 5\nsolution = solve_it(Rahim_age_5_years_back - 3 * Raj_age_5_years_back, Rahim_age)\nans = solution[Rahim_age]", "\nage_of_raj = 17\nage_of_rahim = Symbol('age_of_rahim', positive=True)\nage_of_raj_5_years_back = age_of_raj - 5\nage_of_rahim_5_years_back = age_of_rahim - 5\nsolution = solve_it(age_of_raj_5_years_back - age_of_rahim_5_years_back / 3, age_of_rahim)\nans = solution[age_of_rahim]", "\nRahim_age = Symbol('Rahim_age', positive=True)\nRaj_age = 17\nRahim_age_5_years_back = Rahim_age - 5\nRaj_age_5_years_back = Raj_age - 5\nsolution = solve_it(Rahim_age_5_years_back - 3 * Raj_age_5_years_back, Rahim_age)\nans = solution[Rahim_age]", "\nage_of_rahim_5_years_back = Symbol('age_of_rahim_5_years_back', positive=True)\nage_of_rahim_now = age_of_rahim_5_years_back + 5\nage_of_raj_5_years_back = age_of_rahim_5_years_back / 3\nage_of_raj_now = age_of_raj_5_years_back + 5\nsolution = solve_it([age_of_raj_now - 17, age_of_rahim_now - age_of_rahim_5_years_back], [age_of_rahim_5_years_back, age_of_raj_5_years_back])\nans = solution[age_of_rahim_now]", "\nRaj = Symbol('Raj', positive=True)\nRahim = Symbol('Rahim', positive=True)\nsolution = solve_it(Raj + 5 - 1 / 3 * (Rahim + 5), Raj)\nans = solution[Raj] + 17", "\nRaj_age = 17\nRahim_age = Symbol('Rahim_age', positive=True)\nRahim_age_5_years_back = Rahim_age - 5\nRaj_age_5_years_back = Raj_age - 5\nsolution = solve_it(Rahim_age_5_years_back - 3 * Raj_age_5_years_back, Rahim_age)\nans = solution[Rahim_age]", "\nRaj_age = 17\nRahim_age = Symbol('Rahim_age', positive=True)\nRahim_age_5_years_back = Rahim_age - 5\nRaj_age_5_years_back = Raj_age - 5\nsolution = solve_it(Rahim_age_5_years_back / 3 - Raj_age_5_years_back, Rahim_age)\nans = solution[Rahim_age]", "\nRaj_age = 17\nRahim_age = Symbol('Rahim_age', positive=True)\nRahim_age_5_years_back = Symbol('Rahim_age_5_years_back', positive=True)\nsolution = solve_it([Rahim_age_5_years_back - 5 - Raj_age, Rahim_age - Rahim_age_5_years_back - 5], [Rahim_age, Rahim_age_5_years_back])\nans = solution[Rahim_age]", "\nRaj_age = Symbol('Raj_age', positive=True)\nRahim_age = Symbol('Rahim_age', positive=True)\nsolution = solve_it(Raj_age + 5 - Rahim_age / 3, Raj_age)\nans = solution[Raj_age] + 5 + 17", "\nRaj = Symbol('Raj', positive=True)\nRahim = Symbol('Rahim', positive=True)\nsolution = solve_it(Rahim / 3 - Raj - 5, Raj)\nans = solution[Raj] + 17", "\nage_of_rahim = Symbol('age_of_rahim', positive=True)\nage_of_rahim_5_years_back = age_of_rahim - 5\nage_of_raj_5_years_back = age_of_rahim_5_years_back / 3\nage_of_raj_now = 17\nage_of_rahim_now = age_of_raj_now + age_of_rahim_5_years_back - age_of_raj_5_years_back\nans = age_of_rahim_now", "\nRahim = Symbol('Rahim', positive=True)\nRaj = Symbol('Raj', positive=True)\nRahim_age_5_years_back = Rahim - 5\nRaj_age_5_years_back = Raj - 5\nsolution = solve_it([Rahim_age_5_years_back - Raj_age_5_years_back / 3, Raj - 17], [Rahim, Raj])\nans = solution[Rahim]", "\nRahim_age = Symbol('Rahim_age', positive=True)\nRaj_age = Symbol('Raj_age', positive=True)\nsolution = solve_it(Rahim_age / 3 - Raj_age + 5 - 17, Rahim_age)\nans = solution[Rahim_age]", "\nRaj_age = Symbol('Raj_age', positive=True)\nRahim_age = Symbol('Rahim_age', positive=True)\nRaj_age_5_years_back = Raj_age - 5\nRahim_age_5_years_back = Rahim_age - 5\nsolution = solve_it([Raj_age_5_years_back - Rahim_age_5_years_back / 3, Raj_age - 17], [Raj_age, Rahim_age])\nans = solution[Rahim_age]", "\nRaj_age = Symbol('Raj_age', positive=True)\nRahim_age = Symbol('Rahim_age', positive=True)\nsolution = solve_it(Rahim_age - 5 - Raj_age / 3, Rahim_age)\nans = solution[Rahim_age] + 17", "\nRahim = Symbol('Rahim')\nRaj = Symbol('Raj')\nsolution = solve_it(Rahim - 5 - Raj / 3, Rahim)\nans = solution[Rahim] + 17", "\nRahim_age = Symbol('Rahim_age', positive=True)\nRaj_age = 17\nRaj_age_5_years_back = 12\nsolution = solve_it(Rahim_age - Raj_age_5_years_back - 3 * Raj_age, Rahim_age)\nans = solution[Rahim_age]", "\nRaj = Symbol('Raj')\nRahim = Symbol('Rahim')\nsolution = solve_it(Raj - 5 * Rahim / 3 - 17, Raj)\nans = solution[Raj]", "\nRaj_age = 17\nRahim_age = Symbol('Rahim_age', positive=True)\nRaj_age_5_years_back = Symbol('Raj_age_5_years_back', positive=True)\nsolution = solve_it([Rahim_age - Raj_age_5_years_back - 5, Raj_age_5_years_back - Raj_age + 5, Raj_age_5_years_back - Raj_age / 3 + 5], [Rahim_age, Raj_age_5_years_back])\nans = solution[Rahim_age]", "\nRahim = Symbol('Rahim', positive=True)\nRaj = Symbol('Raj', positive=True)\nsolution = solve_it([Rahim - 5 - Raj, Rahim - 17 - 3 * Raj], [Rahim, Raj])\nans = solution[Rahim]", "\nRaj_age = Symbol('Raj_age', positive=True)\nRahim_age = Symbol('Rahim_age', positive=True)\ndifference_in_age = 5\nsolution = solve_it([Raj_age - Rahim_age / 3 - difference_in_age, Raj_age - 17], [Raj_age, Rahim_age])\nans = solution[Rahim_age]"], "generated_prediction": "41.0", "options": ["A)37", "B)41", "C)40", "D)42", "E)43"], "answer": "B", "prediction": "B"}
{"question": "A cow is tethered in the middle of a field with a 14 feet long rope. If the cow grazes 10 sq.ft. per day, then approximately what time will be taken by the cow to graze the whole field?", "generated": ["\ncow_speed = 10\nfield_area = 14 * 14\nans = math.ceil(field_area / cow_speed)", "\ncow_speed = 10\nfield_area = 14 * 14\nans = math.ceil(field_area / cow_speed)", "\ncow_speed = 10\nfield_area = 14 * 14\ndays = field_area / cow_speed\nans = math.ceil(days)", "\ncow_speed = 10\nfield_area = 14 * 14\ndays = field_area / cow_speed\nans = math.ceil(days)", "\ncow_speed = 10\nfield_area = 14 * 14\ndays = field_area / cow_speed\nans = math.ceil(days)", "\ncow_speed = 10\nfield_area = 14 * 14\ndays = field_area / cow_speed\nans = math.ceil(days)", "\ntotal_area = 14 * 14\narea_per_day = 10\nans = total_area / area_per_day", "\nfield_area = 14 * 14\ncow_grazing_area = 10\ndays = Symbol('days', positive=True)\nsolution = solve_it(field_area - cow_grazing_area * days, days)\nans = solution[days]", "\ncow_speed = 10\nfield_area = 14 * 14\nans = field_area / cow_speed", "\ncow_grazing_rate = 10\nfield_area = 14 * 14\ndays = field_area / cow_grazing_rate\nans = math.ceil(days)", "\ncow_speed = 10\nfield_area = 14 * 14\nans = field_area / cow_speed", "\ncow_speed = 10\nfield_area = 14 * 14\nans = field_area / cow_speed", "\ncow_speed = 10\nfield_area = 14 * 14\nans = field_area / cow_speed", "\nrope_length = 14\nfield_area = rope_length ** 2\ncow_grazing_area = 10\ndays = field_area / cow_grazing_area\nans = math.ceil(days)", "\ncow_speed = 10\nfield_area = (14 / 2) ** 2 * math.pi\nans = field_area / cow_speed", "\nfield_area = 14 * 14\ncow_speed = 10\nans = field_area / cow_speed", "\ncow_speed = 10\nfield_area = 14 * 14\nans = field_area / cow_speed", "\nfield_area = 14 * 14\ncow_speed = 10\nans = field_area / cow_speed", "\ncow_speed = 10\nfield_area = 14 * 14\ntime_taken = field_area / cow_speed\nans = math.ceil(time_taken)", "\nrope_length = 14\narea_of_field = math.pi * rope_length ** 2 / 4\narea_grazed_per_day = 10\ndays_to_graze = area_of_field / area_grazed_per_day\nans = days_to_graze", "\ncow_speed = 10\nfield_area = 14 * 14\ntime_taken = field_area / cow_speed\nans = math.ceil(time_taken)", "\narea = Symbol('area', positive=True)\nrope_length = 14\ngrazing_speed = 10\nsolution = solve_it(math.pi * rope_length ** 2 / 4 - area, area)\nans = solution[area] / grazing_speed", "\ncow_speed = 10\nfield_area = math.pi * 7 ** 2\nduration = field_area / cow_speed\nans = duration", "\nrope_length = 14\ncow_speed = 10\nfield_area = math.pi * rope_length ** 2 / 4\nans = field_area / cow_speed", "\nrope_length = 14\narea_of_field = math.pi * rope_length ** 2 / 4\narea_grazed_per_day = 10\ndays_taken = area_of_field / area_grazed_per_day\nans = days_taken", "\narea = Symbol('area', positive=True)\ntime = Symbol('time', positive=True)\narea_per_day = 10\nsolution = solve_it(area / area_per_day - time, area)\nans = solution[area]", "\narea_of_field = 14 * 14\narea_of_field_grazed_per_day = 10\ntime_taken = area_of_field / area_of_field_grazed_per_day\nans = math.ceil(time_taken)", "\nrope_length = 14\narea_of_field = math.pi * rope_length ** 2 / 4\narea_grazed_per_day = 10\ndays_taken = area_of_field / area_grazed_per_day\nans = math.ceil(days_taken)", "\nfield_area = Symbol('field_area', positive=True)\ncow_grazing_area = 10\ncow_grazing_time = field_area / cow_grazing_area\nrope_length = 14\nrope_radius = rope_length / (2 * math.pi)\nfield_area = math.pi * rope_radius ** 2\nans = cow_grazing_time", "\nrope_length = 14\narea = rope_length ** 2\ngrazing_area_per_day = 10\nans = area / grazing_area_per_day"], "generated_prediction": "20", "options": ["A)51 days", "B)61 days", "C)71 days", "D)81 days", "E)91 days"], "answer": "B", "prediction": "A"}
{"question": "A book was sold for Rs 27.50 with a profit of 10%. If it were sold for Rs. 25.75, then would have been percentage of profit and loss ?", "generated": ["\ncost_price = 25.75\nselling_price = 27.5\nprofit = selling_price - cost_price\nprofit_percentage = profit / cost_price * 100\nans = profit_percentage", "\nselling_price = Symbol('selling_price', positive=True)\nprofit_percentage = 10\ncost_price = selling_price * 100 / (100 + profit_percentage)\nnew_selling_price = 25.75\nnew_profit_percentage = (new_selling_price - cost_price) / cost_price * 100\nans = new_profit_percentage", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 27.5\nprofit = selling_price - cost_price\nnew_selling_price = 25.75\nnew_profit = new_selling_price - cost_price\nsolution = solve_it([profit - 0.1 * cost_price, new_profit - 0.1 * cost_price], cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 27.5\nprofit_percentage = 10\nnew_selling_price = 25.75\nnew_profit_percentage = (new_selling_price - cost_price) / cost_price * 100\nsolution = solve_it(new_profit_percentage - profit_percentage, cost_price)\nans = solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 27.5\nprofit = 0.1 * selling_price\nnew_selling_price = 25.75\nnew_profit = new_selling_price - cost_price\nsolution = solve_it(profit - new_profit, cost_price)\nans = (solution[cost_price] - new_selling_price) / new_selling_price", "\ncost = 27.5\nprofit = 0.1\nselling_price = cost + cost * profit\nnew_cost = 25.75\nnew_profit = (selling_price - new_cost) / new_cost\nans = new_profit", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 10\nsolution = solve_it(cost_price - selling_price - (selling_price * profit / 100), cost_price)\nans = (solution[cost_price] - 25.75) / 25.75 * 100", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = cost_price * 0.1\nsolution = solve_it([cost_price + profit - 27.5, cost_price - selling_price - profit], [cost_price, selling_price])\nans = (solution[cost_price] - solution[selling_price]) / solution[cost_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 27.5\nprofit = selling_price - cost_price\nnew_selling_price = 25.75\nnew_profit = new_selling_price - cost_price\nsolution = solve_it([profit - 0.1 * cost_price, new_profit - 0.1 * cost_price], cost_price)\nans = (new_profit - profit) / solution[cost_price]", "\nselling_price = Symbol('selling_price', positive=True)\nprofit = 10\nsolution = solve_it(selling_price - 27.50 - 27.50 * profit / 100, selling_price)\nans = solution[selling_price]", "\nselling_price = Symbol('selling_price', positive=True)\ncost_price = 27.5\nprofit = 10\nsolution = solve_it(selling_price - cost_price - (cost_price * profit / 100), selling_price)\nans = solution[selling_price]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 10\nprofit_amount = cost_price * profit / 100\nsolution = solve_it([selling_price - cost_price - profit_amount, selling_price - 25.75], [cost_price, selling_price])\nans = (solution[cost_price], solution[selling_price])", "\nselling_price = Symbol('selling_price', positive=True)\ncost_price = Symbol('cost_price', positive=True)\nprofit = 10\nsolution = solve_it(selling_price - cost_price - (selling_price * profit / 100), cost_price)\ncost_price = solution[cost_price]\nnew_selling_price = 25.75\nnew_profit = (new_selling_price - cost_price) / new_selling_price * 100\nans = new_profit", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 27.50\nprofit = 10\nsolution = solve_it(selling_price - cost_price - cost_price * profit / 100, cost_price)\ncost_price = solution[cost_price]\nprofit_loss = (selling_price - 25.75) / cost_price * 100\nans = profit_loss", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit_percentage = Symbol('profit_percentage', positive=True)\nprofit = selling_price - cost_price\nsolution = solve_it([profit - 0.1 * cost_price, profit_percentage - profit / cost_price * 100], [cost_price, profit_percentage])\nans = solution[profit_percentage]", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 10\nsolution = solve_it(cost_price - selling_price - profit / 100 * cost_price, cost_price)\ncost_price = solution[cost_price]\nprofit_loss = (25.75 - cost_price) / cost_price * 100\nans = profit_loss", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 10\nsolution = solve_it(cost_price - selling_price - profit, cost_price)\ncost_price = solution[cost_price]\nnew_selling_price = 25.75\nnew_profit = cost_price - new_selling_price\nans = new_profit / cost_price", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 10\nsolution = solve_it(cost_price - selling_price - profit / 100 * cost_price, cost_price)\ncost_price = solution[cost_price]\nprofit_loss = (cost_price - 25.75) / cost_price * 100\nans = profit_loss", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 10\nsolution = solve_it(cost_price - selling_price - profit / 100 * cost_price, cost_price)\ncost_price = solution[cost_price]\nprofit_loss = (cost_price - 25.75) / cost_price * 100\nans = profit_loss", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit_percentage = 10\nsolution = solve_it(cost_price * (1 + profit_percentage / 100) - selling_price - 27.5, cost_price)\nans = (solution[cost_price] - 25.75) / solution[cost_price] * 100", "\nselling_price = Symbol('selling_price', positive=True)\nprofit_percentage = 10\nprofit = selling_price * profit_percentage / 100\nnew_selling_price = 25.75\nnew_profit = new_selling_price * profit_percentage / 100\nsolution = solve_it(profit - new_profit, selling_price)\nans = (solution[selling_price] - new_selling_price) / new_selling_price * 100", "\nselling_price = Symbol('selling_price', positive=True)\ncost_price = Symbol('cost_price', positive=True)\nprofit_percentage = 10\nsolution = solve_it([selling_price - cost_price - (cost_price * profit_percentage / 100), selling_price - 25.75], [selling_price, cost_price])\nprofit_loss_percentage = (solution[selling_price] - solution[cost_price]) / solution[cost_price] * 100\nans = profit_loss_percentage", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 10\nsolution = solve_it(cost_price + cost_price * profit / 100 - 27.5, cost_price)\ncost_price = solution[cost_price]\nloss = (cost_price - 25.75) / cost_price * 100\nans = loss", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = Symbol('selling_price', positive=True)\nprofit = 10\nsolution = solve_it(selling_price / cost_price - 1 - profit / 100, cost_price)\ncost_price = solution[cost_price]\nprofit_loss = (25.75 - cost_price) / cost_price * 100\nans = profit_loss", "\nselling_price = Symbol('selling_price', positive=True)\ncost_price = Symbol('cost_price', positive=True)\nprofit = 10\nsolution = solve_it(selling_price - cost_price - (profit / 100) * cost_price - 27.5, cost_price)\ncost_price = solution[cost_price]\nprofit_loss = (25.75 - cost_price) / cost_price * 100\nans = profit_loss", "\nselling_price = Symbol('selling_price', positive=True)\ncost_price = Symbol('cost_price', positive=True)\nprofit = 10\nsolution = solve_it(selling_price - cost_price - (profit / 100) * cost_price, cost_price)\ncost_price = solution[cost_price]\nprofit_percentage = (selling_price - cost_price) / cost_price * 100\nloss_percentage = (cost_price - selling_price) / cost_price * 100\nans = (profit_percentage, loss_percentage)", "\ncost_price = Symbol('cost_price', positive=True)\nselling_price = 27.5\nprofit = 10\nnew_selling_price = 25.75\nsolution = solve_it(cost_price * (1 + profit / 100) - selling_price, cost_price)\ncost_price = solution[cost_price]\nprofit_loss = (new_selling_price - cost_price) / cost_price * 100\nans = profit_loss", "\nselling_price = Symbol('selling_price', positive=True)\ncost_price = Symbol('cost_price', positive=True)\nprofit = 0.1\nsolution = solve_it([cost_price - selling_price - profit * selling_price, cost_price - 25.75], [cost_price, selling_price])\nans = (solution[cost_price] - 25.75) / 25.75", "\ncost = Symbol('cost', positive=True)\nprofit = Symbol('profit', positive=True)\nselling_price = 27.50\nsolution = solve_it(cost + profit - selling_price, cost)\ncost = solution[cost]\nprofit = solution[profit]\nnew_selling_price = 25.75\nnew_profit = new_selling_price - cost\nans = (new_profit - profit) / profit", "\nselling_price = Symbol('selling_price', positive=True)\nprofit = 0.1 * selling_price\nselling_price_with_profit = selling_price + profit\nselling_price_with_loss = selling_price - profit\nsolution = solve_it(selling_price_with_profit - 27.5, selling_price)\nselling_price = solution[selling_price]\nprofit_percentage = (selling_price_with_loss - 25.75) / selling_price * 100\nloss_percentage = -profit_percentage\nans = (profit_percentage, loss_percentage)"], "generated_prediction": "None", "options": ["A)2% Profit", "B)3% Profit", "C)2% Loss", "D)3% Loss", "E)4% Loss"], "answer": "B", "prediction": "None"}
{"question": "In how many ways can a teacher in a kindergarten school arrange a group of 3 children (Susan, Tim and Zen) on 3 identical chairs in a straight line so that Susan is on the left of Tim?", "generated": ["\nans = 3", "\nans = 3", "\nans = 3", "\nans = 3", "\nans = 3", "\nans = 3", "\nans = 3", "\nans = 3", "\nans = 3", "\nans = 3", "\nans = 3", "\nans = 2", "\nans = 2", "\nans = math.factorial(3)", "\nans = math.factorial(3)", "\nans = math.factorial(3)", "\nans = math.factorial(3)", "\nans = math.factorial(3)", "\nans = math.factorial(3)", "\nnum_ways = math.factorial(3)\nans = num_ways", "\n# Answer option: ['A)7', 'B)3', 'C)2', 'D)1', 'E)6']", "\n# Answer option: ['A)7', 'B)3', 'C)2', 'D)1', 'E)6']", "\n# Answer: 2", "\n# Answer: 3", "\n# Answer: C", "\n# Answer: 3", "\n# Answer: 6", "\n# Answer: C)2", "\n# Answer option: ['A)7', 'B)3', 'C)2', 'D)1', 'E)6']\nans = math.factorial(3)", "\n# Hint: Combination\nimport itertools\nchildren = ['Susan', 'Tim', 'Zen']\nans = len(list(itertools.permutations(children)))"], "generated_prediction": "6", "options": ["A)7", "B)3", "C)2", "D)1", "E)6"], "answer": "B", "prediction": "E"}
{"question": "The telephone bill of a certain establishment is party fixed and partly varies as the number of calls consumed. When in a certain month 540 calls made the bill is Rs.1800. In another month 620 calls are consumed then the bill becomes Rs.2040. In another month 500 units are consumed due to more\nholidays. The bill for that month would be :", "generated": ["\nfixed_cost = Symbol('fixed_cost', positive=True)\nunit_cost = Symbol('unit_cost', positive=True)\nsolution = solve_it([540 * unit_cost + fixed_cost - 1800, 620 * unit_cost + fixed_cost - 2040], [fixed_cost, unit_cost])\nans = solution[fixed_cost] + 500 * solution[unit_cost]", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nunit_cost = Symbol('unit_cost', positive=True)\nsolution = solve_it([540 * unit_cost + fixed_cost - 1800, 620 * unit_cost + fixed_cost - 2040], [fixed_cost, unit_cost])\nans = solution[fixed_cost] + 500 * solution[unit_cost]", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nunit_cost = Symbol('unit_cost', positive=True)\nsolution = solve_it([540 * unit_cost + fixed_cost - 1800, 620 * unit_cost + fixed_cost - 2040], [fixed_cost, unit_cost])\nans = solution[fixed_cost] + 500 * solution[unit_cost]", "\nfixed_cost = Symbol('fixed_cost', positive=True)\ncall_cost = Symbol('call_cost', positive=True)\nsolution = solve_it([fixed_cost + 540 * call_cost - 1800, fixed_cost + 620 * call_cost - 2040], [fixed_cost, call_cost])\nans = fixed_cost + 500 * call_cost", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nsolution = solve_it([540 * variable_cost + fixed_cost - 1800, 620 * variable_cost + fixed_cost - 2040], [fixed_cost, variable_cost])\nans = solution[fixed_cost] + 500 * solution[variable_cost]", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nsolution = solve_it([fixed_cost + 540 * variable_cost - 1800, fixed_cost + 620 * variable_cost - 2040], [fixed_cost, variable_cost])\nans = solution[fixed_cost] + 500 * solution[variable_cost]", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nsolution = solve_it([fixed_cost + 540 * variable_cost - 1800, fixed_cost + 620 * variable_cost - 2040], [fixed_cost, variable_cost])\nans = solution[fixed_cost] + 500 * solution[variable_cost]", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nsolution = solve_it([540 * variable_cost + fixed_cost - 1800, 620 * variable_cost + fixed_cost - 2040], [fixed_cost, variable_cost])\nans = 500 * solution[variable_cost] + solution[fixed_cost]", "\nunits = Symbol('units', positive=True)\nfixed_cost = Symbol('fixed_cost', positive=True)\nbill = fixed_cost + units\nsolution = solve_it([bill.subs(units, 540) - 1800, bill.subs(units, 620) - 2040], [units, fixed_cost])\nans = bill.subs(units, 500).subs(fixed_cost, solution[fixed_cost])", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nbill_for_540_calls = 1800\nbill_for_620_calls = 2040\nbill_for_500_calls = fixed_cost + 500 * variable_cost\nsolution = solve_it([bill_for_540_calls - 540 * variable_cost - fixed_cost, bill_for_620_calls - 620 * variable_cost - fixed_cost, bill_for_500_calls - 500 * variable_cost - fixed_cost], [fixed_cost, variable_cost])\nans = solution[fixed_cost] + 500 * solution[variable_cost]", "\nfixed_charge = Symbol('fixed_charge', positive=True)\ncall_charge = Symbol('call_charge', positive=True)\nbill_for_540_calls = 1800\nbill_for_620_calls = 2040\nbill_for_500_calls = fixed_charge + 500 * call_charge\nsolution = solve_it([bill_for_540_calls - 540 * call_charge - fixed_charge, bill_for_620_calls - 620 * call_charge - fixed_charge, bill_for_500_calls - 500 * call_charge - fixed_charge], [fixed_charge, call_charge])\nans = solution[fixed_charge] + 500 * solution[call_charge]", "\nfixed_charge = Symbol('fixed_charge', positive=True)\nvariable_charge = Symbol('variable_charge', positive=True)\nnum_calls = Symbol('num_calls', positive=True)\nbill_1 = fixed_charge + variable_charge * 540\nbill_2 = fixed_charge + variable_charge * 620\nsolution = solve_it([bill_1 - 1800, bill_2 - 2040], [fixed_charge, variable_charge])\nbill_3 = solution[fixed_charge] + solution[variable_charge] * 500\nans = bill_3", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\ntotal_cost = Symbol('total_cost', positive=True)\nsolution = solve_it([540 * variable_cost + fixed_cost - 1800, 620 * variable_cost + fixed_cost - 2040, 500 * variable_cost + fixed_cost - total_cost], [fixed_cost, variable_cost, total_cost])\nans = solution[total_cost]", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nnum_calls_1 = 540\nnum_calls_2 = 620\nnum_calls_3 = 500\nbill_1 = 1800\nbill_2 = 2040\nsolution = solve_it([fixed_cost + variable_cost * num_calls_1 - bill_1, fixed_cost + variable_cost * num_calls_2 - bill_2], [fixed_cost, variable_cost])\nfixed_cost = solution[fixed_cost]\nvariable_cost = solution[variable_cost]\nbill_3 = fixed_cost + variable_cost * num_calls_3\nans = bill_3", "\nnum_calls = Symbol('num_calls', positive=True)\nfixed_cost = Symbol('fixed_cost', positive=True)\ntotal_cost = num_calls * fixed_cost\nsolution = solve_it([total_cost.subs(num_calls, 540) - 1800, total_cost.subs(num_calls, 620) - 2040], [num_calls, fixed_cost])\nans = total_cost.subs(num_calls, 500)", "\nfixed_charge = Symbol('fixed_charge', positive=True)\nvariable_charge = Symbol('variable_charge', positive=True)\nbill_540_units = 1800\nbill_620_units = 2040\nbill_500_units = fixed_charge + 500 * variable_charge\nsolution = solve_it([bill_540_units - fixed_charge - 540 * variable_charge, bill_620_units - fixed_charge - 620 * variable_charge, bill_500_units - fixed_charge - 500 * variable_charge], [fixed_charge, variable_charge])\nans = solution[fixed_charge] + 500 * solution[variable_charge]", "\nfixed_charge = Symbol('fixed_charge', positive=True)\nvariable_charge = Symbol('variable_charge', positive=True)\nbill_for_540_calls = fixed_charge + 540 * variable_charge\nbill_for_620_calls = fixed_charge + 620 * variable_charge\nbill_for_500_calls = fixed_charge + 500 * variable_charge\nsolution = solve_it([bill_for_540_calls - 1800, bill_for_620_calls - 2040], [fixed_charge, variable_charge])\nans = solution[fixed_charge] + 500 * solution[variable_charge]", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nbill_540_calls = fixed_cost + 540 * variable_cost\nbill_620_calls = fixed_cost + 620 * variable_cost\nbill_500_calls = fixed_cost + 500 * variable_cost\nsolution = solve_it([bill_540_calls - 1800, bill_620_calls - 2040], [fixed_cost, variable_cost])\nans = solution[fixed_cost] + 500 * solution[variable_cost]", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nunit_cost = Symbol('unit_cost', positive=True)\nunits_1 = 540\nunits_2 = 620\nunits_3 = 500\nbill_1 = 1800\nbill_2 = 2040\nsolution = solve_it([fixed_cost + units_1 * unit_cost - bill_1, fixed_cost + units_2 * unit_cost - bill_2], [fixed_cost, unit_cost])\nans = solution[fixed_cost] + solution[unit_cost] * units_3", "\nunits_consumed = Symbol('units_consumed', positive=True)\nfixed_charge = Symbol('fixed_charge', positive=True)\nvariable_charge = Symbol('variable_charge', positive=True)\nbill_540_units = 1800\nbill_620_units = 2040\nbill_500_units = fixed_charge + 500 * variable_charge\nsolution = solve_it([bill_540_units - 540 * variable_charge - fixed_charge, bill_620_units - 620 * variable_charge - fixed_charge, bill_500_units - 500 * variable_charge - fixed_charge], [fixed_charge, variable_charge])\nans = solution[fixed_charge] + 500 * solution[variable_charge]", "\nunits = Symbol('units', positive=True)\nfixed_cost = Symbol('fixed_cost', positive=True)\nbill_540_units = 1800\nbill_620_units = 2040\nbill_500_units = fixed_cost + 500 * units\nsolution = solve_it([bill_540_units - fixed_cost - 540 * units, bill_620_units - fixed_cost - 620 * units, bill_500_units - 1560], [units, fixed_cost])\nans = bill_500_units.subs({units: solution[units], fixed_cost: solution[fixed_cost]})", "\nnum_calls = Symbol('num_calls', positive=True)\nfixed_cost = Symbol('fixed_cost', positive=True)\nbill = fixed_cost + num_calls\nsolution = solve_it([bill.subs(num_calls, 540) - 1800, bill.subs(num_calls, 620) - 2040], [fixed_cost, num_calls])\nans = solution[fixed_cost] + solution[num_calls] * 500", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nnum_calls = 540\nbill = 1800\nsolution = solve_it([fixed_cost + variable_cost * num_calls - bill], [fixed_cost])\nfixed_cost = solution[fixed_cost]\nbill_for_500_calls = fixed_cost + 500 * variable_cost\nans = bill_for_500_calls", "\nunits = Symbol('units', positive=True)\nfixed_charges = Symbol('fixed_charges', positive=True)\nbill_1 = fixed_charges + 540 * units\nbill_2 = fixed_charges + 620 * units\nbill_3 = fixed_charges + 500 * units\nsolution = solve_it([bill_1 - 1800, bill_2 - 2040, bill_3 - 1950], [fixed_charges, units])\nans = solution[fixed_charges] + 500 * solution[units]", "\nfixed_charge = Symbol('fixed_charge', positive=True)\nvariable_charge = Symbol('variable_charge', positive=True)\nbill_540_calls = 1800\nbill_620_calls = 2040\nbill_500_calls = fixed_charge + 500 * variable_charge\nsolution = solve_it([bill_540_calls - 540 * variable_charge - fixed_charge, bill_620_calls - 620 * variable_charge - fixed_charge, bill_500_calls - 500 * variable_charge - fixed_charge], [fixed_charge, variable_charge])\nans = solution[fixed_charge] + 500 * solution[variable_charge]", "\nnum_calls = Symbol('num_calls', positive=True)\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nbill_for_540_calls = 1800\nbill_for_620_calls = 2040\nbill_for_500_calls = fixed_cost + 500 * variable_cost\nsolution = solve_it([bill_for_540_calls - fixed_cost - 540 * variable_cost, bill_for_620_calls - fixed_cost - 620 * variable_cost, bill_for_500_calls - 1560], [fixed_cost, variable_cost])\nans = bill_for_500_calls.subs({'fixed_cost': solution[fixed_cost], 'variable_cost': solution[variable_cost]})", "\nfixed_cost = Symbol('fixed_cost', positive=True)\nvariable_cost = Symbol('variable_cost', positive=True)\nnum_calls = Symbol('num_calls', positive=True)\nbill_1 = fixed_cost + 540 * variable_cost\nbill_2 = fixed_cost + 620 * variable_cost\nbill_3 = fixed_cost + 500 * variable_cost\nsolution = solve_it([bill_1 - 1800, bill_2 - 2040, bill_3 - 1950], [fixed_cost, variable_cost])\nans = solution[fixed_cost] + 500 * solution[variable_cost]", "\nfixed_charge = Symbol('fixed_charge', positive=True)\nunit_charge = Symbol('unit_charge', positive=True)\nunits_1 = 540\nunits_2 = 620\nunits_3 = 500\nbill_1 = fixed_charge + units_1 * unit_charge\nbill_2 = fixed_charge + units_2 * unit_charge\nbill_3 = fixed_charge + units_3 * unit_charge\nsolution = solve_it([bill_1 - 1800, bill_2 - 2040, bill_3 - 1950], [fixed_charge, unit_charge])\nans = solution[fixed_charge] + solution[unit_charge] * units_3", "\nfixed_charge = Symbol('fixed_charge', positive=True)\nvariable_charge = Symbol('variable_charge', positive=True)\nnum_calls = Symbol('num_calls', positive=True)\nbill_when_540_calls = 1800\nbill_when_620_calls = 2040\nsolution = solve_it([540 * variable_charge + fixed_charge - bill_when_540_calls, 620 * variable_charge + fixed_charge - bill_when_620_calls], [fixed_charge, variable_charge])\nfixed_charge = solution[fixed_charge]\nvariable_charge = solution[variable_charge]\nbill_when_500_calls = 500 * variable_charge + fixed_charge\nans = bill_when_500_calls", "\nfixed_charge = Symbol('fixed_charge', positive=True)\nvariable_charge = Symbol('variable_charge', positive=True)\nnum_calls = Symbol('num_calls', positive=True)\nbill_in_540_calls = fixed_charge + 540 * variable_charge\nbill_in_620_calls = fixed_charge + 620 * variable_charge\nsolution = solve_it([bill_in_540_calls - 1800, bill_in_620_calls - 2040], [fixed_charge, variable_charge])\nans = solution[fixed_charge] + 500 * solution[variable_charge]"], "generated_prediction": "1680.0", "options": ["A)Rs.1560", "B)Rs.1680", "C)Rs.1840", "D)Rs.1950", "E)Rs.1690"], "answer": "B", "prediction": "B"}
{"question": "Two balls A and B rotate along a circular track. Ball A makes 2 full rotations in 26 minutes. Ball B makes 5 full rotation in 35 minutes. If they start rotating now from the same point, when will they be at the same starting point again?", "generated": ["\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\nans = 1 / (ball_a_speed - ball_b_speed)", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\nans = 1 / (ball_a_speed - ball_b_speed)", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\nans = 1 / (ball_a_speed - ball_b_speed)", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\nans = 1 / (ball_a_speed - ball_b_speed)", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\nans = 1 / (ball_a_speed - ball_b_speed)", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\nans = 1 / (ball_a_speed - ball_b_speed)", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\nans = 1 / (ball_a_speed - ball_b_speed)", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\nans = 1 / (ball_a_speed + ball_b_speed)", "\nA_rotation_time = 26 / 2\nB_rotation_time = 35 / 5\nans = A_rotation_time * B_rotation_time", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\ntime_to_meet = 1 / (ball_a_speed - ball_b_speed)\nans = time_to_meet", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\ncommon_speed = math.gcd(ball_a_speed, ball_b_speed)\nans = 1 / common_speed", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\ntime_to_meet = 1 / (ball_a_speed - ball_b_speed)\nans = time_to_meet", "\nball_a_rotation_time = 26 / 2\nball_b_rotation_time = 35 / 5\ntime_to_meet = lcm(ball_a_rotation_time, ball_b_rotation_time)\nans = time_to_meet", "\ntime_in_minutes = Symbol('time_in_minutes', positive=True)\nrotation_speed_A = 2 / 26\nrotation_speed_B = 5 / 35\nsolution = solve_it(rotation_speed_A * time_in_minutes - rotation_speed_B * time_in_minutes, time_in_minutes)\nans = solution[time_in_minutes] / 60", "\nball_a_speed = 2 / 26\nball_b_speed = 5 / 35\nspeed_difference = ball_a_speed - ball_b_speed\ntime_to_meet = 1 / speed_difference\nans = time_to_meet", "\nball_a_rotation_time = 26 * 60\nball_b_rotation_time = 35 * 60\ntime_to_meet = math.gcd(ball_a_rotation_time, ball_b_rotation_time)\nans = time_to_meet / 60", "\nball_a_rotation_time = 26\nball_b_rotation_time = 35\nlcm = math.lcm(ball_a_rotation_time, ball_b_rotation_time)\nans = lcm / 60", "\nball_A_rotation_time = 26\nball_B_rotation_time = 35\nlcm = math.lcm(ball_A_rotation_time, ball_B_rotation_time)\nans = lcm / 60", "\nball_A_speed = Symbol('ball_A_speed', positive=True)\nball_B_speed = Symbol('ball_B_speed', positive=True)\nball_A_rotations = 2\nball_B_rotations = 5\nball_A_time = 26 / 60\nball_B_time = 35 / 60\nsolution = solve_it([ball_A_speed * ball_A_time - ball_A_rotations, ball_B_speed * ball_B_time - ball_B_rotations], [ball_A_speed, ball_B_speed])\nans = solution[ball_A_speed] * (ball_A_time + ball_B_time)", "\nball_a_rotation_time = 26 * 60\nball_b_rotation_time = 35 * 60\ntime_for_next_meeting = math.gcd(ball_a_rotation_time, ball_b_rotation_time)\nans = time_for_next_meeting / 60", "\nball_A_rotation_time = 26 / 60\nball_B_rotation_time = 35 / 60\ntime_to_meet_again = simplify(1 / (1 / ball_A_rotation_time + 1 / ball_B_rotation_time))\nans = time_to_meet_again", "\nball_a_rotation_time = 26\nball_b_rotation_time = 35\nball_a_rotation_time_in_seconds = ball_a_rotation_time * 60\nball_b_rotation_time_in_seconds = ball_b_rotation_time * 60\nlcm = math.lcm(ball_a_rotation_time_in_seconds, ball_b_rotation_time_in_seconds)\nans = lcm / 60", "\nball_a_speed = Symbol('ball_a_speed', positive=True)\nball_b_speed = Symbol('ball_b_speed', positive=True)\nball_a_time = 26 / 60\nball_b_time = 35 / 60\nsolution = solve_it([ball_a_speed * ball_a_time - 2 * math.pi, ball_b_speed * ball_b_time - 5 * math.pi], [ball_a_speed, ball_b_speed])\nball_a_speed = solution[ball_a_speed]\nball_b_speed = solution[ball_b_speed]\ntime_to_meet = math.pi / (ball_a_speed - ball_b_speed)\nans = time_to_meet", "\nball_a_speed = Symbol('ball_a_speed', positive=True)\nball_b_speed = Symbol('ball_b_speed', positive=True)\nball_a_rotation_time = 26\nball_b_rotation_time = 35\nsolution = solve_it([ball_a_speed * ball_a_rotation_time - 2 * math.pi, ball_b_speed * ball_b_rotation_time - 5 * math.pi], [ball_a_speed, ball_b_speed])\nball_a_speed = solution[ball_a_speed]\nball_b_speed = solution[ball_b_speed]\nans = ball_a_speed / ball_b_speed * ball_b_rotation_time", "\nball_a_speed = Symbol('ball_a_speed', positive=True)\nball_b_speed = Symbol('ball_b_speed', positive=True)\nball_a_rotations = 2\nball_b_rotations = 5\nball_a_time = 26 / 60\nball_b_time = 35 / 60\nsolution = solve_it([ball_a_speed * ball_a_time - ball_a_rotations, ball_b_speed * ball_b_time - ball_b_rotations], [ball_a_speed, ball_b_speed])\nball_a_speed = solution[ball_a_speed]\nball_b_speed = solution[ball_b_speed]\ntime_to_reach_same_point = math.gcd(ball_a_speed, ball_b_speed)\nans = time_to_reach_same_point / ball_a_speed", "\nball_a_speed = Symbol('ball_a_speed', positive=True)\nball_b_speed = Symbol('ball_b_speed', positive=True)\nball_a_time = 26 / 60\nball_b_time = 35 / 60\nsolution = solve_it([ball_a_speed * ball_a_time - 2 * math.pi, ball_b_speed * ball_b_time - 5 * math.pi], [ball_a_speed, ball_b_speed])\nball_a_speed = solution[ball_a_speed]\nball_b_speed = solution[ball_b_speed]\ntime_to_reach_same_point = math.pi / (ball_a_speed - ball_b_speed)\nans = time_to_reach_same_point", "\nball_a_speed = Symbol('ball_a_speed', positive=True)\nball_b_speed = Symbol('ball_b_speed', positive=True)\nball_a_rotations = 2\nball_b_rotations = 5\nball_a_time = 26 / 60\nball_b_time = 35 / 60\nsolution = solve_it([ball_a_speed * ball_a_time - ball_a_rotations, ball_b_speed * ball_b_time - ball_b_rotations], [ball_a_speed, ball_b_speed])\nball_a_speed = solution[ball_a_speed]\nball_b_speed = solution[ball_b_speed]\ntime_to_meet = 1 / (1 / ball_a_speed + 1 / ball_b_speed)\nans = time_to_meet", "\nball_a_rotation = 2\nball_b_rotation = 5\nball_a_rotation_time = 26\nball_b_rotation_time = 35\nball_a_rotation_time_in_minutes = ball_a_rotation_time * 60\nball_b_rotation_time_in_minutes = ball_b_rotation_time * 60\nsolution = solve_it(ball_a_rotation * ball_a_rotation_time_in_minutes - ball_b_rotation * ball_b_rotation_time_in_minutes, ball_a_rotation_time_in_minutes)\nans = solution[ball_a_rotation_time_in_minutes] / 60", "\nball_a_speed = Symbol('ball_a_speed', positive=True)\nball_b_speed = Symbol('ball_b_speed', positive=True)\nball_a_rotations = 2\nball_b_rotations = 5\nball_a_time = 26 / 60\nball_b_time = 35 / 60\nsolution = solve_it([ball_a_speed * ball_a_time - ball_a_rotations, ball_b_speed * ball_b_time - ball_b_rotations], [ball_a_speed, ball_b_speed])\nball_a_speed = solution[ball_a_speed]\nball_b_speed = solution[ball_b_speed]\ntime_to_reach_same_point = 1 / (1 / ball_a_time + 1 / ball_b_time)\nans = time_to_reach_same_point", "\nball_a_speed = Symbol('ball_a_speed', positive=True)\nball_b_speed = Symbol('ball_b_speed', positive=True)\nball_a_rotations = 2\nball_b_rotations = 5\nball_a_rotation_time = 26 / 60\nball_b_rotation_time = 35 / 60\nsolution = solve_it([ball_a_speed * ball_a_rotation_time - ball_a_rotations, ball_b_speed * ball_b_rotation_time - ball_b_rotations], [ball_a_speed, ball_b_speed])\nball_a_speed = solution[ball_a_speed]\nball_b_speed = solution[ball_b_speed]\nball_a_distance = ball_a_speed * ball_a_rotation_time\nball_b_distance = ball_b_speed * ball_b_rotation_time\nans = math.ceil(ball_a_distance / ball_b_distance) * ball_b_rotation_time"], "generated_prediction": "-15.16666666666667", "options": ["A)1 hour and 31 minutes", "B)2 hour and 31 minutes", "C)3 hour and 31 minutes", "D)4 hour and 31 minutes", "E)5 hour and 31 minutes"], "answer": "A", "prediction": "A"}
{"question": "A bookshelf contains 45 books, 30 of which are hardcover and 20 of which are fiction. What is the maximum number of books that are both hardcover and fiction?", "generated": ["\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover = 30\nfiction = 20\nans = min(hardcover, fiction)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nhardcover_books = 30\nfiction_books = 20\nans = min(hardcover_books, fiction_books)", "\nnum_hardcover = 30\nnum_fiction = 20\nnum_both = min(num_hardcover, num_fiction)\nans = num_both"], "generated_prediction": "20", "options": ["A)10", "B)15", "C)18", "D)20", "E)30"], "answer": "D", "prediction": "D"}
{"question": "A newspaper costs $4 on Sunday and $1 the rest of the days of the week. If a hotel orders twice as many papers on Sunday as it does the rest of the days of the week and pays $210 per week for newspapers, how many newspapers does it buy on Monday?", "generated": ["\nsunday_papers = Symbol('sunday_papers', positive=True)\nmonday_papers = Symbol('monday_papers', positive=True)\nsunday_cost = 4\nmonday_cost = 1\nsolution = solve_it([sunday_papers * sunday_cost + monday_papers * monday_cost - 210, sunday_papers - 2 * monday_papers], [sunday_papers, monday_papers])\nans = solution[monday_papers]", "\nsunday_cost = 4\nmonday_cost = 1\nsunday_papers = Symbol('sunday_papers', positive=True)\nmonday_papers = Symbol('monday_papers', positive=True)\ntotal_cost = 210\nsolution = solve_it([sunday_papers * sunday_cost + monday_papers * monday_cost - total_cost, sunday_papers - 2 * monday_papers], [sunday_papers, monday_papers])\nans = solution[monday_papers]", "\nnum_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ntotal_cost = 210\ncost_on_sunday = 4 * num_papers_on_sunday\ncost_on_other_days = 1 * num_papers_on_other_days\nsolution = solve_it([cost_on_sunday + cost_on_other_days - total_cost, num_papers_on_sunday - 2 * num_papers_on_other_days], [num_papers_on_sunday, num_papers_on_other_days])\nans = solution[num_papers_on_other_days]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_other_day_papers = Symbol('num_other_day_papers', positive=True)\ncost_sunday_papers = 4 * num_sunday_papers\ncost_other_day_papers = 1 * num_other_day_papers\ntotal_cost = 210\nsolution = solve_it([cost_sunday_papers + cost_other_day_papers - total_cost, num_sunday_papers - 2 * num_other_day_papers], [num_sunday_papers, num_other_day_papers])\nans = solution[num_other_day_papers]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_other_day_papers = Symbol('num_other_day_papers', positive=True)\ncost_sunday_papers = 4 * num_sunday_papers\ncost_other_day_papers = 1 * num_other_day_papers\ntotal_cost = 210\nsolution = solve_it([cost_sunday_papers + cost_other_day_papers - total_cost, num_sunday_papers - 2 * num_other_day_papers], [num_sunday_papers, num_other_day_papers])\nans = solution[num_other_day_papers]", "\nnum_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ntotal_cost = 210\ncost_on_sunday = 4 * num_papers_on_sunday\ncost_on_other_days = 1 * num_papers_on_other_days\nsolution = solve_it([cost_on_sunday + cost_on_other_days - total_cost, num_papers_on_sunday - 2 * num_papers_on_other_days], [num_papers_on_sunday, num_papers_on_other_days])\nans = solution[num_papers_on_other_days]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_other_day_papers = Symbol('num_other_day_papers', positive=True)\ntotal_cost = 210\ncost_sunday_papers = 4 * num_sunday_papers\ncost_other_day_papers = 1 * num_other_day_papers\nsolution = solve_it([cost_sunday_papers + cost_other_day_papers - total_cost, num_sunday_papers - 2 * num_other_day_papers], [num_sunday_papers, num_other_day_papers])\nans = solution[num_other_day_papers]", "\nnum_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ntotal_cost = 210\ncost_on_sunday = num_papers_on_sunday * 4\ncost_on_other_days = num_papers_on_other_days * 1\nsolution = solve_it([cost_on_sunday + cost_on_other_days - total_cost, num_papers_on_sunday - 2 * num_papers_on_other_days], [num_papers_on_sunday, num_papers_on_other_days])\nans = solution[num_papers_on_other_days]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_other_day_papers = Symbol('num_other_day_papers', positive=True)\ntotal_cost = 210\ncost_sunday_papers = num_sunday_papers * 4\ncost_other_day_papers = num_other_day_papers * 1\nsolution = solve_it([cost_sunday_papers + cost_other_day_papers - total_cost, num_sunday_papers - 2 * num_other_day_papers], [num_sunday_papers, num_other_day_papers])\nans = solution[num_other_day_papers]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_other_day_papers = Symbol('num_other_day_papers', positive=True)\ntotal_cost = 210\ncost_sunday_papers = num_sunday_papers * 4\ncost_other_day_papers = num_other_day_papers * 1\nsolution = solve_it([cost_sunday_papers + cost_other_day_papers - total_cost, num_sunday_papers - 2 * num_other_day_papers], [num_sunday_papers, num_other_day_papers])\nans = solution[num_other_day_papers]", "\nnum_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ntotal_cost = 210\ncost_on_sunday = 4 * num_papers_on_sunday\ncost_on_other_days = 1 * num_papers_on_other_days\nsolution = solve_it([cost_on_sunday + cost_on_other_days - total_cost, num_papers_on_sunday - 2 * num_papers_on_other_days], [num_papers_on_sunday, num_papers_on_other_days])\nans = solution[num_papers_on_other_days]", "\nnum_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ncost_on_sunday = 4\ncost_on_other_days = 1\ntotal_cost = 210\nsolution = solve_it([num_papers_on_sunday * cost_on_sunday + num_papers_on_other_days * cost_on_other_days - total_cost, num_papers_on_sunday - 2 * num_papers_on_other_days], [num_papers_on_sunday, num_papers_on_other_days])\nans = solution[num_papers_on_other_days]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_monday_papers = Symbol('num_monday_papers', positive=True)\nsunday_cost = 4 * num_sunday_papers\nmonday_cost = 1 * num_monday_papers\ntotal_cost = sunday_cost + monday_cost\nsolution = solve_it([total_cost - 210, num_sunday_papers - 2 * num_monday_papers], [num_sunday_papers, num_monday_papers])\nans = solution[num_monday_papers]", "\nsunday_papers = Symbol('sunday_papers', positive=True)\nmonday_papers = Symbol('monday_papers', positive=True)\ntuesday_papers = Symbol('tuesday_papers', positive=True)\nwednesday_papers = Symbol('wednesday_papers', positive=True)\nthursday_papers = Symbol('thursday_papers', positive=True)\nfriday_papers = Symbol('friday_papers', positive=True)\nsaturday_papers = Symbol('saturday_papers', positive=True)\ntotal_cost = 210\nsolution = solve_it([\n    sunday_papers * 4 + monday_papers + tuesday_papers + wednesday_papers + thursday_papers + friday_papers + saturday_papers - total_cost,\n    sunday_papers - 2 * (monday_papers + tuesday_papers + wednesday_papers + thursday_papers + friday_papers + saturday_papers)\n], [sunday_papers, monday_papers, tuesday_papers, wednesday_papers, thursday_papers, friday_papers, saturday_papers", "\nnum_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ncost_on_sunday = 4\ncost_on_other_days = 1\ntotal_cost = 210\nsolution = solve_it([num_papers_on_sunday * cost_on_sunday + num_papers_on_other_days * cost_on_other_days - total_cost, num_papers_on_sunday - 2 * num_papers_on_other_days], [num_papers_on_sunday, num_papers_on_other_days])\nans = solution[num_papers_on_other_days]", "\nnum_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ncost_on_sunday = 4\ncost_on_other_days = 1\ncost_per_week = 210\nsolution = solve_it([num_papers_on_sunday * cost_on_sunday + num_papers_on_other_days * cost_on_other_days - cost_per_week, num_papers_on_sunday - 2 * num_papers_on_other_days], [num_papers_on_sunday, num_papers_on_other_days])\nans = solution[num_papers_on_other_days]", "\nsunday_papers = Symbol('sunday_papers', positive=True)\nother_day_papers = Symbol('other_day_papers', positive=True)\ntotal_cost = 210\nsunday_cost = 4 * sunday_papers\nother_day_cost = 1 * other_day_papers\nsolution = solve_it([sunday_cost + other_day_cost - total_cost, 2 * sunday_papers - other_day_papers], [sunday_papers, other_day_papers])\nans = solution[other_day_papers]", "\nsunday_paper_cost = 4\nmonday_paper_cost = 1\nsunday_paper_count = Symbol('sunday_paper_count', positive=True)\nmonday_paper_count = Symbol('monday_paper_count', positive=True)\ntotal_cost = 210\nsolution = solve_it([sunday_paper_count * sunday_paper_cost + monday_paper_count * monday_paper_cost - total_cost, sunday_paper_count - 2 * monday_paper_count], [sunday_paper_count, monday_paper_count])\nans = solution[monday_paper_count]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_other_day_papers = Symbol('num_other_day_papers', positive=True)\ntotal_cost = 210\nsolution = solve_it([num_sunday_papers * 4 + num_other_day_papers - total_cost, num_sunday_papers - 2 * num_other_day_papers], [num_sunday_papers, num_other_day_papers])\nans = solution[num_other_day_papers]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_other_day_papers = Symbol('num_other_day_papers', positive=True)\ncost_sunday_papers = 4\ncost_other_day_papers = 1\nsolution = solve_it([num_sunday_papers * cost_sunday_papers + num_other_day_papers * cost_other_day_papers - 210, num_sunday_papers - 2 * num_other_day_papers], [num_sunday_papers, num_other_day_papers])\nans = solution[num_other_day_papers]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_other_day_papers = Symbol('num_other_day_papers', positive=True)\ntotal_cost = 210\ncost_sunday_papers = 4 * num_sunday_papers\ncost_other_day_papers = num_other_day_papers\nsolution = solve_it([cost_sunday_papers + cost_other_day_papers - total_cost, num_sunday_papers - 2 * num_other_day_papers], [num_sunday_papers, num_other_day_papers])\nans = solution[num_other_day_papers]", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_other_day_papers = Symbol('num_other_day_papers', positive=True)\ncost_sunday_papers = 4 * num_sunday_papers\ncost_other_day_papers = 1 * num_other_day_papers\ncost_total = 210\nsolution = solve_it([cost_sunday_papers + cost_other_day_papers - cost_total, num_sunday_papers - 2 * num_other_day_papers], [num_sunday_papers, num_other_day_papers])\nans = solution[num_other_day_papers]", "\nnum_sunday_newspapers = Symbol('num_sunday_newspapers', positive=True)\nnum_other_days_newspapers = Symbol('num_other_days_newspapers', positive=True)\ntotal_cost = 210\ncost_sunday_newspapers = 4 * num_sunday_newspapers\ncost_other_days_newspapers = 1 * num_other_days_newspapers\nsolution = solve_it([cost_sunday_newspapers + cost_other_days_newspapers - total_cost, num_sunday_newspapers - 2 * num_other_days_newspapers], [num_sunday_newspapers, num_other_days_newspapers])\nans = solution[num_other_days_newspapers]", "\nnum_papers_on_monday = Symbol('num_papers_on_monday', positive=True)\nnum_papers_on_sunday = 2 * num_papers_on_monday\ntotal_cost = 210\ncost_on_sunday = 4 * num_papers_on_sunday\ncost_on_monday = num_papers_on_monday\nsolution = solve_it([cost_on_sunday + cost_on_monday - total_cost], [num_papers_on_monday])\nans = solution[num_papers_on_monday]", "\nsunday_newspaper_cost = 4\nmonday_newspaper_cost = 1\ntotal_cost = 210\nsunday_newspaper_count = 2 * (total_cost - 7 * monday_newspaper_cost) / (sunday_newspaper_cost - monday_newspaper_cost)\nmonday_newspaper_count = total_cost / 7 - sunday_newspaper_count / 2\nans = monday_newspaper_count", "\nnum_sunday_papers = Symbol('num_sunday_papers', positive=True)\nnum_monday_papers = Symbol('num_monday_papers', positive=True)\ncost_sunday_papers = 4 * num_sunday_papers\ncost_monday_papers = 1 * num_monday_papers\ncost_per_week = 210\nsolution = solve_it([cost_sunday_papers + cost_monday_papers - cost_per_week, num_sunday_papers - 2 * num_monday_papers], [num_sunday_papers, num_monday_papers])\nans = solution[num_monday_papers]", "\nsunday_papers = Symbol('sunday_papers', positive=True)\nother_days_papers = Symbol('other_days_papers', positive=True)\ncost_per_week = 210\ncost_per_sunday_paper = 4\ncost_per_other_day_paper = 1\nsolution = solve_it([sunday_papers * cost_per_sunday_paper + other_days_papers * cost_per_other_day_paper - cost_per_week, sunday_papers - 2 * other_days_papers], [sunday_papers, other_days_papers])\nans = solution[other_days_papers]", "\nmonday_paper = Symbol('monday_paper', positive=True)\nsunday_paper = 2 * monday_paper\ntotal_paper = monday_paper * 6 + sunday_paper\ntotal_cost = total_paper * (1 + 4)\nsolution = solve_it(total_cost - 210, monday_paper)\nans = solution[monday_paper]", "\nsunday_cost = 4\nmon_to_sat_cost = 1\ntotal_cost = 210\nnum_papers_on_sunday = 2 * (total_cost - 5 * mon_to_sat_cost) / (sunday_cost - mon_to_sat_cost)\nnum_papers_on_mon_to_sat = total_cost - sunday_cost * num_papers_on_sunday\nans = num_papers_on_mon_to_sat / 5", "\nnum_papers_on_sunday = Symbol('num_papers_on_sunday', positive=True)\nnum_papers_on_other_days = Symbol('num_papers_on_other_days', positive=True)\ncost_on_sunday = 4\ncost_on_other_days = 1\ncost_per_week = 210\nsolution = solve_it([2 * num_papers_on_sunday + num_papers_on_other_days - cost_per_week / cost_on_sunday, num_papers_on_sunday - 2 * num_papers_on_other_days], [num_papers_on_sunday, num_papers_on_other_days])\nans = solution[num_papers_on_other_days]"], "generated_prediction": "23.33", "options": ["A)15", "B)30", "C)45", "D)60", "E)75"], "answer": "A", "prediction": "B"}
{"question": "A number of friends decided to go on a picnic and planned to spend Rs. 96 on eatables. Four of them, however, did not turn up. As a consequence, the remaining ones had to contribute Rs. 4 extra, each. The number of those who attended the picnic was", "generated": ["\nnum_people = Symbol('num_people', positive=True)\ncost_per_person = Symbol('cost_per_person', positive=True)\nsolution = solve_it([num_people * cost_per_person - 96, (num_people - 4) * (cost_per_person + 4) - 96], [num_people, cost_per_person])\nans = solution[num_people]", "\nnum_friends = Symbol('num_friends', positive=True)\ncost_per_person = Symbol('cost_per_person', positive=True)\nsolution = solve_it([num_friends * cost_per_person - 96, (num_friends - 4) * (cost_per_person + 4) - 96], [num_friends, cost_per_person])\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\nextra_cost = 4\nsolution = solve_it(num_friends * (total_cost / num_friends + extra_cost) - total_cost, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\nextra_cost = 4\nsolution = solve_it(num_friends * (total_cost / num_friends + extra_cost) - total_cost, num_friends)\nans = solution[num_friends]", "\nnum_people = Symbol('num_people', positive=True)\ntotal_cost = 96\nextra_cost = 4\nsolution = solve_it(total_cost / num_people - extra_cost, num_people)\nans = solution[num_people]", "\nnum_friends = Symbol('num_friends', positive=True)\ncost_per_person = 96 / num_friends\ncost_per_person_after_dropout = (96 + 4 * 4) / (num_friends - 4)\nsolution = solve_it(cost_per_person - cost_per_person_after_dropout, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ncost_per_person = 96 / num_friends\ncost_per_person_after_dropout = (96 + 4 * 4) / (num_friends - 4)\nsolution = solve_it(cost_per_person - cost_per_person_after_dropout, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ncost_per_person = 96 / num_friends\ncost_per_person_after_dropout = (96 + 4 * 4) / (num_friends - 4)\nsolution = solve_it(cost_per_person - cost_per_person_after_dropout, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ncost_per_person = 96 / num_friends\ncost_per_person_after_dropout = (96 + 4 * 4) / (num_friends - 4)\nsolution = solve_it(cost_per_person - cost_per_person_after_dropout, num_friends)\nans = solution[num_friends]", "\nnum_people = Symbol('num_people', positive=True)\ncost_per_person = Symbol('cost_per_person', positive=True)\nsolution = solve_it([cost_per_person * num_people - 96, cost_per_person * (num_people - 4) - 100], [num_people, cost_per_person])\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\ntotal_cost = 96\ncost_per_person = (total_cost + 4 * (num_people - 4)) / num_people\nsolution = solve_it(cost_per_person - 12, num_people)\nans = solution[num_people]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\nextra_cost = 4\nsolution = solve_it(num_friends * (total_cost + extra_cost) - total_cost, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ncost_per_person = 96 / num_friends\nextra_cost_per_person = 4\nsolution = solve_it(cost_per_person + extra_cost_per_person - 100, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ncost_per_head = 96 / num_friends\nextra_cost_per_head = 4\nsolution = solve_it(cost_per_head + extra_cost_per_head - 100 / num_friends, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\nnum_friends_attended = num_friends - 4\ncost_per_person = (96 + 4 * num_friends_attended) / num_friends_attended\nsolution = solve_it(cost_per_person - 4, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\ncost_per_friend = total_cost / num_friends\ncost_per_friend_after_dropout = cost_per_friend + 4\nsolution = solve_it(cost_per_friend_after_dropout - cost_per_friend, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ncost_per_friend = Symbol('cost_per_friend', positive=True)\nnum_friends_attended = num_friends - 4\ncost_per_friend_attended = cost_per_friend + 4\nsolution = solve_it([num_friends * cost_per_friend - 96, num_friends_attended * cost_per_friend_attended - 96], [num_friends, cost_per_friend])\nans = solution[num_friends]", "\nnum_people = Symbol('num_people', positive=True)\ntotal_cost = 96\ncost_per_person = total_cost / num_people\nextra_cost_per_person = 4\nsolution = solve_it(cost_per_person + extra_cost_per_person - 100, num_people)\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\ntotal_cost = 96\ncost_per_person = total_cost / num_people\nextra_cost_per_person = 4\nsolution = solve_it(cost_per_person + extra_cost_per_person - 100, num_people)\nans = solution[num_people]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\ncost_per_person = total_cost / num_friends\nextra_cost_per_person = 4\nsolution = solve_it(cost_per_person + extra_cost_per_person - 100, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\nextra_contribution = 4\ntotal_contribution = 96 + extra_contribution\nsolution = solve_it(total_contribution / (num_friends - 4) - extra_contribution, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\nper_head_cost = total_cost / num_friends\nper_head_cost_after_dropout = total_cost / (num_friends - 4)\nsolution = solve_it(per_head_cost_after_dropout - per_head_cost - 4, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\nextra_cost = 4\nsolution = solve_it(total_cost / (num_friends - 4) - total_cost / num_friends - extra_cost, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\nextra_cost = 4\nsolution = solve_it(total_cost / (num_friends - 4) - extra_cost, num_friends)\nans = solution[num_friends]", "\nnum_people = Symbol('num_people', positive=True)\ntotal_cost = 96\nextra_cost = 4\nsolution = solve_it(total_cost / (num_people - 4) - total_cost / num_people - extra_cost, num_people)\nans = solution[num_people]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\nextra_cost = 4\nsolution = solve_it(total_cost / (num_friends - 4) - total_cost / num_friends - extra_cost, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\ntotal_cost = 96\nextra_cost = 4\nsolution = solve_it(total_cost / num_friends - total_cost / (num_friends + 4) - extra_cost, num_friends)\nans = solution[num_friends]", "\nfriends = Symbol('friends', positive=True)\ncost_per_head = 96 / friends\nextra_cost_per_head = 4\nsolution = solve_it(cost_per_head + extra_cost_per_head - 100, friends)\nans = solution[friends]", "\nnum_friends = Symbol('num_friends', positive=True)\nnum_friends_attended = num_friends - 4\ncost_per_person = 100 / num_friends_attended\nsolution = solve_it(cost_per_person - 4, num_friends)\nans = solution[num_friends]", "\nnum_friends = Symbol('num_friends', positive=True)\namount_each_friend_should_contribute = 96 / num_friends\nactual_contribution = 4 + amount_each_friend_should_contribute\nsolution = solve_it(actual_contribution - amount_each_friend_should_contribute - 4, num_friends)\nans = solution[num_friends]"], "generated_prediction": "None", "options": ["A)8", "B)12", "C)16", "D)24", "E)25"], "answer": "A", "prediction": "None"}
{"question": "A wire in the shape of rectangle of length 27 cm and breadth 17 cm is rebent to form a square. What will be the measure of each side?", "generated": ["\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = solution[width]", "\nside = Symbol('side', positive=True)\nlength = 27\nbreadth = 17\nsolution = solve_it(side ** 2 - length * breadth, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\nlength = 27\nbreadth = 17\nsolution = solve_it(side ** 2 - length * breadth, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\nlength = 27\nbreadth = 17\nsolution = solve_it(side ** 2 - length * breadth, side)\nans = solution[side]", "\nside = Symbol('side', positive=True)\nlength = 27\nbreadth = 17\nsolution = solve_it(side ** 2 - length * breadth, side)\nans = solution[side]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = solution[width]", "\nlength = 27\nbreadth = 17\narea = length * breadth\nside = math.sqrt(area)\nans = side", "\nlength = 27\nbreadth = 17\narea = length * breadth\nside = math.sqrt(area)\nans = side", "\nlength = 27\nbreadth = 17\narea = length * breadth\nside = math.sqrt(area)\nans = side", "\nlength = 27\nbreadth = 17\narea = length * breadth\nside = math.sqrt(area)\nans = side", "\nlength = 27\nbreadth = 17\narea = length * breadth\nside = math.sqrt(area)\nans = side", "\nlength = 27\nbreadth = 17\narea = length * breadth\nside = math.sqrt(area)\nans = side", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([width * height - 27 * 17, width - height], [width, height])\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([width * height - 27 * 17, width - height], [width, height])\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it([width * height - area, width - height], [width, height])\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it([width * height - area, width - height], [width, height])\nans = solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it([width * height - area, width - height], [width, height])\nans = solution[width]", "\nlength = 27\nbreadth = 17\nsolution = solve_it(length * breadth - length ** 2, length)\nans = solution[length]", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\narea = 27 * 17\nsolution = solve_it(width * length - area, length)\nans = solution[length]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = math.sqrt(solution[width])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = math.sqrt(solution[width])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = math.sqrt(solution[width])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = math.sqrt(solution[width])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 27 * 17\nsolution = solve_it(width * height - area, width)\nans = math.sqrt(solution[width])"], "generated_prediction": "21.42", "options": ["A)9", "B)11", "C)22", "D)25", "E)31"], "answer": "C", "prediction": "C"}
{"question": "A man divides Rs 8600 among 5 sons, 4 daughters and 2 nephews. If each daughter receives four times as much as each nephew, and each son receives five as much as each nephew. How much does each daughter receive ?", "generated": ["\nson_amount = Symbol('son_amount', positive=True)\ndaughter_amount = Symbol('daughter_amount', positive=True)\nnephew_amount = Symbol('nephew_amount', positive=True)\ntotal_amount = 8600\nsolution = solve_it([5 * son_amount + 4 * daughter_amount + 2 * nephew_amount - total_amount, daughter_amount - 4 * nephew_amount], [son_amount, daughter_amount, nephew_amount])\nans = solution[daughter_amount]", "\namount = 8600\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\namount_per_son = amount / (num_sons + num_daughters + num_nephews) * 5\namount_per_daughter = amount_per_son / 4\nans = amount_per_daughter", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\namount = 8600\namount_per_son = amount / (num_sons + num_daughters + num_nephews) * 5\namount_per_daughter = amount_per_son / 4\nans = amount_per_daughter", "\namount = 8600\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\namount_per_daughter = 4 * amount_per_nephew\namount_per_son = 5 * amount_per_nephew\nsolution = solve_it([amount_per_nephew * num_nephews + amount_per_daughter * num_daughters + amount_per_son * num_sons - amount], [amount_per_nephew])\nans = solution[amount_per_daughter]", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_for_nephews = total_amount / (num_sons + num_daughters + num_nephews)\namount_for_daughters = amount_for_nephews * 4\nans = amount_for_daughters", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\namount_per_son = Symbol('amount_per_son', positive=True)\namount_per_daughter = Symbol('amount_per_daughter', positive=True)\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\nsolution = solve_it([num_sons * amount_per_son + num_daughters * amount_per_daughter + num_nephews * amount_per_nephew - 8600, amount_per_daughter - 4 * amount_per_nephew, amount_per_son - 5 * amount_per_nephew], [amount_per_son, amount_per_daughter, amount_per_nephew])\nans = solution[amount_per_daughter]", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\namount_per_daughter = 4 * amount_per_nephew\namount_per_son = 5 * amount_per_nephew\nsolution = solve_it([num_sons * amount_per_son + num_daughters * amount_per_daughter + num_nephews * amount_per_nephew - total_amount, amount_per_daughter - 4 * amount_per_nephew, amount_per_son - 5 * amount_per_nephew], [amount_per_nephew, amount_per_daughter, amount_per_son])\nans = solution[amount_per_daughter]", "\namount = 8600\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\namount_per_son = amount * num_sons / (num_sons + num_daughters + num_nephews)\namount_per_daughter = amount * num_daughters / (num_sons + num_daughters + num_nephews)\namount_per_nephew = amount * num_nephews / (num_sons + num_daughters + num_nephews)\nans = amount_per_daughter", "\nnephew_amount = Symbol('nephew_amount', positive=True)\nsolution = solve_it(8600 - 5 * 5 * nephew_amount - 4 * 4 * nephew_amount - 4 * 4 * nephew_amount, nephew_amount)\nans = solution[nephew_amount] * 4", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_per_son = total_amount / (num_sons + num_daughters + num_nephews) * 5\namount_per_daughter = amount_per_son / 4\nans = amount_per_daughter", "\nnephew_amount = Symbol('nephew_amount', positive=True)\nsolution = solve_it(nephew_amount * (4 * 4 + 5 * 5 + 1) - 8600, nephew_amount)\nans = solution[nephew_amount] * 4", "\namount = 8600\nnephews = Symbol('nephews', positive=True)\nsons = 5 * nephews\ndaughters = 4 * nephews\nsolution = solve_it([sons + daughters + 2 * nephews - amount], [nephews])\nans = solution[nephews] * 4", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\namount_per_daughter = 4 * amount_per_nephew\namount_per_son = 5 * amount_per_nephew\nsolution = solve_it([num_sons * amount_per_son + num_daughters * amount_per_daughter + num_nephews * amount_per_nephew - total_amount], [amount_per_nephew])\nans = solution[amount_per_daughter]", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\namount = 8600\namount_per_daughter = amount * num_daughters / (num_sons + num_daughters + num_nephews)\namount_per_nephew = amount_per_daughter / 4\namount_per_son = amount_per_nephew * 5\nans = amount_per_daughter", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\namount_per_daughter = 4 * amount_per_nephew\namount_per_son = 5 * amount_per_nephew\nsolution = solve_it([num_sons * amount_per_son + num_daughters * amount_per_daughter + num_nephews * amount_per_nephew - 8600], [amount_per_nephew])\nans = solution[amount_per_daughter]", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\namount_per_daughter = 4 * amount_per_nephew\namount_per_son = 5 * amount_per_nephew\nsolution = solve_it([amount_per_nephew * num_nephews + amount_per_daughter * num_daughters + amount_per_son * num_sons - total_amount], [amount_per_nephew])\nans = solution[amount_per_daughter]", "\namount = 8600\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_num_people = num_sons + num_daughters + num_nephews\namount_per_nephew = amount / total_num_people\namount_per_daughter = amount_per_nephew * 4\nans = amount_per_daughter", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_per_daughter = Symbol('amount_per_daughter', positive=True)\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\nsolution = solve_it([amount_per_daughter * num_daughters + amount_per_nephew * num_nephews + amount_per_nephew * num_sons * 5 - total_amount, amount_per_daughter - 4 * amount_per_nephew], [amount_per_daughter, amount_per_nephew])\nans = solution[amount_per_daughter]", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\namount_per_daughter = 4 * amount_per_nephew\namount_per_son = 5 * amount_per_nephew\nsolution = solve_it([amount_per_nephew * num_nephews + amount_per_daughter * num_daughters + amount_per_son * num_sons - total_amount], [amount_per_nephew])\nans = solution[amount_per_daughter]", "\nsons = 5\ndaughters = 4\nnephews = 2\ntotal_money = 8600\nmoney_per_son = money_per_daughter * 5 / 4\nmoney_per_nephew = total_money / (sons + daughters + nephews)\nmoney_per_daughter = money_per_nephew * 4\nans = money_per_daughter", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\namount = 8600\namount_per_daughter = Symbol('amount_per_daughter', positive=True)\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\nsolution = solve_it([amount_per_daughter * num_daughters + amount_per_nephew * num_nephews - amount, amount_per_daughter * 4 - amount_per_nephew, amount_per_daughter * 5 - amount_per_nephew], [amount_per_daughter, amount_per_nephew])\nans = solution[amount_per_daughter]", "\nnephew_amount = Symbol('nephew_amount', positive=True)\nson_amount = Symbol('son_amount', positive=True)\ndaughter_amount = Symbol('daughter_amount', positive=True)\ntotal_amount = 8600\nsolution = solve_it([nephew_amount + son_amount + daughter_amount - total_amount, nephew_amount + 4 * daughter_amount - 4 * nephew_amount, nephew_amount + 5 * son_amount - 5 * nephew_amount], [nephew_amount, son_amount, daughter_amount])\nans = solution[daughter_amount]", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_per_daughter = Symbol('amount_per_daughter', positive=True)\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\nsolution = solve_it([num_sons * 5 * amount_per_nephew + num_daughters * 4 * amount_per_nephew + num_nephews * amount_per_nephew - total_amount,\n                     num_daughters * amount_per_daughter - 4 * amount_per_nephew],\n                    [amount_per_daughter, amount_per_nephew])\nans = solution[amount_per_daughter]", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_per_daughter = Symbol('amount_per_daughter', positive=True)\namount_per_nephew = Symbol('amount_per_nephew', positive=True)\nsolution = solve_it([num_sons * 5 * amount_per_nephew + num_daughters * 4 * amount_per_nephew + num_nephews * amount_per_nephew - total_amount, amount_per_daughter - 4 * amount_per_nephew], [amount_per_daughter, amount_per_nephew])\nans = solution[amount_per_daughter]", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\namount = 8600\nsolution = solve_it([(num_sons + num_daughters + num_nephews) * amount / num_nephews - amount, num_daughters * amount / num_nephews - amount], [amount, num_nephews])\nans = solution[amount / num_nephews]", "\nnephew_share = Symbol('nephew_share', positive=True)\nsolution = solve_it(nephew_share * (4 + 5 + 5 + 5 + 5 + 5 + 5 + 5 + 2) - 8600, nephew_share)\nans = solution[nephew_share] * 4", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\nmoney_per_daughter = Symbol('money_per_daughter', positive=True)\nmoney_per_nephew = Symbol('money_per_nephew', positive=True)\nsolution = solve_it([money_per_daughter * num_daughters - 4 * money_per_nephew * num_nephews, money_per_daughter * num_daughters + money_per_nephew * num_nephews + 5 * money_per_nephew * num_sons - 8600], [money_per_daughter, money_per_nephew])\nans = solution[money_per_daughter]", "\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\ntotal_amount = 8600\namount_for_each_daughter = Symbol('amount_for_each_daughter', positive=True)\namount_for_each_nephew = Symbol('amount_for_each_nephew', positive=True)\namount_for_each_son = Symbol('amount_for_each_son', positive=True)\nsolution = solve_it(\n    [\n        amount_for_each_daughter * num_daughters + amount_for_each_nephew * num_nephews + amount_for_each_son * num_sons - total_amount,\n        amount_for_each_daughter - 4 * amount_for_each_nephew,\n        amount_for_each_son - 5 * amount_for_each_nephew\n    ],\n    [amount_for_each_daughter, amount_for_each_nephew, amount_for_each_son]\n)\nans = solution[amount_for_each_daughter]", "\namount = 8600\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\nnum_people = num_sons + num_daughters + num_nephews\nson_share = 5 * num_nephews\ndaughter_share = 4 * num_nephews\nnephew_share = (amount - num_sons * son_share - num_daughters * daughter_share) / num_nephews\nans = daughter_share", "\namount = 8600\nnum_sons = 5\nnum_daughters = 4\nnum_nephews = 2\nnephew_amount = Symbol('nephew_amount', positive=True)\nsolution = solve_it([amount - num_sons * nephew_amount * 5 - num_daughters * nephew_amount * 4 - num_nephews * nephew_amount, nephew_amount], [nephew_amount])\nans = solution[nephew_amount] * 4"], "generated_prediction": "800.0", "options": ["A)Rs 400", "B)Rs 500", "C)Rs 600", "D)Rs 700", "E)Rs 800"], "answer": "E", "prediction": "E"}
{"question": "Silu and Meenu were walking on the road.\nSilu said, \"I weigh 51 Kgs. How much do you weigh?\"\nMeenu replied that she wouldn't reveal her weight directly as she is overweight.\nBut she said, \"I weigh 29 Kgs plus half of my weight. \"How much does Meenu weigh?", "generated": ["\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight + meenu_weight / 2 - 29, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight + meenu_weight / 2 - 29, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight + meenu_weight / 2 - 29, meenu_weight)\nans = solution[meenu_weight]", "\nweight = Symbol('weight', positive=True)\nsolution = solve_it(weight + weight / 2 - 29, weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\nsolution = solve_it(weight + weight / 2 - 29, weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\nsolution = solve_it(weight + weight / 2 - 29, weight)\nans = solution[weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight - 29 - meenu_weight / 2, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight + 0.5 * meenu_weight - 29, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight - 29 - meenu_weight / 2, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight - 29 - meenu_weight / 2, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight - 29 - 0.5 * meenu_weight, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight - 29 - 0.5 * meenu_weight, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsolution = solve_it(meenu_weight - 29 - 0.5 * meenu_weight, meenu_weight)\nans = solution[meenu_weight]", "\nweight = Symbol('weight', positive=True)\nsolution = solve_it(weight - 29 - weight / 2, weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\nsolution = solve_it(weight - 29 - weight / 2, weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\nsolution = solve_it(weight - 29 - weight / 2, weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\nsolution = solve_it(weight - 29 - weight / 2, weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\nsolution = solve_it(weight - 29 - weight / 2, weight)\nans = solution[weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight + meenu_weight / 2 - 29, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight + meenu_weight / 2 - 29, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight + meenu_weight / 2 - 29, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight + 0.5 * meenu_weight - 29, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight - 29 - meenu_weight / 2, meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight - (29 + meenu_weight / 2), meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight - (29 + meenu_weight / 2), meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight - (29 + meenu_weight / 2), meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight - (29 + meenu_weight / 2), meenu_weight)\nans = solution[meenu_weight]", "\nmeenu_weight = Symbol('meenu_weight', positive=True)\nsilu_weight = 51\nsolution = solve_it(meenu_weight - (29 + meenu_weight / 2), meenu_weight)\nans = solution[meenu_weight]", "\nMeenu_weight = Symbol('Meenu_weight', positive=True)\nSilu_weight = 51\nsolution = solve_it(Meenu_weight - (Meenu_weight / 2 + 29), Meenu_weight)\nans = solution[Meenu_weight]", "\nweight = Symbol('weight', positive=True)\nweight_of_silu = 51\nweight_of_meenu = 29 + weight / 2\nsolution = solve_it(weight_of_meenu - weight_of_silu, weight)\nans = solution[weight]"], "generated_prediction": "58.0", "options": ["A)12", "B)28", "C)27", "D)58", "E)91"], "answer": "D", "prediction": "D"}
{"question": "Roy was suffering from severe headaches. He went to see his doctor and the doctor gave him 5 tablets asking him to take one tablet every 15 minutes.\nHow much time will it take Roy to consume all the 5 tablets?", "generated": ["\nans = 5 * 15", "\nnum_tablets = 5\ntime_per_tablet = 15\nans = num_tablets * time_per_tablet", "\nnum_tablets = 5\ntime_per_tablet = 15\nans = num_tablets * time_per_tablet", "\ntime_to_consume_one_tablet = 15\nans = time_to_consume_one_tablet * 5", "\ntime_to_consume_all_tablets = 5 * 15\nans = time_to_consume_all_tablets", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = tablets * time_to_consume_one_tablet", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = tablets * time_to_consume_one_tablet", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = tablets * time_to_consume_one_tablet", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = tablets * time_to_consume_one_tablet", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = tablets * time_to_consume_one_tablet", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = tablets * time_to_consume_one_tablet", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = tablets * time_to_consume_one_tablet", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = tablets * time_to_consume_one_tablet", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = time_to_consume_one_tablet * tablets", "\ntablets = 5\ntime_to_consume_one_tablet = 15\nans = time_to_consume_one_tablet * tablets", "\nans = 5 * 15 / 60", "\ntablets = 5\ntime_per_tablet = 15\nans = tablets * time_per_tablet", "\ntablets = 5\ntime_per_tablet = 15\nans = tablets * time_per_tablet", "\ntablets = 5\ntime_per_tablet = 15\nans = tablets * time_per_tablet", "\ntablets = 5\ntime_per_tablet = 15\nans = tablets * time_per_tablet", "\ntablets = 5\ntime_per_tablet = 15\nans = tablets * time_per_tablet", "\ntablet_count = 5\ntablet_interval = 15\nans = tablet_count * tablet_interval", "\ntablets = 5\ntime_per_tablet = 15\nans = tablets * time_per_tablet", "\ntime = Symbol('time', positive=True)\nans = solve_it(time * 5 - 15 * time, time)", "\ntablets = 5\ninterval = 15\nans = tablets * interval", "\nnum_tablets = 5\ntime_to_consume_one_tablet = 15\nans = num_tablets * time_to_consume_one_tablet", "\nnum_tablets = 5\ntime_to_consume_one_tablet = 15\nans = num_tablets * time_to_consume_one_tablet", "\ntime_for_one_tablet = 15\ntotal_time = time_for_one_tablet * 5\nans = total_time", "\ntime_taken = Symbol('time_taken', positive=True)\nnum_tablets = 5\ntime_to_consume_one_tablet = 15\nsolution = solve_it(time_taken - num_tablets * time_to_consume_one_tablet, time_taken)\nans = solution[time_taken]", "\ntablet_consumption_time = Symbol('tablet_consumption_time', positive=True)\ntotal_tablets = 5\ntablet_consumption_interval = 15\nsolution = solve_it(total_tablets * tablet_consumption_interval - tablet_consumption_time, tablet_consumption_time)\nans = solution[tablet_consumption_time]"], "generated_prediction": "75", "options": ["A)45 Min", "B)75 Min", "C)90 Min", "D)120 Min", "E)60 Min"], "answer": "E", "prediction": "B"}
{"question": "In a bag of red and green sweets, the ratio of red sweets to green sweets is 3:4. If the bag contains 120 green sweets, how many red sweets are there?", "generated": ["\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 * green_sweets / 4\nans = red_sweets", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3 / 4, red_sweets)\nans = solution[red_sweets]", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3 / 4, red_sweets)\nans = solution[red_sweets]", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3 / 4, red_sweets)\nans = solution[red_sweets]", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3 / 4, red_sweets)\nans = solution[red_sweets]", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3 / 4, red_sweets)\nans = solution[red_sweets]", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3 / 4, red_sweets)\nans = solution[red_sweets]", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3 / 4, red_sweets)\nans = solution[red_sweets]", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3 / 4, red_sweets)\nans = solution[red_sweets]", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3 / 4, red_sweets)\nans = solution[red_sweets]", "\ngreen_sweets = 120\nred_sweets = green_sweets * 3 / 4\nans = red_sweets", "\ngreen_sweets = 120\nred_sweets = 3 / 7 * green_sweets\nans = red_sweets", "\nnum_green_sweets = 120\nnum_red_sweets = num_green_sweets * 3 / 4\nans = num_red_sweets", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = 120\nsolution = solve_it(red_sweets / green_sweets - 3/4, red_sweets)\nans = solution[red_sweets]", "\ngreen_sweets = 120\ntotal_sweets = green_sweets / (4 / 7)\nred_sweets = total_sweets - green_sweets\nans = red_sweets", "\ntotal_sweets = 120\nred_sweets = 3 * total_sweets / 7\nans = red_sweets", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = Symbol('green_sweets', positive=True)\nred_sweets_ratio = 3\ngreen_sweets_ratio = 4\nsolution = solve_it([red_sweets / green_sweets - red_sweets_ratio / green_sweets_ratio, green_sweets - 120], [red_sweets, green_sweets])\nans = solution[red_sweets]", "\nred_sweets = Symbol('red_sweets', positive=True)\ngreen_sweets = Symbol('green_sweets', positive=True)\nratio = 3 / 4\ngreen_sweets_count = 120\nsolution = solve_it([red_sweets / green_sweets - ratio, green_sweets - green_sweets_count], [red_sweets, green_sweets])\nans = solution[red_sweets]"], "generated_prediction": "90.0", "options": ["A)90", "B)80", "C)95", "D)100", "E)85"], "answer": "A", "prediction": "A"}
{"question": "A club consists of members whose ages are in A.P. The common difference being 3 months. If the youngest member of the club is just 7 years old and the sum of the ages of all the members is 250, then number of members in the club are :", "generated": ["\ncommon_difference = 3\nyoungest_member_age = 7\ntotal_age = 250\nnum_members = (total_age - youngest_member_age) / common_difference + 1\nans = num_members", "\nnum_members = Symbol('num_members', positive=True)\nyoungest_member_age = 7\ncommon_difference = 3\nsolution = solve_it(num_members * (2 * youngest_member_age + (num_members - 1) * common_difference) / 2 - 250, num_members)\nans = solution[num_members]", "\nnumber_of_members = Symbol('number_of_members', positive=True)\nyoungest_member_age = 7\ncommon_difference = 3 / 12\nsolution = solve_it(number_of_members * (youngest_member_age + (number_of_members - 1) * common_difference) - 250, number_of_members)\nans = solution[number_of_members]", "\nyoungest_member_age = 7\ncommon_difference = 3\ntotal_age = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(youngest_member_age + (num_members - 1) * common_difference * 12 - total_age, num_members)\nans = solution[num_members]", "\nyoungest_member_age = 7\ncommon_difference = 3\ntotal_age = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(youngest_member_age + (num_members - 1) * common_difference * 12 - total_age, num_members)\nans = solution[num_members]", "\nyoungest_member_age = 7\ncommon_difference = 3\ntotal_age = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(youngest_member_age + (num_members - 1) * common_difference * 12 - total_age, num_members)\nans = solution[num_members]", "\nyoungest_member = 7\ncommon_difference = 3\nsum_of_ages = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(youngest_member + (num_members - 1) * common_difference * 12 - sum_of_ages, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\nyoungest_member_age = 7\ncommon_difference = 3 / 12\nsum_of_ages = 250\nsolution = solve_it(num_members * (youngest_member_age + (num_members - 1) * common_difference) - sum_of_ages, num_members)\nans = solution[num_members]", "\nyoungest_member_age = 7\ncommon_difference = 3\nsum_of_ages = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(youngest_member_age + (num_members - 1) * common_difference - sum_of_ages, num_members)\nans = solution[num_members]", "\nyoungest_member_age = 7\ncommon_difference = 3\nsum_of_ages = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(num_members * (youngest_member_age + (num_members - 1) * common_difference) - sum_of_ages, num_members)\nans = solution[num_members]", "\nfirst_member_age = 7\ncommon_difference = 3\nnum_members = Symbol('num_members', positive=True)\nsum_of_ages = 250\nsolution = solve_it(first_member_age + (num_members - 1) * common_difference * 12 - sum_of_ages, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\ncommon_difference = 3\nyoungest_member_age = 7\nsum_of_ages = 250\nsolution = solve_it(num_members * (youngest_member_age + (num_members - 1) * common_difference) - sum_of_ages, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\ncommon_difference = 3 / 12\nsum_of_ages = 250\nyoungest_member_age = 7\nsolution = solve_it(num_members * (youngest_member_age + (num_members - 1) * common_difference) - sum_of_ages, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\nyoungest_member_age = 7\ncommon_difference = 3 / 12\ntotal_age = 250\nsolution = solve_it(num_members * (youngest_member_age + (num_members - 1) * common_difference) - total_age, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\nyoungest_member = 7\ncommon_difference = 3\ntotal_age = 250\nsolution = solve_it(num_members * (youngest_member + (num_members - 1) * common_difference) - total_age, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\nyoungest_member_age = 7\ncommon_difference = 3\nsolution = solve_it(num_members * (2 * youngest_member_age + (num_members - 1) * common_difference) - 250, num_members)\nans = solution[num_members]", "\nyoungest_member_age = 7\ncommon_difference = 3\ntotal_age = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(youngest_member_age + (num_members - 1) * common_difference - total_age, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\ncommon_difference = 3\nyoungest_member_age = 7\nsum_of_ages = 250\nsolution = solve_it(num_members * (2 * 7 + (num_members - 1) * common_difference) - 2 * sum_of_ages, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\nage_difference = 3 / 12\nyoungest_member_age = 7\ntotal_age = 250\nsolution = solve_it(num_members * (youngest_member_age + (num_members - 1) * age_difference) - total_age, num_members)\nans = solution[num_members]", "\ncommon_difference = 3\nyoungest_member_age = 7\nsum_of_ages = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(youngest_member_age + (num_members - 1) * common_difference * 12 - sum_of_ages, num_members)\nans = solution[num_members]", "\nmembers = Symbol('members', positive=True)\nage_difference = 3\nyoungest_member_age = 7\nsum_of_ages = 250\nsolution = solve_it(members * (2 * youngest_member_age + (members - 1) * age_difference) / 2 - sum_of_ages, members)\nans = solution[members]", "\nnum_members = Symbol('num_members', positive=True)\nyoungest_member_age = 7\ncommon_difference = 3\nsolution = solve_it(num_members * (youngest_member_age + (num_members - 1) * common_difference) - 250, num_members)\nans = solution[num_members]", "\nyoungest_member_age = 7\ncommon_difference = 3\nsum_of_ages = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(youngest_member_age + (num_members - 1) * common_difference * 12 - sum_of_ages, num_members)\nans = solution[num_members]", "\nage = Symbol('age', positive=True)\ndifference = 3\nyoungest_age = 7\ntotal_age = 250\nsolution = solve_it(age + (age + difference) + (age + 2 * difference) + (age + 3 * difference) + (age + 4 * difference) + (age + 5 * difference) + (age + 6 * difference) + (age + 7 * difference) + (age + 8 * difference) + (age + 9 * difference) + (age + 10 * difference) + (age + 11 * difference) + (age + 12 * difference) + (age + 13 * difference) + (age + 14 * difference) + (age + 15 * difference) + (age + 16 * difference) + (age + 17 * difference) - total_age, age)\nans = solution[age]", "\nyoungest_member_age = 7\ncommon_difference = 3\nsum_of_ages = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(num_members * (2 * youngest_member_age + (num_members - 1) * common_difference) - 2 * sum_of_ages, num_members)\nans = solution[num_members]", "\nage_difference = 3\nyoungest_age = 7\ntotal_ages = 250\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(youngest_age + (num_members - 1) * age_difference * 12 - total_ages, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\ncommon_difference = 3\nyoungest_member_age = 7\nsum_of_ages = 250\nsolution = solve_it(num_members * (2 * youngest_member_age + (num_members - 1) * common_difference) - sum_of_ages * 2, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\ncommon_difference = 3\nyoungest_member_age = 7\nsum_of_ages = 250\nsolution = solve_it(num_members * (2 * youngest_member_age + (num_members - 1) * common_difference) - 2 * sum_of_ages, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\nage_diff = 3\nyoungest_age = 7\nsum_of_ages = 250\nsolution = solve_it([(num_members - 1) * age_diff + youngest_age * 2 - sum_of_ages, num_members * (num_members - 1) - sum_of_ages], [num_members])\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\nyoungest_member_age = 7\ncommon_difference = 3\nsum_of_ages = 250\nsolution = solve_it(num_members * (num_members + 1) * common_difference / 2 + youngest_member_age * num_members - sum_of_ages, num_members)\nans = solution[num_members]"], "generated_prediction": "7.75", "options": ["A)18", "B)20", "C)25", "D)26", "E)27"], "answer": "C", "prediction": "A"}
{"question": "M men agree to purchase a gift for Rs. D. If 3 men drop out how much more will each have to contribute towards the purchase of the gift?", "generated": ["\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)", "\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)"], "generated_prediction": "3*D/(M*(M - 3))", "options": ["A)D/(M-3)", "B)MD/3", "C)M/(D-3)", "D)3D/(M2-3M)", "E)None of these"], "answer": "D", "prediction": "D"}
{"question": "At what price should the Karan mark a sewing machine that costs him Rs. 1200/- so that even after offering a 20% discount, he makes 20% profit?", "generated": ["\ncost_price = 1200\nprofit_percentage = 20\ndiscount_percentage = 20\nselling_price = cost_price * (100 + profit_percentage) / (100 - discount_percentage)\nans = selling_price", "\ncost_price = 1200\nprofit_percentage = 20\ndiscount_percentage = 20\nselling_price = cost_price * (100 + profit_percentage) / (100 - discount_percentage)\nans = selling_price", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price * (1 - discount) / (1 - profit)\nans = selling_price", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price * (1 - discount) / (1 - profit)\nans = selling_price", "\ncost = 1200\nprofit = 0.2 * cost\ndiscount = 0.2 * cost\nselling_price = cost + profit - discount\nans = selling_price", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price * (1 - discount) / (1 - profit)\nans = math.ceil(selling_price)", "\ncost_price = 1200\ndiscount_percent = 20\nprofit_percent = 20\nselling_price = cost_price * (1 - discount_percent / 100) * (1 + profit_percent / 100)\nans = selling_price", "\ncost_price = 1200\nprofit_percentage = 20\ndiscount_percentage = 20\nselling_price = cost_price * (100 + profit_percentage) / (100 - discount_percentage)\nans = math.ceil(selling_price)", "\ncost_price = 1200\nselling_price = Symbol('selling_price', positive=True)\nprofit = 0.2 * selling_price\nsolution = solve_it(profit - 0.2 * cost_price, selling_price)\nans = solution[selling_price]", "\ncost_price = 1200\ndiscount_percentage = 20\nprofit_percentage = 20\nselling_price = cost_price * (100 - discount_percentage) / (100 - discount_percentage - profit_percentage)\nans = selling_price", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price / (1 - discount)\nsolution = solve_it(selling_price - cost_price - profit * cost_price, cost_price)\nans = solution[cost_price]", "\ncost_price = 1200\ndiscount = 0.2 * cost_price\nselling_price = cost_price + discount\nprofit = 0.2 * selling_price\nsolution = solve_it(selling_price - profit - cost_price, selling_price)\nans = solution[selling_price]", "\ncost = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost * (1 - discount) / (1 - profit)\nans = selling_price", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = Symbol('selling_price', positive=True)\nsolution = solve_it(selling_price - cost_price - discount * selling_price - profit * selling_price, selling_price)\nans = solution[selling_price]", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price / (1 - discount)\nprofit_price = selling_price * (1 + profit)\nans = profit_price", "\ncost_price = 1200\ndiscount_percentage = 20\nprofit_percentage = 20\nselling_price = cost_price * (1 - discount_percentage / 100) * (1 + profit_percentage / 100)\nans = selling_price", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price / (1 - discount)\nprofit_price = selling_price * (1 + profit)\nans = profit_price", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price / (1 - discount)\nsolution = solve_it(selling_price - cost_price - cost_price * profit, selling_price)\nans = solution[selling_price]", "\ncost_price = 1200\ndiscount_percentage = 20\nprofit_percentage = 20\nselling_price = cost_price * (1 - discount_percentage / 100) * (1 + profit_percentage / 100)\nans = round(selling_price, 0)", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price / (1 - discount)\nprofit_price = selling_price / (1 - profit)\nans = profit_price", "\ncost = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost / (1 - discount)\nactual_profit = selling_price - cost\nans = selling_price / (1 - actual_profit)", "\ncost = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost / (1 - discount)\nmarkup = selling_price - cost\nans = selling_price / (1 - profit)", "\ncost_price = 1200\ndiscount_percentage = 20\nprofit_percentage = 20\nselling_price = cost_price * (1 - discount_percentage / 100) / (1 - profit_percentage / 100)\nans = math.ceil(selling_price)", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price / (1 - discount)\nprofit_amount = selling_price - cost_price\nprofit_percent = profit_amount / cost_price\nsolution = solve_it(profit_percent - profit, selling_price)\nans = solution[selling_price]", "\ncost_price = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost_price / (1 - discount)\nprofit = selling_price - cost_price\nprofit_percent = profit / selling_price\nsolution = solve_it(profit_percent - 0.2, selling_price)\nans = solution[selling_price]", "\ncost_price = 1200\nselling_price = Symbol('selling_price', positive=True)\nprofit_percentage = 20\nsolution = solve_it(selling_price - cost_price - (cost_price * profit_percentage / 100) - (selling_price * profit_percentage / 100), selling_price)\nans = solution[selling_price]", "\ncost = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost / (1 - discount)\nprofit_price = selling_price * (1 + profit)\nans = profit_price", "\ncost = 1200\ndiscount = 0.2\nprofit = 0.2\nselling_price = cost / (1 - discount)\nprofit_amount = selling_price - cost\nprofit_percentage = profit_amount / cost\nsolution = solve_it(profit_percentage - profit, cost)\nans = solution[cost]", "\ncost_price = 1200\nselling_price = Symbol('selling_price', positive=True)\nprofit = 0.2 * selling_price\ndiscount = 0.2 * selling_price\nsolution = solve_it(profit - discount - cost_price, selling_price)\nans = solution[selling_price]", "\ncost_price = 1200\nselling_price = Symbol('selling_price', positive=True)\nprofit = 0.2 * selling_price\ndiscount = 0.2 * selling_price\nsolution = solve_it([selling_price - cost_price - profit, selling_price - discount], [selling_price])\nans = solution[selling_price]"], "generated_prediction": "None", "options": ["A)1,879", "B)1,875", "C)1,876", "D)1,872", "E)1,800"], "answer": "E", "prediction": "None"}
{"question": "Train \u2018A\u2019 leaves Mumbai Central for Lucknow at 11 am, running at the speed of 40 kmph. Train \u2018B\u2019 leaves Mumbai Central for Lucknow by the same route at 2 pm on the same day, running at the speed of 72 kmph. At what time will the two trains meet each other?", "generated": ["\nfrom sympy import Symbol\nfrom sympy import solve_it", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ndistance = Symbol('distance', positive=True)\ntrain_a_time = distance / train_a_speed\ntrain_b_time = distance / train_b_speed\nsolution = solve_it(train_a_time - train_b_time - 11, distance)\nans = solution[distance]", "\nspeed_of_train_A = 40\nspeed_of_train_B = 72\ndistance_between_mumbai_and_lucknow = Symbol('distance_between_mumbai_and_lucknow', positive=True)\ntime_of_meeting = Symbol('time_of_meeting', positive=True)\nsolution = solve_it([speed_of_train_A * time_of_meeting - distance_between_mumbai_and_lucknow, speed_of_train_B * time_of_meeting - distance_between_mumbai_and_lucknow], [time_of_meeting, distance_between_mumbai_and_lucknow])\nans = solution[time_of_meeting]", "\ntrain_speed_A = 40\ntrain_speed_B = 72\ntime_to_meet = Symbol('time_to_meet', positive=True)\ndistance_travelled_by_train_A = train_speed_A * time_to_meet\ndistance_travelled_by_train_B = train_speed_B * time_to_meet\nsolution = solve_it(distance_travelled_by_train_A - distance_travelled_by_train_B, time_to_meet)\nans = solution[time_to_meet]", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure = 11\ntrain_b_departure = 14\ntrain_a_distance = train_a_speed * (train_b_departure - train_a_departure)\ntrain_b_distance = train_b_speed * (train_b_departure - train_a_departure)\nans = train_b_departure + train_a_distance / (train_a_speed + train_b_speed)", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_distance = train_a_speed * 12\ntrain_b_distance = train_b_speed * 10\ndistance_between_trains = train_b_distance - train_a_distance\ntime_to_meet = distance_between_trains / (train_a_speed + train_b_speed)\nans = time_to_meet + 14", "\ntrain_A_speed = 40\ntrain_B_speed = 72\ntrain_A_leaves_at = 11\ntrain_B_leaves_at = 14\ntrain_A_distance = train_A_speed * (train_B_leaves_at - train_A_leaves_at)\ntrain_B_distance = train_B_speed * (train_B_leaves_at - train_A_leaves_at)\ntotal_distance = train_A_distance + train_B_distance\nans = train_B_leaves_at + total_distance / train_B_speed", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_leaves_at = 11\ntrain_b_leaves_at = 14\ntrain_a_distance = train_a_speed * 24\ntrain_b_distance = train_b_speed * (24 - train_b_leaves_at + train_a_leaves_at)\nans = train_b_distance / (train_a_speed + train_b_speed)", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_time = 11\ntrain_b_time = 14\ndistance_between_trains = train_b_speed * (train_b_time - train_a_time)\ntime_of_meeting = distance_between_trains / (train_a_speed + train_b_speed)\nans = train_b_time + time_of_meeting", "\ntrain_A_speed = 40\ntrain_B_speed = 72\ntrain_A_time = 11\ntrain_B_time = 14\ndistance_between_A_and_B = train_A_speed * (train_B_time - train_A_time)\ntime_taken_by_B_to_reach_A = distance_between_A_and_B / train_B_speed\nans = train_B_time + time_taken_by_B_to_reach_A", "\ntrain_A_speed = 40\ntrain_B_speed = 72\ntrain_A_start_time = 11\ntrain_B_start_time = 14\ntrain_A_distance = train_A_speed * (train_B_start_time - train_A_start_time)\ntrain_B_distance = train_B_speed * (train_B_start_time - train_A_start_time)\ndistance_between_trains = train_A_distance - train_B_distance\ntime_to_meet = distance_between_trains / (train_A_speed - train_B_speed)\nans = train_B_start_time + time_to_meet", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure_time = 11\ntrain_b_departure_time = 14\nmeet_time = train_b_departure_time + (train_b_speed / train_a_speed) * (24 - train_a_departure_time)\nans = meet_time", "\ntrain_speed_A = 40\ntrain_speed_B = 72\ntrain_distance = Symbol('train_distance', positive=True)\ntime_taken_by_train_A = train_distance / train_speed_A\ntime_taken_by_train_B = train_distance / train_speed_B\nsolution = solve_it(time_taken_by_train_A - time_taken_by_train_B - (2 - 11), train_distance)\nans = solution[train_distance]", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_start_time = 11\ntrain_b_start_time = 14\ntrain_a_distance = train_a_speed * train_a_start_time\ntrain_b_distance = train_b_speed * train_b_start_time\ndistance_between_trains = train_b_distance - train_a_distance\ntime_to_meet = distance_between_trains / (train_a_speed + train_b_speed)\nans = train_a_start_time + time_to_meet", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure_time = 11\ntrain_b_departure_time = 14\ntrain_a_distance = train_a_speed * (train_b_departure_time - train_a_departure_time)\ntrain_b_distance = train_b_speed * (train_b_departure_time - train_a_departure_time)\ntotal_distance = train_a_distance + train_b_distance\nans = total_distance / (train_a_speed + train_b_speed)", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_start_time = 11\ntrain_b_start_time = 14\ntrain_a_distance = train_a_speed * 24\ntrain_b_distance = train_b_speed * (24 - train_b_start_time + train_a_start_time)\ntime_taken_by_train_a = train_a_distance / train_a_speed\ntime_taken_by_train_b = train_b_distance / train_b_speed\nans = train_a_start_time + time_taken_by_train_a", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure_time = 11\ntrain_b_departure_time = 14\ntrain_a_distance = train_a_speed * (train_b_departure_time - train_a_departure_time)\ntrain_b_distance = train_b_speed * (train_b_departure_time - train_a_departure_time)\ntotal_distance = train_a_distance + train_b_distance\nans = total_distance / (train_a_speed + train_b_speed)", "\nspeed_train_a = 40\nspeed_train_b = 72\ndistance_between_mumbai_and_lucknow = Symbol('distance_between_mumbai_and_lucknow', positive=True)\ntime_train_a = distance_between_mumbai_and_lucknow / speed_train_a\ntime_train_b = distance_between_mumbai_and_lucknow / speed_train_b\nsolution = solve_it(time_train_a - time_train_b - 3, distance_between_mumbai_and_lucknow)\nans = solution[distance_between_mumbai_and_lucknow] / speed_train_b", "\nspeed_of_train_A = 40\nspeed_of_train_B = 72\ndistance_between_stations = Symbol('distance_between_stations', positive=True)\ntime_of_train_A = Symbol('time_of_train_A', positive=True)\ntime_of_train_B = Symbol('time_of_train_B', positive=True)\nsolution = solve_it([speed_of_train_A * time_of_train_A - speed_of_train_B * time_of_train_B - distance_between_stations, time_of_train_A - 13, time_of_train_B - 15], [distance_between_stations, time_of_train_A, time_of_train_B])\nans = solution[time_of_train_A]", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_leaves_at = 11\ntrain_b_leaves_at = 14\ntrain_a_leaves_at_in_minutes = train_a_leaves_at * 60\ntrain_b_leaves_at_in_minutes = train_b_leaves_at * 60\ntrain_a_distance = train_a_leaves_at_in_minutes * train_a_speed\ntrain_b_distance = train_b_leaves_at_in_minutes * train_b_speed\ndistance_between_trains = train_b_distance - train_a_distance\ntime_to_meet = distance_between_trains / (train_a_speed + train_b_speed)\nans = time_to_meet", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure_time = 11\ntrain_b_departure_time = 14\ntrain_a_departure_time_in_minutes = train_a_departure_time * 60\ntrain_b_departure_time_in_minutes = train_b_departure_time * 60\ntrain_a_distance = train_a_speed * train_a_departure_time_in_minutes / 60\ntrain_b_distance = train_b_speed * train_b_departure_time_in_minutes / 60\ndistance_between_trains = train_b_distance - train_a_distance\ntime_taken_by_train_a = distance_between_trains / train_a_speed\ntime_taken_by_train_a_in_minutes = time_taken_by_train_a * 60\ntime_taken_by_train_a_in_hours = time_taken_by_train_a_in_minutes /", "\ntrain_speed_A = 40\ntrain_speed_B = 72\ndistance_between_mumbai_and_lucknow = Symbol('distance_between_mumbai_and_lucknow', positive=True)\ntime_taken_by_train_A = distance_between_mumbai_and_lucknow / train_speed_A\ntime_taken_by_train_B = distance_between_mumbai_and_lucknow / train_speed_B\nsolution = solve_it(time_taken_by_train_A - time_taken_by_train_B - (14 / 24), distance_between_mumbai_and_lucknow)\nans = solution[distance_between_mumbai_and_lucknow] / (train_speed_A + train_speed_B)", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure_time = 11\ntrain_b_departure_time = 14\ntime_taken_by_train_a = (24 - train_a_departure_time) + (train_b_departure_time - train_a_departure_time)\ntime_taken_by_train_b = (24 - train_b_departure_time) + (train_b_departure_time - train_a_departure_time)\ndistance_travelled_by_train_a = train_a_speed * time_taken_by_train_a\ndistance_travelled_by_train_b = train_b_speed * time_taken_by_train_b\ndistance_between_trains = distance_travelled_by_train_b - distance_travelled_by_train_a\nans = distance_between_trains / (train_a_speed + train_b_speed)", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure_time = 11\ntrain_b_departure_time = 14\ntime_taken_by_train_a = (24 - train_a_departure_time) + (24 - train_b_departure_time)\ntime_taken_by_train_b = (24 - train_b_departure_time) + (24 - train_a_departure_time)\ndistance_covered_by_train_a = time_taken_by_train_a * train_a_speed\ndistance_covered_by_train_b = time_taken_by_train_b * train_b_speed\ndistance_between_trains = distance_covered_by_train_a - distance_covered_by_train_b\ntime_taken_to_cover_distance_between_trains = distance_between_trains / (train_a_speed + train_b_speed)\nans = time_taken_to_cover_distance_between_trains", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure_time = 11\ntrain_b_departure_time = 14\ntrain_a_departure_time_in_hours = train_a_departure_time * 60\ntrain_b_departure_time_in_hours = train_b_departure_time * 60\ntrain_a_distance = train_a_speed * train_a_departure_time_in_hours\ntrain_b_distance = train_b_speed * train_b_departure_time_in_hours\ndistance_between_trains = train_b_distance - train_a_distance\ntime_taken_by_train_a_to_reach_train_b = distance_between_trains / train_a_speed\ntime_taken_by_train_a_to_reach_train_b_in_hours = time_taken_by_train_a_to_reach_train_b / 60\ntime_taken_by_train_a_to_reach_train", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure_time = 11\ntrain_b_departure_time = 14\ntrain_a_departure_time_in_minutes = train_a_departure_time * 60\ntrain_b_departure_time_in_minutes = train_b_departure_time * 60\ntrain_a_distance = train_a_speed * (train_b_departure_time_in_minutes - train_a_departure_time_in_minutes) / 60\ntrain_b_distance = train_b_speed * (train_b_departure_time_in_minutes - train_a_departure_time_in_minutes) / 60\ndistance_between_trains = train_a_distance - train_b_distance\ntime_in_minutes_when_trains_meet = (distance_between_trains / (train_a_speed - train_b_speed)) * 60\ntime_in_hours_when_trains_meet", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_departure_time = 11\ntrain_b_departure_time = 14\ntrain_a_departure_time_in_minutes = train_a_departure_time * 60\ntrain_b_departure_time_in_minutes = train_b_departure_time * 60\ntrain_a_distance_from_mumbai_central = train_a_speed * train_a_departure_time_in_minutes\ntrain_b_distance_from_mumbai_central = train_b_speed * train_b_departure_time_in_minutes\ndistance_between_trains = train_b_distance_from_mumbai_central - train_a_distance_from_mumbai_central\ntime_taken_by_train_a = distance_between_trains / train_a_speed\ntime_taken_by_train_b = distance_between_trains / train_b_speed\ntime_of_meeting = train_a_dep", "\ntrain_A_speed = 40\ntrain_B_speed = 72\ntrain_A_departure_time = 11\ntrain_B_departure_time = 14\ntrain_A_departure_time_in_minutes = train_A_departure_time * 60\ntrain_B_departure_time_in_minutes = train_B_departure_time * 60\ntrain_A_travel_time_in_minutes = train_A_speed * 60\ntrain_B_travel_time_in_minutes = train_B_speed * 60\nmeeting_time_in_minutes = train_A_departure_time_in_minutes + train_A_travel_time_in_minutes - train_B_departure_time_in_minutes - train_B_travel_time_in_minutes\nmeeting_time_in_hours = meeting_time_in_minutes / 60\nans = meeting_time_in_hours", "\ntrain_A_speed = 40\ntrain_B_speed = 72\ntrain_A_start_time = 11\ntrain_B_start_time = 14\ntrain_A_distance = train_A_speed * (train_B_start_time - train_A_start_time)\ntrain_B_distance = train_B_speed * (train_B_start_time - train_A_start_time)\ntrain_A_distance_from_origin = train_A_distance + train_B_distance\ntrain_B_distance_from_origin = train_B_distance - train_A_distance\ntime_to_meet = train_A_distance_from_origin / (train_A_speed - train_B_speed)\nans = train_A_start_time + time_to_meet", "\ntrain_a_speed = 40\ntrain_b_speed = 72\ntrain_a_start_time = 11\ntrain_b_start_time = 14\ntrain_a_distance = train_a_speed * train_a_start_time\ntrain_b_distance = train_b_speed * train_b_start_time\ntrain_b_distance_from_train_a = train_b_distance - train_a_distance\ntrain_b_distance_from_train_a_in_km = train_b_distance_from_train_a / 1000\ntrain_b_distance_from_train_a_in_km_per_hour = train_b_distance_from_train_a_in_km / train_b_speed\ntrain_b_distance_from_train_a_in_hours = train_b_distance_from_train_a_in_km_per_hour * 60\ntrain_b_distance_from_train_a_in_hours_from_noon = train_b_distance_from_train_a_in_hours - 12\ntrain_b_distance_from"], "generated_prediction": "None", "options": ["A)12 am on the next day", "B)5 am on the next day", "C)5 pm on the next day", "D)2 pm on the next day", "E)None of these"], "answer": "A", "prediction": "E"}
{"question": "Mark told John \"If you give me half your money I will have Rs.75. John said, \"if you give me one third of your money, I will have Rs.75/-. How much money did John have ?", "generated": ["\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 0.5 * mark_money - 75, john_money - 0.33 * mark_money - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 0.5 * mark_money - 75, john_money - 0.33 * mark_money - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 0.5 * mark_money - 75, john_money - 0.33 * mark_money - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 0.5 * mark_money - 75, john_money - 0.33 * mark_money - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 75, mark_money - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 75, mark_money - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 0.5 * mark_money - 75, john_money - (1 / 3) * mark_money - 75], [john_money, mark_money])\nans = solution[john_money]", "\nmoney_with_john = Symbol('money_with_john', positive=True)\nmoney_with_mark = Symbol('money_with_mark', positive=True)\nsolution = solve_it([money_with_mark - money_with_john / 2 - 75, money_with_john - money_with_mark / 3 - 75], [money_with_john, money_with_mark])\nans = solution[money_with_john]", "\njohns_money = Symbol('johns_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([johns_money - mark_money / 2 - 75, johns_money - mark_money / 3 - 75], [johns_money, mark_money])\nans = solution[johns_money]", "\njohns_money = Symbol('johns_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([johns_money - mark_money / 2 - 75, mark_money - johns_money / 3 - 75], [johns_money, mark_money])\nans = solution[johns_money]", "\nmoney = Symbol('money', positive=True)\nsolution = solve_it([money / 2 - 75, money / 3 - 75], money)\nans = solution[money]", "\nmoney_with_john = Symbol('money_with_john', positive=True)\nmoney_with_mark = Symbol('money_with_mark', positive=True)\nsolution = solve_it([money_with_john / 2 - 75, money_with_mark / 3 - 75], [money_with_john, money_with_mark])\nans = solution[money_with_john]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 75 - 0.5 * mark_money, john_money - 75 - 1/3 * mark_money], [john_money, mark_money])\nans = solution[john_money]", "\nmoney_with_john = Symbol('money_with_john', positive=True)\nmoney_with_mark = Symbol('money_with_mark', positive=True)\nsolution = solve_it([money_with_mark - money_with_john / 2 - 75, money_with_mark - money_with_john / 3 - 75], [money_with_john, money_with_mark])\nans = solution[money_with_john]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 75, john_money - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money / 2 - 75, john_money / 3 - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - mark_money / 2 - 75, john_money - mark_money / 3 - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - mark_money / 2 - 75, mark_money - john_money / 3 - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - mark_money / 2 - 75, john_money - mark_money / 3 - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - mark_money / 2 - 75, john_money - mark_money / 3 - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - mark_money / 2 - 75, john_money - mark_money / 3 - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - mark_money / 2 - 75, john_money - mark_money / 3 - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - mark_money / 2 - 75, john_money - mark_money / 3 - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money - 75 - mark_money / 2, john_money - 75 - mark_money / 3], [john_money, mark_money])\nans = solution[john_money]", "\nJohn_money = Symbol('John_money', positive=True)\nMark_money = Symbol('Mark_money', positive=True)\nsolution = solve_it([John_money - Mark_money / 2 - 75, John_money - Mark_money / 3 - 75], [John_money, Mark_money])\nans = solution[John_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money / 2 - 75, john_money / 3 - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money / 2 - mark_money - 75, john_money / 3 - mark_money - 75], [john_money, mark_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([mark_money - john_money / 2 - 75, john_money - mark_money / 3 - 75], [mark_money, john_money])\nans = solution[john_money]", "\njohn_money = Symbol('john_money', positive=True)\nmark_money = Symbol('mark_money', positive=True)\nsolution = solve_it([john_money / 2 + 75, mark_money / 3 + 75], [john_money, mark_money])\nans = solution[john_money]", "\nmoney_john = Symbol('money_john', positive=True)\nmoney_mark = Symbol('money_mark', positive=True)\nsolution = solve_it([money_john - money_mark / 2 - 75, money_john - money_mark / 3 - 75], [money_john, money_mark])\nans = solution[money_john]"], "generated_prediction": "None", "options": ["A)22", "B)60", "C)28", "D)26", "E)18"], "answer": "B", "prediction": "None"}
{"question": "The number of water lilies on a certain lake doubles every two days. If there is exactly one water lily on the lake, it takes 60 days for the lake to be fully covered with water lilies. In how many days will the lake be fully covered with lilies, if initially there were 64 water lilies on it?", "generated": ["\ndays = Symbol('days', positive=True)\nsolution = solve_it(2 ** days - 1 - 60, days)\nans = solution[days]", "\nnum_days = Symbol('num_days', positive=True)\nnum_lilies = 2 ** (num_days / 2)\nsolution = solve_it(num_lilies - 64, num_days)\nans = solution[num_days]", "\nnum_days = Symbol('num_days', positive=True)\nnum_lilies = 2 ** (num_days / 2)\nsolution = solve_it(num_lilies - 64, num_days)\nans = solution[num_days]", "\nnum_lilies = 64\ndays = 0\nwhile num_lilies < 60:\n    num_lilies *= 2\n    days += 2\nans = days", "\nnum_lilies = 64\nnum_days = 0\nwhile num_lilies < 100:\n    num_lilies *= 2\n    num_days += 2\nans = num_days", "\nnum_lilies = 64\nnum_days = 0\nwhile num_lilies < 10000:\n    num_lilies *= 2\n    num_days += 2\nans = num_days", "\nnum_lilies = 64\nnum_days = 0\nwhile num_lilies < 60:\n    num_lilies *= 2\n    num_days += 2\nans = num_days", "\nnum_lilies = Symbol('num_lilies', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(num_lilies ** days - 64, days)\nans = solution[days]", "\ndays = Symbol('days', positive=True)\nnum_lilies = 64\nsolution = solve_it(num_lilies * 2 ** days - 1, days)\nans = solution[days]", "\nnumber_of_lilies = Symbol('number_of_lilies', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(number_of_lilies * 2 ** days - 64, days)\nans = solution[days]", "\nnum_lilies = Symbol('num_lilies', positive=True)\nnum_days = Symbol('num_days', positive=True)\nsolution = solve_it(num_lilies * 2 ** num_days - 64, num_days)\nans = solution[num_days]", "\ndays = Symbol('days', positive=True)\nsolution = solve_it(64 * (2 ** (days / 2)) - 60, days)\nans = solution[days]", "\nnum_lilies = Symbol('num_lilies', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(num_lilies * 2 ** days - 1 - 60, days)\nans = solution[days]", "\ndays = Symbol('days', positive=True)\nnum_water_lilies = 64\nsolution = solve_it(num_water_lilies * 2 ** days - 1, days)\nans = solution[days]", "\nnum_lilies = Symbol('num_lilies', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(num_lilies * 2 ** days - 1, days)\nans = math.ceil(solution[days])", "\nnum_lilies = Symbol('num_lilies', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(num_lilies * 2 ** days - 64, days)\nans = solution[days]", "\nnum_lilies = Symbol('num_lilies', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(num_lilies * 2 ** days - 64, days)\nans = solution[days]", "\ndays = Symbol('days', positive=True)\nnum_lilies = 64\nnum_lilies_after_days = num_lilies * (2 ** (days / 2))\nsolution = solve_it(num_lilies_after_days - num_lilies - 60, days)\nans = solution[days]", "\nnum_water_lilies = 64\ndays = Symbol('days', positive=True)\nsolution = solve_it(2 ** days - num_water_lilies, days)\nans = solution[days]", "\nnum_lilies = Symbol('num_lilies', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(num_lilies - 2 ** (days / 2), num_lilies)\nans = math.log2(64) * 2", "\nnum_lilies = 64\nnum_days = Symbol('num_days', positive=True)\nsolution = solve_it(2 ** num_days - num_lilies - 60, num_days)\nans = solution[num_days]", "\nnum_lilies = 64\ndays_to_double = 2\ndays_to_cover = 60\ndays_to_cover_with_64_lilies = math.log(num_lilies, 2) * days_to_double\nans = days_to_cover - days_to_cover_with_64_lilies", "\nnum_lilies = 64\ndays_to_double = 2\ndays_to_cover_lake = 60\ndays_to_cover_lake_with_64_lilies = math.log(num_lilies, 2) * days_to_double\nans = days_to_cover_lake - days_to_cover_lake_with_64_lilies", "\nnum_lilies = 64\ndays_to_double = 2\ndays_to_cover = math.log(num_lilies, 2) * days_to_double\nans = days_to_cover", "\nnum_lilies = Symbol('num_lilies', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(num_lilies - 2 ** days - 1, days)\nnum_days_for_1_lily = solution[days]\nnum_days_for_64_lilies = num_days_for_1_lily + math.log2(64)\nans = math.ceil(num_days_for_64_lilies)", "\nnum_water_lilies = 64\ndays = Symbol('days', positive=True)\nnum_water_lilies_after_days = num_water_lilies * 2 ** (days / 2)\nsolution = solve_it(num_water_lilies_after_days - num_water_lilies * 2 ** (60 / 2), days)\nans = solution[days]", "\nnum_days = 60\nnum_water_lilies = 2 ** (num_days / 2)\nnum_days_to_cover_lake = math.log(64, 2) * 2\nans = num_days_to_cover_lake", "\nnum_lilies = 64\ndays_for_full_coverage = 60\nlilies_after_2_days = num_lilies * 2\ndays_for_full_coverage_with_64_lilies = days_for_full_coverage * num_lilies / lilies_after_2_days\nans = days_for_full_coverage_with_64_lilies", "\nnum_lilies = 64\ndays_to_double = 2\ndays_to_cover = 60\nlilies_after_days_to_cover = num_lilies * 2 ** (days_to_cover / days_to_double)\ndays_to_cover_with_64_lilies = math.log(lilies_after_days_to_cover / num_lilies, 2) * days_to_double\nans = days_to_cover_with_64_lilies", "\ndays_to_double = 2\ndays_to_fully_cover = 60\nstarting_lilies = 64\nlilies_after_days_to_double = 2 * starting_lilies\nlilies_after_days_to_fully_cover = 2 ** (days_to_fully_cover / days_to_double) * starting_lilies\nans = math.log(lilies_after_days_to_fully_cover / starting_lilies, 2) * days_to_double"], "generated_prediction": "12.0", "options": ["A)15", "B)28", "C)30", "D)53", "E)59"], "answer": "D", "prediction": "A"}
{"question": "x men working x hours per day can do x units of a work in x days. How much work can be completed by y men working y hours per day in y days?", "generated": ["\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork = x ** 3\nans = work / (y ** 2)", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_completed_by_x_men = x ** 2\nwork_completed_by_y_men = y ** 3 / x ** 2\nans = work_completed_by_y_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x / x * x\nwork_done_by_y_men = y * y * y / x * x\nans = work_done_by_y_men / work_done_by_x_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nwork_done_by_y = work_done * y ** 2 / x ** 2\nans = work_done_by_y", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it(x ** 2 * y ** 2 - x ** 3, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nwork_done_by_y_men = y ** 3 / x ** 2\nans = work_done_by_y_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nwork_done_by_y = work_done * (y / x) ** 2\nans = work_done_by_y", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x / x\nwork_done_by_y_men = y * y * y / y\nans = simplify(work_done_by_y_men / work_done_by_x_men)", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3 / y ** 2\nans = work_done", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nsolution = solve_it(work_done / (x * y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x * x\nwork_done_by_y_men = (y * y * y * y) / (x * x)\nans = work_done_by_y_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_per_day = x * x * x\nwork_per_day_with_y = y * y * y\nsolution = solve_it(work_per_day - work_per_day_with_y, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x ** 3\nwork_done_by_y_men = y ** 3\nans = work_done_by_y_men / work_done_by_x_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x\nwork_done_by_y_men = y * y * y * y / x / x\nans = work_done_by_y_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nunits_of_work = x ** 2\nans = units_of_work * (y / x) ** 2", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_per_day = x * x\nwork_per_day_per_man = work_per_day / x\nwork_per_day_per_man_per_hour = work_per_day_per_man / x\nans = work_per_day_per_man_per_hour * y * y * y", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x\nwork_done_by_y_men = y * y * y * y / x / x\nans = work_done_by_y_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x / x\nwork_done_by_y_men = y * y * y / x\nans = work_done_by_y_men / work_done_by_x_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x ** 3\nwork_done_by_y_men = y ** 3\nans = work_done_by_y_men / work_done_by_x_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 2\nwork_done_by_y = y ** 3 / x ** 2\nans = work_done_by_y", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x / x\nwork_done_by_y_men = y * y * y / x\nans = work_done_by_y_men / work_done_by_x_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x ** 3\nwork_done_by_y_men = y ** 3\nsolution = solve_it(work_done_by_x_men - work_done_by_y_men, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_by_x_men = x * x * x\nwork_done_by_y_men = y * y * y * y / x * x\nans = work_done_by_y_men", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done_in_x_days = x ** 3\nwork_done_in_y_days = y ** 3\nsolution = solve_it(work_done_in_x_days - work_done_in_y_days, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nsolution = solve_it(work_done / (x ** 2 * y) - y ** 2, y)\nans = solution[y]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nwork_done_by_y = y ** 3\nsolution = solve_it(work_done / work_done_by_y - x ** 2 / y ** 2, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nwork_done_by_y = y ** 3\nsolution = solve_it(work_done / work_done_by_y - x ** 2 / y ** 2, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nwork_done_by_y = work_done * (y ** 2) / (x ** 2)\nans = work_done_by_y", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nwork_done_by_y = y ** 3\nsolution = solve_it(work_done / work_done_by_y - x ** 2 / y ** 2, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nwork_done = x ** 3\nsolution = solve_it(work_done * (y / x) ** 2 * (y / x) ** 2 - y ** 3, x)\nans = solution[x]"], "generated_prediction": "y", "options": ["A)x2/y2 units", "B)y3/x2 units", "C)x3/y2 units", "D)y2/x2 units", "E)None of these"], "answer": "B", "prediction": "E"}
{"question": "ABCDE is a regular pentagon with F at its center. How many different quadrilaterals can be formed by joining 4 of the points A,B,C,D,E and F?", "generated": ["\nans = 10", "\nans = 10", "\nans = 10", "\nans = 10", "\nans = 10", "\nans = 10", "\nans = 10", "\nans = 10", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5", "\nans = 5 * 4 * 3 * 2", "\nans = 5 * 4 * 3 * 2", "\nans = 5 * 4 * 3 * 2"], "generated_prediction": "5", "options": ["A)12", "B)10", "C)5", "D)15", "E)20"], "answer": "D", "prediction": "C"}
{"question": "Points A, B, C, D lie in this order on the circumference of a circle. Minor arc AC is 160\u00b0, and minor arc BD is 150\u00b0. If B bisects minor arc AC, then what is the measure of minor arc AD?", "generated": ["\narc_AC = 160\narc_BD = 150\narc_AD = arc_AC - arc_BD\nans = arc_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = arc_AC + arc_BD\nans = arc_AD", "\narc_ac = 160\narc_bd = 150\narc_ad = arc_ac - arc_bd\nans = arc_ad", "\nangle_AC = 160\nangle_BD = 150\nangle_AB = angle_AC / 2\nangle_AD = 360 - angle_AC - angle_BD - angle_AB\nans = angle_AD", "\narc_AC = 160\narc_BD = 150\narc_AB = 180 - arc_AC / 2\narc_AD = 180 - arc_AB - arc_BD\nans = arc_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AB = angle_AC / 2\nangle_AD = 360 - angle_AB - angle_BD\nans = angle_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AB = angle_AC / 2\nangle_AD = 360 - angle_AB - angle_BD\nans = angle_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AB = angle_AC / 2\nangle_AD = 360 - angle_AB - angle_BD\nans = angle_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\nangle = Symbol('angle', positive=True)\nsolution = solve_it(angle - (360 - 160) / 2, angle)\nans = solution[angle]", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AD = 360 - angle_AC - angle_BD\nans = angle_AD", "\nminor_arc_AC = 160\nminor_arc_BD = 150\nminor_arc_AD = 360 - minor_arc_AC - minor_arc_BD\nans = minor_arc_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AD = 360 - angle_AC - angle_BD\nans = angle_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_BAD = 180 - angle_AC / 2\nangle_AD = angle_BD + angle_BAD\nans = angle_AD", "\narc_AC = 160\narc_BD = 150\narc_AD = 360 - arc_AC - arc_BD\nans = arc_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AD = 180 - angle_AC - angle_BD\nans = angle_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AD = 180 - angle_AC - angle_BD\nans = angle_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AD = 180 - angle_AC - angle_BD\nans = angle_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AB = angle_AC / 2\nangle_AD = angle_AC + angle_BD\nans = angle_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AD = 180 - angle_AC - angle_BD\nans = angle_AD", "\nangle_AC = 160\nangle_BD = 150\nangle_AB = angle_AC / 2\nangle_AD = 360 - (angle_AC + angle_BD + angle_AB)\nans = angle_AD", "\nangle_BAC = Symbol('angle_BAC', positive=True)\nangle_BAD = Symbol('angle_BAD', positive=True)\nangle_BCD = Symbol('angle_BCD', positive=True)\nsolution = solve_it([angle_BAC + angle_BAD - 160, angle_BCD - 150, angle_BAC - angle_BAD], [angle_BAC, angle_BAD, angle_BCD])\nans = solution[angle_BAD]"], "generated_prediction": "50", "options": ["A)80\u00b0", "B)130\u00b0", "C)140\u00b0", "D)160\u00b0", "E)220\u00b0"], "answer": "B", "prediction": "A"}
{"question": "If 75 percent of the employees of a certain company take a winter vacation, 40 percent take a winter and a summer vacation, and 20 percent take neither a winter nor a summer vacation, what Q percent of the employees take a summer vacation but not a winter vacation?", "generated": ["\ntotal_employees = 100\nwinter_vacation_employees = 0.75 * total_employees\nwinter_and_summer_vacation_employees = 0.4 * total_employees\nsummer_vacation_employees = total_employees - winter_vacation_employees - winter_and_summer_vacation_employees\nans = summer_vacation_employees / total_employees", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_winter_and_summer_vacation = 0.4\nemployees_taking_neither_winter_nor_summer_vacation = 0.2\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_winter_vacation - employees_taking_winter_and_summer_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation / (1 - employees_taking_neither_winter_nor_summer_vacation)", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_summer_vacation = 0.4\nemployees_taking_no_vacation = 0.2\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_winter_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation / (1 - employees_taking_no_vacation)", "\nnum_employees = 100\nemployees_taking_winter_vacation = 0.75 * num_employees\nemployees_taking_summer_vacation = 0.4 * num_employees\nemployees_taking_both_vacations = 0.2 * num_employees\nemployees_taking_summer_vacation_only = employees_taking_summer_vacation - employees_taking_both_vacations\nans = employees_taking_summer_vacation_only / num_employees", "\nemployees = 100\nemployees_taking_winter_vacation = 0.75 * employees\nemployees_taking_summer_vacation = 0.4 * employees\nemployees_taking_both_vacation = 0.2 * employees\nemployees_taking_summer_vacation_only = employees_taking_summer_vacation - employees_taking_both_vacation\nans = employees_taking_summer_vacation_only / employees", "\nemployees = 100\nemployees_taking_winter_vacation = 0.75 * employees\nemployees_taking_both_vacations = 0.4 * employees\nemployees_taking_no_vacation = 0.2 * employees\nemployees_taking_summer_vacation = employees - employees_taking_no_vacation - employees_taking_winter_vacation + employees_taking_both_vacations\nans = employees_taking_summer_vacation / employees", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_winter_and_summer_vacation = 0.4\nemployees_taking_neither_winter_nor_summer_vacation = 0.2\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_winter_vacation - employees_taking_winter_and_summer_vacation - employees_taking_neither_winter_nor_summer_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation", "\ntotal_employees = 100\nemployees_taking_winter_vacation = 0.75 * total_employees\nemployees_taking_summer_vacation = 0.4 * total_employees\nemployees_taking_both_vacations = 0.2 * total_employees\nemployees_taking_summer_vacation_only = employees_taking_summer_vacation - employees_taking_both_vacations\nans = employees_taking_summer_vacation_only / total_employees", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_both_vacations = 0.4\nemployees_taking_no_vacations = 0.2\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_both_vacations - employees_taking_winter_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation / (1 - employees_taking_no_vacations)", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_winter_and_summer_vacation = 0.4\nemployees_taking_neither_winter_nor_summer_vacation = 0.2\nemployees_taking_summer_vacation = employees_taking_winter_and_summer_vacation + employees_taking_neither_winter_nor_summer_vacation\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_winter_and_summer_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_winter_and_summer_vacation = 0.4\nemployees_taking_no_vacation = 0.2\nemployees_taking_summer_vacation = employees_taking_winter_and_summer_vacation + employees_taking_no_vacation\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_winter_and_summer_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation", "\npercent_taking_winter_vacation = 75\npercent_taking_both_vacations = 40\npercent_taking_neither_vacation = 20\npercent_taking_summer_vacation = 100 - percent_taking_neither_vacation\npercent_taking_summer_vacation_but_not_winter_vacation = percent_taking_summer_vacation - percent_taking_both_vacations\nans = percent_taking_summer_vacation_but_not_winter_vacation", "\nemployees_taking_winter_vacation = 75\nemployees_taking_winter_and_summer_vacation = 40\nemployees_taking_no_vacation = 20\nemployees_taking_summer_vacation = employees_taking_winter_and_summer_vacation + employees_taking_no_vacation\nemployees_taking_winter_vacation_but_not_summer_vacation = employees_taking_winter_vacation - employees_taking_winter_and_summer_vacation\nans = employees_taking_winter_vacation_but_not_summer_vacation / employees_taking_summer_vacation", "\nemployees_taking_winter_vacation = 75\nemployees_taking_winter_and_summer_vacation = 40\nemployees_taking_no_vacation = 20\nemployees_taking_summer_vacation = employees_taking_winter_and_summer_vacation + employees_taking_no_vacation\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_winter_and_summer_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation / employees_taking_summer_vacation", "\nemployees_taking_winter_vacation = 75\nemployees_taking_both_vacations = 40\nemployees_taking_no_vacations = 20\nemployees_taking_summer_vacation = employees_taking_both_vacations + employees_taking_no_vacations\nemployees_taking_winter_vacation_but_not_summer_vacation = employees_taking_winter_vacation - employees_taking_both_vacations\nans = employees_taking_winter_vacation_but_not_summer_vacation / employees_taking_summer_vacation", "\nwinter_vacation = 0.75\nsummer_vacation = 0.4\nsummer_only_vacation = 0.2\nsolution = solve_it(winter_vacation - summer_vacation - summer_only_vacation, summer_only_vacation)\nans = solution[summer_only_vacation] * 100", "\nemployees_taking_winter_vacation = 75\nemployees_taking_both_vacations = 40\nemployees_taking_no_vacation = 20\nemployees_taking_summer_vacation = employees_taking_both_vacations + employees_taking_no_vacation\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_no_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation / employees_taking_summer_vacation", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_winter_and_summer_vacation = 0.4\nemployees_taking_neither_winter_nor_summer_vacation = 0.2\nemployees_taking_summer_vacation = 1 - employees_taking_neither_winter_nor_summer_vacation\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_winter_and_summer_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation", "\ntotal_employees = 100\nemployees_taking_winter_vacation = 0.75 * total_employees\nemployees_taking_summer_vacation = 0.4 * total_employees\nemployees_taking_both_vacations = employees_taking_winter_vacation - employees_taking_summer_vacation\nemployees_taking_no_vacation = 0.2 * total_employees\nemployees_taking_summer_vacation_only = employees_taking_summer_vacation - employees_taking_both_vacations\nans = employees_taking_summer_vacation_only / total_employees", "\nsummer_vacation = Symbol('summer_vacation', positive=True)\nwinter_vacation = Symbol('winter_vacation', positive=True)\nsolution = solve_it([summer_vacation + winter_vacation - 40, summer_vacation + winter_vacation + 20 - 100], [summer_vacation, winter_vacation])\nans = solution[summer_vacation]", "\nnum_employees = 100\nemployees_taking_winter_vacation = 0.75 * num_employees\nemployees_taking_summer_vacation = 0.4 * num_employees\nemployees_taking_both_vacations = employees_taking_winter_vacation + employees_taking_summer_vacation\nemployees_taking_neither_vacation = 0.2 * num_employees\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_both_vacations\nans = employees_taking_summer_vacation_but_not_winter_vacation / num_employees", "\nemployees_taking_winter_vacation = 75\nemployees_taking_both_vacation = 40\nemployees_taking_no_vacation = 20\nemployees_taking_summer_vacation = 100 - employees_taking_no_vacation\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_both_vacation\nans = employees_taking_summer_vacation_but_not_winter_vacation", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_both_vacations = 0.4\nemployees_taking_no_vacation = 0.2\nemployees_taking_summer_vacation = employees_taking_both_vacations + employees_taking_no_vacation\nemployees_taking_winter_but_not_summer_vacation = employees_taking_winter_vacation - employees_taking_both_vacations\nans = employees_taking_winter_but_not_summer_vacation / employees_taking_summer_vacation", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_both_vacations = 0.4\nemployees_taking_neither_vacation = 0.2\nemployees_taking_summer_vacation = employees_taking_both_vacations + employees_taking_neither_vacation\nemployees_taking_summer_vacation_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_both_vacations\nans = employees_taking_summer_vacation_but_not_winter_vacation", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_summer_vacation = 0.4\nemployees_taking_neither_vacation = 0.2\nemployees_taking_summer_but_not_winter_vacation = employees_taking_summer_vacation - employees_taking_winter_vacation\nans = employees_taking_summer_but_not_winter_vacation / (1 - employees_taking_neither_vacation)", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_both_vacations = 0.4\nemployees_taking_no_vacation = 0.2\nemployees_taking_summer_vacation = employees_taking_both_vacations + employees_taking_no_vacation\nemployees_taking_winter_vacation_but_not_summer_vacation = employees_taking_winter_vacation - employees_taking_both_vacations\nans = employees_taking_winter_vacation_but_not_summer_vacation / employees_taking_summer_vacation", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_both_vacations = 0.4\nemployees_taking_neither_vacation = 0.2\nemployees_taking_summer_vacation = 1 - employees_taking_neither_vacation - employees_taking_winter_vacation + employees_taking_both_vacations\nans = employees_taking_summer_vacation", "\nemployees_taking_winter_vacation = 0.75\nemployees_taking_both_vacations = 0.4\nemployees_taking_neither_vacation = 0.2\nemployees_taking_summer_vacation = employees_taking_both_vacations + employees_taking_neither_vacation\nemployees_taking_summer_vacation_and_not_winter_vacation = employees_taking_summer_vacation - employees_taking_both_vacations\nans = employees_taking_summer_vacation_and_not_winter_vacation", "\nnum_employees = 100\nemployees_taking_winter_vacation = 0.75 * num_employees\nemployees_taking_both_vacations = 0.4 * num_employees\nemployees_taking_neither_vacations = 0.2 * num_employees\nemployees_taking_summer_vacation = num_employees - employees_taking_neither_vacations\nemployees_taking_summer_vacation_and_not_winter_vacation = employees_taking_summer_vacation - employees_taking_both_vacations\nans = employees_taking_summer_vacation_and_not_winter_vacation / num_employees", "\nnum_employees = 100\nwinter_vacation = 0.75\nsummer_vacation = 0.4\nsummer_only_vacation = 0.2\nsolution = solve_it([num_employees * winter_vacation - num_employees * summer_vacation, num_employees * summer_vacation - num_employees * summer_only_vacation], [winter_vacation, summer_vacation])\nans = solution[summer_vacation]"], "generated_prediction": "0.20000000000000007", "options": ["A)5%", "B)15%", "C)25%", "D)35%", "E)45%"], "answer": "A", "prediction": "A"}
{"question": "The cross-section of a canal is shaped like a trapezium. If the canal is 10 m wide at the top and 6 m wide at the bottom and the area of cross-section is 640 square meters, the depth of cannel is?", "generated": ["\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it((top_width + bottom_width) * depth / 2 - area, depth)\nans = solution[depth]", "\ntop_width = 10\nbottom_width = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it((top_width + bottom_width) * depth / 2 - area, depth)\nans = solution[depth]", "\ntop_width = 10\nbottom_width = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it((top_width + bottom_width) * depth / 2 - area, depth)\nans = solution[depth]", "\ntop_width = 10\nbottom_width = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it((top_width + bottom_width) * depth / 2 - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it(0.5 * (top_width + bottom_width) * depth - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it(0.5 * (top_width + bottom_width) * depth - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\nwidth_top = 10\nwidth_bottom = 6\narea = 640\nsolution = solve_it((width_top + width_bottom) * depth / 2 - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\nwidth_top = 10\nwidth_bottom = 6\narea = 640\nsolution = solve_it((width_top + width_bottom) * depth / 2 - area, depth)\nans = solution[depth]", "\nwidth_top = 10\nwidth_bottom = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it((width_top + width_bottom) * depth / 2 - area, depth)\nans = solution[depth]", "\nwidth_top = 10\nwidth_bottom = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it((width_top + width_bottom) * depth / 2 - area, depth)\nans = solution[depth]", "\nwidth_top = 10\nwidth_bottom = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it((width_top + width_bottom) * depth / 2 - area, depth)\nans = solution[depth]", "\nwidth_top = 10\nwidth_bottom = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it((width_top + width_bottom) * depth / 2 - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it(depth * (top_width + bottom_width) / 2 - area, depth)\nans = solution[depth]", "\nwidth_top = 10\nwidth_bottom = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it((width_top + width_bottom) * depth / 2 - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\nwidth_top = 10\nwidth_bottom = 6\narea = 640\nsolution = solve_it(0.5 * (width_top + width_bottom) * depth - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it(top_width * depth + bottom_width * depth - 2 * area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it(top_width * depth + bottom_width * depth - 2 * area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it(top_width * depth + bottom_width * depth - 2 * area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it(top_width * depth + bottom_width * depth - 2 * area, depth)\nans = solution[depth]", "\nwidth_top = 10\nwidth_bottom = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it((width_top + width_bottom) / 2 * depth - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\narea = 640\ntop_width = 10\nbottom_width = 6\nsolution = solve_it(depth * (top_width + bottom_width) / 2 - area, depth)\nans = solution[depth]", "\nwidth_top = 10\nwidth_bottom = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it(0.5 * (width_top + width_bottom) * depth - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\nsolution = solve_it(10 * depth + 6 * depth - 640, depth)\nans = solution[depth]", "\nwidth_top = 10\nwidth_bottom = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it(width_top * depth + width_bottom * depth - 2 * area, depth)\nans = solution[depth]", "\ntop_width = 10\nbottom_width = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nsolution = solve_it(top_width * depth + bottom_width * depth - 2 * area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\nwide_top = 10\nwide_bottom = 6\narea = 640\nsolution = solve_it((wide_top + wide_bottom) * depth / 2 - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it(depth * (top_width + bottom_width) * (top_width - bottom_width) / 2 - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\ntop_width = 10\nbottom_width = 6\narea = 640\nsolution = solve_it(depth * (top_width + bottom_width) * (top_width - bottom_width) / 2 - area, depth)\nans = solution[depth]", "\ndepth = Symbol('depth', positive=True)\narea = 640\nwidth_at_top = 10\nwidth_at_bottom = 6\nsolution = solve_it(depth * (width_at_top + width_at_bottom) / 2 - area, depth)\nans = solution[depth]", "\ntop_width = 10\nbottom_width = 6\narea = 640\ndepth = Symbol('depth', positive=True)\nans = area / (top_width + bottom_width) / 2"], "generated_prediction": "80.0", "options": ["A)26", "B)28", "C)21", "D)80", "E)23"], "answer": "D", "prediction": "D"}
{"question": "During one season, a tennis team won 20 matches and lost 30% of their matches. What was the number of matches that the team lost?", "generated": ["\ntotal_matches = 20 / (1 - 0.3)\nlost_matches = total_matches - 20\nans = lost_matches", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nsolution = solve_it(num_matches_lost / (num_matches_won + num_matches_lost) - 0.3, num_matches_lost)\nans = solution[num_matches_lost]", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nsolution = solve_it(num_matches_lost / (num_matches_won + num_matches_lost) - 0.3, num_matches_lost)\nans = solution[num_matches_lost]", "\nmatches_won = 20\nmatches_lost = Symbol('matches_lost', positive=True)\nsolution = solve_it(matches_won / (matches_won + matches_lost) - 0.7, matches_lost)\nans = solution[matches_lost]", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nsolution = solve_it(num_matches_won / (num_matches_won + num_matches_lost) - 0.7, num_matches_lost)\nans = solution[num_matches_lost]", "\ntotal_matches = Symbol('total_matches', positive=True)\nwon_matches = 20\nlost_matches = total_matches - won_matches\nsolution = solve_it(lost_matches - 0.3 * total_matches, total_matches)\nans = solution[total_matches]", "\ntotal_matches = Symbol('total_matches', positive=True)\nwon_matches = 20\nlost_matches = total_matches - won_matches\nsolution = solve_it(lost_matches - 0.3 * total_matches, total_matches)\nans = solution[total_matches]", "\ntotal_matches = Symbol('total_matches', positive=True)\nmatches_won = 20\nmatches_lost = total_matches - matches_won\nsolution = solve_it(matches_lost - 0.3 * total_matches, total_matches)\nans = solution[total_matches]", "\nwon_matches = 20\nlost_matches = Symbol('lost_matches', positive=True)\ntotal_matches = won_matches + lost_matches\nlost_percentage = lost_matches / total_matches\nsolution = solve_it(lost_percentage - 0.3, lost_matches)\nans = solution[lost_matches]", "\ntotal_matches = Symbol('total_matches', positive=True)\nlost_matches = Symbol('lost_matches', positive=True)\nwon_matches = 20\nsolution = solve_it([total_matches - lost_matches - won_matches, lost_matches / total_matches - 0.3], [total_matches, lost_matches])\nans = solution[lost_matches]", "\ntotal_matches = 20 / (1 - 0.3)\nans = total_matches - 20", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nsolution = solve_it(num_matches_won + num_matches_lost - num_matches_lost * 0.3, num_matches_lost)\nans = solution[num_matches_lost]", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nsolution = solve_it(num_matches_won + num_matches_lost - num_matches_lost * 0.3, num_matches_lost)\nans = solution[num_matches_lost]", "\nnum_matches = Symbol('num_matches', positive=True)\nnum_matches_won = 20\nnum_matches_lost = num_matches - num_matches_won\nsolution = solve_it(num_matches_lost - 0.3 * num_matches, num_matches)\nans = solution[num_matches]", "\nnum_matches = 20\nnum_matches_lost = 0.3 * num_matches\nans = num_matches_lost", "\ntotal_matches = 20 + 0.3 * 20\nlost_matches = 0.3 * 20\nans = lost_matches", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nlost_percentage = 30\nsolution = solve_it(num_matches_won + num_matches_lost - num_matches_lost * lost_percentage / 100, num_matches_lost)\nans = solution[num_matches_lost]", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nnum_matches_lost_percentage = 30\nsolution = solve_it(num_matches_won + num_matches_lost - num_matches_lost * num_matches_lost_percentage / 100, num_matches_lost)\nans = solution[num_matches_lost]", "\ntotal_matches = 20 + 0.3 * 20\nlost_matches = 0.3 * 20\nans = lost_matches", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nnum_matches_lost_percentage = 30\nsolution = solve_it(num_matches_won + num_matches_lost - num_matches_lost * num_matches_lost_percentage / 100, num_matches_lost)\nans = solution[num_matches_lost]", "\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nnum_matches_won = 20\nnum_matches_lost_percentage = 30\nsolution = solve_it(num_matches_won + num_matches_lost - num_matches_lost * num_matches_lost_percentage / 100, num_matches_lost)\nans = solution[num_matches_lost]", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nnum_matches_lost_percent = 0.3\nsolution = solve_it(num_matches_won + num_matches_lost - num_matches_lost * num_matches_lost_percent, num_matches_lost)\nans = solution[num_matches_lost]", "\nnum_matches = 20\nnum_matches_lost = 0.3 * num_matches\nans = num_matches_lost", "\nnum_matches = 20\nnum_lost_matches = 0.3 * num_matches\nans = num_lost_matches", "\nmatches_won = 20\nmatches_lost = Symbol('matches_lost', positive=True)\nsolution = solve_it(matches_won + matches_lost - matches_won * 0.3, matches_lost)\nans = solution[matches_lost]", "\nnum_wins = 20\nnum_losses = Symbol('num_losses', positive=True)\nloss_percent = 30\nsolution = solve_it([num_wins + num_losses - 100, num_losses - loss_percent * num_wins / 100], [num_losses])\nans = solution[num_losses]", "\nnum_matches_won = 20\nnum_matches_lost = 30\nnum_matches_played = num_matches_won + num_matches_lost\nnum_matches_lost = num_matches_played * num_matches_lost / 100\nans = num_matches_lost", "\nmatches_won = 20\nmatches_lost = 30\nmatches_played = matches_won + matches_lost\npercent_matches_lost = matches_lost / matches_played * 100\nans = matches_lost", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nnum_matches_lost_percentage = 30\nsolution = solve_it(num_matches_lost / (num_matches_won + num_matches_lost) - num_matches_lost_percentage / 100, num_matches_lost)\nans = solution[num_matches_lost]", "\nnum_matches_won = 20\nnum_matches_lost = Symbol('num_matches_lost', positive=True)\nnum_matches_lost_percentage = 30\nsolution = solve_it([num_matches_won + num_matches_lost - num_matches_lost * num_matches_lost_percentage / 100], [num_matches_lost])\nans = solution[num_matches_lost]"], "generated_prediction": "None", "options": ["A)70", "B)30", "C)3", "D)7", "E)5"], "answer": "C", "prediction": "A"}
{"question": "A point on the edge of a fan blade that is rotating in a plane 10 centimeters from the center of the fan. What is the distance traveled, in centimeters, by this point after 30 seconds when the fan runs at the rate of 300 revolutions per minutes?", "generated": ["\nradius = 10\nrevolutions_per_second = 300 / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_second * 30\nans = distance_traveled", "\nradius = 10\ntime = 30\nrevolutions_per_minute = 300\nrevolutions_per_second = revolutions_per_minute / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_second * time\nans = distance_traveled", "\nradius = 10\nrevolutions_per_minute = 300\nseconds = 30\ndistance = 2 * math.pi * radius * revolutions_per_minute * seconds / 60\nans = distance", "\nradius = 10\nrevolutions_per_minute = 300\nseconds = 30\ndistance = 2 * math.pi * radius * revolutions_per_minute * seconds / 60\nans = distance", "\nradius = 10\nrevolutions_per_minute = 300\nseconds = 30\nrevolutions_per_second = revolutions_per_minute / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_second * seconds\nans = distance_traveled", "\nradius = 10\nrevolutions_per_minute = 300\nseconds = 30\nrevolutions_per_second = revolutions_per_minute / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_second * seconds\nans = distance_traveled", "\nradius = 10\nrevolutions_per_minute = 300\nseconds = 30\nrevolutions_per_second = revolutions_per_minute / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_second * seconds\nans = distance_traveled", "\nradius = 10\nrevolutions_per_second = 300 / 60\ntime = 30\ndistance = 2 * math.pi * radius * revolutions_per_second * time\nans = distance", "\nradius = 10\nrevolutions_per_second = 300 / 60\nrevolutions_in_30_seconds = revolutions_per_second * 30\nans = 2 * math.pi * radius * revolutions_in_30_seconds", "\nradius = 10\nrevolutions_per_minute = 300\nrevolutions_per_second = revolutions_per_minute / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_second * 30\nans = distance_traveled", "\nradius = 10\nrevolutions_per_minute = 300\nrevolutions_per_second = revolutions_per_minute / 60\ndistance_per_second = 2 * math.pi * radius * revolutions_per_second\nans = distance_per_second * 30", "\nradius = 10\nrevolutions_per_minute = 300\nrevolutions_per_second = revolutions_per_minute / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_second * 30\nans = distance_traveled", "\nradius = 10\nrevolutions_per_minute = 300\nseconds = 30\nrevolutions = revolutions_per_minute * seconds / 60\ndistance_traveled = 2 * math.pi * radius * revolutions\nans = distance_traveled", "\nradius = 10\ntime = 30\nrevolutions_per_min = 300\nrevolutions_per_sec = revolutions_per_min / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_sec * time\nans = distance_traveled", "\nradius = 10\ntime = 30\nrevolutions_per_min = 300\nrevolutions_per_sec = revolutions_per_min / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_sec * time\nans = distance_traveled", "\nradius = 10\nrevolutions_per_min = 300\ntime = 30\ndistance = 2 * math.pi * radius * revolutions_per_min * time / 60\nans = distance", "\nradius = 10\nrevolutions_per_min = 300\nrevolutions_per_sec = revolutions_per_min / 60\ndistance_traveled = 2 * math.pi * radius * revolutions_per_sec * 30\nans = distance_traveled", "\nradius = 10\nrevolutions_per_minute = 300\nrevolutions_per_second = revolutions_per_minute / 60\nrevolutions_in_30_seconds = revolutions_per_second * 30\ndistance_traveled = revolutions_in_30_seconds * 2 * math.pi * radius\nans = distance_traveled", "\nradius = 10\nrevolutions_per_minute = 300\nseconds = 30\nrevolutions_per_second = revolutions_per_minute / 60\ndistance_covered = 2 * math.pi * radius * revolutions_per_second * seconds\nans = distance_covered", "\nradius = 10\nrevolutions_per_min = 300\nrevolutions_per_sec = revolutions_per_min / 60\nrevolutions_in_30_sec = revolutions_per_sec * 30\ndistance_traveled = 2 * math.pi * radius * revolutions_in_30_sec\nans = distance_traveled", "\nradius = 10\nrevolutions_per_minute = 300\nrevolutions_per_second = revolutions_per_minute / 60\ndistance_traveled_in_30_seconds = 2 * math.pi * radius * revolutions_per_second * 30\nans = distance_traveled_in_30_seconds", "\nradius = 10\nrevolutions_per_min = 300\nrevolutions_per_sec = revolutions_per_min / 60\ndistance_per_sec = 2 * math.pi * radius * revolutions_per_sec\ndistance_per_30_sec = distance_per_sec * 30\nans = distance_per_30_sec", "\nradius = 10\nrevolutions_per_minute = 300\nseconds = 30\ndistance_traveled = 2 * math.pi * radius * revolutions_per_minute * seconds / 60\nans = distance_traveled", "\nradius = 10\nrevolutions_per_min = 300\nrevolutions_per_sec = revolutions_per_min / 60\nrevolutions_per_30_sec = revolutions_per_sec * 30\ncircumference = 2 * math.pi * radius\ndistance_traveled = revolutions_per_30_sec * circumference\nans = distance_traveled", "\nradius = 10\nrevolutions_per_min = 300\nrevolutions_per_sec = revolutions_per_min / 60\ntime = 30\ndistance = 2 * math.pi * radius * revolutions_per_sec * time\nans = distance", "\nradius = 10\ntime = 30\nrevolutions_per_minute = 300\nrevolutions_per_second = revolutions_per_minute / 60\nrevolutions_in_30_seconds = revolutions_per_second * time\ndistance_travelled = 2 * math.pi * radius * revolutions_in_30_seconds\nans = distance_travelled", "\nradius = 10\nrevolutions_per_minute = 300\nrevolutions_per_second = revolutions_per_minute / 60\nseconds = 30\ndistance_travelled = 2 * math.pi * radius * revolutions_per_second * seconds\nans = distance_travelled", "\nradius = 10\nrevolutions_per_minute = 300\nseconds_in_minute = 60\nrevolutions_per_second = revolutions_per_minute / seconds_in_minute\ndistance_in_one_second = 2 * math.pi * radius * revolutions_per_second\ndistance_in_30_seconds = 30 * distance_in_one_second\nans = distance_in_30_seconds", "\nradius = 10\nrevolutions_per_min = 300\nseconds = 30\nrevolutions = revolutions_per_min * seconds / 60\ndistance = 2 * math.pi * radius * revolutions\nans = distance", "\ndistance_from_center = 10\nrevolutions_per_minute = 300\nseconds = 30\ndistance_traveled = 2 * math.pi * distance_from_center * revolutions_per_minute * seconds / 60\nans = distance_traveled"], "generated_prediction": "9424.77796076938", "options": ["A)750pi", "B)1500pi", "C)1875pi", "D)3000pi", "E)7500pi"], "answer": "D", "prediction": "D"}
{"question": "If n is such that 36 \u2264 n \u2264 72, then x = (n2 + 2\u221an(n + 4) + 16) / (n+ 4\u221an+ 4) satisfies", "generated": ["\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nans = simplify(x)", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nans = (x.subs(n, 36), x.subs(n, 72))", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 54, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 54, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 54, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 54, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 54, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 20, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 20, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 20, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 20, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 20, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 20, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 20, n)\nans = solution[n]", "\nn = Symbol('n')\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nans = simplify(x)", "\nn = Symbol('n')\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nans = simplify(x)", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * n * math.sqrt(n) + n + 4 + 16) / (n + 4 * math.sqrt(n) + 4)\nans = (x.subs(n, 36), x.subs(n, 72))", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 36, n)\nans = (solution[n], x.subs({n: 72}))", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nans = (20 < x, x < 54)", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * n ** 0.5 * (n + 4) + 16) / (n + 4 * n ** 0.5 + 4)\nx_min = x.subs(n, 36)\nx_max = x.subs(n, 72)\nans = (x_min, x_max)", "\nn = Symbol('n')\nx = (n ** 2 + 2 * n * (n + 4) + 16) / (n + 4 * n + 4)\nsolution = solve_it(36 - n, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it([x - 20, x - 54], n)\nans = (solution[n][0], solution[n][1])", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 20, n)\nans = (solution[n], x.subs(n, solution[n]))", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 54, n)\nans = (solution[n], x.subs(n, solution[n]))", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(36 - n, n)\nn_min = solution[n]\nsolution = solve_it(n - 72, n)\nn_max = solution[n]\nx_min = x.subs(n, n_min)\nx_max = x.subs(n, n_max)\nans = (x_min, x_max)", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nans = (20 < x < 54)", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 54, n)\nans = (solution[n], x.subs(n, solution[n]))", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it([x - 20, 54 - x], n)\nans = (solution[n][0], solution[n][1])", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * math.sqrt(n) * (n + 4) + 16) / (n + 4 * math.sqrt(n) + 4)\nsolution = solve_it(x - 20, n)\nlower_bound = solution[n]\nsolution = solve_it(x - 54, n)\nupper_bound = solution[n]\nans = (lower_bound, upper_bound)", "\nn = Symbol('n', positive=True)\nx = (n ** 2 + 2 * n * math.sqrt(n) + n + 4 + 16) / (n + 4 * math.sqrt(n) + 4)\nans = x.subs(n, 36) < 20 and x.subs(n, 72) > 64"], "generated_prediction": "9424.77796076938", "options": ["A)20 < x < 54", "B)23 < x < 58", "C)25 < x < 64", "D)28 < x < 60", "E)None of these"], "answer": "D", "prediction": "D"}
{"question": "At its maximum speed, a space shuttle can travel 700m high in 40 seconds. It will also take 5 seconds to pass a point. What then is the length of the space shuttle?", "generated": ["\nspeed = 700 / 40\ntime = 5\nlength = speed * time\nans = length", "\nspeed = Symbol('speed', positive=True)\nheight = 700\ntime = 40\nsolution = solve_it(speed * time - height, speed)\nans = solution[speed] * 5", "\nspeed = Symbol('speed', positive=True)\nheight_in_40_seconds = 700\nheight_in_5_seconds = speed * 5\nsolution = solve_it(height_in_40_seconds - height_in_5_seconds * 8, speed)\nans = solution[speed]", "\nlength = Symbol('length', positive=True)\nheight = 700\ntime = 40\nspeed = height / time\ntime_to_pass = 5\nsolution = solve_it(length / speed - time_to_pass, length)\nans = solution[length]", "\nheight = 700\ntime_to_reach_max_height = 40\ntime_to_pass_point = 5\nspeed = height / (time_to_reach_max_height - time_to_pass_point)\nlength = speed * time_to_pass_point\nans = length", "\ntime_to_travel_700m = 40\ntime_to_travel_1m = 5\nspeed = 700 / time_to_travel_700m\nlength = speed * time_to_travel_1m\nans = length", "\nheight = 700\ntime_to_reach_max_height = 40\ntime_to_pass_point = 5\nspeed = height / (time_to_reach_max_height + time_to_pass_point)\nlength = speed * time_to_pass_point\nans = length", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nheight = 700\ntime_to_reach_height = 40\ntime_to_pass_point = 5\nspeed = height / time_to_reach_height\nsolution = solve_it(shuttle_length / speed - time_to_pass_point, shuttle_length)\nans = solution[shuttle_length]", "\nheight = Symbol('height', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_reach_height = 40\ntime_to_pass_point = 5\nsolution = solve_it([speed * time_to_reach_height - height, speed * time_to_pass_point - height], [speed, height])\nans = solution[height]", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nheight = 700\ntime = 40\ntime_to_pass = 5\nsolution = solve_it(shuttle_length / time_to_pass - height / time, shuttle_length)\nans = solution[shuttle_length]", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nshuttle_speed = Symbol('shuttle_speed', positive=True)\ntime_to_reach_700m = 40\ntime_to_pass_point = 5\nsolution = solve_it([shuttle_speed * time_to_reach_700m - 700, shuttle_speed * time_to_pass_point - shuttle_length], [shuttle_speed, shuttle_length])\nans = solution[shuttle_length]", "\nheight = Symbol('height', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_reach_max_height = 40\ntime_to_pass_a_point = 5\nsolution = solve_it([speed * time_to_reach_max_height - height, speed * time_to_pass_a_point - 700], [speed, height])\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_reach_max_height = 40\ntime_to_pass_point = 5\nsolution = solve_it([speed * time_to_reach_max_height - height, speed * time_to_pass_point - 700], [speed, height])\nans = solution[height]", "\nmax_speed = Symbol('max_speed', positive=True)\nheight = 700\ntime_to_reach_max_height = 40\ntime_to_pass_point = 5\nsolution = solve_it([max_speed * time_to_reach_max_height - height, max_speed * time_to_pass_point - 1], [max_speed])\nans = solution[max_speed]", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nshuttle_speed = Symbol('shuttle_speed', positive=True)\nshuttle_height = 700\nshuttle_time = 40\nsolution = solve_it([shuttle_speed * shuttle_time - shuttle_height, shuttle_speed * 5 - shuttle_length], [shuttle_speed, shuttle_length])\nans = solution[shuttle_length]", "\nheight = 700\ntime_to_reach_max_height = 40\ntime_to_pass_point = 5\nspeed = height / time_to_reach_max_height\nlength = speed * time_to_pass_point\nans = length", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nshuttle_speed = Symbol('shuttle_speed', positive=True)\ntime_to_reach_max_height = 40\ntime_to_pass_point = 5\nmax_height = 700\nsolution = solve_it([shuttle_length / shuttle_speed - time_to_pass_point, shuttle_speed * time_to_reach_max_height - max_height], [shuttle_length, shuttle_speed])\nans = solution[shuttle_length]", "\nlength = Symbol('length', positive=True)\nspeed = Symbol('speed', positive=True)\nheight = 700\ntime = 40\nsolution = solve_it([length / speed - 5, length / speed - 40, length * speed - height], [length, speed])\nans = solution[length]", "\nshuttle_speed = Symbol('shuttle_speed', positive=True)\ndistance_covered = 700\ntime_taken = 40\ntime_to_pass_point = 5\nsolution = solve_it(distance_covered / time_taken - shuttle_speed, shuttle_speed)\nans = solution[shuttle_speed] * time_to_pass_point", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nvelocity = 700 / 40\ntime_to_pass_point = 5\nsolution = solve_it(shuttle_length / velocity - time_to_pass_point, shuttle_length)\nans = solution[shuttle_length]", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nheight = 700\ntime_to_reach_max_height = 40\ntime_to_pass_point = 5\nsolution = solve_it([shuttle_length / time_to_pass_point - shuttle_length / time_to_reach_max_height, height / time_to_reach_max_height - shuttle_length / time_to_pass_point], [shuttle_length])\nans = solution[shuttle_length]", "\nspeed = Symbol('speed', positive=True)\nheight = 700\ntime_to_reach_height = 40\ntime_to_pass_point = 5\nsolution = solve_it(speed * time_to_reach_height - height, speed)\nans = solution[speed] * time_to_pass_point", "\nspace_shuttle_length = Symbol('space_shuttle_length', positive=True)\nspeed = Symbol('speed', positive=True)\ndistance = 700\ntime_to_reach_top = 40\ntime_to_pass_point = 5\nsolution = solve_it([speed * time_to_reach_top - distance, speed * time_to_pass_point - space_shuttle_length], [space_shuttle_length, speed])\nans = solution[space_shuttle_length]", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nshuttle_speed = Symbol('shuttle_speed', positive=True)\ntime_to_reach_max_height = 40\ntime_to_pass_a_point = 5\nsolution = solve_it([shuttle_speed * time_to_reach_max_height - 700, shuttle_speed * time_to_pass_a_point - shuttle_length], [shuttle_length, shuttle_speed])\nans = solution[shuttle_length]", "\nheight = Symbol('height', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it(700 / 40 - height / time, height)\nans = solution[height]", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nspeed = Symbol('speed', positive=True)\nheight = 700\ntime_to_reach_height = 40\ntime_to_pass_point = 5\nsolution = solve_it([speed * time_to_reach_height - height, speed * time_to_pass_point - shuttle_length], [speed, shuttle_length])\nans = solution[shuttle_length]", "\nshuttle_length = Symbol('shuttle_length', positive=True)\nspeed = Symbol('speed', positive=True)\ntime_to_reach_max_height = 40\ntime_to_pass_point = 5\nsolution = solve_it([shuttle_length / speed - time_to_pass_point, speed * time_to_reach_max_height - 700], [shuttle_length, speed])\nans = solution[shuttle_length]", "\nlength = Symbol('length', positive=True)\nheight = 700\ntime_to_reach_top = 40\ntime_to_pass_point = 5\nsolution = solve_it(length / time_to_pass_point - length / (time_to_reach_top + time_to_pass_point), length)\nans = solution[length]", "\nheight = Symbol('height', positive=True)\ntime_to_reach_height = Symbol('time_to_reach_height', positive=True)\ntime_to_pass_point = Symbol('time_to_pass_point', positive=True)\nspeed = Symbol('speed', positive=True)\nsolution = solve_it([speed * time_to_reach_height - height, speed * time_to_pass_point - 1], [speed, time_to_reach_height])\nans = solution[speed] * time_to_pass_point", "\nheight = Symbol('height', positive=True)\nspeed = Symbol('speed', positive=True)\nmax_height = 700\nmax_height_time = 40\ntime_to_pass_point = 5\nsolution = solve_it([height - speed * max_height_time, height - speed * time_to_pass_point], [height, speed])\nans = solution[height]"], "generated_prediction": "87.5", "options": ["A)50 m", "B)75 m", "C)100 m", "D)125 m", "E)150 m"], "answer": "C", "prediction": "B"}
{"question": "A starts a business with Rs.40,000. After 2 months, B joined him with Rs.60,000. C joined them after some more time with Rs.120,000. At the end of the year, out of a total profit of Rs.375,000, C gets Rs.150,000 as his share. How many months after B joined the business, did C join?", "generated": ["\nmonths_after_b_joined = Symbol('months_after_b_joined', positive=True)\na_share = 40000 / (2 + months_after_b_joined)\nb_share = 60000 / (2 + months_after_b_joined)\nc_share = 120000 / (2 + months_after_b_joined)\nsolution = solve_it(a_share + b_share + c_share - 375000, months_after_b_joined)\nans = solution[months_after_b_joined]", "\nmonths = Symbol('months', positive=True)\nA = 40000\nB = 60000\nC = 120000\nprofit = 375000\nC_share = 150000\nsolution = solve_it([(A + B + C) * months - profit, C * months - C_share], [months])\nans = solution[months]", "\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nprofit_share_of_A = 40000 / (2 + months_after_B_joined + 12)\nprofit_share_of_B = 60000 / (months_after_B_joined + 12)\nprofit_share_of_C = 120000 / (12 - months_after_B_joined)\nsolution = solve_it([profit_share_of_A + profit_share_of_B + profit_share_of_C - 375000, profit_share_of_C - 150000], [months_after_B_joined])\nans = solution[months_after_B_joined]", "\nA = 40000\nB = 60000\nC = 120000\ntotal_profit = 375000\nC_profit = 150000\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nsolution = solve_it((A + B + C) * months_after_B_joined / 12 - C_profit, months_after_B_joined)\nans = solution[months_after_B_joined]", "\nA = 40000\nB = 60000\nC = 120000\ntotal_profit = 375000\nC_share = 150000\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nsolution = solve_it(A * 2 / 12 + B * (2 + months_after_B_joined) / 12 + C * (2 + months_after_B_joined + months_after_B_joined) / 12 - total_profit, months_after_B_joined)\nans = solution[months_after_B_joined]", "\nmonths_after_b_joined = Symbol('months_after_b_joined', positive=True)\nprofit = 375000\na_share = 40000 / (40000 + 60000) * profit\nb_share = 60000 / (40000 + 60000) * profit\nc_share = profit - a_share - b_share\nsolution = solve_it(c_share - 150000, months_after_b_joined)\nans = solution[months_after_b_joined]", "\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nprofit_after_A_joined = 40000 * 12\nprofit_after_B_joined = 60000 * (12 - months_after_B_joined)\nprofit_after_C_joined = 120000 * (12 - months_after_B_joined - months_after_B_joined)\ntotal_profit = profit_after_A_joined + profit_after_B_joined + profit_after_C_joined\nsolution = solve_it(total_profit - 375000, months_after_B_joined)\nans = solution[months_after_B_joined]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nC = Symbol('C', positive=True)\nmonths = Symbol('months', positive=True)\nprofit = 375000\nsolution = solve_it([A + B * (2 + months) + C * (2 + months + months) - profit, C - 150], [months, C])\nans = solution[months]", "\nA_investment = 40000\nB_investment = 60000\nC_investment = 120000\ntotal_investment = A_investment + B_investment + C_investment\nC_share = 150000\ntime_after_B_joined = Symbol('time_after_B_joined', positive=True)\nsolution = solve_it(C_investment * time_after_B_joined + B_investment * (time_after_B_joined + 2) + A_investment * (time_after_B_joined + 2 + time_after_B_joined) - total_investment * (time_after_B_joined + 2 + time_after_B_joined) - C_share, time_after_B_joined)\nans = solution[time_after_B_joined]", "\nmonths = Symbol('months', positive=True)\nprofit_of_A = 40000\nprofit_of_B = 60000\nprofit_of_C = 120000\ntotal_profit = 375000\nprofit_of_C_after_months = profit_of_A + profit_of_B + profit_of_C + months * (profit_of_A + profit_of_B + profit_of_C) / 12\nsolution = solve_it(profit_of_C_after_months - total_profit * profit_of_C / (profit_of_A + profit_of_B + profit_of_C) - 150000, months)\nans = solution[months]", "\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nA_investment = 40000\nB_investment = 60000\nC_investment = 120000\ntotal_investment = A_investment + B_investment + C_investment\ntotal_profit = 375000\nC_share = 150000\nsolution = solve_it([total_investment * months_after_B_joined - total_profit, C_investment * months_after_B_joined - C_share], [months_after_B_joined])\nans = solution[months_after_B_joined]", "\nA = 40000\nB = 60000\nC = 120000\ntotal_profit = 375000\nC_share = 150000\nmonths = Symbol('months', positive=True)\nsolution = solve_it(A + B + C + months * (total_profit - C_share) - total_profit, months)\nans = solution[months]", "\nmonths_after_b_joined = Symbol('months_after_b_joined', positive=True)\ntotal_investment = 40000 + 60000 + 120000 * (1 + months_after_b_joined / 12)\nprofit_per_month = 375000 / 12\nprofit_of_c = profit_per_month * (1 + months_after_b_joined / 12)\nsolution = solve_it(total_investment * profit_of_c - 150000, months_after_b_joined)\nans = solution[months_after_b_joined]", "\nA_investment = 40000\nB_investment = 60000\nC_investment = 120000\ntotal_investment = A_investment + B_investment + C_investment\nC_share = 150000\nmonths = Symbol('months', positive=True)\nsolution = solve_it(C_investment / total_investment * (months + 2) - C_share / total_investment, months)\nans = solution[months]", "\nA = 40000\nB = 60000\nC = 120000\ntotal_profit = 375000\nC_share = 150000\nmonths = Symbol('months', positive=True)\nmonths_after_B_joined = months + 2\nsolution = solve_it([A * months + B * months_after_B_joined + C * (12 - months_after_B_joined) - total_profit, A * months + B * months_after_B_joined + C * (12 - months_after_B_joined) - C_share], [months])\nans = solution[months]", "\nA = 40000\nB = 60000\nC = 120000\nC_share = 150000\ntotal_profit = 375000\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nsolution = solve_it(C_share / total_profit - C / (A + B + C + months_after_B_joined * (A + B + C)), months_after_B_joined)\nans = solution[months_after_B_joined]", "\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nA_investment = 40000\nB_investment = 60000\nC_investment = 120000\ntotal_investment = A_investment + B_investment + C_investment\ntotal_profit = 375000\nC_share = 150000\nsolution = solve_it([total_investment * months_after_B_joined - B_investment * months_after_B_joined, total_investment * months_after_B_joined - C_investment * months_after_B_joined, total_profit * C_investment - C_share * total_investment], [months_after_B_joined])\nans = solution[months_after_B_joined]", "\nA = 40000\nB = 60000\nC = 120000\ntotal_profit = 375000\nC_share = 150000\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nsolution = solve_it(A * 2 / 100 + B * months_after_B_joined / 100 + C * (12 + months_after_B_joined) / 100 - total_profit, months_after_B_joined)\nans = solution[months_after_B_joined]", "\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nprofit_before_B_joined = 40000 * 2 / 12\nprofit_after_B_joined = (40000 + 60000) * (2 + months_after_B_joined) / 12\nprofit_after_C_joined = (40000 + 60000 + 120000) * (2 + months_after_B_joined + months_after_B_joined) / 12\nsolution = solve_it([profit_after_C_joined - 375000, profit_after_C_joined - profit_after_B_joined - 150000], [months_after_B_joined])\nans = solution[months_after_B_joined]", "\nmonths_after_b_joined = Symbol('months_after_b_joined', positive=True)\nprofit_per_month = 375000 / (12 + months_after_b_joined)\nc_profit = 150000\nb_profit = profit_per_month * months_after_b_joined\na_profit = profit_per_month * 12\nsolution = solve_it([c_profit - profit_per_month * (12 + months_after_b_joined), b_profit - profit_per_month * months_after_b_joined, a_profit - profit_per_month * 12], [months_after_b_joined])\nans = solution[months_after_b_joined]", "\nmonths_after_b_joined = Symbol('months_after_b_joined', positive=True)\ntotal_investment = 40000 + 60000 + 120000\ntotal_profit = 375000\nc_share = 150000\nb_share = (total_profit - c_share) / 2\na_share = total_profit - c_share - b_share\nsolution = solve_it(a_share / total_investment - b_share / total_investment - c_share / total_investment, months_after_b_joined)\nans = solution[months_after_b_joined]", "\nmonths_after_b_joined = Symbol('months_after_b_joined', positive=True)\nprofit_per_month_before_b_joined = 40000 / 2\nprofit_per_month_after_b_joined = (40000 + 60000) / (2 + months_after_b_joined)\nprofit_per_month_after_c_joined = (40000 + 60000 + 120000) / (2 + months_after_b_joined + months_after_b_joined)\nsolution = solve_it([profit_per_month_after_c_joined - profit_per_month_after_b_joined - profit_per_month_before_b_joined, months_after_b_joined * profit_per_month_after_c_joined - 150000], [months_after_b_joined, profit_per_month_after_c_joined])\nans = solution[months_after_b_joined]", "\nA_investment = 40000\nB_investment = 60000\nC_investment = 120000\nC_profit = 150000\ntotal_investment = A_investment + B_investment + C_investment\ntotal_profit = 375000\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\nC_profit_after_B_joined = C_investment * (1 + months_after_B_joined / 12) / (total_investment * (1 + months_after_B_joined / 12)) * total_profit\nsolution = solve_it(C_profit_after_B_joined - C_profit, months_after_B_joined)\nans = solution[months_after_B_joined]", "\ntime_after_B_joined = Symbol('time_after_B_joined', positive=True)\nprofit_after_B_joined = Symbol('profit_after_B_joined', positive=True)\nprofit_after_C_joined = Symbol('profit_after_C_joined', positive=True)\ntotal_profit = 375000\nC_share = 150000\nsolution = solve_it([profit_after_B_joined - profit_after_C_joined - total_profit, profit_after_C_joined - C_share], [profit_after_B_joined, time_after_B_joined])\nans = solution[time_after_B_joined]", "\nmonths_after_b_joined = Symbol('months_after_b_joined', positive=True)\ntotal_investment = 40000 + 60000 + 120000\ntotal_profit = 375000\nprofit_for_c = 150000\nprofit_for_a_and_b = total_profit - profit_for_c\nprofit_for_a = profit_for_a_and_b * 40000 / total_investment\nprofit_for_b = profit_for_a_and_b * 60000 / total_investment\nprofit_for_c = profit_for_c * 120000 / total_investment\nsolution = solve_it([profit_for_a * 2 + profit_for_b * (2 + months_after_b_joined) + profit_for_c * (2 + months_after_b_joined) - total_profit], [months_after_b_joined])\nans = solution[months_after_b_joined]", "\nmonths = Symbol('months', positive=True)\nprofit = 375000\nprofit_share_of_C = 150000\nprofit_share_of_A = profit * (40000 / (40000 + 60000 + 120000))\nprofit_share_of_B = profit * (60000 / (40000 + 60000 + 120000))\nprofit_share_of_C_after_B_joining = profit_share_of_C - profit_share_of_B\nprofit_share_of_A_after_B_joining = profit_share_of_A - profit_share_of_B\nprofit_share_of_C_after_months = profit_share_of_C_after_B_joining * (1 + months / 12)\nprofit_share_of_A_after_months = profit_share_of_A_after_B_joining * (1 + months / 12)\nsolution = solve_it(profit_share_of_C_after_months - profit_share_of_A_after_months - profit_share_of_C_after_B_joining, months)\nans =", "\nA = 40000\nB = 60000\nC = 120000\nC_share = 150000\ntotal_profit = 375000\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\ntotal_investment = A + B + C\nC_share_after_B_joined = (C * (months_after_B_joined + 2) + B * (months_after_B_joined + 2) + A * 2) / (months_after_B_joined + 2)\nsolution = solve_it(C_share_after_B_joined - C_share, months_after_B_joined)\nans = solution[months_after_B_joined]", "\nA_investment = 40000\nB_investment = 60000\nC_investment = 120000\nA_share = A_investment / (A_investment + B_investment + C_investment)\nB_share = B_investment / (A_investment + B_investment + C_investment)\nC_share = C_investment / (A_investment + B_investment + C_investment)\nC_profit = 375000 * C_share\nC_profit_per_month = C_profit / 12\nC_profit_per_month_after_B_joined = C_profit_per_month / B_share\nmonths_after_B_joined = C_profit_per_month_after_B_joined / C_profit_per_month\nans = months_after_B_joined", "\nmonths_after_B_joined = Symbol('months_after_B_joined', positive=True)\ntotal_profit = 375000\nC_profit = 150000\nA_profit = (total_profit - C_profit) * (1 / 3)\nB_profit = (total_profit - C_profit) * (1 / 3)\nC_profit = C_profit - A_profit - B_profit\nsolution = solve_it(C_profit - (120000 + 60000) * months_after_B_joined / 12, months_after_B_joined)\nans = solution[months_after_B_joined]", "\nA_investment = 40000\nB_investment = 60000\nC_investment = 120000\ntotal_investment = A_investment + B_investment + C_investment\nC_share = 150000\nC_share_ratio = C_share / total_investment\nB_share_ratio = 1 / 3\nA_share_ratio = 1 - B_share_ratio - C_share_ratio\nB_share = B_share_ratio * total_investment\nB_share_after_2_months = B_share / 2\nC_share_after_2_months = C_share_ratio * (total_investment - B_share_after_2_months)\nA_share_after_2_months = A_share_ratio * (total_investment - B_share_after_2_months)\nans = (B_share_after_2_months + C_share_after_2_months) / (A_share_after_2_months + B_share_after_2_months)"], "generated_prediction": "None", "options": ["A)2 months", "B)4 months", "C)23 months", "D)24 months", "E)84 months"], "answer": "B", "prediction": "None"}
{"question": "A paper is in a square form whose one side is 20 cm. Two semi circles are drawn on its opposites as diameters. If these semi circles are cut down what is the area of the remaining paper?", "generated": ["\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 15\npermimeter = 16\nsolution = solve_it([width * height - area, 2 * (width + height) - permimeter], [width, height])\nans = (solution[width], solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 15\npermimeter = 16\nsolution = solve_it([width * height - area, 2 * (width + height) - permimeter], [width, height])\nans = (solution[width], solution[height])", "\nradius = 10\narea_of_semi_circle = math.pi * radius ** 2 / 2\narea_of_square = 20 ** 2\nans = area_of_square - 2 * area_of_semi_circle", "\nradius = 10\narea_of_semi_circle = math.pi * radius ** 2 / 2\narea_of_square = 20 ** 2\nans = area_of_square - 2 * area_of_semi_circle", "\nradius = Symbol('radius', positive=True)\nsolution = solve_it(math.pi * radius ** 2 - 20 ** 2 / 2, radius)\nans = solution[radius]", "\nside = 20\nradius = side / 2\narea_of_semi_circles = math.pi * radius ** 2\narea_of_square = side ** 2\nans = area_of_square - 2 * area_of_semi_circles", "\nside = 20\nradius = side / 2\narea_of_semi_circles = math.pi * radius ** 2\narea_of_square = side ** 2\nans = area_of_square - 2 * area_of_semi_circles", "\nradius = Symbol('radius', positive=True)\nsolution = solve_it(math.pi * radius ** 2 - (20 ** 2 / 2 - math.pi * radius ** 2), radius)\nans = solution[radius]", "\nradius = Symbol('radius', positive=True)\narea_of_square = 20 ** 2\narea_of_semicircle = math.pi * radius ** 2 / 2\nsolution = solve_it(area_of_square - 4 * area_of_semicircle - 8.75, radius)\nans = solution[radius]", "\nradius = Symbol('radius', positive=True)\narea_of_square = 20 ** 2\narea_of_semicircle = math.pi * radius ** 2 / 2\nsolution = solve_it(area_of_square - 4 * area_of_semicircle - 8.75, radius)\nans = solution[radius]", "\nradius = Symbol('radius', positive=True)\nsolution = solve_it(math.pi * radius ** 2 - (20 ** 2 - 2 * math.pi * radius ** 2), radius)\nans = solution[radius]", "\nradius = Symbol('radius', positive=True)\nsolution = solve_it(math.pi * radius ** 2 - 20 ** 2 / 2, radius)\nans = math.pi * solution[radius] ** 2 / 4", "\nradius = Symbol('radius', positive=True)\nsolution = solve_it(radius ** 2 - (20 / 2) ** 2, radius)\nans = math.pi * solution[radius] ** 2", "\nside = 20\narea_of_square = side ** 2\narea_of_semi_circle = math.pi * (side / 2) ** 2 / 2\narea_of_remaining_paper = area_of_square - 2 * area_of_semi_circle\nans = area_of_remaining_paper", "\nradius = Symbol('radius', positive=True)\narea_of_square = 20 ** 2\narea_of_semi_circle = math.pi * radius ** 2 / 2\nsolution = solve_it(area_of_square - 4 * area_of_semi_circle, radius)\nans = solution[radius]", "\nradius = Symbol('radius', positive=True)\narea_of_paper = 20 ** 2\narea_of_semi_circle = math.pi * radius ** 2 / 2\nsolution = solve_it(area_of_paper - 4 * area_of_semi_circle, radius)\nans = solution[radius]", "\nside = 20\nradius = side / 2\narea = side ** 2 - 2 * math.pi * radius ** 2 / 2\nans = area", "\nradius = Symbol('radius', positive=True)\narea_of_square = 20 ** 2\narea_of_circle = math.pi * radius ** 2\nsolution = solve_it(area_of_square - 4 * area_of_circle - area_of_square / 2, radius)\nans = solution[radius]", "\nradius = Symbol('radius', positive=True)\narea_of_semi_circle = math.pi * radius ** 2 / 2\narea_of_square = radius * 2\nsolution = solve_it(area_of_semi_circle * 2 - area_of_square, radius)\nans = solution[radius]", "\nradius = Symbol('radius', positive=True)\narea_of_semi_circle = math.pi * radius ** 2 / 2\narea_of_square = radius * 2\nremaining_area = area_of_square - area_of_semi_circle\nsolution = solve_it(remaining_area - 8.75, radius)\nans = solution[radius]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 20 ** 2\nsolution = solve_it([width * height - area, 2 * (width + height) - 20], [width, height])\nans = solution[width] * solution[height] - math.pi * (solution[width] / 2) ** 2", "\nradius = Symbol('radius', positive=True)\narea_of_square = 20 ** 2\narea_of_semi_circle = math.pi * radius ** 2 / 2\nsolution = solve_it(area_of_square - 4 * area_of_semi_circle, radius)\nans = area_of_square - 4 * area_of_semi_circle.subs(radius, solution[radius])", "\nradius = Symbol('radius', positive=True)\nside = 20\nsolution = solve_it(side - 2 * radius, radius)\nans = side ** 2 - math.pi * solution[radius] ** 2", "\nradius = Symbol('radius', positive=True)\nsolution = solve_it(math.pi * radius ** 2 - (20 * 20 - 2 * radius ** 2), radius)\nans = solution[radius]", "\nside_length = 20\narea_of_square = side_length ** 2\narea_of_semi_circle = math.pi * (side_length / 2) ** 2 / 2\narea_of_remaining_paper = area_of_square - 2 * area_of_semi_circle\nans = area_of_remaining_paper", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 20 ** 2 - math.pi * (20 ** 2 / 4)\nsolution = solve_it(width * height - area, width)\nans = solution[width]", "\nradius = Symbol('radius', positive=True)\nsolution = solve_it(radius * math.pi - 20, radius)\nans = (solution[radius] ** 2 * math.pi) / 2", "\nradius = Symbol('radius', positive=True)\narea_of_paper = radius ** 2\narea_of_semi_circle = math.pi * radius ** 2 / 2\narea_of_remaining_paper = area_of_paper - 2 * area_of_semi_circle\nsolution = solve_it(area_of_remaining_paper - 8.75, radius)\nans = solution[radius]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 20 ** 2\narea_of_semicircles = math.pi * (width / 2) ** 2\nsolution = solve_it(area - area_of_semicircles - width * height, [width, height])\nans = solution[width] * solution[height]", "\nradius = Symbol('radius', positive=True)\nside = 20\nsolution = solve_it(side - 2 * radius, radius)\nradius = solution[radius]\narea_of_square = side ** 2\narea_of_circle = math.pi * radius ** 2\narea_of_remaining_paper = area_of_square - 2 * area_of_circle\nans = area_of_remaining_paper"], "generated_prediction": "85.84073464102067", "options": ["A)8.75", "B)8.79", "C)8.75", "D)8.71", "E)8.72"], "answer": "C", "prediction": "B"}
{"question": "An athlete runs M miles in 4 hours, then rides a bike N miles in the same number of hours. Which of the following represents the average speed, in miles per hour, for these two activities combined?", "generated": ["\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it((M + N) / 8, M)\nans = solution[M]", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it((M + N) / 4, M)\nans = solution[M]", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it((M + N) / 4, M)\nans = solution[M]", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\ntotal_distance = M + N\ntotal_time = 4\nans = total_distance / total_time", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\ntotal_distance = M + N\ntotal_time = 4\nans = total_distance / total_time", "\nM = Symbol('M')\nN = Symbol('N')\ntotal_distance = M + N\ntotal_time = 4\nans = total_distance / total_time", "\nM = Symbol('M')\nN = Symbol('N')\ntotal_distance = M + N\ntotal_time = 4\nans = total_distance / total_time", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nspeed = (M + N) / 8\nans = speed", "\nM = Symbol('M')\nN = Symbol('N')\nsolution = solve_it(M / 4 - N / 4, M - N)\nans = solution[M] / 4", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it(M / 4 - N / 4, M - N)\nans = solution[M] / 4", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it(M / 4 - N / 4, M - N)\nans = solution[M] / 4", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it(M / 4 - N / 4, M - N)\nans = solution[M] / 4", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it(M / 4 + N / 4 - 1, M)\nans = solution[M] + N", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it(M / 4 + N / 4 - 1, M)\nans = solution[M] + N", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it(M / 4 + N / 4 - 1, M)\nans = solution[M] + N", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it((M + N) / 4 - M / 4, N)\nans = solution[N]", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it(M / 4 - N / 4, M)\nans = solution[M] + N / 4", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nsolution = solve_it(M / 4 - N / 4, M)\nans = solution[M] + N / 4", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nspeed = Symbol('speed', positive=True)\nsolution = solve_it([speed - M / 4, speed - N / 4], [speed, M, N])\nans = solution[speed]", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nspeed = Symbol('speed', positive=True)\nsolution = solve_it([speed - M / 4, speed - N / 4], [speed, M, N])\nans = solution[speed]", "\nM = Symbol('M')\nN = Symbol('N')\nsolution = solve_it(M / 4 - N / 4, M)\nans = solution[M] + solution[N] / 4", "\nM = Symbol('M')\nN = Symbol('N')\nans = (M + N) / 4", "\nM = Symbol('M')\nN = Symbol('N')\nans = (M + N) / 4", "\nM = Symbol('M')\nN = Symbol('N')\nans = (M + N) / 4", "\nM = Symbol('M')\nN = Symbol('N')\nrunning_speed = M / 4\nbiking_speed = N / 4\nans = (M + N) / 8", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\naverage_speed = (M + N) / 8\nans = average_speed", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nspeed_running = M / 4\nspeed_cycling = N / 4\nans = (M + N) / 8", "\nM = Symbol('M')\nN = Symbol('N')\nsolution = solve_it(M / 4 - N / 4, M)\nans = solution[M] / 4", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nspeed_on_foot = M / 4\nspeed_on_bike = N / 4\nans = (M + N) / (4 + 4)", "\nM = Symbol('M', positive=True)\nN = Symbol('N', positive=True)\nspeed = Symbol('speed', positive=True)\nsolution = solve_it([speed - M / 4, speed - N / 4], [speed])\nans = solution[speed]"], "generated_prediction": "M/8 + N/8", "options": ["A)M + N / 8", "B)2M + N / 8", "C)M + N / 4", "D)M + 3N / 8", "E)M + N / 5"], "answer": "A", "prediction": "A"}
{"question": "8 man work for 6 days to complete a work. How many men are required to complete same work in 1/2 day.", "generated": ["\nmen = 8\ndays = 6\nans = men * days / 0.5", "\nmen = 8\ndays = 6\nans = men * days / 0.5", "\nmen = 8\ndays = 6\nmen_per_day = men / days\nmen_per_half_day = men_per_day * 2\nans = men_per_half_day", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(8 * 6 - men * days, men)\nans = solution[men] / 0.5", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(8 * 6 - men * days, men)\nans = solution[men] / 0.5", "\nnum_men = 8\nnum_days = 6\nnum_men_per_day = num_men / num_days\nnum_men_per_half_day = num_men_per_day * 2\nans = num_men_per_half_day", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nwork_done = 8 * 6\nsolution = solve_it(men * days - work_done, men)\nans = solution[men] / 0.5", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nwork_done = 8 * 6\nsolution = solve_it(men * days - work_done, men)\nans = solution[men] / 0.5", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nwork_done = 8 * 6\nsolution = solve_it(men * days - work_done, men)\nans = solution[men] / 0.5", "\nnum_men = 8\nnum_days = 6\nnum_men_required = num_men * num_days / 0.5\nans = math.ceil(num_men_required)", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(8 * 6 - men * days, men)\nans = solution[men] / (1 / 2)", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(8 * 6 - men * days, men)\nans = solution[men] / (1 / 2)", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nwork_completed = 8 * 6\nsolution = solve_it(men * days - work_completed, men)\nans = solution[men] / 0.5", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nwork_completed = 8 * 6\nsolution = solve_it(men * days - work_completed, men)\nans = solution[men] / 0.5", "\nnum_men = 8\nnum_days = 6\nnum_men_for_half_day = num_men * num_days / 0.5\nans = num_men_for_half_day", "\nnum_men_required = 8 * 6 / 0.5\nans = math.ceil(num_men_required)", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nwork_done = 8 * 6\nsolution = solve_it(work_done / (men * days) - 1, men)\nans = solution[men]", "\nmen = Symbol('men', positive=True)\nwork_done_in_1_day = 8 * 6\nwork_done_in_half_day = men * 0.5\nsolution = solve_it(work_done_in_1_day - work_done_in_half_day, men)\nans = solution[men]", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(8 * 6 - men * days, men)\nans = solution[men]", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nwork_done = 8 * 6\nsolution = solve_it(men * days - work_done, men)\nans = solution[men] / 2", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(8 * 6 - men * days, men)\nans = solution[men]", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(8 * 6 - men * days, men)\nans = solution[men]", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nsolution = solve_it(men * days - 8 * 6, men)\nans = solution[men]", "\nmen_per_day = 8\ndays = 6\nmen_per_half_day = Symbol('men_per_half_day', positive=True)\nsolution = solve_it(men_per_day * days - men_per_half_day * 2, men_per_half_day)\nans = solution[men_per_half_day]", "\nmen_per_day = 8\ndays_required = 6\nmen_required = men_per_day * days_required\nans = men_required / 1.5", "\nmen_required = Symbol('men_required', positive=True)\ndays_required = Symbol('days_required', positive=True)\nsolution = solve_it(8 * 6 - men_required * days_required, men_required)\nans = solution[men_required]", "\nmen = Symbol('men', positive=True)\ndays = Symbol('days', positive=True)\nwork_done = 8 * 6\nsolution = solve_it(men * days - work_done, men)\nans = solution[men]", "\nmen = Symbol('men', positive=True)\nwork_duration = Symbol('work_duration', positive=True)\nsolution = solve_it(8 * 6 * work_duration - men * 1/2, men)\nans = solution[men]", "\nnum_men = Symbol('num_men', positive=True)\ndays_to_complete = 6\nnum_men_to_complete_in_one_day = 8\nsolution = solve_it(num_men / num_men_to_complete_in_one_day - days_to_complete, num_men)\nans = solution[num_men]", "\nnum_men = Symbol('num_men', positive=True)\nnum_days = Symbol('num_days', positive=True)\nnum_men_required = 8\nnum_days_required = 6\nsolution = solve_it(num_men * num_days - num_men_required * num_days_required, num_men)\nans = solution[num_men]"], "generated_prediction": "96.0/days", "options": ["A)93 men", "B)94 men", "C)95 men", "D)96 men", "E)97 men"], "answer": "D", "prediction": "D"}
{"question": "64 boys and 40 girls form a group for social work. During their membership drive, the same number of boys and girls joined the group. How many members does the group have now, if the ratio of boys to girls is 4:3?", "generated": ["\nnum_boys = 64\nnum_girls = 40\nnum_new_members = num_boys\nnum_boys = num_boys + num_new_members\nnum_girls = num_girls + num_new_members\nans = num_boys + num_girls", "\nboys = 64\ngirls = 40\ntotal_members = boys + girls\nnew_boys = total_members / 4\nnew_girls = total_members / 3\nans = new_boys + new_girls", "\nboys = 64\ngirls = 40\ntotal_members = boys + girls\nnew_boys = total_members / 4\nnew_girls = total_members / 3\nans = new_boys + new_girls", "\nboys = 64\ngirls = 40\nmembers_after_drive = boys + girls\nratio = 4 / 3\nans = members_after_drive * ratio", "\nboys = 64\ngirls = 40\nmembers = boys + girls\nmembers_after_drive = members * (4 / 3)\nans = members_after_drive", "\nboys = 64\ngirls = 40\nnum_new_members = (boys + girls) / 2\ntotal_members = boys + girls + num_new_members\nans = total_members", "\nboys = 64\ngirls = 40\ntotal_members = boys + girls\nnew_boys = total_members / 7\nnew_girls = total_members / 10\nans = total_members + new_boys + new_girls", "\nnum_boys = 64\nnum_girls = 40\ntotal_members = num_boys + num_girls\nnew_num_boys = total_members * 4 / 7\nnew_num_girls = total_members * 3 / 7\nans = new_num_boys + new_num_girls", "\nnum_boys = 64\nnum_girls = 40\nnum_members = num_boys + num_girls\nnum_boys_after_drive = 4 * num_members / 7\nnum_girls_after_drive = 3 * num_members / 7\nans = num_members + num_boys_after_drive + num_girls_after_drive", "\nboys = Symbol('boys', positive=True)\ngirls = Symbol('girls', positive=True)\nsolution = solve_it([boys + girls - 104, 4 * boys - 3 * girls - 128], [boys, girls])\nans = solution[boys] + solution[girls]", "\nboys = 64\ngirls = 40\nnew_boys = Symbol('new_boys', positive=True)\nnew_girls = Symbol('new_girls', positive=True)\nsolution = solve_it([new_boys + new_girls - new_boys, new_boys - new_girls - new_girls], [new_boys, new_girls])\nans = boys + girls + solution[new_boys] + solution[new_girls]", "\nboys = Symbol('boys', positive=True)\ngirls = Symbol('girls', positive=True)\nsolution = solve_it([boys + girls - 104, 4 * boys - 3 * girls - 64], [boys, girls])\nans = solution[boys] + solution[girls]", "\nboys = 64\ngirls = 40\nnew_members = boys\ntotal_members = boys + girls + new_members\nans = total_members", "\nnum_boys = 64\nnum_girls = 40\nratio_boys_to_girls = 4 / 3\nnew_members = Symbol('new_members', positive=True)\nsolution = solve_it([num_boys + new_members - 4 * (num_girls + new_members), num_girls + new_members - 3 * (num_boys + new_members)], new_members)\nans = solution[new_members]", "\nboys = 64\ngirls = 40\nmembers = Symbol('members', positive=True)\nsolution = solve_it(members - boys - girls, members)\nmembers = solution[members]\nsolution = solve_it((4 * members - boys) / 3 - girls, members)\nans = solution[members]", "\nboys = 64\ngirls = 40\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it([boys + girls + num_members, 4 * (boys + num_members) - 3 * (girls + num_members)], [num_members])\nans = solution[num_members]", "\nnum_boys = 64\nnum_girls = 40\nnum_new_members = Symbol('num_new_members', positive=True)\nratio = 4 / 3\nsolution = solve_it([num_boys + num_new_members - num_girls - num_new_members, num_boys / num_girls - ratio], num_new_members)\nans = solution[num_new_members]", "\nboys = 64\ngirls = 40\ntotal_members = boys + girls\nnew_members = Symbol('new_members', positive=True)\nsolution = solve_it([(boys + new_members) / (girls + new_members) - 4 / 3, total_members + new_members - Symbol('total_members')], [new_members, Symbol('total_members')])\nans = solution[Symbol('total_members')]", "\nboys_in_group = 64\ngirls_in_group = 40\nmembers_in_group = boys_in_group + girls_in_group\nboys_in_group_after_membership_drive = 4 * members_in_group / 7\ngirls_in_group_after_membership_drive = 3 * members_in_group / 7\nmembers_in_group_after_membership_drive = boys_in_group_after_membership_drive + girls_in_group_after_membership_drive\nans = members_in_group_after_membership_drive", "\nboys = Symbol('boys', positive=True)\ngirls = Symbol('girls', positive=True)\nnew_boys = Symbol('new_boys', positive=True)\nnew_girls = Symbol('new_girls', positive=True)\ntotal_members = Symbol('total_members', positive=True)\nsolution = solve_it([boys + new_boys - 64, girls + new_girls - 40, new_boys - new_girls, total_members - (boys + girls + new_boys + new_girls), 4 * (boys + new_boys) - 3 * (girls + new_girls)], [boys, girls, new_boys, new_girls, total_members])\nans = solution[total_members]", "\nnum_boys = 64\nnum_girls = 40\ntotal_members = num_boys + num_girls\nnum_new_members = total_members / 2\nnum_new_boys = num_new_members / 4 * 4\nnum_new_girls = num_new_members / 3 * 3\nnew_total_members = total_members + num_new_members\nans = new_total_members", "\nnum_boys = 64\nnum_girls = 40\nnum_members = num_boys + num_girls\nratio_boys_to_girls = 4 / 3\nratio_girls_to_boys = 3 / 4\nnum_members_after_drive = num_members * (1 + ratio_girls_to_boys)\nans = num_members_after_drive", "\nnum_boys = 64\nnum_girls = 40\nnum_new_members = num_boys - num_girls\nnum_members = num_boys + num_girls + num_new_members\nnum_boys_after_new_members = num_boys + num_new_members\nnum_girls_after_new_members = num_girls + num_new_members\nans = num_members", "\nnum_boys = 64\nnum_girls = 40\ntotal_members = num_boys + num_girls\nnew_members = total_members / 2\nnew_num_boys = new_members * 4 / 7\nnew_num_girls = new_members * 3 / 7\nans = total_members + new_members", "\nnum_boys = 64\nnum_girls = 40\nnum_members = num_boys + num_girls\nnum_new_members = num_members\nnum_new_boys = num_new_members / 7\nnum_new_girls = num_new_members / 7\ntotal_members = num_members + num_new_members\nans = total_members", "\nboys = 64\ngirls = 40\nnew_members = Symbol('new_members', positive=True)\nsolution = solve_it([boys + new_members - 4 * (girls + new_members), girls + new_members - 3 * (boys + new_members)], new_members)\nans = boys + girls + solution[new_members]", "\nboys = 64\ngirls = 40\ntotal_members = boys + girls\nratio = 4 / 3\nnew_boys = boys + ratio * girls\nnew_girls = girls + ratio * girls\nnew_total_members = new_boys + new_girls\nans = new_total_members", "\nboys = 64\ngirls = 40\ntotal_members = boys + girls\nmembers_joined = Symbol('members_joined', positive=True)\ntotal_members_after_joining = total_members + members_joined\nboys_after_joining = boys + members_joined\ngirls_after_joining = girls + members_joined\nsolution = solve_it([total_members_after_joining * 4 - boys_after_joining * 3, total_members_after_joining * 3 - girls_after_joining * 4], [members_joined])\nans = solution[members_joined] + total_members", "\nnum_boys = 64\nnum_girls = 40\nnum_members = num_boys + num_girls\nnum_new_members = num_members / 2\nnum_new_boys = num_new_members / 4 * 4\nnum_new_girls = num_new_members / 3 * 3\nans = num_members + num_new_members", "\nboys = 64\ngirls = 40\nmembers_after_drive = boys + girls\nratio_after_drive = 4 / 3\nnew_girls = members_after_drive * ratio_after_drive / (1 + ratio_after_drive)\nnew_boys = members_after_drive - new_girls\nans = new_boys + new_girls"], "generated_prediction": "104.0", "options": ["A)277", "B)288", "C)200", "D)277", "E)168"], "answer": "E", "prediction": "B"}
{"question": "A cyclist travels at 12 miles per hour. How many minutes will it take to travel 48 miles?", "generated": ["\nspeed = 12\ndistance = 48\ntime = distance / speed\nans = time * 60", "\nspeed = 12\ndistance = 48\ntime = distance / speed\nans = time * 60", "\nspeed = 12\ndistance = 48\ntime = distance / speed\nans = time * 60", "\nspeed = 12\ndistance = 48\ntime = distance / speed\nans = time * 60", "\nspeed = 12\ndistance = 48\ntime = distance / speed\nans = time * 60", "\nspeed = 12\ndistance = 48\ntime = distance / speed\nans = time * 60", "\nspeed = 12\ndistance = 48\ntime = distance / speed\nans = time * 60", "\nspeed = 12\ndistance = 48\ntime = distance / speed\nans = time * 60", "\nspeed = 12\ndistance = 48\ntime_in_minutes = distance / speed * 60\nans = time_in_minutes", "\nspeed = 12\ndistance = 48\ntime_in_minutes = distance / speed * 60\nans = time_in_minutes", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\nmiles = 48\nans = miles / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60", "\nspeed = 12\ndistance = 48\nans = distance / speed * 60"], "generated_prediction": "240.0", "options": ["A)1", "B)240", "C)30", "D)60", "E)120"], "answer": "B", "prediction": "B"}
{"question": "Kevin drove from A to B at a constant speed of 70 mph. Once he reached B, he turned right around with pause, and returned to A at a constant speed of 90 mph. Exactly 3 hours before the end of his trip, he was still approaching B, only 70 miles away from it. What is the distance between A and B?", "generated": ["\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_to_A = 90\ntime_to_B = distance / speed_to_B\ntime_to_A = distance / speed_to_A\nsolution = solve_it(time_to_B + time_to_A - 3, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_1 = 70\nspeed_2 = 90\ntime_1 = distance / speed_1\ntime_2 = distance / speed_2\nsolution = solve_it(time_1 + time_2 - 3, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntotal_time = time_to_B + time_from_B\nsolution = solve_it(total_time - 3, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\nsolution = solve_it(time_to_B + time_from_B - 3 - distance / speed_to_B, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ntime_to_reach_B = distance / 70\ntime_to_reach_A = distance / 90\ntotal_time = time_to_reach_B + time_to_reach_A\nsolution = solve_it(total_time - 3, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ntime = 3\nspeed_to_B = 70\nspeed_from_B = 90\nsolution = solve_it([distance / speed_to_B + distance / speed_from_B - time, distance - 70], distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ntime_to_reach_B = distance / 70\ntime_to_return_to_A = distance / 90\ntotal_time = time_to_reach_B + time_to_return_to_A\nsolution = solve_it(total_time - 3, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntotal_time = time_to_B + time_from_B\ntime_left = total_time - 3\ndistance_left = time_left * speed_from_B\nsolution = solve_it(distance_left - 70, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ntime_to_reach_b = distance / 70\ntime_to_return_to_a = distance / 90\ntotal_time = time_to_reach_b + time_to_return_to_a\nsolution = solve_it(total_time - 3, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_to_A = 90\ntime_to_B = distance / speed_to_B\ntime_to_A = distance / speed_to_A\ntotal_time = time_to_B + time_to_A\nsolution = solve_it(total_time - 3 - distance / 70, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntime_left = 3\nsolution = solve_it([time_to_B + time_from_B - time_left, speed_to_B * time_to_B - 70], [distance, time_to_B])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntime_in_total = time_to_B + time_from_B\nsolution = solve_it(time_in_total - 3, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_1 = 70\nspeed_2 = 90\ntime_1 = distance / speed_1\ntime_2 = distance / speed_2\ntotal_time = time_1 + time_2\ntime_left = total_time - 3\ndistance_left = speed_2 * time_left\nsolution = solve_it(distance_left - 70, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntime_elapsed = time_to_B + time_from_B\ntime_remaining = time_elapsed - 3\ndistance_remaining = time_remaining * speed_from_B\nsolution = solve_it(distance_remaining - 70, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ntime_to_reach_B = distance / 70\ntime_to_return_to_A = distance / 90\ntime_to_reach_B_from_A = time_to_reach_B + time_to_return_to_A\nsolution = solve_it(time_to_reach_B_from_A - 3, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_from_A_to_B = 70\nspeed_from_B_to_A = 90\ntime_from_A_to_B = distance / speed_from_A_to_B\ntime_from_B_to_A = distance / speed_from_B_to_A\ntotal_time = time_from_A_to_B + time_from_B_to_A\ntime_left = total_time - 3\ndistance_from_B = speed_from_B_to_A * time_left\nsolution = solve_it(distance_from_B - 70, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_to_A = 90\ntime_to_B = distance / speed_to_B\ntime_to_A = distance / speed_to_A\ntime_to_B_from_A = 3\nsolution = solve_it(time_to_B + time_to_A - time_to_B_from_A - 3, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntime_to_B_from_A = 3\nsolution = solve_it([time_to_B + time_from_B - time_to_B_from_A, distance - 70], [distance, time_to_B])\nans = solution[distance]", "\ndistance_between_a_and_b = Symbol('distance_between_a_and_b', positive=True)\ntime_taken_to_reach_b = Symbol('time_taken_to_reach_b', positive=True)\ntime_taken_to_return_to_a = Symbol('time_taken_to_return_to_a', positive=True)\nsolution = solve_it([distance_between_a_and_b / 70 - time_taken_to_reach_b, distance_between_a_and_b / 90 - time_taken_to_return_to_a, 3 - time_taken_to_reach_b - time_taken_to_return_to_a], [distance_between_a_and_b, time_taken_to_reach_b, time_taken_to_return_to_a])\nans = solution[distance_between_a_and_b]", "\ndistance = Symbol('distance', positive=True)\nspeed_1 = 70\nspeed_2 = 90\ntime_1 = distance / speed_1\ntime_2 = distance / speed_2\nsolution = solve_it([time_1 + time_2 - 3, distance - speed_1 * 3 - 70], [distance, time_1, time_2])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntime_elapsed = time_to_B + time_from_B\ntime_remaining = 3\nsolution = solve_it([time_elapsed - time_remaining, distance - 70], [distance, time_elapsed])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ntime_to_reach_B = distance / 70\ntime_to_return_to_A = distance / 90\ntotal_time = time_to_reach_B + time_to_return_to_A\ntime_to_reach_B_from_A = total_time - 3\nsolution = solve_it(time_to_reach_B - time_to_reach_B_from_A, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntotal_time = time_to_B + time_from_B\nsolution = solve_it([total_time - 3, distance - 70], [distance, total_time])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntime_at_B = time_to_B + time_from_B\ntime_at_70_miles_from_B = time_at_B - 3\nsolution = solve_it([time_to_B - time_from_B, time_at_70_miles_from_B - (distance - 70) / speed_to_B], [distance, time_to_B])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntime_elapsed = 3\ndistance_from_B = 70\nsolution = solve_it([time_to_B + time_from_B - time_elapsed, distance - distance_from_B], [distance, time_to_B])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_to_A = 90\ntime_to_B = distance / speed_to_B\ntime_to_A = distance / speed_to_A\ntime_to_B_from_A = 3\nsolution = solve_it([time_to_B + time_to_A - time_to_B_from_A, speed_to_A * time_to_A - 70], [distance, time_to_A])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_to_A = 90\ntime_to_B = distance / speed_to_B\ntime_to_A = distance / speed_to_A\ntime_to_B_from_A = 3\nsolution = solve_it([time_to_B + time_to_A - time_to_B_from_A, 70 - distance], [distance])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntime_to_B_from_A = 3\nsolution = solve_it([time_to_B - time_from_B, time_to_B_from_A - time_to_B], [distance, time_to_B])\nans = solution[distance]", "\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\ntime_to_reach_B = distance_between_A_and_B / 70\ntime_to_reach_A = distance_between_A_and_B / 90\ntime_taken_to_reach_B_from_A = time_to_reach_B + time_to_reach_A\ntime_taken_to_reach_A_from_B = time_to_reach_A + time_to_reach_B\nsolution = solve_it([time_taken_to_reach_B_from_A - 3, time_taken_to_reach_A_from_B - 3], distance_between_A_and_B)\nans = solution[distance_between_A_and_B]", "\ndistance = Symbol('distance', positive=True)\nspeed_to_B = 70\nspeed_from_B = 90\ntime_to_B = distance / speed_to_B\ntime_from_B = distance / speed_from_B\ntime_to_B_from_A = time_to_B + time_from_B\ntime_to_B_from_A_in_hours = time_to_B_from_A * 60\ntime_to_B_from_A_in_hours_with_3_hours_delay = time_to_B_from_A_in_hours - 3\ndistance_to_B_from_A = time_to_B_from_A_in_hours_with_3_hours_delay * speed_to_B\nsolution = solve_it(distance_to_B_from_A - 70, distance)\nans = solution[distance]"], "generated_prediction": "118.12", "options": ["A)180", "B)90", "C)270", "D)360", "E)None of the above"], "answer": "A", "prediction": "B"}
{"question": "30 is subtracted from a number, it is reduced to its one third. What is the value of 50% of that number?", "generated": ["\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number / 3 - 30, number)\nans = 0.5 * solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - 30 - num / 3, num)\nans = solution[num] / 2", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - 30 - num / 3, num)\nans = solution[num] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number / 3 - 30, number)\nans = solution[number] * 0.5", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num / 3 - 30, num)\nans = solution[num] / 2", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - 30 - num / 3 - 50 * num / 100, num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - (1 / 3) * number, number)\nans = solution[number] / 2", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] * 0.5", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] * 0.5", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] * 0.5", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] * 0.5", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] * 0.5", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] * 0.5", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] * 0.5", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - 30 - num / 3 - num / 2, num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 30 - number / 3, number)\nans = solution[number] * 0.5", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - 30 - num / 3, num)\nans = 0.5 * solution[num]"], "generated_prediction": "22.5", "options": ["A)22.5", "B)84", "C)21", "D)24", "E)25"], "answer": "A", "prediction": "A"}
{"question": "If a man rows at the rate of 4 kmph in still water and his rate against the current is 2 kmph, then the man's rate along the current is:", "generated": ["\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nstill_water_speed = 4\nagainst_stream_speed = 2\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[boat_speed] + solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nstill_water_speed = 4\nagainst_stream_speed = 2\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[boat_speed] + solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nstill_water_speed = 4\nagainst_stream_speed = 2\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[boat_speed] + solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nstill_water_speed = 4\nagainst_stream_speed = 2\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[boat_speed] + solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nstill_water_speed = 4\nagainst_stream_speed = 2\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nstill_water_speed = 4\nagainst_stream_speed = 2\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - still_water_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\ncurrent_speed = Symbol('current_speed', positive=True)\nstill_water_speed = 4\nagainst_current_speed = 2\nsolution = solve_it([boat_speed + current_speed - still_water_speed, boat_speed - current_speed - against_current_speed], [boat_speed, current_speed])\nans = solution[boat_speed]", "\nman_speed = Symbol('man_speed', positive=True)\ncurrent_speed = Symbol('current_speed', positive=True)\nstill_water_speed = 4\nagainst_current_speed = 2\nsolution = solve_it([man_speed + current_speed - still_water_speed, man_speed - current_speed - against_current_speed], [man_speed, current_speed])\nans = solution[man_speed] + solution[current_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed - stream_speed - against_stream_speed, boat_speed + stream_speed - still_water_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed - stream_speed - against_stream_speed, boat_speed + stream_speed - still_water_speed], [boat_speed, stream_speed])\nans = solution[boat_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed - stream_speed - against_stream_speed, boat_speed + stream_speed - still_water_speed], [boat_speed, stream_speed])\nans = solution[boat_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed - stream_speed - against_stream_speed, boat_speed + stream_speed - still_water_speed], [boat_speed, stream_speed])\nans = solution[boat_speed] + solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nsolution = solve_it(boat_speed - stream_speed - against_stream_speed, stream_speed)\nans = solution[stream_speed]", "\nman_speed = Symbol('man_speed', positive=True)\ncurrent_speed = Symbol('current_speed', positive=True)\nspeed_in_still_water = 4\nspeed_against_current = 2\nspeed_along_current = man_speed + current_speed\nsolution = solve_it([speed_in_still_water - speed_along_current, speed_along_current - speed_against_current], [man_speed, current_speed])\nans = solution[man_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - against_stream_speed, boat_speed - still_water_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed - stream_speed - against_stream_speed, boat_speed - still_water_speed], [boat_speed, stream_speed])\nans = solution[boat_speed] + solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed + stream_speed - against_stream_speed, boat_speed - still_water_speed], [boat_speed, stream_speed])\nans = solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it([boat_speed - stream_speed - against_stream_speed, boat_speed - still_water_speed], [boat_speed, stream_speed])\nans = solution[boat_speed] + solution[stream_speed]", "\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nagainst_stream_speed = 2\nstill_water_speed = 4\nsolution = solve_it(boat_speed - stream_speed - against_stream_speed, stream_speed)\nans = solution[stream_speed] + still_water_speed"], "generated_prediction": "1.0", "options": ["A)15 kmph", "B)6 kmph", "C)12 kmph", "D)14 kmph", "E)6 kmph"], "answer": "E", "prediction": "B"}
{"question": "The sum of the digits of a three digit number is 17, and the sum of the squares of its digits is 109. If we subtract 495 from the number, we shall get a number consisting of the same digits written in the reverse order. Find the number.", "generated": ["\nfirst_digit = Symbol('first_digit', positive=True)\nsecond_digit = Symbol('second_digit', positive=True)\nthird_digit = Symbol('third_digit', positive=True)\nsolution = solve_it([first_digit + second_digit + third_digit - 17, first_digit ** 2 + second_digit ** 2 + third_digit ** 2 - 109, first_digit * 100 + second_digit * 10 + third_digit - (third_digit * 100 + second_digit * 10 + first_digit + 495)], [first_digit, second_digit, third_digit])\nans = solution[first_digit] * 100 + solution[second_digit] * 10 + solution[third_digit]", "\nfirst_digit = Symbol('first_digit', positive=True)\nsecond_digit = Symbol('second_digit', positive=True)\nthird_digit = Symbol('third_digit', positive=True)\nsolution = solve_it([first_digit + second_digit + third_digit - 17, first_digit ** 2 + second_digit ** 2 + third_digit ** 2 - 109, first_digit * 100 + second_digit * 10 + third_digit - 495 - (third_digit * 100 + second_digit * 10 + first_digit)], [first_digit, second_digit, third_digit])\nans = solution[first_digit] * 100 + solution[second_digit] * 10 + solution[third_digit]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - 495 - int(str(num)[::-1]), num)\nans = solution[num]", "\nfirst_digit = Symbol('first_digit')\nsecond_digit = Symbol('second_digit')\nthird_digit = Symbol('third_digit')\nsolution = solve_it([first_digit + second_digit + third_digit - 17, first_digit ** 2 + second_digit ** 2 + third_digit ** 2 - 109, 100 * first_digit + 10 * second_digit + third_digit - 495], [first_digit, second_digit, third_digit])\nans = 100 * solution[first_digit] + 10 * solution[second_digit] + solution[third_digit]", "\ndef sum_of_digits(num):\n    return sum([int(digit) for digit in str(num)])", "\nnum_1 = Symbol('num_1', positive=True)\nnum_2 = Symbol('num_2', positive=True)\nnum_3 = Symbol('num_3', positive=True)\nsolution = solve_it([num_1 + num_2 + num_3 - 17, num_1 ** 2 + num_2 ** 2 + num_3 ** 2 - 109, num_1 * 100 + num_2 * 10 + num_3 - (num_3 * 100 + num_2 * 10 + num_1) - 495], [num_1, num_2, num_3])\nans = solution[num_1] * 100 + solution[num_2] * 10 + solution[num_3]", "\ndigit1 = Symbol('digit1', positive=True)\ndigit2 = Symbol('digit2', positive=True)\ndigit3 = Symbol('digit3', positive=True)\nsolution = solve_it([digit1 + digit2 + digit3 - 17, digit1 ** 2 + digit2 ** 2 + digit3 ** 2 - 109, digit1 * 100 + digit2 * 10 + digit3 - (digit3 * 100 + digit2 * 10 + digit1) - 495], [digit1, digit2, digit3])\nans = solution[digit1] * 100 + solution[digit2] * 10 + solution[digit3]", "\nfirst_digit = Symbol('first_digit', positive=True)\nsecond_digit = Symbol('second_digit', positive=True)\nthird_digit = Symbol('third_digit', positive=True)\nsolution = solve_it([first_digit + second_digit + third_digit - 17, first_digit ** 2 + second_digit ** 2 + third_digit ** 2 - 109, 100 * first_digit + 10 * second_digit + third_digit - (100 * third_digit + 10 * second_digit + first_digit) + 495], [first_digit, second_digit, third_digit])\nans = 100 * solution[first_digit] + 10 * solution[second_digit] + solution[third_digit]", "\nfirst_digit = Symbol('first_digit', positive=True)\nsecond_digit = Symbol('second_digit', positive=True)\nthird_digit = Symbol('third_digit', positive=True)\nnumber = 100 * first_digit + 10 * second_digit + third_digit\nsolution = solve_it([first_digit + second_digit + third_digit - 17, first_digit ** 2 + second_digit ** 2 + third_digit ** 2 - 109, number - 495 - (100 * third_digit + 10 * second_digit + first_digit)], [first_digit, second_digit, third_digit])\nans = solution[number]", "\nnum_1 = Symbol('num_1', positive=True)\nnum_2 = Symbol('num_2', positive=True)\nnum_3 = Symbol('num_3', positive=True)\nsolution = solve_it([num_1 + num_2 + num_3 - 17, num_1 ** 2 + num_2 ** 2 + num_3 ** 2 - 109, num_1 * 100 + num_2 * 10 + num_3 - 495], [num_1, num_2, num_3])\nans = solution[num_1] * 100 + solution[num_2] * 10 + solution[num_3]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it([number // 100 + number // 10 % 10 + number % 10 - 17, (number // 100) ** 2 + (number // 10 % 10) ** 2 + (number % 10) ** 2 - 109, number - 495 - (number % 10) * 100 - (number // 10 % 10) * 10 - (number // 100)], number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it([num // 100 + num // 10 % 10 + num % 10 - 17, (num // 100) ** 2 + (num // 10 % 10) ** 2 + (num % 10) ** 2 - 109, num - 495 - (num % 10) * 100 - (num // 10 % 10) * 10 - (num // 100)], num)\nans = solution[num]", "\ndigits = [i for i in range(10)]\nfor i in digits:\n    for j in digits:\n        for k in digits:\n            if i + j + k == 17 and i ** 2 + j ** 2 + k ** 2 == 109 and i * 100 + j * 10 + k - 495 == k * 100 + j * 10 + i:\n                ans = i * 100 + j * 10 + k", "\ndigit_1 = Symbol('digit_1', positive=True)\ndigit_2 = Symbol('digit_2', positive=True)\ndigit_3 = Symbol('digit_3', positive=True)\nnumber = 100 * digit_1 + 10 * digit_2 + digit_3\nnumber_reversed = 100 * digit_3 + 10 * digit_2 + digit_1\nsolution = solve_it([digit_1 + digit_2 + digit_3 - 17, digit_1 ** 2 + digit_2 ** 2 + digit_3 ** 2 - 109, number - number_reversed - 495], [digit_1, digit_2, digit_3])\nans = 100 * solution[digit_1] + 10 * solution[digit_2] + solution[digit_3]", "\nfor i in range(100, 1000):\n    if sum(map(int, str(i))) == 17 and sum(map(lambda x: int(x) ** 2, str(i))) == 109 and int(str(i - 495)[::-1]) == i:\n        ans = i", "\nfor i in range(100, 1000):\n    if sum([int(digit) for digit in str(i)]) == 17 and sum([int(digit) ** 2 for digit in str(i)]) == 109 and i - 495 == int(str(i)[::-1]):\n        ans = i\n        break", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it([number // 100 + number // 10 % 10 + number % 10 - 17, (number // 100) ** 2 + (number // 10 % 10) ** 2 + (number % 10) ** 2 - 109, number - 495 - int(str(number)[::-1])], number)\nans = solution[number]", "\ndigit1 = Symbol('digit1', positive=True)\ndigit2 = Symbol('digit2', positive=True)\ndigit3 = Symbol('digit3', positive=True)\nnumber = digit1 * 100 + digit2 * 10 + digit3\nsolution = solve_it([digit1 + digit2 + digit3 - 17, digit1 ** 2 + digit2 ** 2 + digit3 ** 2 - 109, number - 495 - (digit3 * 100 + digit2 * 10 + digit1)], [digit1, digit2, digit3])\nans = solution[number]", "\noptions = range(100, 1000)\nfor option in options:\n    digits = [int(digit) for digit in str(option)]\n    if sum(digits) == 17 and sum([digit ** 2 for digit in digits]) == 109 and option - 495 == int(''.join([str(digit) for digit in digits[::-1]])):\n        ans = option\n        break", "\nnum_of_digits = 3\nfor i in range(10 ** (num_of_digits - 1), 10 ** num_of_digits):\n    digits = [int(digit) for digit in str(i)]\n    if sum(digits) == 17 and sum([digit ** 2 for digit in digits]) == 109:\n        ans = i\n        break", "\nnum = Symbol('num', positive=True)\nsolution = solve_it([num // 100 + num // 10 % 10 + num % 10 - 17, (num // 100) ** 2 + (num // 10 % 10) ** 2 + (num % 10) ** 2 - 109, num - 495 - int(str(num)[::-1])], num)\nans = solution[num]", "\ndigit1 = Symbol('digit1', positive=True)\ndigit2 = Symbol('digit2', positive=True)\ndigit3 = Symbol('digit3', positive=True)\nnumber = digit1 * 100 + digit2 * 10 + digit3\nsolution = solve_it([digit1 + digit2 + digit3 - 17, digit1 ** 2 + digit2 ** 2 + digit3 ** 2 - 109, number - 495 - (digit3 * 100 + digit2 * 10 + digit1)], [digit1, digit2, digit3])\nans = solution[number]", "\ndigits = list(range(10))\nfor digit1 in digits:\n    for digit2 in digits:\n        for digit3 in digits:\n            if digit1 + digit2 + digit3 == 17 and digit1 ** 2 + digit2 ** 2 + digit3 ** 2 == 109 and digit1 * 100 + digit2 * 10 + digit3 - 495 == digit3 * 100 + digit2 * 10 + digit1:\n                ans = digit1 * 100 + digit2 * 10 + digit3\n                break", "\nnum_digits = 3\nmax_digit_value = 9\nmin_digit_value = 0\nfor digit_1 in range(min_digit_value, max_digit_value + 1):\n    for digit_2 in range(min_digit_value, max_digit_value + 1):\n        for digit_3 in range(min_digit_value, max_digit_value + 1):\n            if digit_1 + digit_2 + digit_3 == 17 and digit_1 ** 2 + digit_2 ** 2 + digit_3 ** 2 == 109 and digit_1 * 100 + digit_2 * 10 + digit_3 - 495 == digit_3 * 100 + digit_2 * 10 + digit_1:\n                ans = digit_1 * 100 + digit_2 * 10 + digit_3", "\nnum = Symbol('num', positive=True)\nnum_str = str(num)\nsolution = solve_it([int(num_str[0]) + int(num_str[1]) + int(num_str[2]) - 17, int(num_str[0]) ** 2 + int(num_str[1]) ** 2 + int(num_str[2]) ** 2 - 109, int(num_str[0]) * 100 + int(num_str[1]) * 10 + int(num_str[2]) - 495], num)\nans = solution[num]", "\nnum = Symbol('num', positive=True)\nnum_str = str(num)\nsolution = solve_it([int(num_str[0]) + int(num_str[1]) + int(num_str[2]) - 17, int(num_str[0]) ** 2 + int(num_str[1]) ** 2 + int(num_str[2]) ** 2 - 109, int(num_str[0]) * 100 + int(num_str[1]) * 10 + int(num_str[2]) - 495], num)\nans = solution[num]", "\nnum = Symbol('num', positive=True)\nnum_str = str(num)\nsolution = solve_it([int(num_str[0]) + int(num_str[1]) + int(num_str[2]) - 17, int(num_str[0]) ** 2 + int(num_str[1]) ** 2 + int(num_str[2]) ** 2 - 109, int(num_str[2]) * 100 + int(num_str[1]) * 10 + int(num_str[0]) - 495], num)\nans = solution[num]", "\nnum_digits = 3\ndigit_sum = 17\ndigit_square_sum = 109\nfor i in range(10 ** (num_digits - 1), 10 ** num_digits):\n    digits = [int(d) for d in str(i)]\n    if sum(digits) == digit_sum and sum([d ** 2 for d in digits]) == digit_square_sum:\n        ans = i\n        break", "\nfor num in range(100, 1000):\n    num_str = str(num)\n    sum_of_digits = sum([int(digit) for digit in num_str])\n    sum_of_squares = sum([int(digit) ** 2 for digit in num_str])\n    if sum_of_digits == 17 and sum_of_squares == 109:\n        num_reversed = int(num_str[::-1])\n        if num - num_reversed == 495:\n            ans = num\n            break", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num % 10 + (num // 10) % 10 + num // 100 - 17, num ** 2 % 10 + (num ** 2 // 10) % 10 + num ** 2 // 100 - 109, num - 495 - (num % 10) * 100 - (num // 10) % 10 * 10 - num // 100)\nans = solution[num]"], "generated_prediction": "863", "options": ["A)368", "B)377", "C)288", "D)997", "E)112"], "answer": "A", "prediction": "A"}
{"question": "X and Y are two alloys which were made by mixing zinc and copper in the ratio 6:9 and 7:11, respectively. If 40 grams of alloy X and 60 grams of alloy Y are melted and mixed to form alloy Z, what is the ratio of zinc and copper in the alloy Z ?", "generated": ["\nzinc_in_X = 6\ncopper_in_X = 9\nzinc_in_Y = 7\ncopper_in_Y = 11\nzinc_in_Z = 40 * zinc_in_X + 60 * zinc_in_Y\ncopper_in_Z = 40 * copper_in_X + 60 * copper_in_Y\nans = (zinc_in_Z, copper_in_Z)", "\nzinc_in_X = 6\ncopper_in_X = 9\nzinc_in_Y = 7\ncopper_in_Y = 11\nzinc_in_Z = 40 * zinc_in_X / (40 + 60) + 60 * zinc_in_Y / (40 + 60)\ncopper_in_Z = 40 * copper_in_X / (40 + 60) + 60 * copper_in_Y / (40 + 60)\nans = (zinc_in_Z, copper_in_Z)", "\nzinc_in_X = 6\ncopper_in_X = 9\nzinc_in_Y = 7\ncopper_in_Y = 11\nzinc_in_Z = 40 * zinc_in_X / (40 + 60) + 60 * zinc_in_Y / (40 + 60)\ncopper_in_Z = 40 * copper_in_X / (40 + 60) + 60 * copper_in_Y / (40 + 60)\nans = (zinc_in_Z, copper_in_Z)", "\nzinc_in_X = 6\ncopper_in_X = 9\nzinc_in_Y = 7\ncopper_in_Y = 11\nzinc_in_Z = 40 * zinc_in_X / (40 + 60) + 60 * zinc_in_Y / (40 + 60)\ncopper_in_Z = 40 * copper_in_X / (40 + 60) + 60 * copper_in_Y / (40 + 60)\nans = (zinc_in_Z, copper_in_Z)", "\nzinc_in_x = 6\ncopper_in_x = 9\nzinc_in_y = 7\ncopper_in_y = 11\nzinc_in_z = 40 * zinc_in_x / (40 + 60) + 60 * zinc_in_y / (40 + 60)\ncopper_in_z = 40 * copper_in_x / (40 + 60) + 60 * copper_in_y / (40 + 60)\nans = (zinc_in_z, copper_in_z)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = (x_zinc * 40 + y_zinc * 60) / 100\nz_copper = (x_copper * 40 + y_copper * 60) / 100\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = x_zinc * 40 + y_zinc * 60\nz_copper = x_copper * 40 + y_copper * 60\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = (40 * x_zinc + 60 * y_zinc) / 100\nz_copper = (40 * x_copper + 60 * y_copper) / 100\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc + 60 * y_zinc\nz_copper = 40 * x_copper + 60 * y_copper\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc + 60 * y_zinc\nz_copper = 40 * x_copper + 60 * y_copper\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc_ratio = 6\nx_copper_ratio = 9\ny_zinc_ratio = 7\ny_copper_ratio = 11\nx_zinc_weight = 40 * x_zinc_ratio / (x_zinc_ratio + x_copper_ratio)\ny_zinc_weight = 60 * y_zinc_ratio / (y_zinc_ratio + y_copper_ratio)\nz_zinc_weight = x_zinc_weight + y_zinc_weight\nz_copper_weight = 100 - z_zinc_weight\nans = (z_zinc_weight, z_copper_weight)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc + 60 * y_zinc\nz_copper = 40 * x_copper + 60 * y_copper\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = x_zinc * 40 + y_zinc * 60\nz_copper = x_copper * 40 + y_copper * 60\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = x_zinc * 40 + y_zinc * 60\nz_copper = x_copper * 40 + y_copper * 60\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = (40 * x_zinc + 60 * y_zinc) / 100\nz_copper = (40 * x_copper + 60 * y_copper) / 100\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = 40 * x_zinc / (40 + 60) + 60 * y_zinc / (40 + 60)\nz_copper = 40 * x_copper / (40 + 60) + 60 * y_copper / (40 + 60)\nans = (z_zinc, z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nz_zinc = x_zinc * 0.4 + y_zinc * 0.6\nz_copper = x_copper * 0.4 + y_copper * 0.6\nans = (z_zinc, z_copper)", "\nalloy_x_zinc = 6\nalloy_x_copper = 9\nalloy_y_zinc = 7\nalloy_y_copper = 11\nalloy_z_zinc = 40 * alloy_x_zinc + 60 * alloy_y_zinc\nalloy_z_copper = 40 * alloy_x_copper + 60 * alloy_y_copper\nans = (alloy_z_zinc, alloy_z_copper)", "\nx_zinc = 6\nx_copper = 9\ny_zinc = 7\ny_copper = 11\nx_ratio = x_zinc / (x_zinc + x_copper)\ny_ratio = y_zinc / (y_zinc + y_copper)\nz_ratio = (x_ratio * 40 + y_ratio * 60) / (40 + 60)\nz_zinc = z_ratio * (x_zinc + x_copper + y_zinc + y_copper)\nans = (z_zinc, x_zinc + x_copper + y_zinc + y_copper - z_zinc)", "\nx_zinc_ratio = 6\nx_copper_ratio = 9\ny_zinc_ratio = 7\ny_copper_ratio = 11\nx_zinc = x_zinc_ratio / (x_copper_ratio + x_zinc_ratio)\nx_copper = x_copper_ratio / (x_copper_ratio + x_zinc_ratio)\ny_zinc = y_zinc_ratio / (y_copper_ratio + y_zinc_ratio)\ny_copper = y_copper_ratio / (y_copper_ratio + y_zinc_ratio)\nz_zinc = 40 * x_zinc + 60 * y_zinc\nz_copper = 40 * x_copper + 60 * y_copper\nans = (z_zinc, z_copper)"], "generated_prediction": "(6.6, 10.2)", "options": ["A)69:91", "B)59:91", "C)59:90", "D)59:91", "E)69:101"], "answer": "B", "prediction": "B"}
{"question": "The nefarious bandit Hoopsmot decides to go in with his criminal partner Smolapon to purchase a number of senators. Hoopsmot contributes $16,000 to their bribery pool, and Smolapon contributes just $4,000. Their total allows them to influence 30 senators. How many senators of these can be considered Hoopsmot's?", "generated": ["\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\ntotal_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * total_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\ntotal_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * total_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\ntotal_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * total_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\ntotal_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * total_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\ntotal_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * total_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\ntotal_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * total_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\ntotal_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * total_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nnum_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * num_senators\nans = hoopsmot_senators", "\nnum_senators = 30\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\nhoopsmot_senators = hoopsmot_contribution / (hoopsmot_contribution + smolapon_contribution) * num_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nnum_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * num_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nnum_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * num_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nnum_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * num_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nnum_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * num_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nnum_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * num_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nnum_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * num_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nnum_senators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * num_senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nsenators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nsenators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * senators\nans = hoopsmot_senators", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nsenators = 30\nhoopsmot_senators = hoopsmot_contribution / total_contribution * senators\nans = hoopsmot_senators", "\nsenators = Symbol('senators', positive=True)\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nsolution = solve_it(hoopsmot_contribution * senators / total_contribution - 30, senators)\nans = solution[senators]", "\nsenators = 30\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\nsolution = solve_it(hoopsmot_contribution / (hoopsmot_contribution + smolapon_contribution) * senators - 20, senators)\nans = solution[senators]", "\nsenators_owned_by_hoopsmot = Symbol('senators_owned_by_hoopsmot', positive=True)\ntotal_senators = 30\nsolution = solve_it(16000 * senators_owned_by_hoopsmot + 4000 * (total_senators - senators_owned_by_hoopsmot) - 16000 * total_senators, senators_owned_by_hoopsmot)\nans = solution[senators_owned_by_hoopsmot]", "\nsenators = Symbol('senators', positive=True)\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nsolution = solve_it([senators * hoopsmot_contribution / total_contribution - 30, senators * smolapon_contribution / total_contribution - 30], [senators])\nans = solution[senators]", "\nsenators_owned_by_hoopsmot = Symbol('senators_owned_by_hoopsmot', positive=True)\nsenators_owned_by_smolapon = Symbol('senators_owned_by_smolapon', positive=True)\ntotal_senators = 30\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\nsolution = solve_it([senators_owned_by_hoopsmot + senators_owned_by_smolapon - total_senators, senators_owned_by_hoopsmot * hoopsmot_contribution + senators_owned_by_smolapon * smolapon_contribution], [senators_owned_by_hoopsmot, senators_owned_by_smolapon])\nans = solution[senators_owned_by_hoopsmot]", "\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nhoopsmot_senators = hoopsmot_contribution / total_contribution * 30\nans = math.ceil(hoopsmot_senators)", "\nsenators_owned_by_hoopsmot = Symbol('senators_owned_by_hoopsmot', positive=True)\nsenators_owned_by_smolapon = Symbol('senators_owned_by_smolapon', positive=True)\ntotal_senators = 30\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\nsolution = solve_it([senators_owned_by_hoopsmot + senators_owned_by_smolapon - total_senators, senators_owned_by_hoopsmot * hoopsmot_contribution - senators_owned_by_smolapon * smolapon_contribution], [senators_owned_by_hoopsmot, senators_owned_by_smolapon])\nans = solution[senators_owned_by_hoopsmot]", "\nhoopsmot_contribution = 16\nsmolapon_contribution = 4\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nhoopsmot_senators = hoopsmot_contribution / total_contribution * 30\nans = hoopsmot_senators", "\nsenators = Symbol('senators', positive=True)\nhoopsmot_contribution = 16000\nsmolapon_contribution = 4000\ntotal_contribution = hoopsmot_contribution + smolapon_contribution\nsolution = solve_it(total_contribution / senators - 30, senators)\nans = solution[senators] * hoopsmot_contribution / total_contribution", "\nsenators_owned_by_hoopsmot = Symbol('senators_owned_by_hoopsmot', positive=True)\nsenators_owned_by_smolapon = Symbol('senators_owned_by_smolapon', positive=True)\ntotal_senators = 30\ntotal_money = 16000 + 4000\nsolution = solve_it([senators_owned_by_hoopsmot + senators_owned_by_smolapon - total_senators, senators_owned_by_hoopsmot * 16000 + senators_owned_by_smolapon * 4000 - total_money], [senators_owned_by_hoopsmot, senators_owned_by_smolapon])\nans = solution[senators_owned_by_hoopsmot]", "\nsenators_owned_by_hoopsmot = Symbol('senators_owned_by_hoopsmot', positive=True)\nsenators_owned_by_smolapon = Symbol('senators_owned_by_smolapon', positive=True)\nsenators_owned_by_hoopsmot_percent = senators_owned_by_hoopsmot / (senators_owned_by_hoopsmot + senators_owned_by_smolapon)\nsenators_owned_by_smolapon_percent = senators_owned_by_smolapon / (senators_owned_by_hoopsmot + senators_owned_by_smolapon)\nsolution = solve_it([16000 * senators_owned_by_hoopsmot_percent + 4000 * senators_owned_by_smolapon_percent - 30, senators_owned_by_hoopsmot + senators_owned_by_smolapon - 30], [senators_owned_by_hoopsmot, senators_owned_by_smolapon])\nans = solution[senators_owned_by_hoopsmot]"], "generated_prediction": "24.0", "options": ["A)18", "B)20", "C)22", "D)24", "E)26"], "answer": "D", "prediction": "D"}
{"question": "The difference between the squares of two numbers is 256000 and the sum of the numbers is 1000. The numbers are", "generated": ["\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nnum1 = Symbol('num1', real=True)\nnum2 = Symbol('num2', real=True)\nsolution = solve_it([num1 ** 2 - num2 ** 2 - 256000, num1 + num2 - 1000], [num1, num2])\nans = (solution[num1], solution[num2])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x ** 2 - y ** 2 - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x ** 2 - y ** 2 - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x ** 2 - y ** 2 - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x ** 2 - y ** 2 - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x ** 2 - y ** 2 - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x ** 2 - y ** 2 - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x ** 2 - y ** 2 - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x ** 2 - y ** 2 - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x ** 2 - y ** 2 - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x * x - y * y - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\nnumber_1 = Symbol('number_1', positive=True)\nnumber_2 = Symbol('number_2', positive=True)\nsolution = solve_it([number_1 ** 2 - number_2 ** 2 - 256000, number_1 + number_2 - 1000], [number_1, number_2])\nans = (solution[number_1], solution[number_2])", "\nfirst_number = Symbol('first_number', positive=True)\nsecond_number = Symbol('second_number', positive=True)\nsolution = solve_it([first_number ** 2 - second_number ** 2 - 256000, first_number + second_number - 1000], [first_number, second_number])\nans = (solution[first_number], solution[second_number])", "\na = Symbol('a')\nb = Symbol('b')\nsolution = solve_it([a ** 2 - b ** 2 - 256000, a + b - 1000], [a, b])\nans = (solution[a], solution[b])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x * x - y * y - 256000, x + y - 1000], [x, y])\nans = (solution[x], solution[y])", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nsolution = solve_it([a ** 2 + b ** 2 - 256000, a + b - 1000], [a, b])\nans = (solution[a], solution[b])"], "generated_prediction": "[628.0, 372.0]", "options": ["A)600, 400", "B)628, 372", "C)640, 360", "D)None of these", "E)Cannot be determined"], "answer": "B", "prediction": "B"}
{"question": "An astronaut weighing 211 pounds on Earth would weigh 182 pounds on Venus. The weight of the astronaut on Venus would be approximately what percent of the astronaut\u2019s weight on Earth?", "generated": ["\nearth_weight = 211\nvenus_weight = 182\nans = (venus_weight / earth_weight) * 100", "\nans = (182 / 211) * 100", "\nans = (182 / 211) * 100", "\nans = (211 - 182) / 211", "\nans = (211 - 182) / 211", "\nearth_weight = 211\nvenus_weight = 182\nans = venus_weight / earth_weight", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nearth_weight = 211\nvenus_weight = 182\nans = venus_weight / earth_weight", "\nweight_on_earth = 211\nweight_on_venus = 182\nweight_on_venus_percentage = weight_on_venus / weight_on_earth * 100\nans = weight_on_venus_percentage", "\nearth_weight = 211\nvenus_weight = 182\nans = venus_weight / earth_weight", "\nearth_weight = 211\nvenus_weight = 182\nans = venus_weight / earth_weight", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nearth_weight = 211\nvenus_weight = 182\nans = venus_weight / earth_weight", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nearth_weight = 211\nvenus_weight = 182\nans = venus_weight / earth_weight", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth", "\nweight_on_earth = 211\nweight_on_venus = 182\nans = weight_on_venus / weight_on_earth"], "generated_prediction": "0.8625592417061612", "options": ["A)50%", "B)60%", "C)70%", "D)86%", "E)90%"], "answer": "D", "prediction": "D"}
{"question": "A man walks at 5 kmph for 6 hrs and at 4 kmph for 12 hrs. His average speed is", "generated": ["\ntotal_distance = 6 * 5 + 12 * 4\ntotal_time = 6 + 12\nans = total_distance / total_time", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\nans = (speed_1 * time_1 + speed_2 * time_2) / (time_1 + time_2)", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\nans = (speed_1 * time_1 + speed_2 * time_2) / (time_1 + time_2)", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\nans = (speed_1 * time_1 + speed_2 * time_2) / (time_1 + time_2)", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\nans = (speed_1 * time_1 + speed_2 * time_2) / (time_1 + time_2)", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\nans = (speed_1 * time_1 + speed_2 * time_2) / (time_1 + time_2)", "\ndistance_at_5_kmph = 5 * 6\ndistance_at_4_kmph = 4 * 12\ntotal_distance = distance_at_5_kmph + distance_at_4_kmph\ntotal_time = 6 + 12\nans = total_distance / total_time", "\ndistance_at_5_kmph = 5 * 6\ndistance_at_4_kmph = 4 * 12\ntotal_distance = distance_at_5_kmph + distance_at_4_kmph\ntotal_time = 6 + 12\nans = total_distance / total_time", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\ntotal_distance = speed_1 * time_1 + speed_2 * time_2\ntotal_time = time_1 + time_2\nans = total_distance / total_time", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\ntotal_distance = speed_1 * time_1 + speed_2 * time_2\ntotal_time = time_1 + time_2\nans = total_distance / total_time", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\ntotal_distance = speed_1 * time_1 + speed_2 * time_2\ntotal_time = time_1 + time_2\nans = total_distance / total_time", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\ntotal_distance = speed_1 * time_1 + speed_2 * time_2\ntotal_time = time_1 + time_2\nans = total_distance / total_time", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\ntotal_time = time_1 + time_2\ntotal_distance = speed_1 * time_1 + speed_2 * time_2\nans = total_distance / total_time", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\ntotal_time = time_1 + time_2\ntotal_distance = speed_1 * time_1 + speed_2 * time_2\nans = total_distance / total_time", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\ntotal_time = time_1 + time_2\ntotal_distance = speed_1 * time_1 + speed_2 * time_2\nans = total_distance / total_time", "\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\ntotal_time = time_1 + time_2\ntotal_distance = speed_1 * time_1 + speed_2 * time_2\naverage_speed = total_distance / total_time\nans = average_speed", "\ntime_at_5_kmph = 6\ntime_at_4_kmph = 12\ntotal_time = time_at_5_kmph + time_at_4_kmph\ntotal_distance = (5 * time_at_5_kmph + 4 * time_at_4_kmph)\nans = total_distance / total_time", "\ndistance = Symbol('distance', positive=True)\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\nsolution = solve_it([distance / speed_1 - time_1, distance / speed_2 - time_2], distance)\nans = solution[distance] / (time_1 + time_2)", "\ntime_at_5_kmph = 6\ntime_at_4_kmph = 12\ntotal_time = time_at_5_kmph + time_at_4_kmph\ntotal_distance = time_at_5_kmph * 5 + time_at_4_kmph * 4\nans = total_distance / total_time", "\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it(5 * 6 + 4 * 12 - speed * time, time)\nans = solution[time]", "\ndistance = Symbol('distance', positive=True)\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\nsolution = solve_it(distance / (time_1 / speed_1 + time_2 / speed_2) - 81, distance)\nans = solution[distance]", "\nspeed = Symbol('speed', positive=True)\ndistance_at_5_kmph = speed * 6\ndistance_at_4_kmph = speed * 12\ntotal_distance = distance_at_5_kmph + distance_at_4_kmph\ntotal_time = 6 + 12\nsolution = solve_it(total_distance / total_time - speed, speed)\nans = solution[speed]", "\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\nspeed_at_5_kmph = 5\nspeed_at_4_kmph = 4\nsolution = solve_it([distance / (time + 12) - speed_at_4_kmph, distance / time - speed_at_5_kmph], [distance, time])\nans = solution[distance] / solution[time]", "\ndistance = Symbol('distance', positive=True)\nspeed_1 = 5\nspeed_2 = 4\ntime_1 = 6\ntime_2 = 12\nsolution = solve_it(distance / (time_1 * speed_1 + time_2 * speed_2) - 1 / 3, distance)\nans = solution[distance]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\nsolution = solve_it([speed * 6 + 4 * 12 - distance, speed * 18 - distance], [speed, distance])\nans = solution[speed]", "\nspeed_5_kmph = 5\nspeed_4_kmph = 4\ntime_5_kmph = 6\ntime_4_kmph = 12\ntotal_time = time_5_kmph + time_4_kmph\ntotal_distance = speed_5_kmph * time_5_kmph + speed_4_kmph * time_4_kmph\nans = total_distance / total_time", "\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it(speed * (6 + 12) - (5 * 6 + 4 * 12), speed)\nans = solution[speed]", "\ntotal_distance = Symbol('total_distance', positive=True)\ntotal_time = Symbol('total_time', positive=True)\nspeed_1 = 5\ntime_1 = 6\nspeed_2 = 4\ntime_2 = 12\nsolution = solve_it([total_distance / total_time - (speed_1 * time_1 + speed_2 * time_2) / (time_1 + time_2), total_distance - (speed_1 * time_1 + speed_2 * time_2)], [total_distance, total_time])\nans = solution[total_distance] / solution[total_time]", "\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\ndistance_at_5_kmph = distance * (time / 6)\ndistance_at_4_kmph = distance * (time / 12)\nsolution = solve_it(distance_at_5_kmph + distance_at_4_kmph - distance, distance)\nans = solution[distance] / time", "\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\ndistance = Symbol('distance', positive=True)\ndistance_travelled_at_5_kmph = 6 * 5\ndistance_travelled_at_4_kmph = 12 * 4\nsolution = solve_it([distance_travelled_at_5_kmph / time - speed, distance_travelled_at_4_kmph / time - speed], [speed, time])\nans = solution[speed]"], "generated_prediction": "4.333333333333333", "options": ["A)4 1/3 km/h", "B)7 2/3 km/h", "C)9 \u00bd km/h", "D)8 km/h", "E)81 km/h"], "answer": "A", "prediction": "A"}
{"question": "[(272 - 32) (124 + 176)] / (17 x 15 - 15) = ?", "generated": ["\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = (272 - 32) * (124 + 176) / (17 * 15 - 15)", "\nans = 272 - 32 + 124 + 176 / 17 * 15 - 15"], "generated_prediction": "300.0", "options": ["A)0", "B)2.25", "C)300", "D)400", "E)None of these"], "answer": "C", "prediction": "C"}
{"question": "Everyone in the family earns money each month. If the total income of a family per month is $9000 and the median income is $3000, how many members are there in the family?", "generated": ["\nfamily_members = Symbol('family_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(family_members * median_income - total_income, family_members)\nans = solution[family_members]", "\nfamily_members = Symbol('family_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(family_members * median_income - total_income, family_members)\nans = solution[family_members]", "\nfamily_members = Symbol('family_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(family_members * median_income - total_income, family_members)\nans = solution[family_members]", "\nnum_members = Symbol('num_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(num_members * median_income - total_income, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(num_members * median_income - total_income, num_members)\nans = solution[num_members]", "\nnum_members = Symbol('num_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(num_members * median_income - total_income, num_members)\nans = solution[num_members]", "\nfamily_size = Symbol('family_size', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(family_size * median_income - total_income, family_size)\nans = solution[family_size]", "\nfamily_size = Symbol('family_size', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(family_size * median_income - total_income, family_size)\nans = solution[family_size]", "\nfamily_size = Symbol('family_size', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(family_size * median_income - total_income, family_size)\nans = solution[family_size]", "\nnum_members = Symbol('num_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(median_income * num_members - total_income, num_members)\nans = solution[num_members]", "\nfamily_members = Symbol('family_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(median_income * family_members - total_income, family_members)\nans = solution[family_members]", "\nfamily_members = Symbol('family_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(median_income * family_members - total_income, family_members)\nans = solution[family_members]", "\nfamily_size = Symbol('family_size', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(median_income * family_size - total_income, family_size)\nans = solution[family_size]", "\nfamily_size = Symbol('family_size', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(median_income * family_size - total_income, family_size)\nans = solution[family_size]", "\nfamily_size = Symbol('family_size', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(total_income / family_size - median_income, family_size)\nans = solution[family_size]", "", "\nmembers = Symbol('members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(median_income * members - total_income, members)\nans = solution[members]", "\nfamily_size = Symbol('family_size', positive=True)\nfamily_income = 9000\nmedian_income = 3000\nsolution = solve_it(family_size * median_income - family_income, family_size)\nans = solution[family_size]", "\nfamily_size = Symbol('family_size', positive=True)\nfamily_income = 9000\nmedian_income = 3000\nsolution = solve_it(family_size * median_income - family_income, family_size)\nans = solution[family_size]", "\ntotal_income = 9000\nmedian_income = 3000\nnum_members = Symbol('num_members', positive=True)\nsolution = solve_it(num_members * median_income - total_income, num_members)\nans = solution[num_members]", "\nfamily_members = Symbol('family_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(median_income - total_income / family_members, family_members)\nans = solution[family_members]", "\n# Hint: Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.", "\nnum_members = Symbol('num_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it([total_income / num_members - median_income, num_members - math.ceil(num_members / 2)], num_members)\nans = solution[num_members]", "\nfamily_size = Symbol('family_size', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it((family_size + 1) * median_income - total_income, family_size)\nans = solution[family_size]", "\ntotal_income = 9000\nmedian_income = 3000\nnumber_of_members = Symbol('number_of_members', positive=True)\nsolution = solve_it(total_income / number_of_members - median_income, number_of_members)\nans = solution[number_of_members]", "\n# Hint: Median is the middle value in a list of numbers.\nfamily_size = Symbol('family_size', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(median_income * family_size - total_income, family_size)\nans = solution[family_size]", "\nincome_per_person = Symbol('income_per_person', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nnum_of_people = total_income / income_per_person\nsolution = solve_it(num_of_people * income_per_person - total_income, income_per_person)\nans = math.ceil(solution[income_per_person])", "\n# Hint: Median is the middle value in a list of numbers.\n# For example, if the list is [1, 2, 3, 4, 5], the median is 3.\n# If the list is [1, 2, 3, 4, 5, 6], the median is (3 + 4) / 2 = 3.5.\nnum_members = Symbol('num_members', positive=True)\ntotal_income = 9000\nmedian_income = 3000\nsolution = solve_it(num_members * median_income - total_income, num_members)\nans = solution[num_members]", "\n# Hint: median is the middle value of a series of numbers.\n# Hint: if the number of elements is even, then median is the average of the two middle values.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is the middle value.\n# Hint: if the number of elements is odd, then median is", "\n# Hint: Median is the middle value in a sorted list of numbers.\n#       If there are two middle values, the median is the mean of the two middle values.\n#       In the given case, the median is 3000.\n#       So, the list of incomes should be [3000, 3000, 9000].\n#       The number of members in the family is 3."], "generated_prediction": "3.0", "options": ["A)2", "B)3", "C)4", "D)5", "E)6"], "answer": "B", "prediction": "B"}
{"question": "The bus fare of one adult is Rs. 140 from Ranchi to Patna and bus fare of a child is half the fare of one adult between the same places. What is the total bus fare of 4 adults and 3 children between same places?", "generated": ["\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = 4 * adult_fare + 3 * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = adult_fare * 4 + child_fare * 3\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = adult_fare * 4 + child_fare * 3\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = adult_fare * 4 + child_fare * 3\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = adult_fare * 4 + child_fare * 3\nans = total_fare", "\nfare_of_one_adult = 140\nfare_of_one_child = fare_of_one_adult / 2\nans = fare_of_one_adult * 4 + fare_of_one_child * 3", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = (4 * adult_fare + 3 * child_fare)\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = (4 * adult_fare + 3 * child_fare)\nans = total_fare", "\nfare_of_an_adult = 140\nfare_of_a_child = fare_of_an_adult / 2\ntotal_fare = 4 * fare_of_an_adult + 3 * fare_of_a_child\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\nans = (4 * adult_fare + 3 * child_fare)", "\nadult_fare = 140\nchild_fare = adult_fare / 2\nans = (4 * adult_fare + 3 * child_fare)", "\nadult_fare = 140\nchild_fare = adult_fare / 2\nans = (4 * adult_fare + 3 * child_fare)", "\nadult_fare = 140\nchild_fare = adult_fare / 2\nans = (4 * adult_fare + 3 * child_fare)", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = (4 * adult_fare + 3 * child_fare)\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = (4 * adult_fare + 3 * child_fare)\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = (4 * adult_fare + 3 * child_fare)\nans = total_fare", "\nnum_adults = 4\nnum_children = 3\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = num_adults * adult_fare + num_children * child_fare\nans = total_fare", "\nnum_adults = 4\nnum_children = 3\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = num_adults * adult_fare + num_children * child_fare\nans = total_fare", "\nadult_fare = 140\nchild_fare = adult_fare / 2\ntotal_fare = (4 * adult_fare + 3 * child_fare)\nans = total_fare"], "generated_prediction": "770.0", "options": ["A)Rs. 666", "B)Rs. 670", "C)Rs. 700", "D)Rs. 570", "E)Rs. 770"], "answer": "E", "prediction": "E"}
{"question": "An organization decided to raise Rs. 6 lakh by collecting equal contribution from each of its employees. If each of them had contributed Rs. 60 extra, the contribution would have been Rs. 6.24 lakh. How many employees are there in that organization?", "generated": ["\ntotal_amount = Symbol('total_amount', positive=True)\nnum_employees = Symbol('num_employees', positive=True)\nsolution = solve_it(total_amount - num_employees * 60, num_employees)\nans = solution[num_employees]", "\ntotal_amount = Symbol('total_amount', positive=True)\nnum_employees = Symbol('num_employees', positive=True)\nsolution = solve_it(total_amount - num_employees * 60, num_employees)\nans = solution[num_employees]", "\ntotal_amount = Symbol('total_amount', positive=True)\nnum_employees = Symbol('num_employees', positive=True)\nsolution = solve_it(total_amount - num_employees * 60, num_employees)\nans = solution[num_employees]", "\nemployees = Symbol('employees', positive=True)\ncontribution = Symbol('contribution', positive=True)\ntotal_contribution = 6\ntotal_contribution_with_extra_contribution = 6.24\nsolution = solve_it([employees * contribution - total_contribution, employees * (contribution + 60) - total_contribution_with_extra_contribution], [employees, contribution])\nans = solution[employees]", "\ntotal_contribution = 6.24\nextra_contribution = 60\nnum_employees = total_contribution / (extra_contribution / 100 + 1)\nans = num_employees", "\ntotal_amount = Symbol('total_amount', positive=True)\nnum_employees = Symbol('num_employees', positive=True)\nsolution = solve_it(total_amount / num_employees - 60, total_amount)\nans = solution[num_employees]", "\ntotal_contribution = 624000\nextra_contribution = 60\nnum_employees = Symbol('num_employees', positive=True)\nsolution = solve_it(total_contribution - num_employees * (extra_contribution + 60000), num_employees)\nans = solution[num_employees]", "\nemployees = Symbol('employees', positive=True)\ntotal_contribution = 6 * 100000\ntotal_contribution_with_extra = 6.24 * 100000\nsolution = solve_it(total_contribution + employees * 60 - total_contribution_with_extra, employees)\nans = solution[employees]", "\nemployees = Symbol('employees', positive=True)\ntotal_contribution = 6 * 100000\nextra_contribution = 60\ntotal_contribution_with_extra = 6.24 * 100000\nsolution = solve_it(total_contribution + extra_contribution * employees - total_contribution_with_extra, employees)\nans = solution[employees]", "\ntotal_amount = Symbol('total_amount', positive=True)\nnum_employees = Symbol('num_employees', positive=True)\nsolution = solve_it(total_amount / num_employees - 60, total_amount)\nans = solution[num_employees]", "\nemployees = Symbol('employees', positive=True)\namount_per_employee = Symbol('amount_per_employee', positive=True)\ntotal_amount = 6 * 100000\ntotal_amount_with_extra_contribution = 6.24 * 100000\nsolution = solve_it([employees * amount_per_employee - total_amount, employees * (amount_per_employee + 60) - total_amount_with_extra_contribution], [employees, amount_per_employee])\nans = solution[employees]", "\ncontribution = Symbol('contribution', positive=True)\ntotal_contribution = 6\ntotal_contribution_with_extra_contribution = 6.24\nsolution = solve_it(total_contribution_with_extra_contribution - total_contribution - 60 * contribution, contribution)\nans = solution[contribution]", "\ntotal_contribution = 6.24\nadditional_contribution = 0.24\nnum_employees = Symbol('num_employees', positive=True)\nsolution = solve_it(total_contribution - num_employees * (60 + additional_contribution), num_employees)\nans = solution[num_employees]", "\ntotal_contribution = Symbol('total_contribution', positive=True)\nnum_employees = Symbol('num_employees', positive=True)\nsolution = solve_it(total_contribution - num_employees * (60 + 60), num_employees)\nans = solution[num_employees]", "\ntotal_contribution = 624000\nextra_contribution = 60\ntotal_employees = Symbol('total_employees', positive=True)\nsolution = solve_it(total_contribution - total_employees * (total_contribution / total_employees + extra_contribution), total_employees)\nans = solution[total_employees]", "\ntotal_contribution = Symbol('total_contribution', positive=True)\nnum_employees = Symbol('num_employees', positive=True)\nsolution = solve_it([total_contribution - num_employees * 60, total_contribution - num_employees * 120], [total_contribution, num_employees])\nans = solution[num_employees]", "\ntotal_amount = Symbol('total_amount', positive=True)\nemployees = Symbol('employees', positive=True)\nextra_amount = 60\nsolution = solve_it(total_amount - employees * extra_amount - 624000, employees)\nans = solution[employees]", "\nemployees = Symbol('employees', positive=True)\ncontribution = Symbol('contribution', positive=True)\ntotal_contribution = employees * contribution\ntotal_contribution_with_extra = employees * (contribution + 60)\nsolution = solve_it([total_contribution - 600000, total_contribution_with_extra - 624000], [employees, contribution])\nans = solution[employees]", "\ntotal_contribution = Symbol('total_contribution', positive=True)\ncontribution_per_employee = 60\nextra_contribution = 60\nsolution = solve_it(total_contribution - contribution_per_employee * total_contribution / (contribution_per_employee + extra_contribution) - 624000, total_contribution)\nans = solution[total_contribution]", "\nemployees = Symbol('employees', positive=True)\ncontribution = Symbol('contribution', positive=True)\ntotal_contribution = employees * contribution\ntotal_contribution_with_extra = employees * (contribution + 60)\nsolution = solve_it([total_contribution - 600000, total_contribution_with_extra - 624000], [employees, contribution])\nans = solution[employees]", "\nemployees = Symbol('employees', positive=True)\ntarget_amount = 6 * 10 ** 5\namount_collected = 6.24 * 10 ** 5\nsolution = solve_it(amount_collected - (employees * 60 + target_amount), employees)\nans = solution[employees]", "\nemployees = Symbol('employees', positive=True)\namount = 6 * 10 ** 5\nextra_amount = 60\nsolution = solve_it(employees * (amount + extra_amount) - 6.24 * 10 ** 5, employees)\nans = solution[employees]", "\ntotal_contribution = 624000\nextra_contribution = 60\nnum_employees = Symbol('num_employees', positive=True)\ncontribution_per_employee = total_contribution / num_employees\nsolution = solve_it(contribution_per_employee - extra_contribution - 600, num_employees)\nans = solution[num_employees]", "\nemployees = Symbol('employees', positive=True)\ntotal_contribution = 6\nextra_contribution = 60\ntotal_contribution_with_extra = 6.24\nsolution = solve_it([employees * total_contribution - 6 * 10 ** 5, employees * (total_contribution + extra_contribution) - 6.24 * 10 ** 5], [employees])\nans = solution[employees]", "\nemployees = Symbol('employees', positive=True)\ncontribution_per_employee = Symbol('contribution_per_employee', positive=True)\ntotal_contribution = 6 * 100000\ntotal_contribution_with_extra = 6.24 * 100000\nsolution = solve_it([employees * contribution_per_employee - total_contribution, employees * (contribution_per_employee + 60) - total_contribution_with_extra], [employees, contribution_per_employee])\nans = solution[employees]", "\nemployees = Symbol('employees', positive=True)\ntotal_contribution = 6 * 10 ** 5\nextra_contribution = 60\ntotal_contribution_with_extra = 6.24 * 10 ** 5\nsolution = solve_it(total_contribution + employees * extra_contribution - total_contribution_with_extra, employees)\nans = solution[employees]", "\nemployees = Symbol('employees', positive=True)\ntotal_contribution = 6\nextra_contribution = 60\ntotal_contribution_with_extra = 6.24\nsolution = solve_it([employees * total_contribution - total_contribution, employees * (total_contribution + extra_contribution) - total_contribution_with_extra], [employees])\nans = solution[employees]", "\ntotal_contribution = 6 * 100000\nextra_contribution = 60\ntotal_contribution_with_extra = 6.24 * 100000\nnum_employees = total_contribution_with_extra / (total_contribution / num_employees + extra_contribution)\nans = num_employees", "\ntotal_amount = Symbol('total_amount', positive=True)\nnum_employees = Symbol('num_employees', positive=True)\ntotal_amount_with_extra_contribution = 6.24\nextra_contribution = 60\nsolution = solve_it([total_amount - 6, total_amount_with_extra_contribution - total_amount - extra_contribution * num_employees], [total_amount, num_employees])\nans = solution[num_employees]", "\ntotal_contribution = 624000\nextra_contribution = 60\ntotal_employees = Symbol('total_employees', positive=True)\nsolution = solve_it(total_contribution - total_employees * (total_employees * extra_contribution + 60000), total_employees)\nans = solution[total_employees]"], "generated_prediction": "400.0", "options": ["A)300", "B)200", "C)400", "D)100", "E)500"], "answer": "C", "prediction": "C"}
{"question": "If there are 5,000 voters out of which 20% are not eligible to vote and there are two candidates contesting. The winning candidate won by 15% of the votes. What is the total number of votes he got ?", "generated": ["\neligible_voters = 0.8 * 5000\nvotes_won = 0.15 * eligible_voters\nans = votes_won", "\neligible_voters = 0.8 * 5000\nvotes_won = 0.15 * eligible_voters\nans = votes_won", "\neligible_voters = 0.8 * 5000\nvotes_won = 0.15 * eligible_voters\nans = votes_won", "\neligible_voters = 0.8 * 5000\nwinning_candidate_votes = 0.15 * eligible_voters\nans = winning_candidate_votes", "\neligible_voters = 0.8 * 5000\nwinning_candidate_votes = 0.15 * eligible_voters\nans = winning_candidate_votes", "\neligible_voters = 0.8 * 5000\nwinning_candidate_votes = 0.15 * eligible_voters\nans = winning_candidate_votes", "\neligible_voters = 0.8 * 5000\nvotes_won = eligible_voters * 0.15\nans = votes_won", "\ntotal_voters = 5000\neligible_voters = 0.8 * total_voters\nvotes_for_winner = 0.15 * eligible_voters\nans = votes_for_winner", "\neligible_voters = 0.8 * 5000\nvotes_for_winner = 0.15 * eligible_voters\nans = votes_for_winner", "\neligible_voters = 0.8 * 5000\nvotes_for_winner = 0.15 * eligible_voters\nans = votes_for_winner", "\ntotal_voters = 5000\neligible_voters = total_voters * 0.8\nvotes_for_winner = eligible_voters * 0.15\nans = votes_for_winner", "\ntotal_voters = 5000\neligible_voters = total_voters * 0.8\nvotes_for_winner = eligible_voters * 0.15\nans = votes_for_winner", "\ntotal_voters = 5000\neligible_voters = total_voters * 0.8\nvotes_for_winner = eligible_voters * 0.15\nans = votes_for_winner", "\neligible_voters = 0.8 * 5000\nwinning_percentage = 0.15\nvotes_for_winner = winning_percentage * eligible_voters\nans = votes_for_winner", "\neligible_voters = 0.8 * 5000\nvotes_cast = 0.15 * eligible_voters\nans = votes_cast", "\ntotal_voters = 5000\neligible_voters = total_voters * 0.8\nvotes_won = eligible_voters * 0.15\nans = votes_won + eligible_voters", "\ntotal_voters = 5000\neligible_voters = 0.8 * total_voters\nwinning_percentage = 0.15\nvotes_of_winner = winning_percentage * eligible_voters\nans = votes_of_winner", "\ntotal_voters = 5000\neligible_voters = 0.8 * total_voters\nwinning_percentage = 0.15\nsolution = solve_it(winning_percentage * eligible_voters - x, x)\nans = solution[x]", "\neligible_voters = 0.8 * 5000\nwinning_percentage = 0.15\nans = eligible_voters * winning_percentage", "\ntotal_votes = 5000\ntotal_eligible_votes = total_votes * 0.8\nwinning_candidate_votes = total_eligible_votes * 0.15\nans = winning_candidate_votes", "\neligible_voters = 0.8 * 5000\nwinning_percentage = 0.15\nans = eligible_voters * winning_percentage", "\neligible_voters = 0.8 * 5000\nwinning_percentage = 0.15\nans = eligible_voters * winning_percentage", "\ntotal_voters = 5000\neligible_voters = total_voters * 0.8\nvotes_for_winner = Symbol('votes_for_winner', positive=True)\nvotes_for_loser = Symbol('votes_for_loser', positive=True)\nsolution = solve_it([votes_for_winner - votes_for_loser - 0.15 * eligible_voters, votes_for_winner + votes_for_loser - eligible_voters], [votes_for_winner, votes_for_loser])\nans = solution[votes_for_winner]", "\nnum_voters = 5000\nnum_ineligible_voters = 0.2 * num_voters\nnum_eligible_voters = num_voters - num_ineligible_voters\nnum_votes_for_winner = 0.15 * num_eligible_voters\nans = num_votes_for_winner", "\ntotal_voters = 5000\neligible_voters = 0.8 * total_voters\nvotes_won = 0.15 * eligible_voters\nans = votes_won", "\ntotal_voters = 5000\nineligible_voters = 0.2 * total_voters\neligible_voters = total_voters - ineligible_voters\nwinning_votes = 0.15 * eligible_voters\nans = winning_votes", "\neligible_voters = 0.8 * 5000\nwinning_percentage = 0.15\nwinning_votes = winning_percentage * eligible_voters\nans = winning_votes", "\nnum_eligible_voters = 0.8 * 5000\nnum_ineligible_voters = 0.2 * 5000\nnum_votes_won = 0.15 * num_eligible_voters\ntotal_votes = num_votes_won + num_ineligible_voters\nans = total_votes", "\nnum_voters = 5000\nnum_ineligible_voters = 0.2 * num_voters\nnum_eligible_voters = num_voters - num_ineligible_voters\npercent_votes_won = 0.15\nnum_votes_won = percent_votes_won * num_eligible_voters\nans = num_votes_won", "\ntotal_voters = 5000\neligible_voters = total_voters * 0.8\ncandidate_votes = Symbol('candidate_votes', positive=True)\nwinning_margin = 0.15\nsolution = solve_it(candidate_votes - (candidate_votes + winning_margin * eligible_voters), candidate_votes)\nans = solution[candidate_votes]"], "generated_prediction": "600.0", "options": ["A)3267", "B)2678", "C)2797", "D)2300", "E)2781"], "answer": "D", "prediction": "A"}
{"question": "For bringing each copper coin from the bottom of a river, a coin-diver gets 20 cents, and for each brass coin she gets 25 cents. If after one dive, she got $3.40. What is the minimum number of copper coins that she brought?", "generated": ["\ncopper_coins = Symbol('copper_coins', positive=True)\nbrass_coins = Symbol('brass_coins', positive=True)\nsolution = solve_it(copper_coins * 0.2 + brass_coins * 0.25 - 3.4, copper_coins)\nans = solution[copper_coins]", "\ncopper_coins = Symbol('copper_coins', positive=True)\nbrass_coins = Symbol('brass_coins', positive=True)\nsolution = solve_it(copper_coins * 0.2 + brass_coins * 0.25 - 3.4, copper_coins)\nans = solution[copper_coins]", "\ncopper_coins = Symbol('copper_coins', positive=True)\nbrass_coins = Symbol('brass_coins', positive=True)\nsolution = solve_it(copper_coins * 0.2 + brass_coins * 0.25 - 3.4, copper_coins)\nans = solution[copper_coins]", "\ncopper_coins = Symbol('copper_coins', positive=True)\nbrass_coins = Symbol('brass_coins', positive=True)\nsolution = solve_it([copper_coins * 0.2 + brass_coins * 0.25 - 3.4, copper_coins - brass_coins], [copper_coins, brass_coins])\nans = solution[copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\nsolution = solve_it([num_copper_coins * 0.2 + num_brass_coins * 0.25 - 3.4, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\ncopper_coin = Symbol('copper_coin', positive=True)\nbrass_coin = Symbol('brass_coin', positive=True)\nsolution = solve_it([copper_coin * 20 + brass_coin * 25 - 340, copper_coin - brass_coin], [copper_coin, brass_coin])\nans = solution[copper_coin]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\nsolution = solve_it(20 * num_copper_coins + 25 * num_brass_coins - 340, num_copper_coins)\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_amount = 3.40\nsolution = solve_it([num_copper_coins * 20 + num_brass_coins * 25 - total_amount], [num_copper_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_amount = 3.40\nsolution = solve_it([num_copper_coins * 20 + num_brass_coins * 25 - total_amount], [num_copper_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\nsolution = solve_it(num_copper_coins * 20 + num_brass_coins * 25 - 340, num_copper_coins)\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_amount = 3.4\nsolution = solve_it([num_copper_coins * 0.2 + num_brass_coins * 0.25 - total_amount, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_amount = 3.4\nsolution = solve_it([num_copper_coins * 0.2 + num_brass_coins * 0.25 - total_amount, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_amount = 3.4\nsolution = solve_it([num_copper_coins * 0.2 + num_brass_coins * 0.25 - total_amount, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_amount = 3.4\nsolution = solve_it([num_copper_coins * 0.2 + num_brass_coins * 0.25 - total_amount, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_amount = 3.4\nsolution = solve_it([num_copper_coins * 0.2 + num_brass_coins * 0.25 - total_amount, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_amount = 3.40\nsolution = solve_it([num_copper_coins * 0.20 + num_brass_coins * 0.25 - total_amount, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_money = 3.4\nsolution = solve_it([num_copper_coins * 0.2 + num_brass_coins * 0.25 - total_money, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_coins = num_copper_coins + num_brass_coins\ntotal_money = 20 * num_copper_coins + 25 * num_brass_coins\nsolution = solve_it(total_money - 340, num_copper_coins)\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\namount_earned = 20 * num_copper_coins + 25 * num_brass_coins\nsolution = solve_it(amount_earned - 340, num_copper_coins)\nans = solution[num_copper_coins]", "\ncopper_coins = Symbol('copper_coins', positive=True)\nbrass_coins = Symbol('brass_coins', positive=True)\nsolution = solve_it(20 * copper_coins + 25 * brass_coins - 3.4, copper_coins)\nans = solution[copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\nsolution = solve_it([20 * num_copper_coins + 25 * num_brass_coins - 340, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\nsolution = solve_it([20 * num_copper_coins + 25 * num_brass_coins - 340, num_copper_coins + num_brass_coins - 3], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\nsolution = solve_it([20 * num_copper_coins + 25 * num_brass_coins - 340, num_copper_coins + num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\ncopper_coins = Symbol('copper_coins', positive=True)\nbrass_coins = Symbol('brass_coins', positive=True)\nsolution = solve_it(copper_coins * 20 + brass_coins * 25 - 340, copper_coins)\nans = solution[copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\nsolution = solve_it([num_copper_coins * 0.2 + num_brass_coins * 0.25 - 3.4], [num_copper_coins])\nans = solution[num_copper_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\nsolution = solve_it([num_copper_coins * 20 + num_brass_coins * 25 - 340, num_copper_coins - num_brass_coins], [num_copper_coins, num_brass_coins])\nans = solution[num_copper_coins]", "\ncopper_coin = Symbol('copper_coin', positive=True)\nbrass_coin = Symbol('brass_coin', positive=True)\ntotal_coins = Symbol('total_coins', positive=True)\ntotal_money = 3.40\nsolution = solve_it([copper_coin * 20 + brass_coin * 25 - total_money, copper_coin + brass_coin - total_coins], [copper_coin, brass_coin, total_coins])\nans = solution[copper_coin]", "\nnum_coins = Symbol('num_coins', positive=True)\ntotal_amount = 3.4\nsolution = solve_it(num_coins * 0.2 + num_coins * 0.25 - total_amount, num_coins)\nans = solution[num_coins]", "\nnum_copper_coins = Symbol('num_copper_coins', positive=True)\nnum_brass_coins = Symbol('num_brass_coins', positive=True)\ntotal_dive_cost = 20 * num_copper_coins + 25 * num_brass_coins\nsolution = solve_it(total_dive_cost - 340, num_copper_coins)\nans = solution[num_copper_coins]", "\nnum_copper = Symbol('num_copper', positive=True)\nnum_brass = Symbol('num_brass', positive=True)\ntotal_money = 3.40\nsolution = solve_it([num_copper * 0.20 + num_brass * 0.25 - total_money, num_copper - num_brass], [num_copper, num_brass])\nans = solution[num_copper]"], "generated_prediction": "7.56", "options": ["A)4", "B)3", "C)2", "D)1", "E)0"], "answer": "C", "prediction": "A"}
{"question": "Ram and Krishna start from A and B, respectively, at the same time and travel towards each other at constant speeds of 20m/s and 40m/s, respectively, along the same route. Ram meets Krishna at point C on the road after 10 seconds. Find the total distance between A to B.", "generated": ["\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime = 10\nsolution = solve_it(ram_speed * time + krishna_speed * time - distance, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime = 10\nsolution = solve_it(ram_speed * time + krishna_speed * time - distance, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time_taken, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time_taken, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time_taken, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time_taken, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time_taken, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time_taken, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(distance / ram_speed + distance / krishna_speed - time_taken, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\nram_distance = ram_speed * 10\nkrishna_distance = krishna_speed * 10\nsolution = solve_it(ram_distance + krishna_distance - distance, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\nram_distance = ram_speed * 10\nkrishna_distance = krishna_speed * 10\nsolution = solve_it(ram_distance + krishna_distance - distance, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\nram_distance = ram_speed * 10\nkrishna_distance = krishna_speed * 10\nsolution = solve_it(ram_distance + krishna_distance - distance, distance)\nans = solution[distance]", "\ndistance_between_A_and_C = 10 * 20\ndistance_between_B_and_C = 10 * 40\ndistance_between_A_and_B = distance_between_A_and_C + distance_between_B_and_C\nans = distance_between_A_and_B", "\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(distance_between_A_and_B / ram_speed + distance_between_A_and_B / krishna_speed - time_taken, distance_between_A_and_B)\nans = solution[distance_between_A_and_B]", "\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\ndistance = ram_speed * time_taken\nans = distance + distance", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\nram_distance_traveled = ram_speed * 10\nkrishna_distance_traveled = krishna_speed * 10\nsolution = solve_it(ram_distance_traveled + krishna_distance_traveled - distance, distance)\nans = solution[distance]", "\ndistance_between_A_to_B = Symbol('distance_between_A_to_B', positive=True)\nram_speed = 20\nkrishna_speed = 40\nram_distance = ram_speed * 10\nkrishna_distance = krishna_speed * 10\nsolution = solve_it(ram_distance + krishna_distance - distance_between_A_to_B, distance_between_A_to_B)\nans = solution[distance_between_A_to_B]", "\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken_to_meet = 10\nsolution = solve_it(distance_between_A_and_B / ram_speed + distance_between_A_and_B / krishna_speed - time_taken_to_meet, distance_between_A_and_B)\nans = solution[distance_between_A_and_B]", "\nram_speed = 20\nkrishna_speed = 40\ntime_to_meet = 10\ndistance_between_a_and_b = ram_speed * time_to_meet + krishna_speed * time_to_meet\nans = distance_between_a_and_b", "\nram_speed = 20\nkrishna_speed = 40\ntime_to_meet = 10\ndistance_between_A_and_B = ram_speed * time_to_meet + krishna_speed * time_to_meet\nans = distance_between_A_and_B", "\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken_to_meet = 10\nsolution = solve_it(distance_between_A_and_B - (ram_speed + krishna_speed) * time_taken_to_meet, distance_between_A_and_B)\nans = solution[distance_between_A_and_B]", "\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\ndistance_between_ram_and_krishna = ram_speed * time_taken\nans = distance_between_ram_and_krishna * 2", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(ram_speed * time_taken + krishna_speed * time_taken - distance, distance)\nans = solution[distance]", "\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\ndistance = ram_speed * time_taken + krishna_speed * time_taken\nans = distance", "\ndistance = Symbol('distance', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(ram_speed * time_taken + krishna_speed * time_taken - distance, distance)\nans = solution[distance]", "\nram_speed = 20\nkrishna_speed = 40\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\ntime_taken_by_ram = distance_between_A_and_B / ram_speed\ntime_taken_by_krishna = distance_between_A_and_B / krishna_speed\nsolution = solve_it(time_taken_by_ram - time_taken_by_krishna - 10, distance_between_A_and_B)\nans = solution[distance_between_A_and_B]", "\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\nram_speed = 20\nkrishna_speed = 40\ntime_taken = 10\nsolution = solve_it(distance_between_A_and_B - ram_speed * time_taken - krishna_speed * time_taken, distance_between_A_and_B)\nans = solution[distance_between_A_and_B]"], "generated_prediction": "133.33", "options": ["A)700 meters", "B)1000 meters", "C)700 kilometers", "D)555 meters", "E)600 meters"], "answer": "E", "prediction": "E"}
{"question": "Car \u2018X\u2019 covers a distance of 320 kms in 8 hours and car \u2018Y\u2019 covers a distance of 415 kms in 5 hrs. What is the difference in the speed of the two cars?", "generated": ["\ncar_x_speed = 320 / 8\ncar_y_speed = 415 / 5\nans = car_y_speed - car_x_speed", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_speed * car_x_time - car_x_distance, car_y_speed * car_y_time - car_y_distance], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_speed * car_x_time - car_x_distance, car_y_speed * car_y_time - car_y_distance], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_speed * car_x_time - car_x_distance, car_y_speed * car_y_time - car_y_distance], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_speed * car_x_time - car_x_distance, car_y_speed * car_y_time - car_y_distance], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_speed * car_x_time - car_x_distance, car_y_speed * car_y_time - car_y_distance], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_speed * car_x_time - car_x_distance, car_y_speed * car_y_time - car_y_distance], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_speed * car_x_time - car_x_distance, car_y_speed * car_y_time - car_y_distance], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\nsolution = solve_it([car_x_speed * 8 - car_x_distance, car_y_speed * 5 - car_y_distance], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\nsolution = solve_it([car_x_speed * 8 - car_x_distance, car_y_speed * 5 - car_y_distance], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = abs(solution[speed_x] - solution[speed_y])", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_distance / car_x_time - car_x_speed, car_y_distance / car_y_time - car_y_speed], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_distance - car_x_speed * car_x_time, car_y_distance - car_y_speed * car_y_time], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\ncar_x_speed = Symbol('car_x_speed', positive=True)\ncar_y_speed = Symbol('car_y_speed', positive=True)\ncar_x_distance = 320\ncar_y_distance = 415\ncar_x_time = 8\ncar_y_time = 5\nsolution = solve_it([car_x_distance - car_x_time * car_x_speed, car_y_distance - car_y_time * car_y_speed], [car_x_speed, car_y_speed])\nans = solution[car_y_speed] - solution[car_x_speed]", "\nspeed_of_car_x = Symbol('speed_of_car_x', positive=True)\nspeed_of_car_y = Symbol('speed_of_car_y', positive=True)\ndistance_covered_by_car_x = 320\ndistance_covered_by_car_y = 415\ntime_taken_by_car_x = 8\ntime_taken_by_car_y = 5\nsolution = solve_it([speed_of_car_x * time_taken_by_car_x - distance_covered_by_car_x, speed_of_car_y * time_taken_by_car_y - distance_covered_by_car_y], [speed_of_car_x, speed_of_car_y])\nans = solution[speed_of_car_y] - solution[speed_of_car_x]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_x] - solution[speed_y]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_y] - solution[speed_x]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_y] - solution[speed_x]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_x] - solution[speed_y]", "\nspeed_X = Symbol('speed_X', positive=True)\nspeed_Y = Symbol('speed_Y', positive=True)\ndistance_X = 320\ndistance_Y = 415\ntime_X = 8\ntime_Y = 5\nsolution = solve_it([speed_X * time_X - distance_X, speed_Y * time_Y - distance_Y], [speed_X, speed_Y])\nans = solution[speed_X] - solution[speed_Y]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_y] - solution[speed_x]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_x] - solution[speed_y]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_y] - solution[speed_x]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([distance_x / time_x - speed_x, distance_y / time_y - speed_y], [speed_x, speed_y])\nans = solution[speed_x] - solution[speed_y]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\nsolution = solve_it([speed_x * 8 - 320, speed_y * 5 - 415], [speed_x, speed_y])\nans = solution[speed_x] - solution[speed_y]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_y] - solution[speed_x]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_x] - solution[speed_y]", "\nspeed_x = Symbol('speed_x', positive=True)\nspeed_y = Symbol('speed_y', positive=True)\ndistance_x = 320\ndistance_y = 415\ntime_x = 8\ntime_y = 5\nsolution = solve_it([speed_x * time_x - distance_x, speed_y * time_y - distance_y], [speed_x, speed_y])\nans = solution[speed_y] - solution[speed_x]", "\nspeed_of_car_x = Symbol('speed_of_car_x', positive=True)\nspeed_of_car_y = Symbol('speed_of_car_y', positive=True)\ndistance_of_car_x = 320\ndistance_of_car_y = 415\ntime_of_car_x = 8\ntime_of_car_y = 5\nsolution = solve_it([speed_of_car_x * time_of_car_x - distance_of_car_x, speed_of_car_y * time_of_car_y - distance_of_car_y], [speed_of_car_x, speed_of_car_y])\nans = solution[speed_of_car_y] - solution[speed_of_car_x]", "\nspeed_of_car_x = Symbol('speed_of_car_x', positive=True)\nspeed_of_car_y = Symbol('speed_of_car_y', positive=True)\ndistance_of_car_x = 320\ndistance_of_car_y = 415\ntime_of_car_x = 8\ntime_of_car_y = 5\nsolution = solve_it([speed_of_car_x * time_of_car_x - distance_of_car_x, speed_of_car_y * time_of_car_y - distance_of_car_y], [speed_of_car_x, speed_of_car_y])\nans = solution[speed_of_car_y] - solution[speed_of_car_x]"], "generated_prediction": "43.0", "options": ["A)42kms/hr", "B)41km/hr", "C)43kms/hr", "D)45kms/hr", "E)None of these"], "answer": "C", "prediction": "C"}
{"question": "Winson runs from his home to his school at an average speed of 10 miles/hr, and then walks home along the same route at an average speed of 5 miles/hr. If the whole journey took one hour, how many miles is his home from his school?", "generated": ["\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\ntime_spent_running = distance / running_speed\ntime_spent_walking = distance / walking_speed\nsolution = solve_it(time_spent_running + time_spent_walking - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\ntime = 1\nsolution = solve_it([distance / running_speed + distance / walking_speed - time], [distance])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\ntime_taken_to_run = distance / running_speed\ntime_taken_to_walk = distance / walking_speed\nsolution = solve_it(time_taken_to_run + time_taken_to_walk - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nsolution = solve_it(distance / 10 + distance / 5 - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nsolution = solve_it(distance / 10 + distance / 5 - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nsolution = solve_it(distance / 10 + distance / 5 - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_time = distance / 10\nwalking_time = distance / 5\nsolution = solve_it(running_time + walking_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nrunning_time = distance / running_speed\nwalking_time = distance / walking_speed\nsolution = solve_it(running_time + walking_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nsolution = solve_it(distance / 10 + distance / 5 - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nsolution = solve_it(distance / running_speed + distance / walking_speed - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\ntime_taken = 1\nsolution = solve_it([distance / running_speed + distance / walking_speed - time_taken], [distance])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nrunning_time = distance / running_speed\nwalking_time = distance / walking_speed\nsolution = solve_it(running_time + walking_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrun_speed = 10\nwalk_speed = 5\nrun_time = distance / run_speed\nwalk_time = distance / walk_speed\nsolution = solve_it(run_time + walk_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nrunning_time = distance / running_speed\nwalking_time = distance / walking_speed\nsolution = solve_it(running_time + walking_time - 1, distance)\nans = solution[distance]", "\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\ndistance = Symbol('distance', positive=True)\nsolution = solve_it([speed * time - distance, (speed + 5) * time - distance], [speed, distance])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nrunning_time = distance / running_speed\nwalking_time = distance / walking_speed\ntotal_time = running_time + walking_time\nsolution = solve_it(total_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrun_speed = 10\nwalk_speed = 5\nrun_time = distance / run_speed\nwalk_time = distance / walk_speed\nsolution = solve_it(run_time + walk_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nrunning_time = distance / running_speed\nwalking_time = distance / walking_speed\nsolution = solve_it(running_time + walking_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrun_time = distance / 10\nwalk_time = distance / 5\nsolution = solve_it(run_time + walk_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nrunning_time = distance / running_speed\nwalking_time = distance / walking_speed\nsolution = solve_it(running_time + walking_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrun_speed = 10\nwalk_speed = 5\nrun_time = distance / run_speed\nwalk_time = distance / walk_speed\nsolution = solve_it(run_time + walk_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_time = distance / 10\nwalking_time = distance / 5\nsolution = solve_it(running_time + walking_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\ntotal_time = 1\nrunning_time = distance / 10\nwalking_time = distance / 5\nsolution = solve_it(running_time + walking_time - total_time, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nrunning_time = distance / running_speed\nwalking_time = distance / walking_speed\ntotal_time = running_time + walking_time\nsolution = solve_it(total_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nrunning_time = distance / running_speed\nwalking_time = distance / walking_speed\nsolution = solve_it(running_time + walking_time - 1, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\nrunning_time = distance / running_speed\nwalking_time = distance / walking_speed\nsolution = solve_it([running_time + walking_time - 1], [distance])\nans = solution[distance]", "\nspeed_running = 10\nspeed_walking = 5\ndistance_running = speed_running * 1\ndistance_walking = speed_walking * 1\ndistance_home_to_school = distance_running + distance_walking\nans = distance_home_to_school / 2", "\ndistance = Symbol('distance', positive=True)\nrunning_speed = 10\nwalking_speed = 5\ntime_to_run = distance / running_speed\ntime_to_walk = distance / walking_speed\nsolution = solve_it(time_to_run + time_to_walk - 1, distance)\nans = solution[distance]", "\nspeed_running = 10\nspeed_walking = 5\ntime_running = 1 / (1 / speed_running + 1 / speed_walking)\ntime_walking = 1 / (1 / speed_walking + 1 / speed_running)\ndistance = time_running * speed_running + time_walking * speed_walking\nans = distance", "\nspeed_running = 10\nspeed_walking = 5\ntotal_speed = speed_running + speed_walking\ndistance = Symbol('distance', positive=True)\nsolution = solve_it(total_speed * distance - distance * 2, distance)\nans = solution[distance]"], "generated_prediction": "3.33", "options": ["A)9", "B)6", "C)4", "D)3", "E)2"], "answer": "D", "prediction": "D"}
{"question": "A sporting goods store carries only yellow and white golf balls. At the beginning of the day it had 600 golf balls in stock, and by the end of the day it had sold 80% of its inventory of golf balls. If the store sold an equal number of yellow and white golf balls, and in doing so sold all of its white golf balls, how many yellow golf balls did the store have to begin the day?", "generated": ["\nyellow_balls = Symbol('yellow_balls', positive=True)\nwhite_balls = Symbol('white_balls', positive=True)\nsolution = solve_it([yellow_balls + white_balls - 600, yellow_balls - white_balls, yellow_balls - 0.8 * 600], [yellow_balls, white_balls])\nans = solution[yellow_balls]", "\nyellow_balls = Symbol('yellow_balls', positive=True)\nwhite_balls = Symbol('white_balls', positive=True)\nsolution = solve_it([yellow_balls + white_balls - 600, yellow_balls - white_balls, yellow_balls - 0.8 * 600], [yellow_balls, white_balls])\nans = solution[yellow_balls]", "\nnum_yellow = Symbol('num_yellow', positive=True)\nnum_white = Symbol('num_white', positive=True)\nsolution = solve_it([num_yellow + num_white - 600, num_yellow - num_white, num_yellow - 0.8 * 600], [num_yellow, num_white])\nans = solution[num_yellow]", "\nyellow_golf_balls = Symbol('yellow_golf_balls', positive=True)\nwhite_golf_balls = Symbol('white_golf_balls', positive=True)\nsolution = solve_it([yellow_golf_balls + white_golf_balls - 600, yellow_golf_balls - white_golf_balls, white_golf_balls - 480], [yellow_golf_balls, white_golf_balls])\nans = solution[yellow_golf_balls]", "\nnum_yellow = Symbol('num_yellow', positive=True)\nnum_white = Symbol('num_white', positive=True)\nsolution = solve_it([num_yellow + num_white - 600, num_yellow - num_white, num_white - 0.8 * num_yellow], [num_yellow, num_white])\nans = solution[num_yellow]", "\nyellow_golf_balls = Symbol('yellow_golf_balls', positive=True)\nwhite_golf_balls = Symbol('white_golf_balls', positive=True)\nsolution = solve_it([yellow_golf_balls + white_golf_balls - 600, yellow_golf_balls - white_golf_balls, yellow_golf_balls - 0.2 * (yellow_golf_balls + white_golf_balls)], [yellow_golf_balls, white_golf_balls])\nans = solution[yellow_golf_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\ntotal_balls = 600\nnum_sold = 0.8 * total_balls\nsolution = solve_it([num_yellow_balls + num_white_balls - total_balls, num_yellow_balls - num_white_balls, num_yellow_balls + num_white_balls - num_sold], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_yellow_golf_balls = Symbol('num_yellow_golf_balls', positive=True)\nnum_white_golf_balls = Symbol('num_white_golf_balls', positive=True)\ntotal_golf_balls = 600\nnum_sold_golf_balls = 0.8 * total_golf_balls\nsolution = solve_it([num_yellow_golf_balls + num_white_golf_balls - total_golf_balls, num_yellow_golf_balls - num_white_golf_balls, num_yellow_golf_balls + num_white_golf_balls - num_sold_golf_balls], [num_yellow_golf_balls, num_white_golf_balls])\nans = solution[num_yellow_golf_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\ntotal_balls = 600\ntotal_sold = 0.8 * total_balls\nsolution = solve_it([num_yellow_balls + num_white_balls - total_balls, num_yellow_balls - num_white_balls, num_yellow_balls + num_white_balls - total_sold], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_white_golf_balls = Symbol('num_white_golf_balls', positive=True)\nnum_yellow_golf_balls = Symbol('num_yellow_golf_balls', positive=True)\ntotal_golf_balls = 600\nnum_golf_balls_sold = 0.8 * total_golf_balls\nsolution = solve_it([num_white_golf_balls + num_yellow_golf_balls - total_golf_balls, num_white_golf_balls + num_yellow_golf_balls - num_golf_balls_sold, num_white_golf_balls - num_yellow_golf_balls], [num_white_golf_balls, num_yellow_golf_balls])\nans = solution[num_yellow_golf_balls]", "\nnum_white_balls = Symbol('num_white_balls', positive=True)\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nsolution = solve_it([num_white_balls + num_yellow_balls - 600, 0.8 * num_white_balls - num_white_balls, 0.8 * num_white_balls - num_yellow_balls], [num_white_balls, num_yellow_balls])\nans = solution[num_yellow_balls]", "\nyellow_golf_balls = Symbol('yellow_golf_balls', positive=True)\nwhite_golf_balls = Symbol('white_golf_balls', positive=True)\ntotal_golf_balls = 600\nsolution = solve_it([total_golf_balls - yellow_golf_balls - white_golf_balls, yellow_golf_balls - white_golf_balls, total_golf_balls * 0.8 - yellow_golf_balls], [yellow_golf_balls, white_golf_balls])\nans = solution[yellow_golf_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\nnum_balls_sold = 0.8 * 600\nnum_yellow_balls_sold = num_balls_sold / 2\nnum_white_balls_sold = num_balls_sold / 2\nsolution = solve_it([num_yellow_balls - num_yellow_balls_sold, num_white_balls - num_white_balls_sold], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\ntotal_balls = 600\nsold_balls = 80\nsolution = solve_it([num_yellow_balls + num_white_balls - total_balls, num_yellow_balls - num_white_balls, num_yellow_balls + num_white_balls - sold_balls * total_balls / 100], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_yellow_golf_balls = Symbol('num_yellow_golf_balls', positive=True)\nnum_white_golf_balls = Symbol('num_white_golf_balls', positive=True)\nnum_golf_balls_sold = 0.8 * (num_yellow_golf_balls + num_white_golf_balls)\nsolution = solve_it([num_yellow_golf_balls + num_white_golf_balls - 600, num_yellow_golf_balls - num_white_golf_balls, num_white_golf_balls - num_golf_balls_sold], [num_yellow_golf_balls, num_white_golf_balls])\nans = solution[num_yellow_golf_balls]", "\nyellow_golf_balls = Symbol('yellow_golf_balls', positive=True)\nwhite_golf_balls = Symbol('white_golf_balls', positive=True)\nsolution = solve_it([yellow_golf_balls + white_golf_balls - 600, yellow_golf_balls - white_golf_balls, white_golf_balls - 0.8 * 600], [yellow_golf_balls, white_golf_balls])\nans = solution[yellow_golf_balls]", "\ntotal_balls = 600\nsold_balls = 0.8 * total_balls\nnum_yellow_balls = total_balls - sold_balls\nans = num_yellow_balls", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\ntotal_balls = 600\nsold_balls = 80\nsolution = solve_it([num_yellow_balls + num_white_balls - total_balls, num_yellow_balls - num_white_balls, num_white_balls - sold_balls * total_balls / 100], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_white_balls = Symbol('num_white_balls', positive=True)\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\ntotal_balls = 600\ntotal_sold = 0.8 * total_balls\nsold_white_balls = num_white_balls\nsold_yellow_balls = num_yellow_balls\nsolution = solve_it([sold_white_balls + sold_yellow_balls - total_sold, sold_white_balls - num_white_balls], [num_white_balls, num_yellow_balls])\nans = solution[num_yellow_balls]", "\nyellow_golf_balls = Symbol('yellow_golf_balls', positive=True)\nwhite_golf_balls = Symbol('white_golf_balls', positive=True)\ntotal_golf_balls = 600\nsold_golf_balls = 0.8 * total_golf_balls\nsolution = solve_it([yellow_golf_balls + white_golf_balls - total_golf_balls, yellow_golf_balls - white_golf_balls, yellow_golf_balls + white_golf_balls - sold_golf_balls], [yellow_golf_balls, white_golf_balls])\nans = solution[yellow_golf_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\nnum_balls_sold = 0.8 * (num_yellow_balls + num_white_balls)\nnum_yellow_balls_sold = num_white_balls\nnum_white_balls_sold = num_white_balls\nsolution = solve_it([num_balls_sold - num_yellow_balls_sold - num_white_balls_sold, num_yellow_balls - num_white_balls], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\nnum_yellow_balls_sold = num_white_balls\nnum_white_balls_sold = num_white_balls\nnum_yellow_balls_left = num_yellow_balls - num_yellow_balls_sold\nnum_white_balls_left = num_white_balls - num_white_balls_sold\nsolution = solve_it([num_yellow_balls_left + num_white_balls_left - 600 * 0.8, num_yellow_balls_sold - num_white_balls_sold], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\ntotal_balls = 600\nnum_sold_balls = 0.8 * total_balls\nsolution = solve_it([num_yellow_balls + num_white_balls - total_balls, num_yellow_balls - num_white_balls, num_yellow_balls + num_white_balls - num_sold_balls], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nyellow_balls_beginning = Symbol('yellow_balls_beginning', positive=True)\nwhite_balls_beginning = 600 - yellow_balls_beginning\nyellow_balls_sold = white_balls_beginning\nyellow_balls_end = yellow_balls_beginning - yellow_balls_sold\nyellow_balls_end_percentage = yellow_balls_end / yellow_balls_beginning\nsolution = solve_it(yellow_balls_end_percentage - 0.2, yellow_balls_beginning)\nans = solution[yellow_balls_beginning]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\nnum_yellow_balls_sold = num_white_balls\nnum_white_balls_sold = num_white_balls\nnum_yellow_balls_left = num_yellow_balls - num_yellow_balls_sold\nnum_white_balls_left = num_white_balls - num_white_balls_sold\nsolution = solve_it([num_yellow_balls_left + num_white_balls_left - 600 * 0.8, num_yellow_balls_left - num_white_balls_left], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nyellow_golf_ball_sold = Symbol('yellow_golf_ball_sold', positive=True)\nwhite_golf_ball_sold = Symbol('white_golf_ball_sold', positive=True)\nyellow_golf_ball_begin = Symbol('yellow_golf_ball_begin', positive=True)\nwhite_golf_ball_begin = Symbol('white_golf_ball_begin', positive=True)\nsolution = solve_it([yellow_golf_ball_sold + white_golf_ball_sold - 0.8 * (yellow_golf_ball_begin + white_golf_ball_begin), yellow_golf_ball_sold - white_golf_ball_sold, white_golf_ball_sold - white_golf_ball_begin], [yellow_golf_ball_sold, white_golf_ball_sold, yellow_golf_ball_begin])\nans = solution[yellow_golf_ball_begin]", "\nnum_yellow_balls = Symbol('num_yellow_balls')\nnum_white_balls = Symbol('num_white_balls')\ntotal_balls = 600\nnum_sold_balls = 0.8 * total_balls\nsolution = solve_it([num_yellow_balls + num_white_balls - total_balls, num_yellow_balls - num_white_balls, num_yellow_balls + num_white_balls - num_sold_balls], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\ntotal_balls = 600\ntotal_sold = 0.8 * total_balls\nnum_yellow_sold = total_sold / 2\nnum_white_sold = total_sold / 2\nsolution = solve_it([num_yellow_balls - num_yellow_sold - num_yellow_balls, num_white_balls - num_white_sold], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\nnum_sold_yellow_balls = num_yellow_balls * 0.8\nnum_sold_white_balls = num_white_balls * 0.8\nsolution = solve_it([num_sold_yellow_balls - num_sold_white_balls, num_yellow_balls + num_white_balls - 600], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]", "\nnum_yellow_balls = Symbol('num_yellow_balls', positive=True)\nnum_white_balls = Symbol('num_white_balls', positive=True)\ntotal_balls = 600\ntotal_sold = 0.8 * total_balls\nnum_yellow_sold = total_sold / 2\nnum_white_sold = total_sold / 2\nsolution = solve_it([num_yellow_balls - num_yellow_sold, num_white_balls - num_white_sold], [num_yellow_balls, num_white_balls])\nans = solution[num_yellow_balls]"], "generated_prediction": "None", "options": ["A)80", "B)120", "C)240", "D)320", "E)360"], "answer": "E", "prediction": "None"}
{"question": "A flagstaff 17.5 metre high casts a shadow of length 40.25 metre. The height of building, which casts a shadow of length 28.75 metre under similar conditions will be :", "generated": ["\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow = 40.25\nbuilding_shadow = 28.75\nbuilding_height = flagstaff_height * building_shadow / flagstaff_shadow\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow = 40.25\nbuilding_shadow = 28.75\nbuilding_height = flagstaff_height * building_shadow / flagstaff_shadow\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow = 40.25\nbuilding_shadow = 28.75\nbuilding_height = flagstaff_height * building_shadow / flagstaff_shadow\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow = 40.25\nbuilding_shadow = 28.75\nbuilding_height = flagstaff_height * building_shadow / flagstaff_shadow\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow = 40.25\nbuilding_shadow = 28.75\nbuilding_height = flagstaff_height * building_shadow / flagstaff_shadow\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = building_shadow_length * flagstaff_height / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = building_shadow_length * flagstaff_height / flagstaff_shadow_length\nans = building_height", "\nflagstaff_height = 17.5\nflagstaff_shadow = 40.25\nbuilding_shadow = 28.75\nans = building_shadow * flagstaff_height / flagstaff_shadow", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nans = building_shadow_length * flagstaff_height / flagstaff_shadow_length", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_shadow_length = 28.75\nbuilding_height = flagstaff_height * building_shadow_length / flagstaff_shadow_length\nans = building_height", "\nheight = Symbol('height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nsolution = solve_it([height / flagstaff_height - shadow_length / flagstaff_shadow_length, height - 28.75], [height, shadow_length])\nans = solution[height]", "\nflagstaff_height = 17.5\nflagstaff_shadow = 40.25\nbuilding_height = Symbol('building_height', positive=True)\nbuilding_shadow = 28.75\nsolution = solve_it(building_height / building_shadow - flagstaff_height / flagstaff_shadow, building_height)\nans = solution[building_height]", "\nheight = Symbol('height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nsolution = solve_it([shadow_length - height * flagstaff_shadow_length / flagstaff_height, shadow_length - 28.75], [height, shadow_length])\nans = solution[height]", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_height = Symbol('building_height', positive=True)\nbuilding_shadow_length = 28.75\nsolution = solve_it([building_height / flagstaff_height - building_shadow_length / flagstaff_shadow_length], [building_height])\nans = solution[building_height]", "\nflagstaff_height = 17.5\nflagstaff_shadow_length = 40.25\nbuilding_height = Symbol('building_height', positive=True)\nbuilding_shadow_length = 28.75\nsolution = solve_it(building_height / flagstaff_height * flagstaff_shadow_length - building_shadow_length, building_height)\nans = solution[building_height]"], "generated_prediction": "12.5", "options": ["A)12 metre", "B)12.5 metre", "C)13.5 metre", "D)14 metre", "E)15 metre"], "answer": "B", "prediction": "B"}
{"question": "Two cars are travelling from the same starting point in the same direction, having started their commute at the same time. The first car travels at a steady rate of 55 mph, while the second travels at a steady rate of 52 mph. How much time will pass before the cars are 15 miles away from each other?", "generated": ["\ncar1_speed = 55\ncar2_speed = 52\ndistance = 15\ntime = Symbol('time', positive=True)\nsolution = solve_it(car1_speed * time - car2_speed * time - distance, time)\nans = solution[time]", "\ncar1_speed = 55\ncar2_speed = 52\ndistance = 15\ntime = Symbol('time', positive=True)\nsolution = solve_it(car1_speed * time - car2_speed * time - distance, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\ncar_1_speed = 55\ncar_2_speed = 52\ncar_1_distance = car_1_speed * time\ncar_2_distance = car_2_speed * time\nsolution = solve_it(car_1_distance - car_2_distance - 15, time)\nans = solution[time]", "\ncar1_speed = 55\ncar2_speed = 52\ndistance_between_cars = 15\ntime = Symbol('time', positive=True)\nsolution = solve_it(car1_speed * time - car2_speed * time - distance_between_cars, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\nfirst_car_speed = 55\nsecond_car_speed = 52\ndistance_between_cars = 15\nsolution = solve_it(first_car_speed * time - second_car_speed * time - distance_between_cars, time)\nans = solution[time]", "\ndistance = 15\ncar_1_speed = 55\ncar_2_speed = 52\ntime = distance / (car_1_speed - car_2_speed)\nans = time", "\ntime = Symbol('time', positive=True)\ncar1_speed = 55\ncar2_speed = 52\ndistance = 15\nsolution = solve_it(time * car1_speed + time * car2_speed - distance, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\nfirst_car_speed = 55\nsecond_car_speed = 52\ndistance_between_cars = 15\nsolution = solve_it(time * (first_car_speed - second_car_speed) - distance_between_cars, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\nfirst_car_speed = 55\nsecond_car_speed = 52\ndistance_between_cars = 15\nsolution = solve_it(time * (first_car_speed - second_car_speed) - distance_between_cars, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\nfirst_car_speed = 55\nsecond_car_speed = 52\ndistance_between_cars = 15\nsolution = solve_it(time * (first_car_speed + second_car_speed) - distance_between_cars, time)\nans = solution[time]", "\nfirst_car_speed = 55\nsecond_car_speed = 52\ndistance_between_cars = 15\ntime = Symbol('time', positive=True)\nsolution = solve_it(first_car_speed * time - second_car_speed * time - distance_between_cars, time)\nans = solution[time]", "\nfirst_car_speed = 55\nsecond_car_speed = 52\ndistance_between_cars = 15\ntime = Symbol('time', positive=True)\nsolution = solve_it(first_car_speed * time - second_car_speed * time - distance_between_cars, time)\nans = solution[time]", "\ncar_1_speed = 55\ncar_2_speed = 52\ndistance_between_cars = 15\ntime = Symbol('time', positive=True)\nsolution = solve_it(car_1_speed * time - car_2_speed * time - distance_between_cars, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\ncar_1_speed = 55\ncar_2_speed = 52\ndistance = 15\nsolution = solve_it(time * car_1_speed - time * car_2_speed - distance, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\ndistance_between_cars = 15\nfirst_car_speed = 55\nsecond_car_speed = 52\nsolution = solve_it(time * (first_car_speed - second_car_speed) - distance_between_cars, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\ncar_1_speed = 55\ncar_2_speed = 52\ndistance_between_cars = 15\nsolution = solve_it(time * (car_1_speed + car_2_speed) - distance_between_cars, time)\nans = solution[time]", "\nspeed_car_1 = 55\nspeed_car_2 = 52\ndistance = 15\ntime = distance / (speed_car_1 - speed_car_2)\nans = time", "\ndistance = 15\ncar_1_speed = 55\ncar_2_speed = 52\ntime = Symbol('time', positive=True)\nsolution = solve_it(distance - car_1_speed * time - car_2_speed * time, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\ndistance_between_cars = 15\nfirst_car_speed = 55\nsecond_car_speed = 52\nsolution = solve_it(time * first_car_speed + time * second_car_speed - distance_between_cars, time)\nans = solution[time]", "\ncar_speed_1 = 55\ncar_speed_2 = 52\ndistance = 15\ntime = Symbol('time', positive=True)\ndistance_between_cars = car_speed_1 * time - car_speed_2 * time - distance\nsolution = solve_it(distance_between_cars, time)\nans = solution[time]", "\ntime = Symbol('time', positive=True)\ndistance_between_cars = 15\nspeed_of_car_1 = 55\nspeed_of_car_2 = 52\nsolution = solve_it(time * (speed_of_car_1 + speed_of_car_2) - distance_between_cars, time)\nans = solution[time]", "\ncar_1_speed = 55\ncar_2_speed = 52\ntime_taken = Symbol('time_taken', positive=True)\ndistance_between_cars = 15\nsolution = solve_it(time_taken * car_1_speed - time_taken * car_2_speed - distance_between_cars, time_taken)\nans = solution[time_taken]", "\ncar_1_speed = 55\ncar_2_speed = 52\ndistance_between_cars = 15\ntime_taken = distance_between_cars / (car_1_speed - car_2_speed)\nans = time_taken", "\nfirst_car_speed = 55\nsecond_car_speed = 52\ndistance_between_cars = 15\ntime_taken = distance_between_cars / (first_car_speed - second_car_speed)\nans = time_taken", "\ncar_1_speed = 55\ncar_2_speed = 52\ndistance_between_cars = 15\ntime_taken = distance_between_cars / (car_1_speed - car_2_speed)\nans = time_taken", "\ncar_1_speed = 55\ncar_2_speed = 52\ndistance_between_cars = 15\ntime_taken = distance_between_cars / (car_1_speed - car_2_speed)\nans = time_taken", "\ncar_1_speed = 55\ncar_2_speed = 52\ndistance_between_cars = 15\ntime_taken = distance_between_cars / (car_1_speed - car_2_speed)\nans = time_taken", "\ncar_1_speed = 55\ncar_2_speed = 52\ndistance_between_cars = 15\ntime_passed = distance_between_cars / (car_1_speed - car_2_speed)\nans = time_passed", "\ncar_1_speed = 55\ncar_2_speed = 52\ndistance_between_cars = 15\ntime_taken = distance_between_cars / (car_1_speed - car_2_speed)\nans = time_taken", "\ncar_speed = Symbol('car_speed', positive=True)\ntime_taken = Symbol('time_taken', positive=True)\ndistance_between_cars = 15\nsolution = solve_it([car_speed * time_taken - distance_between_cars, car_speed - 55, car_speed - 52], [car_speed, time_taken])\nans = solution[time_taken]"], "generated_prediction": "5.0", "options": ["A)3 hours", "B)5 hours", "C)6 hours", "D)4 hours", "E)7 hours"], "answer": "B", "prediction": "B"}
{"question": "The events A and B are independent. The probability that event A occurs is 0.6, and the probability that at least one of the events A or B occurs is 0.96. What is the probability that event B occurs?", "generated": ["\nprob_A = 0.6\nprob_B = 0.96 - prob_A\nans = prob_B", "\nA = 0.6\nB = 0.96 - A\nans = B", "\nprob_A = 0.6\nprob_B = Symbol('prob_B', positive=True)\nprob_A_or_B = 0.96\nsolution = solve_it(prob_A + prob_B - prob_A_or_B, prob_B)\nans = solution[prob_B]", "\nprob_A = 0.6\nprob_B = Symbol('prob_B', positive=True)\nprob_A_or_B = 0.96\nsolution = solve_it(prob_A + prob_B - prob_A_or_B, prob_B)\nans = solution[prob_B]", "\nprob_A = 0.6\nprob_B = Symbol('prob_B', positive=True)\nprob_A_or_B = 0.96\nsolution = solve_it(prob_A + prob_B - prob_A_or_B, prob_B)\nans = solution[prob_B]", "\nprob_A = 0.6\nprob_B = Symbol('prob_B', positive=True)\nprob_A_or_B = 0.96\nsolution = solve_it(prob_A + prob_B - prob_A_or_B, prob_B)\nans = solution[prob_B]", "\nprob_A = 0.6\nprob_B = Symbol('prob_B', positive=True)\nprob_A_or_B = 0.96\nsolution = solve_it(prob_A + prob_B - prob_A_or_B, prob_B)\nans = solution[prob_B]", "\nprob_A = 0.6\nprob_B = Symbol('prob_B', positive=True)\nprob_A_or_B = 0.96\nsolution = solve_it(prob_A + prob_B - prob_A_or_B, prob_B)\nans = solution[prob_B]", "\nprobability_A = 0.6\nprobability_B = Symbol('probability_B', positive=True)\nprobability_A_or_B = 0.96\nsolution = solve_it(probability_A + probability_B - probability_A_or_B, probability_B)\nans = solution[probability_B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A * B - 0.6 * 0.4, A + B - 0.96], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A * B - 0.6 * 0.6, A + B - 0.96], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = 0.6\nB = 1 - (1 - A) * (1 - A)\nans = B", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nprob_A = 0.6\nprob_B = Symbol('prob_B', positive=True)\nprob_A_or_B = 0.96\nsolution = solve_it([prob_A + prob_B - prob_A_or_B, prob_A * prob_B], prob_B)\nans = solution[prob_B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nprob_A = 0.6\nprob_B = 0.96 - prob_A\nans = prob_B", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it([A + B - 0.96, A - 0.6], [A, B])\nans = solution[B]"], "generated_prediction": "0.36", "options": ["A)0.5", "B)0.6", "C)0.7", "D)0.8", "E)0.9"], "answer": "E", "prediction": "B"}
{"question": "The ratio of the volumes of a cube to that of the sphere which will fit inside the cube is?", "generated": ["\ncube_side = Symbol('cube_side', positive=True)\ncube_volume = cube_side ** 3\nsphere_radius = cube_side / 2\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nans = simplify(cube_volume / sphere_volume)", "\ncube_side = Symbol('cube_side', positive=True)\ncube_volume = cube_side ** 3\nsphere_radius = cube_side / 2\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nans = simplify(cube_volume / sphere_volume)", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it(cube_side ** 3 - (4 / 3) * math.pi * sphere_radius ** 3, sphere_radius)\nans = solution[sphere_radius]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it(cube_side ** 3 - (4 / 3) * math.pi * sphere_radius ** 3, sphere_radius)\nans = solution[sphere_radius]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3, cube_side - 2 * sphere_radius], [cube_side, sphere_radius])\nans = solution[cube_side] ** 3 / solution[sphere_radius] ** 3", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3, cube_side - 2 * sphere_radius], [cube_side, sphere_radius])\nans = solution[cube_side] ** 3 / solution[sphere_radius] ** 3", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it(cube_side ** 3 - (4 / 3) * math.pi * sphere_radius ** 3, sphere_radius)\nans = solution[sphere_radius] / solution[cube_side]", "\ncube_volume = Symbol('cube_volume', positive=True)\nsphere_volume = Symbol('sphere_volume', positive=True)\nsolution = solve_it(cube_volume / sphere_volume - 8 / 3, cube_volume)\nans = solution[cube_volume]", "\ncube_volume = Symbol('cube_volume', positive=True)\nsphere_volume = Symbol('sphere_volume', positive=True)\nsolution = solve_it(cube_volume / sphere_volume - 8 / 3, cube_volume)\nans = solution[cube_volume]", "\ncube_side = Symbol('cube_side', positive=True)\ncube_volume = cube_side ** 3\nsphere_radius = cube_side / 2\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nratio = cube_volume / sphere_volume\nans = simplify(ratio)", "\ncube_volume = Symbol('cube_volume', positive=True)\nsphere_volume = Symbol('sphere_volume', positive=True)\nsolution = solve_it(cube_volume / sphere_volume - 8 / 3, cube_volume)\nans = solution[cube_volume]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 / 3 * math.pi)], [cube_side])\nans = solution[cube_side]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 / 3 * math.pi)], [cube_side])\nans = solution[cube_side]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\ncube_volume = cube_side ** 3\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nsolution = solve_it([cube_side - 2 * sphere_radius, cube_volume - sphere_volume], [cube_side, sphere_radius])\nans = simplify(solution[cube_side] / solution[sphere_radius])", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\ncube_volume = cube_side ** 3\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nsolution = solve_it([cube_volume - sphere_volume, cube_side - 2 * sphere_radius], [cube_side, sphere_radius])\nans = cube_volume / sphere_volume", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\ncube_volume = cube_side ** 3\nsphere_volume = (4 / 3) * math.pi * sphere_radius ** 3\nsolution = solve_it([cube_volume - sphere_volume, sphere_radius - cube_side / 2], [cube_side, sphere_radius])\nans = cube_volume / sphere_volume", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 * math.pi / 3)], [cube_side])\nans = solution[cube_side]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\ncube_volume = cube_side ** 3\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nsolution = solve_it([cube_volume / sphere_volume - 8 / 3], [cube_side, sphere_radius])\nans = cube_volume / sphere_volume", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\ncube_volume = cube_side ** 3\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nsolution = solve_it([cube_volume - sphere_volume, sphere_radius - cube_side / 2], [cube_side, sphere_radius])\nans = cube_volume / sphere_volume", "\ncube_volume = Symbol('cube_volume', positive=True)\nsphere_volume = Symbol('sphere_volume', positive=True)\nsolution = solve_it(cube_volume - sphere_volume * math.pi, cube_volume)\nans = solution[cube_volume]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\ncube_volume = cube_side ** 3\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nsolution = solve_it(cube_volume / sphere_volume - 2 / math.pi, sphere_radius)\nans = solution[sphere_radius]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\ncube_volume = cube_side ** 3\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nsolution = solve_it(cube_volume - sphere_volume, sphere_radius)\nans = solution[sphere_radius] / cube_side", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\ncube_volume = cube_side ** 3\nsphere_volume = 4 / 3 * math.pi * sphere_radius ** 3\nsolution = solve_it([cube_side - 2 * sphere_radius, cube_volume / sphere_volume], [cube_side, sphere_radius])\nans = solution[cube_side] / solution[sphere_radius]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 / 3) * math.pi], [cube_side, sphere_radius])\nans = solution[cube_side] / solution[sphere_radius]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 / 3 * math.pi), cube_side - 2 * sphere_radius], [cube_side, sphere_radius])\nans = solution[cube_side] / solution[sphere_radius]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 / 3 * math.pi)], [cube_side, sphere_radius])\nans = cube_side / sphere_radius", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 / 3 * math.pi)], [cube_side, sphere_radius])\nans = solution[cube_side] / solution[sphere_radius]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 / 3 * math.pi)], [cube_side, sphere_radius])\nans = solution[cube_side] / solution[sphere_radius]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 / 3) * math.pi], [cube_side, sphere_radius])\nans = solution[cube_side] / solution[sphere_radius]", "\ncube_side = Symbol('cube_side', positive=True)\nsphere_radius = Symbol('sphere_radius', positive=True)\nsolution = solve_it([cube_side ** 3 - sphere_radius ** 3 * (4 / 3) * math.pi], [cube_side, sphere_radius])\nans = solution[cube_side] / solution[sphere_radius]"], "generated_prediction": "0.620350490899399*cube_side", "options": ["A)2: \u03c0", "B)7:2", "C)8:2", "D)6: \u03c0", "E)8:3"], "answer": "D", "prediction": "D"}
{"question": "My wall contains 8 red colour ties, 13 violet colour ties,10 blue colour ties, 5 pink colour ties, 4 green colour ties. If electricity is gone and I want at least two ties of same colour then how many ties I should take out from my rack?", "generated": ["\nans = 2", "\nred_ties = 8\nviolet_ties = 13\nblue_ties = 10\npink_ties = 5\ngreen_ties = 4\nans = 2", "\nred_ties = 8\nviolet_ties = 13\nblue_ties = 10\npink_ties = 5\ngreen_ties = 4\nans = 2", "\nred_ties = 8\nviolet_ties = 13\nblue_ties = 10\npink_ties = 5\ngreen_ties = 4\nans = 2", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\nans = 2", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\nans = 2", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\nans = 2", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\nans = 2", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\nans = 2", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\nans = 2", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\nans = 2", "\nred = 8\nviolet = 13\nblue = 10\npink = 5\ngreen = 4\nans = 2", "\nnum_ties = 8 + 13 + 10 + 5 + 4\nans = math.ceil(num_ties / 2)", "\nnum_red_ties = 8\nnum_violet_ties = 13\nnum_blue_ties = 10\nnum_pink_ties = 5\nnum_green_ties = 4\nans = 2", "\nnum_red_ties = 8\nnum_violet_ties = 13\nnum_blue_ties = 10\nnum_pink_ties = 5\nnum_green_ties = 4\nans = 2", "\noptions = [2, 3, 4, 5, 6]\nfor option in options:\n    if option >= 2:\n        ans = option\n        break", "\ntotal_ties = 8 + 13 + 10 + 5 + 4\nans = total_ties - math.factorial(5)", "\nties_of_same_colour = 2\nans = ties_of_same_colour", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\nans = num_red + num_violet + num_blue + num_pink + num_green - 1", "\nnum_ties = 8 + 13 + 10 + 5 + 4\nans = num_ties - (8 * 7 + 13 * 12 + 10 * 9 + 5 * 4 + 4 * 3) / 2", "\nnum_ties = 8 + 13 + 10 + 5 + 4\nans = num_ties - (8 * 7 + 13 * 12 + 10 * 9 + 5 * 4 + 4 * 3) / 2", "\nnum_red_ties = 8\nnum_violet_ties = 13\nnum_blue_ties = 10\nnum_pink_ties = 5\nnum_green_ties = 4\nnum_ties = num_red_ties + num_violet_ties + num_blue_ties + num_pink_ties + num_green_ties\nans = num_ties - num_red_ties - num_violet_ties - num_blue_ties - num_pink_ties - num_green_ties + 2", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\nnum_ties = num_red + num_violet + num_blue + num_pink + num_green\nans = num_ties - (num_red * (num_red - 1) + num_violet * (num_violet - 1) + num_blue * (num_blue - 1) + num_pink * (num_pink - 1) + num_green * (num_green - 1)) / 2", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\ntotal_ties = num_red + num_violet + num_blue + num_pink + num_green\nans = total_ties - max(num_red, num_violet, num_blue, num_pink, num_green)", "\nnum_red_ties = 8\nnum_violet_ties = 13\nnum_blue_ties = 10\nnum_pink_ties = 5\nnum_green_ties = 4\ntotal_ties = num_red_ties + num_violet_ties + num_blue_ties + num_pink_ties + num_green_ties\nans = total_ties - min(num_red_ties, num_violet_ties, num_blue_ties, num_pink_ties, num_green_ties)", "\nnum_ties = 8 + 13 + 10 + 5 + 4\nans = num_ties - math.ceil(num_ties / 2)", "\nred_ties = 8\nviolet_ties = 13\nblue_ties = 10\npink_ties = 5\ngreen_ties = 4\ntotal_ties = red_ties + violet_ties + blue_ties + pink_ties + green_ties\nans = total_ties - (red_ties * (red_ties - 1) / 2 + violet_ties * (violet_ties - 1) / 2 + blue_ties * (blue_ties - 1) / 2 + pink_ties * (pink_ties - 1) / 2 + green_ties * (green_ties - 1) / 2)", "\nnum_red = 8\nnum_violet = 13\nnum_blue = 10\nnum_pink = 5\nnum_green = 4\ntotal_num_ties = num_red + num_violet + num_blue + num_pink + num_green\nans = total_num_ties - math.factorial(num_red) * math.factorial(num_violet) * math.factorial(num_blue) * math.factorial(num_pink) * math.factorial(num_green)", "\nnum_ties = 8 + 13 + 10 + 5 + 4\nnum_ties_of_same_colour = math.factorial(8) + math.factorial(13) + math.factorial(10) + math.factorial(5) + math.factorial(4)\nans = num_ties - num_ties_of_same_colour", "\nnum_red_ties = 8\nnum_violet_ties = 13\nnum_blue_ties = 10\nnum_pink_ties = 5\nnum_green_ties = 4\nties_to_be_taken = 2\nans = num_red_ties + num_violet_ties + num_blue_ties + num_pink_ties + num_green_ties - ties_to_be_taken"], "generated_prediction": "2", "options": ["A)2", "B)3", "C)4", "D)5", "E)6"], "answer": "E", "prediction": "A"}
{"question": "Find 25/12*5", "generated": ["\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25/12*5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5", "\nans = 25 / 12 * 5"], "generated_prediction": "10.416666666666668", "options": ["A)2.5498", "B)0.4167", "C)3.3987", "D)8.5497", "E)5.6312"], "answer": "B", "prediction": "A"}
{"question": "The value of log2 4 is:", "generated": ["\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log(4, 2)", "\nans = math.log2(4)", "\nans = math.log2(4)", "\nans = math.log2(4)", "\nans = math.log2(4)", "\nans = math.log2(4)"], "generated_prediction": "2.0", "options": ["A)2", "B)4", "C)6", "D)8", "E)12"], "answer": "A", "prediction": "A"}
{"question": "Calculate the percentage gain of a merchant who purchased 90 kg of oranges for Rs. 450 and sold the whole lot at the rate of Rs. 7.50 per kg.", "generated": ["\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price * 100", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price * 100", "\ncost_price = 450\nselling_price = 90 * 7.5\nprofit = selling_price - cost_price\nans = profit / cost_price * 100", "\ncost_price = 450\nselling_price = 90 * 7.5\nans = (selling_price - cost_price) / cost_price * 100", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price", "\ncost_per_kg = 450 / 90\nselling_price_per_kg = 7.5\nans = (selling_price_per_kg - cost_per_kg) / cost_per_kg", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\nprofit = selling_price - cost_price\nans = profit / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\nprofit = selling_price - cost_price\nans = profit / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\ngain = selling_price - cost_price\nans = gain * 100 / cost_price", "\ncost_per_kg = 450 / 90\nselling_price_per_kg = 7.5\ngain = (selling_price_per_kg - cost_per_kg) / cost_per_kg\nans = gain * 100", "\ncost_per_kg = 450 / 90\nselling_price_per_kg = 7.5\ngain = (selling_price_per_kg - cost_per_kg) / cost_per_kg\nans = gain * 100", "\ncost_price = 450\nselling_price = 90 * 7.5\nans = (selling_price - cost_price) / cost_price", "\ncost_per_kg = 450 / 90\nsell_per_kg = 7.5\ngain = sell_per_kg - cost_per_kg\nans = gain / cost_per_kg * 100", "\ncost_per_kg = 450 / 90\nselling_price_per_kg = 7.5\nprofit_percentage = (selling_price_per_kg - cost_per_kg) / cost_per_kg * 100\nans = profit_percentage", "\ncost_per_kg = 450 / 90\nprofit_per_kg = 7.5 - cost_per_kg\nprofit_percentage = profit_per_kg / cost_per_kg\nans = profit_percentage * 100", "\ncost_price = 450\nselling_price = 90 * 7.5\nans = (selling_price - cost_price) / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\nans = (selling_price - cost_price) / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\nans = (selling_price - cost_price) / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\nans = (selling_price - cost_price) / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\nans = (selling_price - cost_price) / cost_price", "\ncost_price = 450\nselling_price = 90 * 7.5\nans = (selling_price - cost_price) / cost_price", "\ncost_per_kg = 450 / 90\nselling_price_per_kg = 7.5\ngain = selling_price_per_kg - cost_per_kg\nans = gain / cost_per_kg"], "generated_prediction": "0.5", "options": ["A)50 %", "B)60 %", "C)55 %", "D)70 %", "E)58%"], "answer": "A", "prediction": "A"}
{"question": "A train M leaves City A at 5 am and reaches City B at 9am. Another train N leaves City B at 7am and reaches City A at 1030am. At what time do the 2 trains cross one another?", "generated": ["\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntrain_m_time = 4\ntrain_n_time = 3.5\nsolution = solve_it([train_m_speed * train_m_time - distance, train_n_speed * train_n_time - distance], [train_m_speed, train_n_speed, distance])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\ndistance = solution[distance]", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntrain_M_time = 4\ntrain_N_time = 3.5\nsolution = solve_it([train_M_speed * train_M_time - distance, train_N_speed * train_N_time - distance], [train_M_speed, train_N_speed])\ntrain_M_speed = solution[train_M_speed]\ntrain_N_speed = solution[train_N_speed]\ncrossing_time = distance / (train_M_speed + train_N_speed)\nans = crossing_time", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ntrain_m_distance = Symbol('train_m_distance', positive=True)\ntrain_n_distance = Symbol('train_n_distance', positive=True)\ntrain_m_time = Symbol('train_m_time', positive=True)\ntrain_n_time = Symbol('train_n_time', positive=True)\nsolution = solve_it([train_m_speed * train_m_time - train_m_distance, train_n_speed * train_n_time - train_n_distance, train_m_time - train_n_time], [train_m_speed, train_n_speed, train_m_distance, train_n_distance, train_m_time, train_n_time])\nans = solution[train_m_time]", "\nM_speed = Symbol('M_speed', positive=True)\nN_speed = Symbol('N_speed', positive=True)\nM_distance = Symbol('M_distance', positive=True)\nN_distance = Symbol('N_distance', positive=True)\nM_time = Symbol('M_time', positive=True)\nN_time = Symbol('N_time', positive=True)\nsolution = solve_it([M_distance / M_speed - M_time, N_distance / N_speed - N_time, M_time - N_time], [M_speed, N_speed, M_distance, N_distance, M_time, N_time])\nans = solution[M_time]", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ntrain_m_distance = Symbol('train_m_distance', positive=True)\ntrain_n_distance = Symbol('train_n_distance', positive=True)\ntrain_m_time = Symbol('train_m_time', positive=True)\ntrain_n_time = Symbol('train_n_time', positive=True)\nsolution = solve_it([train_m_speed * train_m_time - train_m_distance, train_n_speed * train_n_time - train_n_distance, train_m_time - train_n_time], [train_m_speed, train_n_speed, train_m_distance, train_n_distance, train_m_time, train_n_time])\nans = solution[train_m_time]", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ntrain_M_distance = Symbol('train_M_distance', positive=True)\ntrain_N_distance = Symbol('train_N_distance', positive=True)\nsolution = solve_it([train_M_distance / train_M_speed - 4, train_N_distance / train_N_speed - 3, train_M_distance - train_N_distance], [train_M_speed, train_N_speed, train_M_distance])\nans = solution[train_M_distance] / solution[train_M_speed] + solution[train_N_distance] / solution[train_N_speed]", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ntrain_m_distance = Symbol('train_m_distance', positive=True)\ntrain_n_distance = Symbol('train_n_distance', positive=True)\ntrain_m_time = Symbol('train_m_time', positive=True)\ntrain_n_time = Symbol('train_n_time', positive=True)\nsolution = solve_it([train_m_speed * train_m_time - train_m_distance, train_n_speed * train_n_time - train_n_distance, train_m_time - train_n_time], [train_m_speed, train_n_speed, train_m_distance, train_n_distance, train_m_time, train_n_time])\nans = solution[train_m_time]", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntrain_m_time = 4\ntrain_n_time = 3.5\nsolution = solve_it([train_m_speed * train_m_time - distance, train_n_speed * train_n_time - distance], [train_m_speed, train_n_speed, distance])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\ndistance = solution[distance]\ntime_of_crossing = distance / (train_m_speed + train_n_speed)\nans = time_of_crossing", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ntrain_M_distance = Symbol('train_M_distance', positive=True)\ntrain_N_distance = Symbol('train_N_distance', positive=True)\ntrain_M_time = Symbol('train_M_time', positive=True)\ntrain_N_time = Symbol('train_N_time', positive=True)\nsolution = solve_it([train_M_distance / train_M_speed - train_M_time, train_N_distance / train_N_speed - train_N_time, train_M_time - train_N_time], [train_M_speed, train_N_speed, train_M_distance, train_N_distance, train_M_time, train_N_time])\nans = solution[train_M_time]", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance_between_cities = Symbol('distance_between_cities', positive=True)\ntrain_m_time = 4\ntrain_n_time = 3.5\nsolution = solve_it([train_m_speed * train_m_time - distance_between_cities, train_n_speed * train_n_time - distance_between_cities], [train_m_speed, train_n_speed, distance_between_cities])\ncrossing_time = solution[train_m_time] + solution[train_n_time]\nans = crossing_time", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ntrain_m_distance = Symbol('train_m_distance', positive=True)\ntrain_n_distance = Symbol('train_n_distance', positive=True)\ntrain_m_time = Symbol('train_m_time', positive=True)\ntrain_n_time = Symbol('train_n_time', positive=True)\ntrain_m_start_time = 5\ntrain_n_start_time = 7\ntrain_m_end_time = 9\ntrain_n_end_time = 10.5\nsolution = solve_it([train_m_speed * train_m_time - train_m_distance, train_n_speed * train_n_time - train_n_distance, train_m_end_time - train_m_start_time - train_m_time, train_n_end_time - train_n_start_time - train_n_time], [train_m_speed, train_n_speed", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime_m_takes = 4\ntime_n_takes = 3.5\nsolution = solve_it([train_m_speed * time_m_takes - distance, train_n_speed * time_n_takes - distance], [train_m_speed, train_n_speed])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\ntime_taken = distance / (train_m_speed + train_n_speed)\nans = time_taken", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\nsolution = solve_it([train_M_speed * 4 - distance_between_A_and_B, train_N_speed * 3.5 - distance_between_A_and_B], [train_M_speed, train_N_speed])\ntrain_M_speed = solution[train_M_speed]\ntrain_N_speed = solution[train_N_speed]\ndistance_between_A_and_B = solution[distance_between_A_and_B]", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntrain_M_time = 4\ntrain_N_time = 3\nsolution = solve_it([train_M_speed * train_M_time - distance, train_N_speed * train_N_time - distance], [train_M_speed, train_N_speed, distance])\nans = solution[train_M_time] + solution[train_N_time]", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance_between_cities = Symbol('distance_between_cities', positive=True)\ntrain_m_arrival_time = 9\ntrain_m_departure_time = 5\ntrain_m_duration = train_m_arrival_time - train_m_departure_time\ntrain_n_arrival_time = 10 + 30 / 60\ntrain_n_departure_time = 7\ntrain_n_duration = train_n_arrival_time - train_n_departure_time\nsolution = solve_it([train_m_speed * train_m_duration - distance_between_cities, train_n_speed * train_n_duration - distance_between_cities], [train_m_speed, train_n_speed, distance_between_cities])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\n", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\ntime_train_M_takes_to_reach_B = 4\ntime_train_N_takes_to_reach_A = 3.5\nsolution = solve_it([train_M_speed * time_train_M_takes_to_reach_B - distance_between_A_and_B, train_N_speed * time_train_N_takes_to_reach_A - distance_between_A_and_B], [train_M_speed, train_N_speed])\ntrain_M_speed = solution[train_M_speed]\ntrain_N_speed = solution[train_N_speed]\ntime_train_M_takes_to_reach_A = distance_between_A_and_B / train_M_speed\ntime_train_N_takes_to", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime_M_takes = 4\ntime_N_takes = 3.5\nsolution = solve_it([train_M_speed * time_M_takes - distance, train_N_speed * time_N_takes - distance], [train_M_speed, train_N_speed, distance])\ntrain_M_speed = solution[train_M_speed]\ntrain_N_speed = solution[train_N_speed]\ndistance = solution[distance]\ntime_taken_to_cross = distance / (train_M_speed + train_N_speed)\nans = time_taken_to_cross", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\ntrain_M_time = 4\ntrain_N_time = 3.5\nsolution = solve_it([train_M_speed * train_M_time - distance_between_A_and_B, train_N_speed * train_N_time - distance_between_A_and_B], [train_M_speed, train_N_speed, distance_between_A_and_B])\ntrain_M_speed = solution[train_M_speed]\ntrain_N_speed = solution[train_N_speed]\ndistance_between_A_and_B = solution[distance_between_A_and_B]\ntime_taken_to_cross = distance_between_A_and_B / (train_M_speed + train_N_speed)\nans = time_taken_to_cross\n", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime_taken_by_M = 4\ntime_taken_by_N = 3.5\nsolution = solve_it([train_M_speed * time_taken_by_M - distance, train_N_speed * time_taken_by_N - distance], [train_M_speed, train_N_speed, distance])\ntime_taken_by_M_to_reach_N = solution[distance] / solution[train_M_speed]\ntime_taken_by_N_to_reach_M = solution[distance] / solution[train_N_speed]\nans = time_taken_by_M_to_reach_N + time_taken_by_N_to_reach_M", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance_between_cities = Symbol('distance_between_cities', positive=True)\ntime_train_m_takes_to_reach_city_b = 4\ntime_train_n_takes_to_reach_city_a = 3.5\nsolution = solve_it([train_m_speed * time_train_m_takes_to_reach_city_b - distance_between_cities, train_n_speed * time_train_n_takes_to_reach_city_a - distance_between_cities], [train_m_speed, train_n_speed])\ntime_taken_to_cross_each_other = distance_between_cities / (solution[train_m_speed] + solution[train_n_speed])\nans = time_taken_to_cross_each_other", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ntrain_m_start_time = 5\ntrain_m_end_time = 9\ntrain_n_start_time = 7\ntrain_n_end_time = 10.5\nsolution = solve_it([train_m_speed * (train_m_end_time - train_m_start_time) - train_n_speed * (train_n_start_time - train_n_end_time), train_m_speed - train_n_speed], [train_m_speed, train_n_speed])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\ntrain_m_start_time = 5\ntrain_m_end_time = 9\ntrain_n_start_time = 7\ntrain_n_end_time = 10.5\ntrain_m_distance = train_m_speed * (train_m_end_time - train_", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance_between_city_a_and_b = Symbol('distance_between_city_a_and_b', positive=True)\ntime_train_m_takes_to_reach_city_b = 4\ntime_train_n_takes_to_reach_city_a = 3.5\nsolution = solve_it([train_m_speed * time_train_m_takes_to_reach_city_b - distance_between_city_a_and_b, train_n_speed * time_train_n_takes_to_reach_city_a - distance_between_city_a_and_b], [train_m_speed, train_n_speed])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\ntime_taken_for_train_m_to_reach_city_a = distance_between_city_", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ntrain_m_distance = Symbol('train_m_distance', positive=True)\ntrain_n_distance = Symbol('train_n_distance', positive=True)\ntrain_m_time = Symbol('train_m_time', positive=True)\ntrain_n_time = Symbol('train_n_time', positive=True)\ntrain_m_time_in_minutes = 4 * 60\ntrain_n_time_in_minutes = 3 * 60 + 30\ntrain_m_distance = train_m_time_in_minutes * train_m_speed\ntrain_n_distance = train_n_time_in_minutes * train_n_speed\nsolution = solve_it([train_m_distance - train_n_distance, train_m_time - train_n_time], [train_m_speed, train_n_speed])\ntrain_m_speed = solution[train_m_speed]\ntrain_n", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ntrain_m_time = 4\ntrain_n_time = 3.5\nsolution = solve_it([train_m_time * train_m_speed - train_n_time * train_n_speed, train_m_speed - train_n_speed], [train_m_speed, train_n_speed])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\ncross_time = train_m_time - train_m_speed / train_n_speed * train_n_time\nans = cross_time", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance_between_cities = Symbol('distance_between_cities', positive=True)\ntrain_m_time = 4\ntrain_n_time = 3.5\nsolution = solve_it([train_m_speed * train_m_time - distance_between_cities, train_n_speed * train_n_time - distance_between_cities], [train_m_speed, train_n_speed, distance_between_cities])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\ndistance_between_cities = solution[distance_between_cities]\ntrain_m_time_to_meet_train_n = distance_between_cities / (train_m_speed + train_n_speed)\nans = train_m_time_to_meet_train_n", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance_between_cities = Symbol('distance_between_cities', positive=True)\ntime_taken_by_train_m = 4\ntime_taken_by_train_n = 3.5\nsolution = solve_it([train_m_speed * time_taken_by_train_m - distance_between_cities, train_n_speed * time_taken_by_train_n - distance_between_cities], [train_m_speed, train_n_speed])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\ntime_taken_by_train_m_to_meet_train_n = distance_between_cities / (train_m_speed + train_n_speed)\nans = time_taken_by_train_m_to_meet_train_n", "\ntrain_M_speed = Symbol('train_M_speed', positive=True)\ntrain_N_speed = Symbol('train_N_speed', positive=True)\ndistance_between_A_and_B = Symbol('distance_between_A_and_B', positive=True)\ntime_to_reach_B = 4\ntime_to_reach_A = 3.5\nsolution = solve_it([distance_between_A_and_B / train_M_speed - time_to_reach_B, distance_between_A_and_B / train_N_speed - time_to_reach_A], [train_M_speed, train_N_speed])\ntrain_M_speed = solution[train_M_speed]\ntrain_N_speed = solution[train_N_speed]\ntime_to_cross = distance_between_A_and_B / (train_M_speed + train_N_speed)\nans = time_to_cross", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ntrain_m_departure_time = 5\ntrain_n_departure_time = 7\ntrain_m_arrival_time = 9\ntrain_n_arrival_time = 10.5\nsolution = solve_it([train_m_speed * (train_m_arrival_time - train_m_departure_time) - train_n_speed * (train_n_arrival_time - train_n_departure_time), train_m_speed - train_n_speed], [train_m_speed, train_n_speed])\nans = (train_m_departure_time + train_m_arrival_time - solution[train_m_speed] / (solution[train_m_speed] - solution[train_n_speed])) / 2", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ndistance_between_city_a_and_b = Symbol('distance_between_city_a_and_b', positive=True)\ntrain_m_time = 4\ntrain_n_time = 3\nsolution = solve_it([train_m_speed * train_m_time - distance_between_city_a_and_b, train_n_speed * train_n_time - distance_between_city_a_and_b], [train_m_speed, train_n_speed])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = solution[train_n_speed]\ntrain_m_time_to_meet_train_n = distance_between_city_a_and_b / (train_m_speed + train_n_speed)\nans = train_m_time_to_meet_train_n", "\ntrain_m_speed = Symbol('train_m_speed', positive=True)\ntrain_n_speed = Symbol('train_n_speed', positive=True)\ntrain_m_time = 4\ntrain_n_time = 3\nsolution = solve_it([train_m_speed * train_m_time - train_n_speed * train_n_time], [train_m_speed])\ntrain_m_speed = solution[train_m_speed]\ntrain_n_speed = train_m_speed * train_m_time / train_n_time\ntrain_m_time_in_minutes = train_m_time * 60\ntrain_n_time_in_minutes = train_n_time * 60\ntrain_m_distance = train_m_speed * train_m_time_in_minutes\ntrain_n_distance = train_n_speed * train_n_time_in_minutes\ndistance_between_trains = train_m_distance - train_n_distance\ntime_between_trains = distance_between_trains / (train_m_speed"], "generated_prediction": "1.87", "options": ["A)1 hr 23 min", "B)1 hr 15 min", "C)1 hr 8 min", "D)56 min", "E)55 min"], "answer": "D", "prediction": "B"}
{"question": "Janice bikes at 10 miles per hour, while Jennie bikes at 20. How long until they have collectively biked 1 mile?", "generated": ["\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\nans = 1 / total_speed", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\nans = 1 / total_speed", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\nans = 1 / total_speed", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\nans = 1 / total_speed", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\nans = 1 / total_speed", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\nans = 1 / total_speed", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\nans = 1 / total_speed", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime = 1 / total_speed\nans = time * 60", "\njennie_speed = 20\njanice_speed = 10\ntotal_speed = jennie_speed + janice_speed\nans = 1 / total_speed", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntotal_distance = 1\nans = total_distance / total_speed", "\njanice_speed = 10\njennie_speed = 20\nsolution = solve_it(janice_speed + jennie_speed - 1, duration)\nans = solution[duration]", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime = 1 / total_speed\nans = time", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime = 1 / total_speed\nans = time", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime = 1 / total_speed\nans = time", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime = 1 / total_speed\nans = time", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime = 1 / total_speed\nans = time", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime = 1 / total_speed\nans = time", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime = 1 / total_speed\nans = time", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\nduration = 1 / total_speed\nans = duration", "\njennie_speed = 20\njanice_speed = 10\ntotal_speed = jennie_speed + janice_speed\nans = 60 / total_speed", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime_to_bike_1_mile = 1 / total_speed\nans = time_to_bike_1_mile * 60", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime_taken = 1 / total_speed\nans = time_taken * 60", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime_to_bike_one_mile = 1 / total_speed\nans = time_to_bike_one_mile * 60", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime_to_travel_1_mile = 1 / total_speed\nans = time_to_travel_1_mile", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime_to_cover_1_mile = 1 / total_speed\nans = time_to_cover_1_mile", "\njennie_speed = 20\njanice_speed = 10\ntotal_speed = jennie_speed + janice_speed\ntime_to_bike_1_mile = 1 / total_speed\nans = time_to_bike_1_mile", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ndistance = 1\ntime = distance / total_speed\nans = time * 60", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime_taken = 1 / total_speed\nans = time_taken", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime_taken = 1 / total_speed\nans = time_taken", "\njanice_speed = 10\njennie_speed = 20\ntotal_speed = janice_speed + jennie_speed\ntime_taken = 1 / total_speed\nans = time_taken"], "generated_prediction": "0.03333333333333333", "options": ["A)1 minute", "B)2 minutes", "C)3 minutes", "D)4 minutes", "E)5 minutes"], "answer": "B", "prediction": "A"}
{"question": "In an exam, a candidate secured 504 marks of the maximum mark of M. If the maximum mark M is converted into 800 marks, he would have secured 420 marks. What is the value of M?", "generated": ["\nM = Symbol('M')\nmarks = 504\nconverted_marks = 420\nsolution = solve_it(marks / M - converted_marks / 800, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks = 504\nconverted_marks = 420\nsolution = solve_it(M * converted_marks / 800 - marks, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_before_conversion = 504\nmarks_after_conversion = 420\nsolution = solve_it(marks_before_conversion / M - marks_after_conversion / 800, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_before_conversion = 504\nmarks_after_conversion = 420\nsolution = solve_it(marks_before_conversion / M - marks_after_conversion / 800, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_before_conversion = 504\nmarks_after_conversion = 420\nsolution = solve_it(marks_before_conversion * 800 / M - marks_after_conversion, M)\nans = solution[M]", "\nM = Symbol('M', positive=True)\nmarks_before = 504\nmarks_after = 420\nsolution = solve_it(marks_before / M - marks_after / 800, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks = 504\nconverted_marks = 420\nsolution = solve_it(converted_marks * 800 / M - marks, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_secured = 504\nmarks_converted = 420\nsolution = solve_it(marks_secured * 800 / M - marks_converted, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_secured = 504\nconverted_marks = 420\nsolution = solve_it(M * converted_marks - 800 * marks_secured, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_secured = 504\nmarks_secured_after_conversion = 420\nsolution = solve_it(marks_secured / M - marks_secured_after_conversion / 800, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_secured = 504\nmarks_secured_after_conversion = 420\nsolution = solve_it(marks_secured * 800 / M - marks_secured_after_conversion, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_secured = 504\nmarks_secured_after_conversion = 420\nsolution = solve_it(marks_secured / M - marks_secured_after_conversion / 800, M)\nans = solution[M]", "\nM = Symbol('M', positive=True)\nmarks_secured = 504\nnew_marks_secured = 420\nsolution = solve_it(marks_secured / M - new_marks_secured / 800, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_secured = 504\nmarks_secured_after_conversion = 420\nsolution = solve_it(marks_secured / M * 800 - marks_secured_after_conversion, M)\nans = solution[M]", "\nmaximum_mark = Symbol('maximum_mark', positive=True)\nactual_mark = 504\nconverted_mark = 420\nsolution = solve_it(converted_mark - (actual_mark / maximum_mark) * 800, maximum_mark)\nans = solution[maximum_mark]", "\nM = Symbol('M', positive=True)\nmarks_secured = 504\nmarks_secured_new = 420\nsolution = solve_it(marks_secured / M - marks_secured_new / 800, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_in_exam = 504\nmarks_in_converted_exam = 420\nsolution = solve_it(marks_in_exam * 800 / M - marks_in_converted_exam, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_secured = 504\nmarks_secured_after_conversion = 420\nsolution = solve_it(marks_secured_after_conversion * M / 800 - marks_secured, M)\nans = solution[M]", "\nmaximum_mark = Symbol('maximum_mark', positive=True)\nmarks_secured = 504\nmarks_secured_in_new_system = 420\nsolution = solve_it(marks_secured / maximum_mark * 800 - marks_secured_in_new_system, maximum_mark)\nans = solution[maximum_mark]", "\nmax_marks = Symbol('max_marks', positive=True)\nmarks_secured = 504\nconverted_marks = 420\nsolution = solve_it(max_marks * marks_secured / 800 - converted_marks, max_marks)\nans = solution[max_marks]", "\nmarks = Symbol('marks', positive=True)\nmarks_secured = 504\nmarks_secured_after_conversion = 420\nsolution = solve_it(marks * marks_secured / 800 - marks_secured_after_conversion, marks)\nans = solution[marks]", "\nM = Symbol('M')\nmarks = 504\nconverted_marks = 420\nans = (converted_marks * M) / marks", "\nM = Symbol('M')\nmarks_in_original_scale = 504\nmarks_in_new_scale = 420\nsolution = solve_it(marks_in_original_scale * 800 - marks_in_new_scale * M, M)\nans = solution[M]", "\nmaximum_marks = Symbol('maximum_marks', positive=True)\nobtained_marks = 504\nobtained_marks_converted = 420\nsolution = solve_it(obtained_marks * 800 / maximum_marks - obtained_marks_converted, maximum_marks)\nans = solution[maximum_marks]", "\nM = Symbol('M')\nmarks_in_new_system = 420\nmarks_in_old_system = 504\nsolution = solve_it(marks_in_new_system * M / 800 - marks_in_old_system, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_in_original_scale = 504\nmarks_in_new_scale = 420\nsolution = solve_it(marks_in_new_scale / 800 - marks_in_original_scale / M, M)\nans = solution[M]", "\nmarks_obtained = 504\nmaximum_marks = Symbol('maximum_marks', positive=True)\nconverted_marks = 420\nsolution = solve_it([maximum_marks * marks_obtained / 800 - converted_marks, maximum_marks - 800], [maximum_marks])\nans = solution[maximum_marks]", "\nmaximum_marks = Symbol('maximum_marks', positive=True)\nmarks_secured = 504\nmarks_secured_converted = 420\nsolution = solve_it(marks_secured_converted / 800 - marks_secured / maximum_marks, maximum_marks)\nans = solution[maximum_marks]", "\nM = Symbol('M')\nmarks_in_new_scale = 420\nmarks_in_old_scale = 504\nsolution = solve_it(M * marks_in_new_scale / 800 - marks_in_old_scale, M)\nans = solution[M]", "\nM = Symbol('M')\nmarks_in_exam = 504\nconverted_marks = 420\nconversion_factor = 800 / M\nsolution = solve_it(converted_marks - conversion_factor * marks_in_exam, M)\nans = solution[M]"], "generated_prediction": "960.0", "options": ["A)278", "B)2890", "C)270", "D)2702", "E)960"], "answer": "E", "prediction": "E"}
{"question": "If Jill needed to buy 10 bottles of soda for a party in which 8 people attended, how many bottles of soda will she need to buy for a party in which 12 people are attending?", "generated": ["\nbottles_per_person = 10 / 8\nans = bottles_per_person * 12", "\nbottles_per_person = 10 / 8\nans = bottles_per_person * 12", "\nnum_bottles_per_person = 10 / 8\nans = num_bottles_per_person * 12", "\nnum_bottles_per_person = 10 / 8\nans = num_bottles_per_person * 12", "\nbottles_for_8_people = 10\nbottles_for_12_people = bottles_for_8_people * (12 / 8)\nans = math.ceil(bottles_for_12_people)", "\nnum_people = 12\nnum_bottles = 10\nans = num_bottles * num_people / 8", "\nnum_people = 12\nans = num_people * (10 / 8)", "\nnum_people = 12\nnum_bottles = 10\nans = num_bottles * num_people / 8", "\nnum_people = 12\nnum_bottles_per_person = 10 / 8\nans = num_bottles_per_person * num_people", "\nnum_people_in_first_party = 8\nnum_people_in_second_party = 12\nnum_bottles_in_first_party = 10\nans = num_bottles_in_first_party * num_people_in_second_party / num_people_in_first_party", "\nnum_bottles_for_8_people = 10\nnum_bottles_for_12_people = num_bottles_for_8_people * 12 / 8\nans = math.ceil(num_bottles_for_12_people)", "\nnum_people = Symbol('num_people', positive=True)\nnum_bottles = 10\nsolution = solve_it(num_bottles * 8 - num_bottles * num_people, num_people)\nans = solution[num_people]", "\npeople_attended = 8\nbottles_of_soda = 10\npeople_attending = 12\nans = (people_attending / people_attended) * bottles_of_soda", "\npeople_attended = 8\nbottles_bought = 10\npeople_attended_new = 12\nans = bottles_bought * people_attended_new / people_attended", "\nnum_people = Symbol('num_people', positive=True)\nnum_bottles = Symbol('num_bottles', positive=True)\nsolution = solve_it(num_bottles - 10 * 8 / num_people, num_bottles)\nans = solution[num_bottles]", "\nnum_people = Symbol('num_people', positive=True)\nnum_bottles = 10\nsolution = solve_it(num_bottles * num_people / 8 - num_bottles, num_people)\nans = solution[num_people]", "\nbottles_for_8_people = 10\nbottles_for_12_people = bottles_for_8_people * 12 / 8\nans = math.ceil(bottles_for_12_people)", "\nnum_people_attended = 8\nnum_bottles_bought = 10\nnum_people_attending = 12\nans = num_bottles_bought * num_people_attending / num_people_attended", "\npeople_in_first_party = 8\npeople_in_second_party = 12\nbottles_in_first_party = 10\nans = bottles_in_first_party * people_in_second_party / people_in_first_party", "\nnum_people = 12\nans = 10 * num_people / 8", "\nnum_people = 12\nans = 10 * num_people / 8", "\nnum_people = Symbol('num_people', positive=True)\nnum_bottles_for_8_people = 10\nans = num_bottles_for_8_people * (num_people / 8)", "\npeople_attended_first_party = 8\npeople_attended_second_party = 12\nbottles_bought_first_party = 10\nbottles_bought_second_party = bottles_bought_first_party * people_attended_second_party / people_attended_first_party\nans = bottles_bought_second_party", "\npeople_attended = 8\nbottles_bought = 10\npeople_attending = 12\nans = bottles_bought * people_attending / people_attended", "\nnum_people = Symbol('num_people', positive=True)\nnum_bottles_for_8_people = 10\nans = num_bottles_for_8_people * (num_people / 8)", "\nnum_people_in_first_party = 8\nnum_people_in_second_party = 12\nans = num_people_in_second_party / num_people_in_first_party * 10", "\nnum_people = 12\nnum_soda_bottles = 10\nans = num_soda_bottles * num_people / 8", "\nnum_people = Symbol('num_people', positive=True)\nnum_bottles = Symbol('num_bottles', positive=True)\nsolution = solve_it(num_bottles / 8 - 10, num_bottles)\nans = solution[num_bottles]", "\npeople_attended_first_party = 8\nbottles_bought_first_party = 10\npeople_attended_second_party = 12\nans = bottles_bought_first_party * people_attended_second_party / people_attended_first_party", "\npeople_attending = Symbol('people_attending', positive=True)\nbottles_of_soda_per_person = Symbol('bottles_of_soda_per_person', positive=True)\nsolution = solve_it(8 * bottles_of_soda_per_person - 10, bottles_of_soda_per_person)\nans = solution[bottles_of_soda_per_person] * people_attending"], "generated_prediction": "15.0", "options": ["A)6", "B)8", "C)10", "D)12", "E)14"], "answer": "C", "prediction": "E"}
{"question": "Two ants are standing side-by-side. One ant, which is 4 inches tall, casts a shadow that is 10 inches long. The other ant is 6 inches tall. Compute, in inches, the length of the shadow that the taller ant casts.", "generated": ["\nshort_ant_height = 4\nshort_ant_shadow = 10\nlong_ant_height = 6\nans = short_ant_shadow * long_ant_height / short_ant_height", "\nant_1_height = 4\nant_1_shadow = 10\nant_2_height = 6\nant_2_shadow = Symbol('ant_2_shadow', positive=True)\nsolution = solve_it(ant_1_height / ant_1_shadow - ant_2_height / ant_2_shadow, ant_2_shadow)\nans = solution[ant_2_shadow]", "\nsmall_ant_height = 4\nsmall_ant_shadow = 10\nbig_ant_height = 6\nbig_ant_shadow = Symbol('big_ant_shadow', positive=True)\nsolution = solve_it(small_ant_height / small_ant_shadow - big_ant_height / big_ant_shadow, big_ant_shadow)\nans = solution[big_ant_shadow]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[shadow_length]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[shadow_length]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[shadow_length]", "\nratio = 10 / 4\nheight = 6\nans = ratio * height", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [shadow_length, ant_height])\nans = solution[ant_height]", "\ntall_ant_height = 6\ntall_ant_shadow_length = Symbol('tall_ant_shadow_length', positive=True)\nshort_ant_height = 4\nshort_ant_shadow_length = 10\nsolution = solve_it(tall_ant_height / short_ant_height - tall_ant_shadow_length / short_ant_shadow_length, tall_ant_shadow_length)\nans = solution[tall_ant_shadow_length]", "\ntall_ant_height = 6\ntall_ant_shadow_length = Symbol('tall_ant_shadow_length', positive=True)\nshort_ant_height = 4\nshort_ant_shadow_length = 10\nsolution = solve_it(tall_ant_height / tall_ant_shadow_length - short_ant_height / short_ant_shadow_length, tall_ant_shadow_length)\nans = solution[tall_ant_shadow_length]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 * shadow_length - 10, 6 * shadow_length - ant_height], [ant_height, shadow_length])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nant_shadow = Symbol('ant_shadow', positive=True)\nsolution = solve_it([4 * ant_shadow - 10, 6 * ant_shadow - ant_height], [ant_shadow, ant_height])\nans = solution[ant_height]", "\nant_height = Symbol('ant_height', positive=True)\nant_shadow = Symbol('ant_shadow', positive=True)\nsolution = solve_it([4 * ant_shadow - 10, 6 * ant_shadow - ant_height], [ant_shadow, ant_height])\nans = solution[ant_height]", "\nheight = Symbol('height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([height / 4 - shadow_length / 10, height / 6 - shadow_length / 12], [height, shadow_length])\nans = solution[shadow_length]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nant1_height = 4\nant1_shadow_length = 10\nant2_height = 6\nsolution = solve_it([ant1_height / ant1_shadow_length - ant_height / shadow_length, ant_height - ant2_height], [ant_height, shadow_length])\nans = solution[shadow_length]", "\nheight_of_ant_1 = 4\nheight_of_ant_2 = 6\nshadow_of_ant_1 = 10\nshadow_of_ant_2 = Symbol('shadow_of_ant_2', positive=True)\nsolution = solve_it(shadow_of_ant_1 / height_of_ant_1 - shadow_of_ant_2 / height_of_ant_2, shadow_of_ant_2)\nans = solution[shadow_of_ant_2]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 / 10 - 1 / shadow_length, 6 / shadow_length - 1 / ant_height], [shadow_length, ant_height])\nans = solution[shadow_length]", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([4 / 10 - ant_height / shadow_length, 6 / shadow_length - ant_height / shadow_length], [ant_height, shadow_length])\nans = solution[shadow_length]", "\ntall_ant = 6\nshort_ant = 4\nshort_ant_shadow = 10\ntall_ant_shadow = short_ant_shadow * tall_ant / short_ant\nans = tall_ant_shadow", "\nant_height = Symbol('ant_height', positive=True)\nshadow_length = Symbol('shadow_length', positive=True)\nsolution = solve_it([ant_height / 4 - shadow_length / 10, ant_height / 6 - shadow_length / x], [ant_height, shadow_length])\nans = solution[shadow_length]", "\nshadow_length = Symbol('shadow_length', positive=True)\nant_height = Symbol('ant_height', positive=True)\nsolution = solve_it(shadow_length / 4 - 10 / ant_height, shadow_length)\nans = solution[shadow_length]", "\nshadow_length = Symbol('shadow_length', positive=True)\nant_height = Symbol('ant_height', positive=True)\nsolution = solve_it(shadow_length / 4 - 10, shadow_length)\nans = solution[shadow_length] * 6 / 4"], "generated_prediction": "15.0", "options": ["A)36", "B)28", "C)42", "D)15", "E)20"], "answer": "D", "prediction": "D"}
{"question": "The height of a room to its semi-perimeter is 2:5. It costs Rs.260 to paper the walls of the room with paper 50cm wide at Rs.2 per meter allowing an area of 15 sq.m for doors and windows. The height of the room is:", "generated": ["\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(height / semi_perimeter - 2 / 5, height)\nans = solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 15\npermimeter = 16\nsolution = solve_it([width * height - area, 2 * (width + height) - permimeter], [width, height])\nans = (solution[width], solution[height])", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(2 * height - 5 * semi_perimeter, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(2 * height - 5 * semi_perimeter, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(2 * height - 5 * semi_perimeter, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nsolution = solve_it(2 / 5 * height - semi_perimeter, height)\nans = solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it(2 * width + 5 * height - 2 * height, width)\nans = solution[width]", "\nwidth = 50\nheight = Symbol('height', positive=True)\narea = 15\nsolution = solve_it(width * height - area, height)\nans = solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 15\ncost = 260\ncost_per_meter = 2\nsolution = solve_it([width * height - area, cost - cost_per_meter * (2 * width + 2 * height)], [width, height])\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\npaper_width = 50\npaper_cost = 2\npaper_area = 15\nsolution = solve_it([height / semi_perimeter - 2 / 5, (2 * height + 2 * semi_perimeter) / paper_width * paper_cost - paper_area], [height, semi_perimeter])\nans = solution[height]", "\nwidth = 50\ncost_per_meter = 2\nheight = Symbol('height', positive=True)\nsolution = solve_it(width * height - cost_per_meter * (2 * height + 5 * height), height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nwidth = Symbol('width', positive=True)\npaper_width = 50\npaper_cost = 260\npaper_area = paper_cost / 2\nsolution = solve_it([(height + width) / height - 5 / 2, height * width - paper_area], [height, width])\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nwidth = Symbol('width', positive=True)\narea = 15\ncost = 260\npaper_width = 50\npaper_cost = 2\nsolution = solve_it([height / (height + width) - 2 / 5, (height * width - area) * paper_cost / paper_width - cost], [height, width])\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nwidth = Symbol('width', positive=True)\npaper_width = 50\npaper_cost = 260\npaper_area = paper_cost / 2\nsolution = solve_it([height / (width + height) - 2 / 5, paper_width * (width + 2 * height) - paper_area], [width, height])\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nwidth = Symbol('width', positive=True)\npaper_width = 50\npaper_cost = 260\npaper_area = paper_cost / 2\nsolution = solve_it([height / (height + width) - 2 / 5, paper_area - (height * width - 15) / 100], [height, width])\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nwidth = Symbol('width', positive=True)\npaper_cost = 260\npaper_width = 50\npaper_cost_per_meter = 2\npaper_area = 15\nsolution = solve_it([height / (height + width) - 2 / 5, paper_cost - paper_cost_per_meter * (2 * (height + width) * 100 / paper_width - paper_area)], [height, width])\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nwidth = Symbol('width', positive=True)\narea = 15\npaper_cost = 260\npaper_width = 50\npaper_cost_per_meter = 2\nsolution = solve_it([2 * height - 5 * width - 2, (2 * height + width) * height - area, (2 * height + width) * paper_width / 100 * paper_cost_per_meter - paper_cost], [height, width])\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nwidth = Symbol('width', positive=True)\narea_of_walls = 2 / 5 * (height + width) * height\narea_of_doors_and_windows = 15\nsolution = solve_it(area_of_walls - area_of_doors_and_windows, height)\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nsemi_perimeter = Symbol('semi_perimeter', positive=True)\nwall_area = Symbol('wall_area', positive=True)\ndoor_area = 15\npaper_cost = 260\npaper_width = 50\npaper_cost_per_meter = 2\nsolution = solve_it([height / semi_perimeter - 2 / 5, wall_area - 2 * (height + semi_perimeter) * height, paper_cost - (wall_area - door_area) * paper_cost_per_meter / (100 / paper_width)], [height, semi_perimeter, wall_area])\nans = solution[height]", "\nheight = Symbol('height', positive=True)\nwidth = Symbol('width', positive=True)\npaper_width = 50\ncost = 260\narea_of_walls = 2 * (height + width) * height / 5\ncost_per_meter = 2\ncost_per_meter_of_paper = cost_per_meter / paper_width\ncost_of_paper = cost_per_meter_of_paper * area_of_walls\nsolution = solve_it(cost_of_paper - cost, height)\nans = solution[height]"], "generated_prediction": "0.4*semi_perimeter", "options": ["A)2.6m", "B)3.9m", "C)4m", "D)4.2m", "E)4.4m"], "answer": "C", "prediction": "C"}
{"question": "The sum of k consecutive integers is 51. If the least integer is -50, then k =", "generated": ["\nk = Symbol('k', positive=True)\nleast_integer = -50\nsolution = solve_it(k * (2 * least_integer + k - 1) / 2 - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nans = (51 + 50) / k", "\nk = Symbol('k', positive=True)\nfirst_integer = -50\nsolution = solve_it(k * (k + 1) / 2 + k * first_integer - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k * (k + 1) / 2 + k * (-50) - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nconsecutive_integers = [i for i in range(-50, -50 + k)]\nsolution = solve_it(sum(consecutive_integers) - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nleast_integer = -50\nsolution = solve_it(k * (k + 1) / 2 - 51 - least_integer, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nfirst_integer = -50\nsolution = solve_it(k * (k + 1) / 2 + first_integer * k - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k * (-50 + k - 1) / 2 - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = k * (k + 1) / 2\nsolution = solve_it(sum_of_k_consecutive_integers - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = k * (k + 1) / 2\nsolution = solve_it(sum_of_k_consecutive_integers - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = k * (k + 1) / 2\nsolution = solve_it(sum_of_k_consecutive_integers - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = k * (k + 1) / 2\nsolution = solve_it(sum_of_k_consecutive_integers - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = k * (k + 1) / 2\nsolution = solve_it(sum_of_k_consecutive_integers - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = k * (k + 1) / 2\nsolution = solve_it(sum_of_k_consecutive_integers - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k * (k + 1) / 2 - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nfirst_integer = -50\nsolution = solve_it(k * (k + 1) / 2 - 51 + k * first_integer, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = 51\nleast_integer = -50\nsolution = solve_it(k * (k + 1) / 2 - sum_of_k_consecutive_integers, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_integers = 51\nleast_integer = -50\nsolution = solve_it(k * (k + 1) / 2 - sum_of_k_integers, k)\nans = solution[k] + least_integer", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = 51\nleast_integer = -50\nsolution = solve_it(k * (k + 1) / 2 - sum_of_k_consecutive_integers, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_integers = 51\nleast_integer = -50\nsolution = solve_it(k * (k + 1) / 2 - sum_of_k_integers, k)\nans = solution[k] + least_integer", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = 51\nleast_integer = -50\nsolution = solve_it(k * (k + 1) / 2 - sum_of_k_consecutive_integers, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = 51\nleast_integer = -50\nsolution = solve_it(k * (k + 1) / 2 - sum_of_k_consecutive_integers, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = (k + 1) * k / 2\nsolution = solve_it(sum_of_k_consecutive_integers - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = 51\nleast_integer = -50\nsolution = solve_it(k * (k - 1) / 2 + least_integer - sum_of_k_consecutive_integers, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nleast_integer = -50\nsolution = solve_it((k * (k + 1)) / 2 - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k * (k + 1) / 2 - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_integers = 51\nleast_integer = -50\nsolution = solve_it(k * (2 * least_integer + k - 1) / 2 - sum_of_k_integers, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = 51\nleast_integer = -50\nsolution = solve_it(k * (2 * least_integer + k - 1) / 2 - sum_of_k_consecutive_integers, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nleast_integer = -50\nsum_of_k_integers = k * (2 * least_integer + k - 1) / 2\nsolution = solve_it(sum_of_k_integers - 51, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsum_of_k_consecutive_integers = (k * (k + 1)) / 2\nsolution = solve_it(sum_of_k_consecutive_integers - 51 + 50 * k, k)\nans = solution[k]"], "generated_prediction": "9.61", "options": ["A)40", "B)62", "C)82", "D)92", "E)102"], "answer": "E", "prediction": "D"}
{"question": "In a survey of students, each student selected from a list of 10 songs the 2 songs that the student liked best. If each song was selected 5 times, how many students were surveyed?", "generated": ["\nnum_students = Symbol('num_students', positive=True)\nsolution = solve_it(num_students * 2 - 5 * 10, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nsolution = solve_it(num_students * 2 - 5 * 10, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nsolution = solve_it(num_students * 2 - 5 * num_songs, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nsolution = solve_it(num_students * 2 - num_songs * 5, num_students)\nans = solution[num_students]", "\nnum_songs = 10\nnum_students = Symbol('num_students', positive=True)\nsolution = solve_it(num_students * 2 - 5 * num_songs, num_students)\nans = solution[num_students]", "\nnum_songs = 10\nnum_students = Symbol('num_students', positive=True)\nsolution = solve_it(num_students * num_songs * (num_songs - 1) / 2 - 5 * num_songs, num_students)\nans = solution[num_students]", "\nsong_count = Symbol('song_count', positive=True)\nsolution = solve_it(2 * song_count - 5, song_count)\nans = solution[song_count]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_students * num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_students * num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_students * num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_students * num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_students * num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_times_selected = 5\nsolution = solve_it(num_students * 2 - num_students * num_songs + num_times_selected, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_times_each_song_selected = 5\nsolution = solve_it(num_students * 2 - num_songs * num_times_each_song_selected, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_times_each_song_selected = 5\nsolution = solve_it(num_students * 2 - num_songs * num_times_each_song_selected, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_times_each_song_selected = 5\nsolution = solve_it(num_students * 2 - num_times_each_song_selected * num_songs, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_times_each_song_selected = 5\nsolution = solve_it(num_students * 2 - num_times_each_song_selected * num_songs, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_times_each_song_selected = 5\nsolution = solve_it(num_students * 2 - num_songs * num_times_each_song_selected, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * num_songs * num_selections - num_students * 2 * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 2\ntotal_selections = num_students * num_selections\nsolution = solve_it(total_selections - num_songs * 5, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 2\nnum_selections_per_song = 5\nsolution = solve_it(num_students * num_selections - num_songs * num_selections_per_song, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nnum_selections_per_student = 2\nsolution = solve_it(num_students * num_selections_per_student - num_selections * num_songs, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_songs * num_selections, num_students)\nans = solution[num_students]", "\nnum_students = Symbol('num_students', positive=True)\nnum_songs = 10\nnum_selections = 5\nsolution = solve_it(num_students * 2 - num_songs * num_selections, num_students)\nans = solution[num_students]"], "generated_prediction": "25.0", "options": ["A)96", "B)48", "C)32", "D)25", "E)18"], "answer": "D", "prediction": "D"}
{"question": "If one of the roots of the quadratic equation x^2 + mx + 22 = 0 is 1.5, then what is the value of m?", "generated": ["\nm = Symbol('m')\nsolution = solve_it(1.5 ** 2 + m * 1.5 + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it(1.5 ** 2 + m * 1.5 + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it([x ** 2 + m * x + 22, x - 1.5], [x, m])\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it(x ** 2 + m * x + 22, x)\nans = solution[1] - 1.5", "\nm = Symbol('m')\nsolution = solve_it(m ** 2 + m + 22, m)\nans = solution[m] - 1.5", "\nm = Symbol('m')\nsolution = solve_it([1.5 ** 2 + m * 1.5 + 22, 1.5 ** 2 + m * 1.5 + 22], [m])\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it(m + 3 * 1.5 + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nroot = 1.5\nsolution = solve_it(m ** 2 + m * root + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it(m ** 2 + m + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it(x ** 2 + m * x + 22, x)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it(x ** 2 + m * x + 22, x)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it(x ** 2 + m * x + 22, x)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it(x ** 2 + m * x + 22, x)\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it(m ** 2 + m + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it(x ** 2 + m * x + 22, x)\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it(m ** 2 + m + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it(x ** 2 + m * x + 22, x)\nans = solution[m]", "\nm = Symbol('m')\nroot = 1.5\nsolution = solve_it(m ** 2 + m + 22 - (m + 22) * root, m)\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it(m ** 2 + m + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it(x ** 2 + m * x + 22, x)\nans = solution[m]", "\nm = Symbol('m')\nroot = 1.5\nsolution = solve_it(root ** 2 + m * root + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nsolution = solve_it(x ** 2 + m * x + 22, x)\nans = solution[m]", "\nm = Symbol('m')\nroot = 1.5\nsolution = solve_it(root ** 2 + m * root + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nx = Symbol('x')\nroot = 1.5\nsolution = solve_it(x ** 2 + m * x + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it(m ** 2 + m + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it(m ** 2 + m + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it([(1.5) ** 2 + m * 1.5 + 22, (1.5) ** 2 + m * 1.5 + 22], [m])\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it([m ** 2 + m + 22, m + 1.5], [m])\nans = solution[m]", "\nm = Symbol('m')\nx1 = 1.5\nx2 = 22 - 1.5 * m\nsolution = solve_it(x1 * x2 + m * x1 + 22, m)\nans = solution[m]", "\nm = Symbol('m')\nsolution = solve_it([(1.5 ** 2 + m * 1.5 + 22), (1.5 ** 2 + m * 1.5 + 22).subs(m, -m)], m)\nans = solution[m]"], "generated_prediction": "-1/2 - sqrt(87)*I/2", "options": ["A)-23.5", "B)-17.5", "C)-10.5", "D)-16.2", "E)Cannot be determined"], "answer": "D", "prediction": "E"}
{"question": "At an election meeting 10 speakers are to address the meeting. The only protocol to be observed is that whenever they speak the pm should speak before the mp and the mp should speak before the mla. In how many ways can the meeting be held?", "generated": ["\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nimport math\nans = math.factorial(10) / math.factorial(3)", "\nimport math\nans = math.factorial(10) / math.factorial(3)", "\nimport math\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nans = math.factorial(10) / math.factorial(3)", "\nfrom math import factorial\nans = factorial(10) / factorial(3)", "\nfrom math import factorial\nans = factorial(10) / factorial(3)", "\nnum_speakers = 10\nnum_pm = 1\nnum_mp = 1\nnum_mla = 10 - num_pm - num_mp\nans = math.factorial(num_speakers) / math.factorial(num_pm) / math.factorial(num_mp) / math.factorial(num_mla)", "\nfactorial = lambda n: 1 if n == 0 else n * factorial(n - 1)\nans = factorial(10) / factorial(3)", "\nnum_speakers = 10\nnum_pm = 1\nnum_mp = 1\nnum_mla = 8\nans = math.factorial(num_speakers) / (math.factorial(num_pm) * math.factorial(num_mp) * math.factorial(num_mla))", "\nnum_speakers = 10\nnum_pm = 1\nnum_mp = 1\nnum_mla = 8\nans = math.factorial(num_speakers) / (math.factorial(num_pm) * math.factorial(num_mp) * math.factorial(num_mla))", "\nnum_speakers = 10\nnum_pm = 1\nnum_mp = 1\nnum_mla = num_speakers - num_pm - num_mp\nans = math.factorial(num_speakers) / math.factorial(num_pm) / math.factorial(num_mp) / math.factorial(num_mla)", "\nnum_speakers = 10\nnum_pm = 1\nnum_mp = 1\nnum_mla = 8\nans = math.factorial(num_speakers) / (math.factorial(num_pm) * math.factorial(num_mp) * math.factorial(num_mla))", "\nnum_speakers = 10\nnum_pm = 1\nnum_mp = 1\nnum_mla = 8\nans = math.factorial(num_speakers) / (math.factorial(num_pm) * math.factorial(num_mp) * math.factorial(num_mla))", "\nnum_speakers = 10\nnum_pm = 1\nnum_mp = 1\nnum_mla = 8\nans = math.factorial(num_speakers) / (math.factorial(num_pm) * math.factorial(num_mp) * math.factorial(num_mla))"], "generated_prediction": "604800.0", "options": ["A)10!/3", "B)10!/6", "C)10!/2", "D)10!/4", "E)10!/5"], "answer": "B", "prediction": "B"}
{"question": "Anna is able to buy 5 more articles for $300 after the price of each article decreased by 15%. What is the new selling price of each article?", "generated": ["\noriginal_price = Symbol('original_price', positive=True)\nnew_price = original_price * (1 - 0.15)\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = original_price * (1 - 0.15)\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = original_price * (1 - 15 / 100)\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = original_price * (1 - 0.15)\nsolution = solve_it(5 * new_price - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = original_price - original_price * 15 / 100\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 0.15\ndiscounted_price = original_price * (1 - discount)\nsolution = solve_it(discounted_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 0.15\ndiscounted_price = original_price * (1 - discount)\nsolution = solve_it(discounted_price * 5 - 300, original_price)\nans = solution[original_price]", "\nprice_before_discount = Symbol('price_before_discount', positive=True)\nprice_after_discount = price_before_discount * 0.85\nsolution = solve_it(price_after_discount * 5 - 300, price_before_discount)\nans = solution[price_before_discount]", "\nprice = Symbol('price', positive=True)\nnum_articles = 5\nnew_price = price * 0.85\nsolution = solve_it(new_price * num_articles - 300, price)\nans = solution[price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 0.15\nnew_price = original_price * (1 - discount)\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 0.15\nnew_price = original_price * (1 - discount)\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 0.15\nnew_price = original_price - original_price * discount\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 15\nnew_price = original_price * (100 - discount) / 100\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = original_price * 0.85\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 15\nnew_price = original_price * (100 - discount) / 100\nsolution = solve_it(new_price * 5 - 300, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = original_price * 0.85\nnew_price_of_5_articles = 300\nsolution = solve_it(new_price * 5 - new_price_of_5_articles, original_price)\nans = solution[original_price]", "\nprice_before_decrease = Symbol('price_before_decrease', positive=True)\nprice_after_decrease = price_before_decrease * (1 - 0.15)\nsolution = solve_it(price_after_decrease * 5 - 300, price_before_decrease)\nans = solution[price_before_decrease]", "\narticle_price = Symbol('article_price', positive=True)\nnew_article_price = article_price * (1 - 15 / 100)\nsolution = solve_it(new_article_price * 5 - 300, article_price)\nans = solution[article_price]", "\nprice = Symbol('price', positive=True)\nnew_price = price - 15 / 100 * price\nsolution = solve_it(new_price * 5 - 300, price)\nans = solution[price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = Symbol('new_price', positive=True)\nnew_price_after_discount = new_price * 0.85\nsolution = solve_it(new_price_after_discount * 5 - 300, new_price)\nans = solution[new_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 0.15\ntotal_price = 300\nnum_articles = 5\nsolution = solve_it(original_price * (1 - discount) * num_articles - total_price, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 15\nnum_articles = 5\ntotal_cost = 300\nsolution = solve_it(original_price * (100 - discount) / 100 * num_articles - total_cost, original_price)\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = Symbol('new_price', positive=True)\nnum_articles = 5\ntotal_money_spent = 300\nsolution = solve_it([original_price * num_articles - total_money_spent, new_price - original_price * 0.85], [original_price, new_price])\nans = solution[new_price]", "\nprice = Symbol('price', positive=True)\nnum_articles = 5\ntotal_price = 300\ndiscount = 0.15\nsolution = solve_it(price * (1 - discount) * num_articles - total_price, price)\nans = solution[price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = Symbol('new_price', positive=True)\nnum_articles = 5\ntotal_cost = 300\nsolution = solve_it([original_price - new_price - 0.15 * original_price, num_articles * new_price - total_cost], [original_price, new_price])\nans = solution[original_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = Symbol('new_price', positive=True)\nnum_articles = 5\ntotal_price = 300\nsolution = solve_it([original_price - new_price - 0.15 * original_price, original_price * num_articles - total_price], [original_price, new_price])\nans = solution[new_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = Symbol('new_price', positive=True)\ntotal_price_before_discount = 300 / 0.85\ntotal_price_after_discount = 300\nsolution = solve_it([total_price_before_discount - 5 * original_price, total_price_after_discount - 5 * new_price], [original_price, new_price])\nans = solution[new_price]", "\noriginal_price = Symbol('original_price', positive=True)\nnew_price = Symbol('new_price', positive=True)\nnew_price_after_decrease = new_price * 0.85\nsolution = solve_it([new_price_after_decrease * 5 - 300, new_price - original_price], [original_price, new_price])\nans = solution[original_price]", "\nprice = Symbol('price', positive=True)\ndiscount = 0.15\nnum_articles = 5\ntotal_price = 300\nsolution = solve_it(num_articles * (price - price * discount) - total_price, price)\nans = solution[price]", "\noriginal_price = Symbol('original_price', positive=True)\nprice_decrease = 0.15\nprice_after_decrease = original_price * (1 - price_decrease)\nprice_after_decrease_5_times = 5 * price_after_decrease\nsolution = solve_it(price_after_decrease_5_times - 300, original_price)\nans = solution[original_price]"], "generated_prediction": "70.59", "options": ["A)$8", "B)$10", "C)$13.6", "D)$22.9", "E)$40"], "answer": "C", "prediction": "D"}
{"question": "In a row of children Neha is 12th from left end and Radha is 6th from right end. When Radha is shifted to left by 2 places and Neha is shifted to right by 2 places there 6 children between Radha and Neha. How many children are there in the row?", "generated": ["\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6 + 1\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_pos = 12\nradha_pos = num_children - 6 + 1\nsolution = solve_it(radha_pos - neha_pos - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nNeha_position = 12\nRadha_position = num_children - 6 + 1\nsolution = solve_it(Radha_position - Neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6\nsolution = solve_it(radha_position - neha_position - 6, num_children)\nans = solution[num_children]", "\nNeha = 12\nRadha = 6\nchildren_between_Neha_and_Radha = 6\nans = Neha + Radha + children_between_Neha_and_Radha - 2", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = num_children - 6\nsolution = solve_it(radha_position - neha_position - 2 - 2 - 6, num_children)\nans = solution[num_children]", "\nnum_children = Symbol('num_children', positive=True)\nneha_position = 12\nradha_position = 6\nsolution = solve_it(num_children - neha_position - radha_position - 2, num_children)\nans = solution[num_children]", "\nNeha = 12\nRadha = 6\nNeha_after_shift = Neha + 2\nRadha_after_shift = Radha - 2\nnum_children = Neha_after_shift + Radha_after_shift + 6\nans = num_children", "\nNeha_position = 12\nRadha_position = 6\nNeha_new_position = Neha_position + 2\nRadha_new_position = Radha_position - 2\nchildren_between_Neha_and_Radha = 6\nans = Neha_new_position + Radha_new_position + children_between_Neha_and_Radha"], "generated_prediction": "23.0", "options": ["A)23", "B)27", "C)26", "D)28", "E)29"], "answer": "D", "prediction": "A"}
{"question": "10kg of a mixture contains 30% sand and 70% clay. In order to make the mixture contain equal quantities of clay and sand how much of the mixture is to be removed and replaced with pure sand?", "generated": ["\nmixture = 10\nsand = 0.3 * mixture\nclay = 0.7 * mixture\nsolution = solve_it(sand - clay, mixture)\nans = solution[mixture]", "\nmixture_weight = 10\nsand_weight = 0.3 * mixture_weight\nclay_weight = 0.7 * mixture_weight\nsolution = solve_it(sand_weight - clay_weight, mixture_weight)\nans = solution[mixture_weight]", "\nmixture_weight = 10\nsand_weight = 0.3 * mixture_weight\nclay_weight = 0.7 * mixture_weight\nsolution = solve_it(sand_weight - clay_weight, mixture_weight)\nans = solution[mixture_weight]", "\nmixture = 10\nsand = 0.3 * mixture\nclay = 0.7 * mixture\npure_sand = mixture - clay\nans = pure_sand", "\nmixture_quantity = 10\nsand_quantity = 0.3 * mixture_quantity\nclay_quantity = 0.7 * mixture_quantity\nans = (sand_quantity - clay_quantity) / 2", "\nmixture_weight = 10\nsand_weight = 0.3 * mixture_weight\nclay_weight = 0.7 * mixture_weight\nsolution = solve_it(sand_weight + clay_weight - mixture_weight, mixture_weight)\nans = solution[mixture_weight]", "\nsand_in_mixture = 0.3 * 10\nclay_in_mixture = 0.7 * 10\nsand_to_be_added = sand_in_mixture - clay_in_mixture\nans = sand_to_be_added", "\nmixture = 10\nsand_in_mixture = 0.3 * mixture\nclay_in_mixture = 0.7 * mixture\nsand_to_add = sand_in_mixture - clay_in_mixture\nans = sand_to_add", "\nmixture_weight = 10\nclay_weight = 0.7 * mixture_weight\nsand_weight = 0.3 * mixture_weight\nsolution = solve_it(clay_weight + sand_weight - mixture_weight, mixture_weight)\nans = solution[mixture_weight]", "\nsand_percentage = 0.3\nclay_percentage = 0.7\nsand_quantity = 10 * sand_percentage\nclay_quantity = 10 * clay_percentage\nsolution = solve_it(sand_quantity - clay_quantity, sand_quantity)\nans = solution[sand_quantity]", "\nsand_percentage = 30\nclay_percentage = 70\nsand_quantity = 10 * sand_percentage / 100\nclay_quantity = 10 * clay_percentage / 100\nsolution = solve_it(sand_quantity - clay_quantity, sand_quantity)\nans = solution[sand_quantity]", "\nsand_percentage = 30\nclay_percentage = 70\nsand_to_be_replaced = sand_percentage * 10 / (sand_percentage + clay_percentage)\nans = sand_to_be_replaced", "\nmixture_weight = 10\nsand_weight = 3\nclay_weight = 7\nweight_to_remove = sand_weight - clay_weight\nans = weight_to_remove / mixture_weight", "\nsand_weight = Symbol('sand_weight', positive=True)\nclay_weight = Symbol('clay_weight', positive=True)\nsand_percentage = 0.3\nclay_percentage = 0.7\nsolution = solve_it([sand_weight + clay_weight - 10, sand_weight / (sand_weight + clay_weight) - sand_percentage, clay_weight / (sand_weight + clay_weight) - clay_percentage], [sand_weight, clay_weight])\nans = solution[sand_weight]", "\nmixture_weight = 10\nsand_weight = 0.3 * mixture_weight\nclay_weight = 0.7 * mixture_weight\nweight_to_be_removed = sand_weight - clay_weight\nweight_to_be_added = weight_to_be_removed\nans = weight_to_be_added + weight_to_be_removed", "\nsand_percentage = 30\nclay_percentage = 70\nsand_weight = 10 * sand_percentage / 100\nclay_weight = 10 * clay_percentage / 100\nsolution = solve_it(sand_weight + clay_weight - sand_weight, sand_weight)\nans = solution[sand_weight]", "\nsand_amount = 0.3 * 10\nclay_amount = 0.7 * 10\nsand_to_be_added = clay_amount\nsand_to_be_removed = sand_amount - clay_amount\nans = sand_to_be_removed + sand_to_be_added", "\nmixture_weight = 10\nsand_percentage = 0.3\nclay_percentage = 0.7\nsand_weight = mixture_weight * sand_percentage\nclay_weight = mixture_weight * clay_percentage\nrequired_sand_weight = (sand_weight + clay_weight) / 2\nans = required_sand_weight - sand_weight", "\nsand = Symbol('sand', positive=True)\nclay = Symbol('clay', positive=True)\ntotal_mixture = 10\nsand_percentage = 0.3\nclay_percentage = 0.7\nsolution = solve_it([sand + clay - total_mixture, sand / (sand + clay) - sand_percentage], [sand, clay])\nans = total_mixture - solution[sand]", "\nsand_percentage = 30\nclay_percentage = 70\nsand_to_be_added = sand_percentage - clay_percentage\nans = sand_to_be_added / sand_percentage", "\nsand_percentage = 30\nclay_percentage = 70\ntotal_percentage = 100\nmixture_to_remove = (clay_percentage - sand_percentage) / (sand_percentage - total_percentage)\nans = mixture_to_remove", "\nmixture_weight = 10\nsand_weight = 0.3 * mixture_weight\nclay_weight = 0.7 * mixture_weight\ndesired_sand_weight = 0.5 * mixture_weight\nans = (sand_weight - desired_sand_weight) / mixture_weight", "\nsand_in_mixture = 0.3\nclay_in_mixture = 0.7\nsand_to_be_added = sand_in_mixture\nclay_to_be_removed = clay_in_mixture - sand_in_mixture\nans = sand_to_be_added / clay_to_be_removed", "\nsand_percentage = 30\nclay_percentage = 70\nsand_to_be_replaced = sand_percentage * 10 / clay_percentage\nans = sand_to_be_replaced", "\nsand_percentage = 30\nclay_percentage = 70\nsand_quantity = 10 * sand_percentage / 100\nclay_quantity = 10 * clay_percentage / 100\nsand_to_be_added = clay_quantity\nsand_to_be_removed = sand_quantity - sand_to_be_added\nans = sand_to_be_removed + sand_to_be_added", "\nsand_percentage = 30\nclay_percentage = 70\nsand_quantity = 10 * sand_percentage / 100\nclay_quantity = 10 * clay_percentage / 100\nquantity_to_be_removed = sand_quantity - clay_quantity\nquantity_to_be_added = clay_quantity\nans = (quantity_to_be_removed + quantity_to_be_added) / 10", "\nsand = 30\nclay = 70\nmixture = 100\nsolution = solve_it([sand * mixture - clay * mixture, sand * mixture - mixture * mixture], [sand, mixture])\nans = solution[mixture]", "\nsand_percentage = 30\nclay_percentage = 70\nsand_percentage_after_replacement = 50\nsand_weight_after_replacement = sand_percentage_after_replacement * 10 / 100\nclay_weight_after_replacement = 10 - sand_weight_after_replacement\nsand_weight_to_be_replaced = sand_weight_after_replacement - sand_percentage * 10 / 100\nans = sand_weight_to_be_replaced", "\nsand_percentage = 30\nclay_percentage = 70\ntotal_sand = sand_percentage * 10 / 100\ntotal_clay = clay_percentage * 10 / 100\nnew_sand_percentage = total_clay / (total_sand + total_clay) * 100\nnew_clay_percentage = 100 - new_sand_percentage\nans = new_sand_percentage - sand_percentage", "\nmixture = 10\nsand_percentage = 30\nclay_percentage = 70\nsand_in_mixture = mixture * sand_percentage / 100\nclay_in_mixture = mixture * clay_percentage / 100\nsand_to_be_added = sand_in_mixture - clay_in_mixture\nmixture_to_be_removed = sand_to_be_added / sand_percentage * 100\nans = mixture_to_be_removed"], "generated_prediction": "None", "options": ["A)10/7", "B)20/7", "C)30/7", "D)40/7", "E)50/7"], "answer": "B", "prediction": "None"}
{"question": "A man spends 70% of his income. If his income increases by 20%, then what will be his new expenditure?", "generated": ["\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_expenditure = expenditure * 1.2\nans = new_expenditure / income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nans = (new_income - income) / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = income * 1.2\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = income * 1.2\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = income * 1.2\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = expenditure / income * new_income\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = expenditure / income * new_income\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = expenditure / income * new_income\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = 0.7 * new_income\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = 0.7 * new_income\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = 0.7 * new_income\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = 0.7 * new_income\nans = new_expenditure / new_income", "\nexpenditure = Symbol('expenditure', positive=True)\nincome = Symbol('income', positive=True)\nsolution = solve_it(expenditure - 0.7 * income, expenditure)\nans = solution[expenditure] * 1.2", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = income * 1.2\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * expenditure / income\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = expenditure * new_income / income\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nincrease = 0.2\nnew_income = income + income * increase\nnew_expenditure = new_income * 0.7\nans = new_expenditure / income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans=new_expenditure / new_income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / income", "\nincome = Symbol('income', positive=True)\nexpenditure = 0.7 * income\nnew_income = 1.2 * income\nnew_expenditure = new_income * 0.7\nans = new_expenditure / income"], "generated_prediction": "0.7", "options": ["A)58.3%", "B)62.5%", "C)63.5%", "D)64.5%", "E)65.5%"], "answer": "A", "prediction": "A"}
{"question": "What is the greatest number of identical bouquets that can be made out of 28 white and 98 red tulips if no flowers are to be left out? (Two bouquets are identical whenever the number of red tulips in the two bouquets is equal and the number of white tulips in the two bouquets is equal.)", "generated": ["\nwhite_tulips = 28\nred_tulips = 98\nans = math.gcd(white_tulips, red_tulips)", "\nwhite_tulips = 28\nred_tulips = 98\nans = math.gcd(white_tulips, red_tulips)", "\nwhite_tulips = 28\nred_tulips = 98\nans = math.gcd(white_tulips, red_tulips)", "\nwhite_tulips = 28\nred_tulips = 98\nans = math.gcd(white_tulips, red_tulips)", "\nwhite_tulips = 28\nred_tulips = 98\nans = math.gcd(white_tulips, red_tulips)", "\nwhite_tulips = 28\nred_tulips = 98\nans = math.gcd(white_tulips, red_tulips)", "\nwhite_tulips = 28\nred_tulips = 98\nans = math.gcd(white_tulips, red_tulips)", "\nwhite_tulips = 28\nred_tulips = 98\ngcd = math.gcd(white_tulips, red_tulips)\nans = white_tulips * red_tulips / gcd", "\nwhite_tulips = 28\nred_tulips = 98\ngcd = math.gcd(white_tulips, red_tulips)\nans = white_tulips * red_tulips / gcd", "\nwhite_tulips = 28\nred_tulips = 98\ngcd = math.gcd(white_tulips, red_tulips)\nans = white_tulips * red_tulips // gcd", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_number = math.gcd(white_tulips, red_tulips)\nans = greatest_number", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_number = math.gcd(white_tulips, red_tulips)\nans = greatest_number", "\nwhite_tulips = 28\nred_tulips = 98\ntotal_tulips = white_tulips + red_tulips\nans = math.gcd(white_tulips, red_tulips)", "\nnum_white_tulips = 28\nnum_red_tulips = 98\nmax_num_bouquets = min(num_white_tulips, num_red_tulips)\nans = max_num_bouquets", "\nnum_white_tulips = 28\nnum_red_tulips = 98\nnum_bouquets = math.gcd(num_white_tulips, num_red_tulips)\nans = num_bouquets", "\nnum_white_tulips = 28\nnum_red_tulips = 98\nnum_bouquets = math.gcd(num_white_tulips, num_red_tulips)\nans = num_bouquets", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_number = min(white_tulips, red_tulips)\nans = greatest_number", "\nwhite_tulips = 28\nred_tulips = 98\nans = min(white_tulips, red_tulips)", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_number = min(white_tulips, red_tulips)\nans = greatest_number", "\nnum_white_tulips = 28\nnum_red_tulips = 98\nnum_bouquets = num_white_tulips if num_white_tulips < num_red_tulips else num_red_tulips\nans = num_bouquets", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_common_divisor = math.gcd(white_tulips, red_tulips)\nans = white_tulips * red_tulips / greatest_common_divisor", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_common_divisor = math.gcd(white_tulips, red_tulips)\nans = white_tulips * red_tulips / greatest_common_divisor", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_number = 0\nfor i in range(1, white_tulips + 1):\n    if white_tulips % i == 0 and red_tulips % i == 0:\n        greatest_number = i\nans = greatest_number", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_number = 0\nfor i in range(1, white_tulips + 1):\n    if white_tulips % i == 0 and red_tulips % i == 0:\n        greatest_number = i\nans = greatest_number", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_number = 0\nfor i in range(1, white_tulips + 1):\n    if white_tulips % i == 0 and red_tulips % i == 0:\n        greatest_number = i\nans = greatest_number", "\nwhite_tulips = 28\nred_tulips = 98\ngreatest_common_divisor = math.gcd(white_tulips, red_tulips)\nans = white_tulips * red_tulips / greatest_common_divisor", "\nwhite_tulips = 28\nred_tulips = 98\nmax_bouquets = min(white_tulips, red_tulips)\nans = max_bouquets", "\n# Hint: Use the greatest common divisor\nred_tulips = 98\nwhite_tulips = 28\ngcd = math.gcd(red_tulips, white_tulips)\nans = red_tulips * white_tulips / gcd", "\n# Hint: 28 and 98 are coprime numbers.\nans = math.gcd(28, 98)", "\n# Hint: Use greatest common divisor\nwhite_tulips = 28\nred_tulips = 98\ngcd = math.gcd(white_tulips, red_tulips)\nans = white_tulips * red_tulips // gcd"], "generated_prediction": "14", "options": ["A)4", "B)7", "C)10", "D)14", "E)21"], "answer": "D", "prediction": "D"}
{"question": "Sharon works for 5 hours to earn enough tips to buy an ice cream cake, while Karen works for 4. After how many hours will they be able to buy the cake together?", "generated": ["\nsharon_rate = Symbol('sharon_rate', positive=True)\nkaren_rate = Symbol('karen_rate', positive=True)\nsharon_time = 5\nkaren_time = 4\nsolution = solve_it([sharon_rate * sharon_time - karen_rate * karen_time], [sharon_rate])\nans = solution[sharon_rate]", "\nsharon_speed = 1 / 5\nkaren_speed = 1 / 4\ncake_price = Symbol('cake_price', positive=True)\nsolution = solve_it(sharon_speed + karen_speed - 1 / cake_price, cake_price)\nans = solution[cake_price]", "\nsharon_tip_rate = Symbol('sharon_tip_rate', positive=True)\nkaren_tip_rate = Symbol('karen_tip_rate', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsolution = solve_it([sharon_tip_rate * 5 - cake_price, karen_tip_rate * 4 - cake_price], [sharon_tip_rate, karen_tip_rate])\nans = cake_price / (solution[sharon_tip_rate] + solution[karen_tip_rate])", "\nsharon_hourly_rate = 1\nkaren_hourly_rate = 1.25\ncake_price = 5\nans = cake_price / (sharon_hourly_rate + karen_hourly_rate)", "\nsharon_hours = 5\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_hours = 4\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsolution = solve_it([sharon_hours * sharon_tips - cake_price, karen_hours * karen_tips - cake_price], [sharon_tips, karen_tips])\nans = cake_price / (solution[sharon_tips] + solution[karen_tips])", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_cost = Symbol('cake_cost', positive=True)\nsharon_hours = 5\nkaren_hours = 4\nsolution = solve_it([sharon_tips / sharon_hours - karen_tips / karen_hours, sharon_tips + karen_tips - cake_cost], [sharon_tips, karen_tips])\nans = solution[sharon_tips] / solution[karen_tips]", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsharon_time = 5\nkaren_time = 4\nsolution = solve_it([sharon_tips - sharon_time * cake_price, karen_tips - karen_time * cake_price, sharon_tips + karen_tips - cake_price], [sharon_tips, karen_tips, cake_price])\nans = solution[cake_price] / (sharon_time + karen_time)", "\nsharon_hours = 5\nkaren_hours = 4\ncake_cost = Symbol('cake_cost', positive=True)\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\nsolution = solve_it([sharon_hours * sharon_tips - cake_cost, karen_hours * karen_tips - cake_cost], [sharon_tips, karen_tips])\nans = cake_cost / (solution[sharon_tips] + solution[karen_tips])", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_cost = Symbol('cake_cost', positive=True)\nsharon_time = 5\nkaren_time = 4\nsolution = solve_it([sharon_tips / sharon_time - karen_tips / karen_time, sharon_tips + karen_tips - cake_cost], [sharon_tips, karen_tips, cake_cost])\nans = solution[sharon_tips] / solution[karen_tips]", "\nsharon_speed = 1\nkaren_speed = 1\ntime_sharon = 5\ntime_karen = 4\ntime_together = time_sharon * karen_speed + time_karen * sharon_speed\nans = time_together", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_cost = Symbol('cake_cost', positive=True)\nsharon_time = 5\nkaren_time = 4\nsolution = solve_it([sharon_tips - sharon_time * cake_cost, karen_tips - karen_time * cake_cost, sharon_tips + karen_tips - cake_cost], [sharon_tips, karen_tips, cake_cost])\nans = cake_cost / (sharon_time + karen_time)", "\nsharon_hourly_rate = Symbol('sharon_hourly_rate', positive=True)\nkaren_hourly_rate = Symbol('karen_hourly_rate', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsolution = solve_it([sharon_hourly_rate * 5 - cake_price, karen_hourly_rate * 4 - cake_price], [sharon_hourly_rate, karen_hourly_rate])\nsharon_hourly_rate = solution[sharon_hourly_rate]\nkaren_hourly_rate = solution[karen_hourly_rate]\nans = int(cake_price / (sharon_hourly_rate + karen_hourly_rate))", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsharon_tips_per_hour = sharon_tips / 5\nkaren_tips_per_hour = karen_tips / 4\nsolution = solve_it(sharon_tips_per_hour + karen_tips_per_hour - cake_price, [sharon_tips, karen_tips])\nans = solution[sharon_tips] / sharon_tips_per_hour", "\nsharon_tips_per_hour = Symbol('sharon_tips_per_hour', positive=True)\nkaren_tips_per_hour = Symbol('karen_tips_per_hour', positive=True)\ncake_cost = Symbol('cake_cost', positive=True)\nsharon_tips = 5 * sharon_tips_per_hour\nkaren_tips = 4 * karen_tips_per_hour\nsolution = solve_it([sharon_tips + karen_tips - cake_cost, sharon_tips_per_hour - karen_tips_per_hour], [sharon_tips_per_hour, karen_tips_per_hour, cake_cost])\nans = solution[cake_cost] / solution[sharon_tips_per_hour]", "\nsharon_tip_rate = Symbol('sharon_tip_rate', positive=True)\nkaren_tip_rate = Symbol('karen_tip_rate', positive=True)\ncake_cost = Symbol('cake_cost', positive=True)\nsharon_tip = sharon_tip_rate * 5\nkaren_tip = karen_tip_rate * 4\nsolution = solve_it([sharon_tip + karen_tip - cake_cost], [sharon_tip_rate, karen_tip_rate])\nans = solution[sharon_tip_rate]", "\nsharon_hourly_rate = Symbol('sharon_hourly_rate', positive=True)\nkaren_hourly_rate = Symbol('karen_hourly_rate', positive=True)\ncake_cost = Symbol('cake_cost', positive=True)\nsharon_earning = 5 * sharon_hourly_rate\nkaren_earning = 4 * karen_hourly_rate\nsolution = solve_it([sharon_earning + karen_earning - cake_cost, sharon_hourly_rate - karen_hourly_rate], [sharon_hourly_rate, karen_hourly_rate])\nans = cake_cost / (solution[sharon_hourly_rate] + solution[karen_hourly_rate])", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsolution = solve_it([5 * sharon_tips - cake_price, 4 * karen_tips - cake_price], [sharon_tips, karen_tips])\nsharon_tips = solution[sharon_tips]\nkaren_tips = solution[karen_tips]\ntime_to_buy_cake = cake_price / (sharon_tips + karen_tips)\nans = time_to_buy_cake", "\nsharon_hourly_rate = Symbol('sharon_hourly_rate', positive=True)\nkaren_hourly_rate = Symbol('karen_hourly_rate', positive=True)\ncake_cost = Symbol('cake_cost', positive=True)\nsolution = solve_it([sharon_hourly_rate * 5 - cake_cost, karen_hourly_rate * 4 - cake_cost], [sharon_hourly_rate, karen_hourly_rate])\nans = cake_cost / (solution[sharon_hourly_rate] + solution[karen_hourly_rate])", "\nsharon_hourly_rate = 1\nkaren_hourly_rate = 1\ncake_price = 5\nsolution = solve_it(sharon_hourly_rate * 5 + karen_hourly_rate * 4 - cake_price, karen_hourly_rate)\nans = solution[karen_hourly_rate]", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_cost = Symbol('cake_cost', positive=True)\nsharon_time = 5\nkaren_time = 4\nsolution = solve_it([sharon_tips * sharon_time - cake_cost, karen_tips * karen_time - cake_cost], [sharon_tips, karen_tips])\nans = cake_cost / (solution[sharon_tips] * sharon_time + solution[karen_tips] * karen_time)", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsharon_hours = 5\nkaren_hours = 4\nsolution = solve_it([sharon_tips - sharon_hours * cake_price, karen_tips - karen_hours * cake_price, sharon_tips + karen_tips - cake_price], [sharon_tips, karen_tips, cake_price])\nans = solution[cake_price] / solution[sharon_tips]", "\nsharon_work_hours = 5\nkaren_work_hours = 4\ncake_price = Symbol('cake_price', positive=True)\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\nsolution = solve_it([sharon_tips / sharon_work_hours - karen_tips / karen_work_hours, sharon_tips + karen_tips - cake_price], [sharon_tips, karen_tips])\nans = cake_price / solution[sharon_tips]", "\nsharon_earning_rate = 1\nkaren_earning_rate = 1\ncake_price = 5\nsolution = solve_it(sharon_earning_rate * 5 + karen_earning_rate * 4 - cake_price, karen_earning_rate)\nans = solution[karen_earning_rate]", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_cost = Symbol('cake_cost', positive=True)\nsharon_hours = 5\nkaren_hours = 4\nsolution = solve_it([sharon_tips - sharon_hours * cake_cost, karen_tips - karen_hours * cake_cost], [sharon_tips, karen_tips])\nans = solution[sharon_tips] + solution[karen_tips]", "\nsharon_hourly_rate = 1\nkaren_hourly_rate = 1\ncake_price = 5\nsolution = solve_it(sharon_hourly_rate * 5 + karen_hourly_rate * 4 - cake_price, sharon_hourly_rate)\nans = solution[sharon_hourly_rate]", "\nsharon_hourly_tips = Symbol('sharon_hourly_tips', positive=True)\nkaren_hourly_tips = Symbol('karen_hourly_tips', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsharon_total_tips = sharon_hourly_tips * 5\nkaren_total_tips = karen_hourly_tips * 4\nsolution = solve_it([sharon_total_tips + karen_total_tips - cake_price], [sharon_hourly_tips, karen_hourly_tips])\nans = cake_price / (solution[sharon_hourly_tips] + solution[karen_hourly_tips])", "\nsharon_hourly_tip = Symbol('sharon_hourly_tip', positive=True)\nkaren_hourly_tip = Symbol('karen_hourly_tip', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsharon_time = 5\nkaren_time = 4\nsolution = solve_it([sharon_hourly_tip * sharon_time + karen_hourly_tip * karen_time - cake_price, sharon_hourly_tip - karen_hourly_tip], [sharon_hourly_tip, karen_hourly_tip])\nans = cake_price / (solution[sharon_hourly_tip] + solution[karen_hourly_tip])", "\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ncake_price = Symbol('cake_price', positive=True)\nsharon_time = 5\nkaren_time = 4\nsolution = solve_it([sharon_tips * sharon_time - cake_price, karen_tips * karen_time - cake_price], [sharon_tips, karen_tips])\nans = solution[sharon_tips] / solution[karen_tips]", "\nsharon_work_hours = 5\nkaren_work_hours = 4\nsharon_earns_per_hour = 1 / sharon_work_hours\nkaren_earns_per_hour = 1 / karen_work_hours\ntotal_work_hours = Symbol('total_work_hours', positive=True)\ntotal_earns = sharon_earns_per_hour + karen_earns_per_hour\nsolution = solve_it(total_earns * total_work_hours - 1, total_work_hours)\nans = solution[total_work_hours]", "\nsharon_hours = 5\nkaren_hours = 4\nsharon_tips = Symbol('sharon_tips', positive=True)\nkaren_tips = Symbol('karen_tips', positive=True)\ntotal_tips = sharon_tips + karen_tips\nsolution = solve_it([sharon_tips / sharon_hours - karen_tips / karen_hours, sharon_tips + karen_tips - total_tips], [sharon_tips, karen_tips])\nans = solution[sharon_tips] / sharon_hours + solution[karen_tips] / karen_hours"], "generated_prediction": "2.22", "options": ["A)1 hour", "B)2 hours", "C)3 hours", "D)4 hours", "E)5 hours"], "answer": "C", "prediction": "B"}
{"demonstration": "\n# Write Python Code to solve the following questions. Store your result as a variable named 'ans'.\nfrom sympy import Symbol\nfrom sympy import simplify\nimport math\nfrom sympy import solve_it\n# solve_it(equations, variable): solving the equations and return the variable value.\n\n# Question: In a flight of 600 km, an aircraft was slowed down due to bad weather. Its average speed for the trip was reduced by 200 km/hr and the time of flight increased by 30 minutes. The duration of the flight is:\n# Answer option: ['A)1 hour', 'B)2 hours', 'C)3 hours', 'D)4 hours', 'E)5 hours']\nduration = Symbol('duration', positive=True)\ndelay = 30 / 60\ntotal_disntace = 600\noriginal_speed = total_disntace / duration\nreduced_speed = total_disntace / (duration + delay)\nsolution = solve_it(original_speed - reduced_speed - 200, duration)\nans = solution[duration]\n\n# Question: M men agree to purchase a gift for Rs. D. If 3 men drop out how much more will each have to contribute towards the purchase of the gift?\n# Answer options: ['A)D/(M-3)', 'B)MD/3', 'C)M/(D-3)', 'D)3D/(M2-3M)', 'E)None of these']\nM = Symbol('M')\nD = Symbol('D')\ncost_before_dropout = D / M\ncost_after_dropout = D / (M - 3)\nans=simplify(cost_after_dropout - cost_before_dropout)\n\n# Question: A sum of money at simple interest amounts to Rs. 815 in 3 years and to Rs. 854 in 4 years. The sum is:\n# Answer option: ['A)Rs. 650', 'B)Rs. 690', 'C)Rs. 698', 'D)Rs. 700', 'E)None of these']\ndeposit = Symbol('deposit', positive=True)\ninterest = Symbol('interest', positive=True)\nmoney_in_3_years = deposit + 3 * interest\nmoney_in_4_years = deposit + 4 * interest\nsolution = solve_it([money_in_3_years - 815, money_in_4_years - 854], [deposit, interest])\nans = solution[deposit]\n\n# Question: Find out which of the following values is the multiple of X, if it is divisible by 9 and 12?\n# Answer option: ['A)36', 'B)15', 'C)17', 'D)5', 'E)7']\noptions = [36, 15, 17, 5, 7]\nfor option in options:\n    if option % 9 == 0 and option % 12 == 0:\n        ans = option\n        break\n\n# Question: 35% of the employees of a company are men. 60% of the men in the company speak French and 40% of the employees of the company speak French. What is % of the women in the company who do not speak French?\n# Answer option: ['A)4%', 'B)10%', 'C)96%', 'D)90.12%', 'E)70.77%']\nnum_women = 65\nmen_speaking_french = 0.6 * 35\nemployees_speaking_french = 0.4 * 100\nwomen_speaking_french = employees_speaking_french - men_speaking_french\nwomen_not_speaking_french=num_women - women_speaking_french\nans = women_not_speaking_french / num_women\n\n# Question: In one hour, a boat goes 11 km/hr along the stream and 5 km/hr against the stream. The speed of the boat in still water (in km/hr) is:\n# Answer option: ['A)4 kmph', 'B)5 kmph', 'C)6 kmph', 'D)7 kmph', 'E)8 kmph']\nboat_speed = Symbol('boat_speed', positive=True)\nstream_speed = Symbol('stream_speed', positive=True)\nalong_stream_speed = 11\nagainst_stream_speed = 5\nsolution = solve_it([boat_speed + stream_speed - along_stream_speed, boat_speed - stream_speed - against_stream_speed], [boat_speed, stream_speed])\nans = solution[boat_speed]\n\n# Question: The difference between simple interest and C.I. at the same rate for Rs.5000 for 2 years in Rs.72. The rate of interest is?\n# Answer option: ['A)10%', 'B)12%', 'C)6%', 'D)8%', 'E)4%']\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]\n\n# Question: The area of a rectangle is 15 square centimeters and the perimeter is 16 centimeters. What are the dimensions of the rectangle?\n# Answer option: ['A)2&4', 'B)3&5', 'C)4&6', 'D)5&7', 'E)6&8']\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 15\npermimeter = 16\nsolution = solve_it([width * height - area, 2 * (width + height) - permimeter], [width, height])\nans = (solution[width], solution[height])\n"}
{"question": "If x<0, y>0, and |x^3| > |y^2|, which of the following must be true?", "generated": ["\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) > abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) > abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) > abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) > abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) > abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) > abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) > abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) > abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) > abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) - abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) - abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) - abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) - abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it(abs(x ** 3) - abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it(abs(x ** 3) - abs(y ** 2), x)\nans = solution[x]", "\nx = Symbol('x', negative=True)\ny = Symbol('y', positive=True)\nans = x < -y", "\nx = Symbol('x')\ny = Symbol('y')\nans = -x ** 3 < y ** 2", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nans = solve_it(abs(x ** 3) > abs(y ** 2), x)", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nans = solve_it(abs(x ** 3) - abs(y ** 2), x)", "\nx = Symbol('x')\ny = Symbol('y')\nans = 'D)\u2013x < y'", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nans = (x < 0) and (y > 0) and (abs(x ** 3) > abs(y ** 2))", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it([abs(x ** 3) - abs(y ** 2)], [x, y])\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nif x < 0 and y > 0 and abs(x ** 3) > abs(y ** 2):\n    ans = 'D)\u2013x < y'", "\nx = Symbol('x')\ny = Symbol('y')\nans = solve_it(x ** 3 - y ** 2, x)", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it(x ** 3 - y ** 2, x)\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it([abs(x ** 3) - abs(y ** 2)], [x, y])\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it([x < 0, y > 0, abs(x ** 3) > abs(y ** 2)], [x, y])\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it(x ** 3 - y ** 2, x)\nans = solution[x]", "\nx = Symbol('x', real=True)\ny = Symbol('y', real=True)\nsolution = solve_it([abs(x ** 3) > abs(y ** 2), x < 0, y > 0], [x, y])\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it(x ** 3 - y ** 2, x)\nans = solution[0]"], "generated_prediction": "Piecewise(((-1)**(1/3)*Abs(y)**(2/3), (-1)**(1/3)*Abs(y)**(2/3) < 0), (nan, True))", "options": ["A)x > y", "B)y^2 > x^2", "C)-x^3 < y^2", "D)\u2013x < y", "E)x < \u2013y"], "answer": "B", "prediction": "A"}
{"question": "Printer A and Printer B can each print 1\u20442 page per second. How long will it take both printers working together to print 100 pages?", "generated": ["\nprinter_a_speed = 1 / 2\nprinter_b_speed = 1 / 2\ntotal_speed = printer_a_speed + printer_b_speed\nans = 100 / total_speed", "\nprinter_a_speed = 1 / 2\nprinter_b_speed = 1 / 2\ntotal_speed = printer_a_speed + printer_b_speed\nans = 100 / total_speed", "\nprinter_a_speed = 1 / 2\nprinter_b_speed = 1 / 2\ntotal_speed = printer_a_speed + printer_b_speed\nans = 100 / total_speed", "\nprinter_A_speed = 0.5\nprinter_B_speed = 0.5\ntotal_speed = printer_A_speed + printer_B_speed\nans = 100 / total_speed", "\nprinter_A_speed = 0.5\nprinter_B_speed = 0.5\ntotal_speed = printer_A_speed + printer_B_speed\nans = 100 / total_speed", "\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\ntotal_speed = printer_a_speed + printer_b_speed\nans = 100 / total_speed", "\npages = 100\nprinter_speed = 1 / 2\nans = pages / printer_speed", "\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\ntotal_speed = printer_a_speed + printer_b_speed\nnum_pages = 100\nans = num_pages / total_speed", "\npages = 100\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\nans = pages / (printer_a_speed + printer_b_speed)", "\nA_speed = 0.5\nB_speed = 0.5\ntotal_speed = A_speed + B_speed\nans = 100 / total_speed", "\ntime = Symbol('time', positive=True)\nnum_pages = 100\nsolution = solve_it(time / 2 + time / 2 - num_pages, time)\nans = solution[time]", "\nprinter_A_speed = 1 / 2\nprinter_B_speed = 1 / 2\ntotal_speed = printer_A_speed + printer_B_speed\nnum_pages = 100\nans = num_pages / total_speed", "\ntime = Symbol('time', positive=True)\npages = 100\nsolution = solve_it(time / 2 + time / 2 - time - pages, time)\nans = solution[time]", "\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\ntotal_speed = printer_a_speed + printer_b_speed\ntotal_time = 100 / total_speed\nans = total_time", "\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\ntotal_speed = printer_a_speed + printer_b_speed\npages = 100\nans = pages / total_speed", "\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\ntotal_speed = printer_a_speed + printer_b_speed\npages = 100\nans = pages / total_speed", "\nprinter_a_speed = 1 / 2\nprinter_b_speed = 1 / 2\ntotal_speed = printer_a_speed + printer_b_speed\npages = 100\nans = pages / total_speed", "\nprinter_a_speed = 1 / 2\nprinter_b_speed = 1 / 2\ntotal_speed = printer_a_speed + printer_b_speed\npages = 100\nans = pages / total_speed", "\npages = 100\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\ntotal_speed = printer_a_speed + printer_b_speed\nans = pages / total_speed", "\npages = 100\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\ntotal_speed = printer_a_speed + printer_b_speed\nans = pages / total_speed", "\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\ntotal_pages = 100\nans = total_pages / (printer_a_speed + printer_b_speed)", "\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\ntotal_pages = 100\nans = total_pages / (printer_a_speed + printer_b_speed)", "\nprinter_a_speed = 0.5\nprinter_b_speed = 0.5\nnum_pages = 100\nans = num_pages / (printer_a_speed + printer_b_speed)", "\nprinter_A_speed = 1 / 2\nprinter_B_speed = 1 / 2\ntotal_pages = 100\nans = total_pages / (printer_A_speed + printer_B_speed)", "\nprinter_speed = 1 / 2\nnum_pages = 100\nans = num_pages / printer_speed", "\nseconds = Symbol('seconds', positive=True)\npages = 100\nsolution = solve_it(seconds - pages / (1 / 2 + 1 / 2), seconds)\nans = solution[seconds]", "\nprinter_speed = Symbol('printer_speed', positive=True)\npages = 100\nsolution = solve_it(printer_speed - 1 / 2, printer_speed)\nans = pages / solution[printer_speed]", "\ntime_taken = Symbol('time_taken', positive=True)\npages_to_print = 100\nsolution = solve_it(time_taken - pages_to_print / (1/2 + 1/2), time_taken)\nans = solution[time_taken]", "\nnum_pages = 100\nprinter_a = Symbol('printer_a', positive=True)\nprinter_b = Symbol('printer_b', positive=True)\nsolution = solve_it([printer_a + printer_b - 0.5, printer_a * printer_b - num_pages], [printer_a, printer_b])\nans = solution[printer_a]", "\nprinter_a_speed = Symbol('printer_a_speed', positive=True)\nprinter_b_speed = Symbol('printer_b_speed', positive=True)\ntotal_speed = printer_a_speed + printer_b_speed\nsolution = solve_it(100 / total_speed - 50, total_speed)\nans = solution[total_speed]"], "generated_prediction": "100.0", "options": ["A)25 seconds", "B)50 seconds", "C)100 seconds", "D)200 seconds", "E)400 seconds"], "answer": "C", "prediction": "C"}
{"question": "Two ants are moving from their farms towards each other. Ant A is moving at a speed of 9 cm per hour and ant B is moving at a speed of 6 cm per hour. If the farms are 75 cm away from each other, what will be the distance (in cm) that ant A travels until meeting ant B?", "generated": ["\nspeed_A = 9\nspeed_B = 6\ndistance = 75\ntime = distance / (speed_A + speed_B)\nans = speed_A * time", "\ndistance = Symbol('distance', positive=True)\nant_a_speed = 9\nant_b_speed = 6\nsolution = solve_it(distance / ant_a_speed - distance / ant_b_speed - 75, distance)\nans = solution[distance]", "\nspeed_a = 9\nspeed_b = 6\ndistance_between_farms = 75\nans = distance_between_farms * speed_a / (speed_a + speed_b)", "\ndistance_between_farms = 75\nspeed_of_ant_A = 9\nspeed_of_ant_B = 6\ntime = distance_between_farms / (speed_of_ant_A + speed_of_ant_B)\nans = speed_of_ant_A * time", "\nant_a_speed = 9\nant_b_speed = 6\ndistance_between_farms = 75\ndistance_travelled_by_ant_a = distance_between_farms * ant_a_speed / (ant_a_speed + ant_b_speed)\nans = distance_travelled_by_ant_a", "\nspeed_of_ant_A = 9\nspeed_of_ant_B = 6\ndistance_between_farms = 75\ntime_taken = distance_between_farms / (speed_of_ant_A + speed_of_ant_B)\nans = speed_of_ant_A * time_taken", "\nspeed_of_ant_a = 9\nspeed_of_ant_b = 6\ndistance_between_farms = 75\ntime_taken = distance_between_farms / (speed_of_ant_a + speed_of_ant_b)\nans = speed_of_ant_a * time_taken", "\nspeed_A = 9\nspeed_B = 6\ndistance_A = Symbol('distance_A', positive=True)\ndistance_B = 75\ntime_A = distance_A / speed_A\ntime_B = distance_B / speed_B\nsolution = solve_it(time_A - time_B, distance_A)\nans = solution[distance_A]", "\nspeed_of_ant_A = 9\nspeed_of_ant_B = 6\ndistance_between_farms = 75\ntotal_time = distance_between_farms / (speed_of_ant_A + speed_of_ant_B)\ndistance_traveled_by_ant_A = speed_of_ant_A * total_time\nans = distance_traveled_by_ant_A", "\nspeed_of_ant_A = 9\nspeed_of_ant_B = 6\ndistance_between_farms = 75\ntime_to_meet = distance_between_farms / (speed_of_ant_A + speed_of_ant_B)\ndistance_traveled_by_ant_A = speed_of_ant_A * time_to_meet\nans = distance_traveled_by_ant_A", "\nspeed_A = 9\nspeed_B = 6\ndistance_between_farms = 75\ntime_taken_by_A = distance_between_farms / speed_A\ndistance_travelled_by_A = time_taken_by_A * speed_A\nans = distance_travelled_by_A", "\nspeed_A = 9\nspeed_B = 6\ndistance_between_farms = 75\ntime_taken_by_A = distance_between_farms / speed_A\ndistance_travelled_by_A = time_taken_by_A * speed_A\nans = distance_travelled_by_A", "\nspeed_of_ant_a = 9\nspeed_of_ant_b = 6\ndistance_between_farms = 75\ntime_taken = distance_between_farms / (speed_of_ant_a + speed_of_ant_b)\ndistance_travelled_by_ant_a = speed_of_ant_a * time_taken\nans = distance_travelled_by_ant_a", "\nspeed_ant_a = 9\nspeed_ant_b = 6\ndistance_between_farms = 75\ntime_taken_to_meet = distance_between_farms / (speed_ant_a + speed_ant_b)\ndistance_traveled_by_ant_a = speed_ant_a * time_taken_to_meet\nans = distance_traveled_by_ant_a", "\nspeed_of_ant_A = 9\nspeed_of_ant_B = 6\ndistance_between_farms = 75\ndistance_traveled_by_ant_A = speed_of_ant_A * speed_of_ant_B / (speed_of_ant_A + speed_of_ant_B)\nans = distance_between_farms - distance_traveled_by_ant_A", "\nspeed_of_ant_A = 9\nspeed_of_ant_B = 6\ndistance_between_farms = 75\ntime_taken_by_ant_A = distance_between_farms / speed_of_ant_A\ndistance_travelled_by_ant_A = speed_of_ant_A * time_taken_by_ant_A\nans = distance_travelled_by_ant_A", "\nspeed_A = 9\nspeed_B = 6\ndistance_between_farms = 75\ntime_taken_by_A = distance_between_farms / speed_A\ndistance_traveled_by_A = time_taken_by_A * speed_A\nans = distance_traveled_by_A", "\nspeed_A = 9\nspeed_B = 6\ndistance_between_farms = 75\ntime_taken_by_A = distance_between_farms / speed_A\ndistance_traveled_by_A = speed_A * time_taken_by_A\nans = distance_traveled_by_A", "\nspeed_A = 9\nspeed_B = 6\ndistance_between_farms = 75\ntime_to_meet = distance_between_farms / (speed_A + speed_B)\nans = speed_A * time_to_meet", "\nspeed_A = 9\nspeed_B = 6\ndistance_between_farms = 75\ndistance_travelled_by_A = speed_A * (distance_between_farms / (speed_A + speed_B))\nans = distance_travelled_by_A", "\nspeed_ant_a = 9\nspeed_ant_b = 6\ndistance_between_farms = 75\ntime_taken_by_ant_a = distance_between_farms / speed_ant_a\ndistance_traveled_by_ant_a = time_taken_by_ant_a * speed_ant_a\nans = distance_traveled_by_ant_a", "\nspeed_of_ant_A = 9\nspeed_of_ant_B = 6\ndistance_between_farms = 75\ntime_taken = distance_between_farms / (speed_of_ant_A + speed_of_ant_B)\ndistance_traveled_by_ant_A = speed_of_ant_A * time_taken\nans = distance_traveled_by_ant_A", "\ndistance_between_farms = 75\nspeed_of_ant_a = 9\nspeed_of_ant_b = 6\ntime_taken_to_meet = distance_between_farms / (speed_of_ant_a + speed_of_ant_b)\ndistance_traveled_by_ant_a = time_taken_to_meet * speed_of_ant_a\nans = distance_traveled_by_ant_a", "\ndistance_between_farms = 75\nspeed_of_ant_A = 9\nspeed_of_ant_B = 6\ntime_taken = distance_between_farms / (speed_of_ant_A + speed_of_ant_B)\ndistance_traveled_by_ant_A = speed_of_ant_A * time_taken\nans = distance_traveled_by_ant_A", "\nspeed_of_ant_A = 9\nspeed_of_ant_B = 6\ndistance_between_farms = 75\ndistance_travelled_by_ant_A = speed_of_ant_A * speed_of_ant_B / (speed_of_ant_A + speed_of_ant_B)\nans = distance_between_farms - distance_travelled_by_ant_A", "\nspeed_a = 9\nspeed_b = 6\ndistance_between_farms = 75\ndistance_traveled_by_a = speed_a * (distance_between_farms / (speed_a + speed_b))\nans = distance_traveled_by_a", "\ndistance_between_farms = 75\nant_A_speed = 9\nant_B_speed = 6\ntime_taken = distance_between_farms / (ant_A_speed + ant_B_speed)\ndistance_travelled_by_ant_A = ant_A_speed * time_taken\nans = distance_travelled_by_ant_A", "\nspeed_ant_A = 9\nspeed_ant_B = 6\ndistance_between_farms = 75\ndistance_ant_A_travels = speed_ant_A * distance_between_farms / (speed_ant_A + speed_ant_B)\nans = distance_ant_A_travels", "\nspeed_A = 9\nspeed_B = 6\ndistance_between_farms = 75\nspeed_A_per_hour = speed_A / 60\nspeed_B_per_hour = speed_B / 60\ndistance_A_travels = distance_between_farms * speed_B_per_hour / (speed_A_per_hour + speed_B_per_hour)\nans = distance_A_travels", "\nspeed_of_A = 9\nspeed_of_B = 6\ndistance_between_farms = 75\nspeed_of_A_in_cm_per_min = speed_of_A / 60\nspeed_of_B_in_cm_per_min = speed_of_B / 60\ntime_taken_by_A_to_meet_B = distance_between_farms / (speed_of_A_in_cm_per_min + speed_of_B_in_cm_per_min)\ndistance_travelled_by_A = speed_of_A_in_cm_per_min * time_taken_by_A_to_meet_B\nans = distance_travelled_by_A"], "generated_prediction": "45.0", "options": ["A)45", "B)48", "C)51", "D)54", "E)57"], "answer": "A", "prediction": "A"}
{"question": "Roberts has a property worth of $1023.65. But in a record his property worth is written as greatest positive even integer less than or equal to his property worth and it is divisible by 100. Find the difference between actual property and recorded property worth?", "generated": ["\nproperty_worth = 1023.65\nans = math.ceil(property_worth / 100) * 100 - property_worth", "\nproperty_worth = 1023.65\nans = math.ceil(property_worth / 100) * 100 - property_worth", "\nproperty_worth = 1023.65\nans = math.ceil(property_worth / 100) * 100 - property_worth", "\nproperty_worth = 1023.65\nans = math.ceil(property_worth / 100) * 100 - property_worth", "\nproperty_worth = 1023.65\nans = math.ceil(property_worth / 100) * 100 - property_worth", "\nactual_property = 1023.65\nrecorded_property = math.floor(actual_property / 100) * 100\nans = actual_property - recorded_property", "\nactual_property = 1023.65\nrecorded_property = math.floor(actual_property / 100) * 100\nans = actual_property - recorded_property", "\nactual_property = 1023.65\nrecorded_property = math.floor(actual_property / 100) * 100\nans = actual_property - recorded_property", "\nactual_property = 1023.65\nrecorded_property = math.floor(actual_property / 100) * 100\nans = actual_property - recorded_property", "\nactual_property = 1023.65\nrecorded_property = math.floor(actual_property / 100) * 100\nans = actual_property - recorded_property", "\nactual_property_worth = 1023.65\nrecorded_property_worth = math.floor(actual_property_worth / 100) * 100\nans = actual_property_worth - recorded_property_worth", "\nproperty_worth = 1023.65\nproperty_worth_in_record = math.floor(property_worth / 100) * 100\nans = property_worth - property_worth_in_record", "\nproperty_worth = 1023.65\nans = property_worth - int(property_worth / 100) * 100", "\nproperty_worth = 1023.65\nrecorded_property_worth = math.floor(property_worth / 100) * 100\nans = property_worth - recorded_property_worth", "\nproperty_worth = 1023.65\nrecorded_property_worth = math.floor(property_worth / 100) * 100\nans = property_worth - recorded_property_worth", "\nproperty_worth = 1023.65\nrecorded_property_worth = math.floor(property_worth / 100) * 100\nans = property_worth - recorded_property_worth", "\nproperty_worth = 1023.65\nrecorded_property_worth = math.floor(property_worth / 100) * 100\nans = property_worth - recorded_property_worth", "\nproperty_worth = 1023.65\nrecorded_property_worth = math.floor(property_worth / 100) * 100\nans = recorded_property_worth - property_worth", "\nproperty_worth = 1023.65\nans = math.floor(property_worth / 100) * 100", "\nproperty_worth = 1023.65\nans = math.floor(property_worth / 100) * 100", "\nproperty_worth = 1023.65\nans = math.floor(property_worth / 100) * 100", "\nproperty_worth = 1023.65\nans = math.floor(property_worth / 100) * 100", "\nproperty_worth = 1023.65\nrecorded_property_worth = math.floor(property_worth / 100) * 100\nans = property_worth - recorded_property_worth", "\nproperty_worth = 1023.65\nrecorded_property_worth = math.floor(property_worth / 100) * 100\nans = property_worth - recorded_property_worth", "\nproperty_worth = 1023.65\nrecorded_property_worth = math.floor(property_worth / 100) * 100\nans = recorded_property_worth - property_worth", "\nproperty_worth = 1023.65\nproperty_worth_recorded = math.floor(property_worth / 100) * 100\nans = property_worth - property_worth_recorded", "\nproperty_worth = 1023.65\nrecorded_property_worth = math.floor(property_worth / 100) * 100\nans = recorded_property_worth - property_worth", "\nproperty_worth = 1023.65\nactual_property_worth = math.floor(property_worth / 100) * 100\nans = actual_property_worth - property_worth", "\nproperty_worth = 1023.65\nproperty_worth_recorded = math.floor(property_worth / 100) * 100\nans = property_worth - property_worth_recorded", "\nproperty_worth = 1023.65\nproperty_worth_recorded = math.floor(property_worth / 100) * 100\nans = property_worth_recorded - property_worth"], "generated_prediction": "23.649999999999977", "options": ["A)23.65", "B)1000", "C)35.62", "D)2.65", "E)1023.65"], "answer": "A", "prediction": "A"}
{"question": "A man spend 810 in buying trouser at Rs 70 each and shirt at 30 each. What will be the ratio of trouser and shirt when the maximum number of trouser is purchased?", "generated": ["\ntrouser = Symbol('trouser', positive=True)\nshirt = Symbol('shirt', positive=True)\nmoney_spent = 810\nsolution = solve_it([70 * trouser + 30 * shirt - money_spent, trouser - shirt], [trouser, shirt])\nans = solution[trouser]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_money, trouser_count - shirt_count], [trouser_count, shirt_count])\nans = (solution[trouser_count], solution[shirt_count])", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_money, trouser_count - shirt_count], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_amount = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_amount, trouser_count - shirt_count], [trouser_count, shirt_count])\nans = (solution[trouser_count], solution[shirt_count])", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_price * trouser_count + shirt_price * shirt_count - total_money, trouser_count / shirt_count], [trouser_count, shirt_count])\nans = (solution[trouser_count], solution[shirt_count])", "\ntrouser_price = 70\nshirt_price = 30\ntotal_price = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_price * trouser_count + shirt_price * shirt_count - total_price, trouser_count - shirt_count], [trouser_count, shirt_count])\nans = (solution[trouser_count], solution[shirt_count])", "\nnum_trousers = Symbol('num_trousers', positive=True)\nnum_shirts = Symbol('num_shirts', positive=True)\ntrouser_price = 70\nshirt_price = 30\ntotal_price = 810\nsolution = solve_it([num_trousers * trouser_price + num_shirts * shirt_price - total_price, num_shirts - num_trousers], [num_trousers, num_shirts])\nans = solution[num_trousers]", "\ntrouser_price = 70\nshirt_price = 30\nmoney_spent = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - money_spent, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = (solution[trouser_count], solution[shirt_count])", "\ntrouser_price = 70\nshirt_price = 30\nmoney_spent = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - money_spent, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = (solution[trouser_count], solution[shirt_count])", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_money, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_money, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\nnum_trousers = Symbol('num_trousers', positive=True)\nnum_shirts = Symbol('num_shirts', positive=True)\nsolution = solve_it([num_trousers * trouser_price + num_shirts * shirt_price - total_money, num_trousers / num_shirts - 9], [num_trousers, num_shirts])\nans = solution[num_trousers]", "\ntrouser_cost = 70\nshirt_cost = 30\ntotal_cost = 810\nnum_trousers = Symbol('num_trousers', positive=True)\nnum_shirts = Symbol('num_shirts', positive=True)\nsolution = solve_it([num_trousers * trouser_cost + num_shirts * shirt_cost - total_cost, num_trousers / num_shirts - 9], [num_trousers, num_shirts])\nans = solution[num_trousers]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\nnum_trousers = Symbol('num_trousers', positive=True)\nnum_shirts = Symbol('num_shirts', positive=True)\nsolution = solve_it([num_trousers * trouser_price + num_shirts * shirt_price - total_money, num_trousers / num_shirts - 9], [num_trousers, num_shirts])\nans = solution[num_trousers]", "\ntrouser_cost = 70\nshirt_cost = 30\ntotal_cost = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_cost + shirt_count * shirt_cost - total_cost, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_amount = 810\nnum_trousers = Symbol('num_trousers', positive=True)\nnum_shirts = Symbol('num_shirts', positive=True)\nsolution = solve_it([num_trousers * trouser_price + num_shirts * shirt_price - total_amount, num_trousers / num_shirts - 9], [num_trousers, num_shirts])\nans = solution[num_trousers]", "\nnum_trousers = Symbol('num_trousers', positive=True)\nnum_shirts = Symbol('num_shirts', positive=True)\ntotal_cost = 810\ntrouser_cost = 70\nshirt_cost = 30\nsolution = solve_it([num_trousers * trouser_cost + num_shirts * shirt_cost - total_cost, num_trousers / num_shirts - 9], [num_trousers, num_shirts])\nans = solution[num_trousers]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_money, trouser_count - shirt_count - 1], [trouser_count, shirt_count])\nans = (solution[trouser_count], solution[shirt_count])", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_money, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_money, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_money, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_amount = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_amount, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\nmoney_available = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_price * trouser_count + shirt_price * shirt_count - money_available, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_money, trouser_count - shirt_count - 1], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_amount = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_amount, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_amount = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_amount, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\nshirt_price = 30\ntrouser_price = 70\ntotal_amount = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_amount, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_amount = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_count * trouser_price + shirt_count * shirt_price - total_amount, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = (solution[trouser_count], solution[shirt_count])", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_price * trouser_count + shirt_price * shirt_count - total_money, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]", "\ntrouser_price = 70\nshirt_price = 30\ntotal_money = 810\ntrouser_count = Symbol('trouser_count', positive=True)\nshirt_count = Symbol('shirt_count', positive=True)\nsolution = solve_it([trouser_price * trouser_count + shirt_price * shirt_count - total_money, trouser_count / shirt_count - 9], [trouser_count, shirt_count])\nans = solution[trouser_count]"], "generated_prediction": "11.05", "options": ["A)9 Trousers", "B)8 Trousers", "C)10 Trousers", "D)7 Trousers", "E)11 Trousers"], "answer": "A", "prediction": "E"}
{"question": "If a subscription for 15 issues of a magazine costs $42.00 and represents a saving of 25 percent of the cover prices, what is the cover price per issue?", "generated": ["\nsubscription_cost = 42\ndiscount = 0.25\ncover_price = subscription_cost / (1 - discount) / 15\nans = cover_price", "\nsubscription_cost = 42\nnum_issues = 15\ndiscount = 0.25\ncover_price = subscription_cost / (num_issues * (1 - discount))\nans = cover_price", "\nsubscription_price = 42\nnum_issues = 15\ndiscount = 0.25\ncover_price = subscription_price / (1 - discount) / num_issues\nans = cover_price", "\ncost = 42\nsaving = 0.25\nnum_issues = 15\ncover_price = cost / (1 - saving) / num_issues\nans = cover_price", "\nsubscription_cost = 42\nnum_issues = 15\ndiscount = 25\ncover_price = subscription_cost * 100 / (100 - discount) / num_issues\nans = cover_price", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsubscription_saving = 0.25\nsolution = solve_it(15 * cover_price * (1 - subscription_saving) - subscription_price, cover_price)\nans = solution[cover_price]", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsubscription_price_after_discount = 0.75 * 15 * cover_price\nsolution = solve_it(subscription_price_after_discount - subscription_price, cover_price)\nans = solution[cover_price]", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsubscription_price_after_discount = 0.75 * 15 * cover_price\nsolution = solve_it(subscription_price - subscription_price_after_discount, cover_price)\nans = solution[cover_price]", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsubscription_discount = 0.25\nsolution = solve_it(subscription_price - subscription_discount * 15 * cover_price, cover_price)\nans = solution[cover_price]", "\nsubscription_price = 42\nnum_issues = 15\ndiscount = 25\ncover_price = subscription_price / num_issues * 100 / (100 - discount)\nans = cover_price", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsubscription_saving = 0.25\nsolution = solve_it(subscription_price - cover_price * 15 * (1 - subscription_saving), cover_price)\nans = solution[cover_price]", "\ncover_price = Symbol('cover_price', positive=True)\nsaving = 0.25\ntotal_cover_price = cover_price * 15\ntotal_cost = total_cover_price * (1 - saving)\nsolution = solve_it(total_cost - 42, cover_price)\nans = solution[cover_price]", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsubscription_price_without_discount = 15 * cover_price\nsolution = solve_it(subscription_price_without_discount - subscription_price - subscription_price_without_discount * 0.25, cover_price)\nans = solution[cover_price]", "\nsubscription_price = 42\nsubscription_discount = 0.25\nsubscription_period = 15\ncover_price = subscription_price / (subscription_period * (1 - subscription_discount))\nans = cover_price", "\nsubscription_price = 42\ncover_price_per_issue = Symbol('cover_price_per_issue', positive=True)\ntotal_cover_price = 15 * cover_price_per_issue\nsolution = solve_it(subscription_price - total_cover_price * 0.75, cover_price_per_issue)\nans = solution[cover_price_per_issue]", "\nsubscription_price = 42\nsubscription_saving = 0.25\nsubscription_cost = subscription_price / (1 - subscription_saving)\nsubscription_cost_per_issue = subscription_cost / 15\nans = subscription_cost_per_issue", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsolution = solve_it(cover_price * 15 - subscription_price - 0.25 * cover_price * 15, cover_price)\nans = solution[cover_price]", "\nsubscription_price = 42\nsubscription_saving = 0.25\nsubscription_cost = subscription_price / (1 - subscription_saving)\ncover_price = subscription_cost / 15\nans = cover_price", "\ncover_price = Symbol('cover_price', positive=True)\ncost_of_15_issues = 42\ndiscount = 0.25\nsolution = solve_it(cover_price * 15 * (1 - discount) - cost_of_15_issues, cover_price)\nans = solution[cover_price]", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsubscription_discount = 0.25\nsolution = solve_it(subscription_price - cover_price * 15 * (1 - subscription_discount), cover_price)\nans = solution[cover_price]", "\nsubscription_cost = 42\nsubscription_saving = 0.25\nsubscription_cost_without_saving = subscription_cost / (1 - subscription_saving)\ncover_price = subscription_cost_without_saving / 15\nans = cover_price", "\nsubscription_cost = 42\nsubscription_saving = 0.25\nsubscription_cost_without_saving = subscription_cost / (1 - subscription_saving)\ncover_price_per_issue = subscription_cost_without_saving / 15\nans = cover_price_per_issue", "\nsubscription_cost = 42\nsubscription_saving = 0.25\nnum_issues = 15\ncover_price = subscription_cost / (1 - subscription_saving) / num_issues\nans = cover_price", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsaving_percentage = 25\nsolution = solve_it(cover_price * 15 - subscription_price - saving_percentage / 100 * cover_price * 15, cover_price)\nans = solution[cover_price]", "\nsubscription_cost = 42\nsubscription_saving = 0.25\nsubscription_saving_amount = subscription_cost * subscription_saving\nsubscription_cost_without_saving = subscription_cost + subscription_saving_amount\ncover_price = subscription_cost_without_saving / 15\nans = cover_price", "\ncover_price = Symbol('cover_price', positive=True)\nsubscription_price = 42\nsubscription_saving = 0.25\nsolution = solve_it(cover_price * 15 - subscription_price - subscription_saving * cover_price * 15, cover_price)\nans = solution[cover_price]", "\nsubscription_cost = 42\nsubscription_saving = 0.25\nnum_issues = 15\ncover_price = subscription_cost / (1 - subscription_saving) / num_issues\nans = cover_price", "\nprice_per_issue = Symbol('price_per_issue', positive=True)\ntotal_price = 42\ndiscount = 0.25\nsolution = solve_it(total_price - discount * 15 * price_per_issue, price_per_issue)\nans = solution[price_per_issue]", "\nnum_issues = 15\nsubscription_cost = 42\ncover_price_per_issue = Symbol('cover_price_per_issue', positive=True)\nsaving_percentage = 25\nsolution = solve_it([num_issues * cover_price_per_issue - subscription_cost, cover_price_per_issue * saving_percentage - subscription_cost], [cover_price_per_issue])\nans = solution[cover_price_per_issue]", "\nsubscription_cost = 42\nsubscription_discount = 25\nsubscription_period = 15\nsubscription_cost_without_discount = subscription_cost / (1 - subscription_discount / 100)\nsubscription_cost_per_issue = subscription_cost_without_discount / subscription_period\nans = subscription_cost_per_issue"], "generated_prediction": "3.7333333333333334", "options": ["A)$7.73", "B)$6.73", "C)$5.73", "D)$4.73", "E)$3.73"], "answer": "E", "prediction": "E"}
{"question": "Christopher and Jonathan were having bets. They decide that a coin will be flipped twenty times and each time it turns heads, Christopher will give $2 to Jonathan and each time it turns out to be Tails, Jonathan will give 3$ to Christopher. After flipping for twenty times none of the both won or lost any amount.\nHow many times did the coin landed on Heads ?", "generated": ["\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails - 0, [heads, tails])\nans = solution[heads]", "\nheads_count = Symbol('heads_count', positive=True)\ntails_count = Symbol('tails_count', positive=True)\nsolution = solve_it([2 * heads_count - 3 * tails_count, heads_count + tails_count - 20], [heads_count, tails_count])\nans = solution[heads_count]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(heads * 2 - tails * 3, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it([2 * heads - 3 * tails, heads + tails - 20], [heads, tails])\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(2 * heads - 3 * tails, heads)\nans = solution[heads]", "\nheads = Symbol('heads', positive=True)\ntails = Symbol('tails', positive=True)\nsolution = solve_it(heads * 2 - tails * 3, heads)\nans = solution[heads]", "\nheads_count = Symbol('heads_count', positive=True)\ntails_count = Symbol('tails_count', positive=True)\ntotal_flips = 20\nsolution = solve_it([heads_count * 2 - tails_count * 3, heads_count + tails_count - total_flips], [heads_count, tails_count])\nans = solution[heads_count]"], "generated_prediction": "3*tails/2", "options": ["A)10", "B)23", "C)16", "D)18", "E)12"], "answer": "E", "prediction": "D"}
{"question": "Allen starts from X, goes to Y. At the same time Bob starts from Y and goes towards X. Once Allen reaches Y he changes his direction and returns to X. Once Bob reaches X, he changes his direction and returns to Y. Throughout Allen travels at 54 kmph and Bob travels at 78kmph. By the time they meet for the second time, Bob covers 48 km more than Allen. Find the distance between X and Y.", "generated": ["\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(distance / allen_speed - distance / bob_speed - 48 / bob_speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(distance / allen_speed + distance / bob_speed - distance / allen_speed - 48 / bob_speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(distance / allen_speed + distance / bob_speed - distance / allen_speed - 48 / bob_speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(distance / allen_speed + distance / bob_speed - distance / bob_speed - 48 / bob_speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\ntime_taken_by_allen = distance / speed_of_allen\ntime_taken_by_bob = (distance + 48) / speed_of_bob\nsolution = solve_it(time_taken_by_allen - time_taken_by_bob, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(distance / allen_speed + distance / bob_speed - distance / allen_speed - distance / bob_speed - 48 / bob_speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(distance / allen_speed + distance / bob_speed - distance / allen_speed - distance / bob_speed - 48 / bob_speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(distance / allen_speed + distance / bob_speed - distance / allen_speed - distance / bob_speed - 48 / bob_speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\nsolution = solve_it(distance / speed_of_allen + distance / speed_of_bob - distance / speed_of_bob - distance / speed_of_allen - 48 / speed_of_bob, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\ntime_of_allen = distance / speed_of_allen\ntime_of_bob = distance / speed_of_bob + 48 / speed_of_bob\nsolution = solve_it(time_of_allen - time_of_bob, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(distance / (allen_speed + bob_speed) - distance / (allen_speed - bob_speed) - 48 / bob_speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\nsolution = solve_it(distance / speed_of_allen + distance / speed_of_bob - distance / speed_of_bob - 48 / speed_of_allen, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(2 * distance / allen_speed - 2 * distance / bob_speed - 48 / bob_speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\nsolution = solve_it(distance / speed_of_allen + distance / speed_of_bob - distance / speed_of_bob - 48 / speed_of_allen, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\nsolution = solve_it(distance / speed_of_allen + distance / speed_of_bob - distance / speed_of_bob - 48 / speed_of_bob, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\nsolution = solve_it(distance / speed_of_allen + distance / speed_of_bob - distance / speed_of_bob - 48 / speed_of_bob, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\ntime_taken_by_allen = distance / speed_of_allen\ntime_taken_by_bob = distance / speed_of_bob + 48 / speed_of_bob\nsolution = solve_it(time_taken_by_allen - time_taken_by_bob, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nallen_distance = distance + distance\nbob_distance = distance + distance + 48\nsolution = solve_it([allen_distance / allen_speed - bob_distance / bob_speed], [distance])\nans = solution[distance]", "\ndistance_between_x_and_y = Symbol('distance_between_x_and_y', positive=True)\nallen_speed = 54\nbob_speed = 78\nallen_distance_travelled = distance_between_x_and_y * 2\nbob_distance_travelled = allen_distance_travelled + 48\nsolution = solve_it(allen_distance_travelled / allen_speed - bob_distance_travelled / bob_speed, distance_between_x_and_y)\nans = solution[distance_between_x_and_y]", "\ndistance_between_X_and_Y = Symbol('distance_between_X_and_Y', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(2 * distance_between_X_and_Y / allen_speed - 2 * distance_between_X_and_Y / bob_speed - 48 / bob_speed, distance_between_X_and_Y)\nans = solution[distance_between_X_and_Y]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it([distance / allen_speed - distance / bob_speed - 48 / allen_speed, distance / allen_speed - distance / bob_speed - 48 / bob_speed], [distance])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nallen_distance_travelled = 2 * distance\nbob_distance_travelled = 2 * distance + 48\nsolution = solve_it([allen_distance_travelled / allen_speed - bob_distance_travelled / bob_speed], [distance])\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\ntime_taken_by_allen = distance / speed_of_allen\ntime_taken_by_bob = distance / speed_of_bob + distance / speed_of_bob\nsolution = solve_it(time_taken_by_allen - time_taken_by_bob - 48 / speed_of_bob, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\ntime_taken_by_allen = distance / speed_of_allen\ntime_taken_by_bob = distance / speed_of_bob + distance / speed_of_bob\nsolution = solve_it(time_taken_by_allen - time_taken_by_bob - 48 / speed_of_bob, distance)\nans = solution[distance]", "\ndistance_between_x_and_y = Symbol('distance_between_x_and_y', positive=True)\nallen_speed = 54\nbob_speed = 78\nallen_distance = bob_speed / (bob_speed - allen_speed) * distance_between_x_and_y\nbob_distance = allen_speed / (bob_speed - allen_speed) * distance_between_x_and_y\nsolution = solve_it(allen_distance - bob_distance - 48, distance_between_x_and_y)\nans = solution[distance_between_x_and_y]", "\ndistance = Symbol('distance', positive=True)\nallen_speed = 54\nbob_speed = 78\nsolution = solve_it(distance / allen_speed + distance / bob_speed - distance / bob_speed - 48, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\ntime_taken_by_allen = distance / speed_of_allen\ntime_taken_by_bob = distance / speed_of_bob + distance / speed_of_bob\nsolution = solve_it(time_taken_by_allen - time_taken_by_bob, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\ndistance_covered_by_allen = distance / (1 / speed_of_allen + 1 / speed_of_bob)\ndistance_covered_by_bob = distance / (1 / speed_of_allen + 1 / speed_of_bob) + 48\nsolution = solve_it(distance_covered_by_allen - distance_covered_by_bob, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed_of_allen = 54\nspeed_of_bob = 78\ntime_taken_by_allen_to_reach_y = distance / speed_of_allen\ntime_taken_by_bob_to_reach_x = distance / speed_of_bob\ntime_taken_by_allen_to_reach_x = time_taken_by_allen_to_reach_y + time_taken_by_bob_to_reach_x\ntime_taken_by_bob_to_reach_y = time_taken_by_bob_to_reach_x + time_taken_by_allen_to_reach_x\ndistance_covered_by_allen = speed_of_allen * time_taken_by_allen_to_reach_x\ndistance_covered_by_bob = speed_of_bob * time_taken_by_bob_to_reach_y\nsolution = solve_it(distance_covered_by_bob -", "\ndistance = Symbol('distance', positive=True)\ntime_taken_by_allen = distance / 54\ntime_taken_by_bob = distance / 78\ntime_taken_by_bob_to_return = time_taken_by_bob - time_taken_by_allen\ntime_taken_by_allen_to_return = time_taken_by_allen - time_taken_by_bob\ntotal_time = time_taken_by_bob_to_return + time_taken_by_allen_to_return\nsolution = solve_it(total_time * 54 - total_time * 78 + 48, distance)\nans = solution[distance]"], "generated_prediction": "48.0", "options": ["A)144km", "B)72 km", "C)126km", "D)84 km", "E)48km"], "answer": "E", "prediction": "E"}
{"question": "Tires of a certain brand, when purchased new, last for four years. A customer can choose to purchase the new tires at a cost of $180 per tire or can have his current tires repaired at a cost of $40 per tire, a repair that will make the current tires last for one additional year. The average cost per year of the new tires is what percent greater than the cost of repairing the current tires?", "generated": ["\nnew_tire_cost = 180\nrepair_cost = 40\nnew_tire_cost_per_year = new_tire_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tire_cost = 180\nrepair_cost = 40\nnew_tire_cost_per_year = new_tire_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tire_cost = 180\nrepair_cost = 40\nnew_tire_cost_per_year = new_tire_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tire_cost = 180\nrepair_cost = 40\nnew_tire_cost_per_year = new_tire_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tire_cost = 180\nrepair_cost = 40\nnew_tire_cost_per_year = new_tire_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tire_cost = 180\nrepair_cost = 40\nnew_tire_cost_per_year = new_tire_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tire_cost = 180\nrepair_cost = 40\nnew_tire_cost_per_year = new_tire_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tire_cost = 180\nrepair_cost = 40\nnew_tire_cost_per_year = new_tire_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tire_cost = 180\nrepair_cost = 40\nnew_tire_cost_per_year = new_tire_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\ncost_per_year_new_tires = 180 / 4\ncost_per_year_repaired_tires = 40\nans = (cost_per_year_new_tires - cost_per_year_repaired_tires) / cost_per_year_repaired_tires * 100", "\nnew_tires_cost = 180\nrepair_cost = 40\nnew_tires_cost_per_year = new_tires_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tires_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tires_cost = 180\nrepair_cost = 40\nnew_tires_cost_per_year = new_tires_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tires_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tires_cost = 180\nrepair_cost = 40\nnew_tires_cost_per_year = new_tires_cost / 4\nrepair_cost_per_year = repair_cost\nans = (new_tires_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\ncost_of_new_tires = 180\ncost_of_repaired_tires = 40\ncost_of_new_tires_per_year = cost_of_new_tires / 4\ncost_of_repaired_tires_per_year = cost_of_repaired_tires\nans = (cost_of_new_tires_per_year - cost_of_repaired_tires_per_year) / cost_of_repaired_tires_per_year", "\ncost_of_new_tires = 180\ncost_of_repairing_tires = 40\ncost_of_new_tires_per_year = cost_of_new_tires / 4\ncost_of_repairing_tires_per_year = cost_of_repairing_tires\nans = (cost_of_new_tires_per_year - cost_of_repairing_tires_per_year) / cost_of_repairing_tires_per_year", "\ncost_new_tires = 180\ncost_repaired_tires = 40\ncost_new_tires_per_year = cost_new_tires / 4\ncost_repaired_tires_per_year = cost_repaired_tires\nans = (cost_new_tires_per_year - cost_repaired_tires_per_year) / cost_repaired_tires_per_year", "\nnew_tire_cost = 180\nnew_tire_life = 4\nnew_tire_cost_per_year = new_tire_cost / new_tire_life\nrepair_tire_cost = 40\nrepair_tire_life = 1\nrepair_tire_cost_per_year = repair_tire_cost / repair_tire_life\nans = (new_tire_cost_per_year - repair_tire_cost_per_year) / repair_tire_cost_per_year", "\nnew_tire_cost = 180\nnew_tire_life = 4\nnew_tire_cost_per_year = new_tire_cost / new_tire_life\nrepair_cost = 40\nrepair_life = 1\nrepair_cost_per_year = repair_cost / repair_life\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\nnew_tire_cost = 180\nnew_tire_life = 4\nnew_tire_cost_per_year = new_tire_cost / new_tire_life\nrepair_cost = 40\nrepair_life = 1\nrepair_cost_per_year = repair_cost / repair_life\nans = (new_tire_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\ncost_new_tires = 180\ncost_repaired_tires = 40\ncost_per_year_new_tires = cost_new_tires / 4\ncost_per_year_repaired_tires = cost_repaired_tires / 1\nans = (cost_per_year_new_tires - cost_per_year_repaired_tires) / cost_per_year_repaired_tires", "\ncost_new_tires = 180\ncost_repaired_tires = 40\ncost_per_year_new_tires = cost_new_tires / 4\ncost_per_year_repaired_tires = cost_repaired_tires\nans = (cost_per_year_new_tires - cost_per_year_repaired_tires) / cost_per_year_repaired_tires", "\ncost_of_new_tires = 180\ncost_of_repairing_tires = 40\ncost_per_year_of_new_tires = cost_of_new_tires / 4\ncost_per_year_of_repairing_tires = cost_of_repairing_tires\nans = (cost_per_year_of_new_tires - cost_per_year_of_repairing_tires) / cost_per_year_of_repairing_tires", "\ncost_of_new_tires = 180\ncost_of_repairing_tires = 40\ncost_per_year_of_new_tires = cost_of_new_tires / 4\ncost_per_year_of_repairing_tires = cost_of_repairing_tires\nans = (cost_per_year_of_new_tires - cost_per_year_of_repairing_tires) / cost_per_year_of_repairing_tires", "\nnew_tires_cost = 180\nnew_tires_life = 4\nnew_tires_cost_per_year = new_tires_cost / new_tires_life\nrepair_cost = 40\nrepair_life = 1\nrepair_cost_per_year = repair_cost / repair_life\nans = (new_tires_cost_per_year - repair_cost_per_year) / repair_cost_per_year", "\ncost_of_new_tires = 180\ncost_of_repairing_tires = 40\ncost_per_year_of_new_tires = cost_of_new_tires / 4\ncost_per_year_of_repairing_tires = cost_of_repairing_tires / 1\nans = (cost_per_year_of_new_tires - cost_per_year_of_repairing_tires) / cost_per_year_of_repairing_tires", "\ncost_of_new_tires = 180\ncost_of_repair = 40\ncost_of_new_tires_per_year = cost_of_new_tires / 4\ncost_of_repair_per_year = cost_of_repair / 4\nans = (cost_of_new_tires_per_year - cost_of_repair_per_year) / cost_of_repair_per_year", "\nnew_tires_cost = 180\nrepaired_tires_cost = 40\nnew_tires_cost_per_year = new_tires_cost / 4\nrepaired_tires_cost_per_year = repaired_tires_cost\nans = (new_tires_cost_per_year - repaired_tires_cost_per_year) / repaired_tires_cost_per_year", "\nnew_tires_cost = 180\nrepaired_tires_cost = 40\nnew_tires_cost_per_year = new_tires_cost / 4\nrepaired_tires_cost_per_year = repaired_tires_cost / 4\nans = (new_tires_cost_per_year - repaired_tires_cost_per_year) / repaired_tires_cost_per_year", "\ncost_of_new_tires = 180\ncost_of_repair = 40\ncost_of_new_tires_per_year = cost_of_new_tires / 4\ncost_of_repair_per_year = cost_of_repair\nans = (cost_of_new_tires_per_year - cost_of_repair_per_year) / cost_of_repair_per_year", "\ncost_of_new_tires = 180\ncost_of_repair = 40\ncost_of_new_tires_per_year = cost_of_new_tires / 4\ncost_of_repair_per_year = cost_of_repair\nans = (cost_of_new_tires_per_year - cost_of_repair_per_year) / cost_of_repair_per_year"], "generated_prediction": "0.125", "options": ["A)8%", "B)10%", "C)12.5%", "D)16.7%", "E)25%"], "answer": "C", "prediction": "C"}
{"question": "A rope 20 meters long is cut into two pieces. If the length of one piece of rope is 3 meters shorter than the length of the other, what is the length, in meters, of the longer piece of rope?", "generated": ["\nrope_length = Symbol('rope_length', positive=True)\nsolution = solve_it(rope_length - (rope_length - 3), rope_length)\nans = solution[rope_length]", "\nrope_length = Symbol('rope_length', positive=True)\nsolution = solve_it(rope_length - (rope_length - 3), rope_length)\nans = solution[rope_length]", "\nrope_length = Symbol('rope_length', positive=True)\nsolution = solve_it(rope_length - (rope_length - 3), rope_length)\nans = solution[rope_length]", "\nlonger_piece = Symbol('longer_piece', positive=True)\nshorter_piece = Symbol('shorter_piece', positive=True)\nsolution = solve_it([longer_piece + shorter_piece - 20, longer_piece - shorter_piece - 3], [longer_piece, shorter_piece])\nans = solution[longer_piece]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nsolution = solve_it(length + short_length - 20, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nsolution = solve_it(length + short_length - 20, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nsolution = solve_it(length + short_length - 20, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nsolution = solve_it(length + short_length - 20, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nsolution = solve_it(short_length + length - 20, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nsolution = solve_it(short_length + length - 20, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nsolution = solve_it(short_length + length - 20, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nsolution = solve_it(short_length + length - 20, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nsolution = solve_it(short_length + length - 20, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nsolution = solve_it(length + length - 20 - 3, length)\nans = solution[length]", "\nrope_length = Symbol('rope_length', positive=True)\ndifference = 3\nsolution = solve_it(rope_length - (rope_length - difference) - 20, rope_length)\nans = solution[rope_length]", "\nlength_of_longer_piece = Symbol('length_of_longer_piece', positive=True)\nlength_of_shorter_piece = Symbol('length_of_shorter_piece', positive=True)\nsolution = solve_it([length_of_longer_piece + length_of_shorter_piece - 20, length_of_longer_piece - length_of_shorter_piece - 3], [length_of_longer_piece, length_of_shorter_piece])\nans = solution[length_of_longer_piece]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\ntotal_length = 20\nsolution = solve_it(short_length + length - total_length, length)\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\ntotal_length = 20\nsolution = solve_it(short_length + length - total_length, length)\nans = solution[length]", "\nlength_of_longer_piece = Symbol('length_of_longer_piece', positive=True)\nlength_of_shorter_piece = Symbol('length_of_shorter_piece', positive=True)\nsolution = solve_it([length_of_longer_piece + length_of_shorter_piece - 20, length_of_longer_piece - length_of_shorter_piece - 3], [length_of_longer_piece, length_of_shorter_piece])\nans = solution[length_of_longer_piece]", "\nlength_of_longer_piece = Symbol('length_of_longer_piece', positive=True)\nlength_of_shorter_piece = Symbol('length_of_shorter_piece', positive=True)\nsolution = solve_it([length_of_longer_piece + length_of_shorter_piece - 20, length_of_longer_piece - length_of_shorter_piece - 3], [length_of_longer_piece, length_of_shorter_piece])\nans = solution[length_of_longer_piece]", "\nlength_of_longer_piece = Symbol('length_of_longer_piece', positive=True)\nlength_of_shorter_piece = Symbol('length_of_shorter_piece', positive=True)\ntotal_length = 20\nsolution = solve_it([length_of_longer_piece + length_of_shorter_piece - total_length, length_of_longer_piece - length_of_shorter_piece - 3], [length_of_longer_piece, length_of_shorter_piece])\nans = solution[length_of_longer_piece]", "\nlength_of_longer_piece = Symbol('length_of_longer_piece', positive=True)\nlength_of_shorter_piece = Symbol('length_of_shorter_piece', positive=True)\ntotal_length = 20\nsolution = solve_it([length_of_longer_piece + length_of_shorter_piece - total_length, length_of_longer_piece - length_of_shorter_piece - 3], [length_of_longer_piece, length_of_shorter_piece])\nans = solution[length_of_longer_piece]", "\nlength_of_longer_piece = Symbol('length_of_longer_piece', positive=True)\nlength_of_shorter_piece = Symbol('length_of_shorter_piece', positive=True)\ntotal_length = 20\nsolution = solve_it([length_of_longer_piece + length_of_shorter_piece - total_length, length_of_longer_piece - length_of_shorter_piece - 3], [length_of_longer_piece, length_of_shorter_piece])\nans = solution[length_of_longer_piece]", "\nrope_length = Symbol('rope_length', positive=True)\ndifference = 3\nsolution = solve_it(2 * rope_length + difference - 20, rope_length)\nans = solution[rope_length]", "\nlength_of_longer_piece = Symbol('length_of_longer_piece', positive=True)\nlength_of_shorter_piece = length_of_longer_piece - 3\nlength_of_rope = 20\nsolution = solve_it(length_of_longer_piece + length_of_shorter_piece - length_of_rope, length_of_longer_piece)\nans = solution[length_of_longer_piece]", "\nlength_of_longer_piece = Symbol('length_of_longer_piece', positive=True)\nlength_of_shorter_piece = length_of_longer_piece - 3\ntotal_length = 20\nsolution = solve_it([length_of_longer_piece + length_of_shorter_piece - total_length], [length_of_longer_piece])\nans = solution[length_of_longer_piece]", "\nlength = Symbol('length', positive=True)\nshort_length = Symbol('short_length', positive=True)\ntotal_length = 20\nsolution = solve_it([length + short_length - total_length, length - short_length - 3], [length, short_length])\nans = solution[length]", "\nlength = Symbol('length', positive=True)\nshort_length = Symbol('short_length', positive=True)\nlong_length = Symbol('long_length', positive=True)\ntotal_length = 20\nsolution = solve_it([length + short_length - long_length - 3, length + long_length - total_length], [length, short_length])\nans = solution[long_length]", "\nlength = Symbol('length', positive=True)\nshort_length = length - 3\nlong_length = length + 3\nsolution = solve_it([short_length + long_length - 20], [length])\nans = solution[length] + 3", "\nlength_of_longer_piece = Symbol('length_of_longer_piece', positive=True)\nlength_of_shorter_piece = Symbol('length_of_shorter_piece', positive=True)\nlength_of_longer_piece - length_of_shorter_piece - 3\nsolution = solve_it(length_of_longer_piece + length_of_shorter_piece - 20, length_of_longer_piece)\nans = solution[length_of_longer_piece]"], "generated_prediction": "11.5", "options": ["A)7.5", "B)8.9", "C)9.9", "D)11.5", "E)11.7"], "answer": "D", "prediction": "D"}
{"question": "Jerry purchased a 1-year $5,000 bond that paid an annual interest rate of 12% compounded every six months. How much interest had this bond accrued at maturity?", "generated": ["\namount = 5000\ninterest_rate = 12\ninterest = amount * (1 + interest_rate / 100 / 2) ** 2 - amount\nans = interest", "\ninterest_rate = 12\namount = 5000\ninterest = amount * (1 + interest_rate / (2 * 100)) ** 2 - amount\nans = interest", "\ninterest_rate = 12\nprincipal = 5000\ninterest = principal * (1 + interest_rate / 100 / 2) ** 2 - principal\nans = interest", "\ninterest_rate = 12\namount = 5000\ninterest = amount * (1 + interest_rate / 2 / 100) ** 2 - amount\nans = interest", "\ninterest_rate = 12\namount = 5000\ninterest = amount * (1 + interest_rate / 2 / 100) ** 2 - amount\nans = interest", "\ninterest_rate = 12\namount = 5000\ninterest = amount * (1 + interest_rate / 100 / 2) ** 2 - amount\nans = interest", "\ninterest_rate = 12\namount = 5000\ninterest_accrued = amount * (1 + interest_rate / 200) ** 2 - amount\nans = interest_accrued", "\ninterest_rate = 12\namount = 5000\ninterest_accrued = amount * (1 + interest_rate / 200) ** 2 - amount\nans = interest_accrued", "\namount = 5000\ninterest_rate = 12\ninterest_per_six_months = amount * (1 + interest_rate / 200) ** 2 - amount\nans = interest_per_six_months", "\ninterest_rate = 0.12\namount = 5000\ninterest_after_6_months = amount * (1 + interest_rate / 2) ** 2 - amount\nans = interest_after_6_months", "\ninterest_rate = 12\nperiods_per_year = 2\namount = 5000\ninterest = amount * (1 + interest_rate / periods_per_year / 100) ** periods_per_year - amount\nans = interest", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\ninterest_amount = amount * (1 + interest_rate / 100) ** 2 - amount\nsolution = solve_it(interest_amount - 200, interest_rate)\nans = solution[interest_rate]", "\nprincipal = 5000\ninterest_rate = 12\nnum_compounding_periods = 2\ninterest = principal * (1 + interest_rate / (100 * num_compounding_periods)) ** (num_compounding_periods) - principal\nans = interest", "\namount = 5000\ninterest_rate = 12\ninterest_per_six_months = amount * interest_rate / 100 / 2\ninterest_per_year = interest_per_six_months * 2\nans = interest_per_year", "\nprincipal = 5000\ninterest_rate = 12\nperiods = 2\ninterest_earned = principal * (1 + interest_rate / (100 * periods)) ** periods - principal\nans = interest_earned", "\nprincipal = 5000\ninterest_rate = 0.12\ninterest_per_six_month = principal * interest_rate / 2\ninterest_per_year = interest_per_six_month * 2\nans = interest_per_year", "\ninterest_rate = 12\namount = 5000\ninterest = amount * (1 + interest_rate / 200) ** 2 - amount\nans = interest", "\ninterest_rate = 12\nnum_compounding_periods = 2\nprincipal = 5000\ninterest = principal * (1 + interest_rate / (100 * num_compounding_periods)) ** num_compounding_periods - principal\nans = interest", "\namount = 5000\ninterest_rate = 12\nnum_compounding_periods = 2\ninterest = amount * (1 + interest_rate / (100 * num_compounding_periods)) ** num_compounding_periods - amount\nans = interest", "\ninterest_rate = 12\namount = 5000\ninterest = amount * (1 + interest_rate / 200) ** 2 - amount\nans = interest", "\nprincipal = 5000\ninterest_rate = 12\ninterest_per_six_month = principal * interest_rate / 200\ninterest_per_year = interest_per_six_month * 4\nans = interest_per_year", "\namount = 5000\ninterest_rate = 12\nnum_compounding_periods = 2\ninterest = amount * (1 + interest_rate / (100 * num_compounding_periods)) ** num_compounding_periods - amount\nans = interest", "\ninitial_amount = 5000\ninterest_rate = 12\nnum_of_compounding_periods = 2\ninterest_accrued = initial_amount * (1 + interest_rate / (100 * num_of_compounding_periods)) ** num_of_compounding_periods - initial_amount\nans = interest_accrued", "\ninterest_rate = 12 / 100\ncompounding_period = 6 / 12\nprinciple = 5000\ninterest = principle * (1 + interest_rate / compounding_period) ** compounding_period - principle\nans = interest", "\nprincipal = 5000\ninterest_rate = 12\nnum_compounding_periods = 2\ncompounding_period_length = 0.5\ninterest = principal * (1 + interest_rate / 100 / num_compounding_periods) ** (num_compounding_periods * compounding_period_length) - principal\nans = interest", "\ninterest_rate = 12\namount = 5000\ninterest_accrued = amount * (1 + interest_rate / 2 / 100) ** 2 - amount\nans = interest_accrued", "\nprincipal = 5000\ninterest_rate = 12\nperiod = 2\ninterest = principal * (1 + interest_rate / 100 / period) ** period - principal\nans = interest", "\namount = 5000\ninterest_rate = 12\ninterest_rate_per_six_month = interest_rate / 2\nnum_of_six_months = 2\ninterest = amount * interest_rate_per_six_month * num_of_six_months / 100\nans = interest", "\nprincipal = 5000\ninterest_rate = 12\ntime_period = 1\ncompounding_period = 0.5\ninterest = principal * (1 + interest_rate / 100 / compounding_period) ** (compounding_period * time_period) - principal\nans = interest", "\ninterest_rate = 12\ninterest_compounding_periods = 2\ninterest = 5000 * (1 + interest_rate / 100 / interest_compounding_periods) ** (interest_compounding_periods * 1) - 5000\nans = interest"], "generated_prediction": "618.0000000000009", "options": ["A)$5102", "B)$618", "C)$216", "D)$202", "E)$200"], "answer": "B", "prediction": "B"}
{"question": "Decipher the following multiplication table:\nM A D\nB E\n-------------\nM A D\nR A E\n-------------\nA M I D", "generated": ["\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = (9, 2, 0, 0)", "\nans = [9, 2, 0, 0]", "\nans = [9, 2, 0, 0]", "\nans = (9, 2, 0, 9)", "\nans = '9 2 0 0'", "\nans = '9 2 0 0'", "\nans = '9 2 0 0'", "\nans = '9 2 0 0'", "\nans = '9 2 0 1'", "", "", "\nfirst_row = [9, 2, 0, 0]\nsecond_row = [9, 2, 0, 9]\nthird_row = [9, 2, 0, 1]\nfourth_row = [9, 2, 0, 7]\nfifth_row = [9, 2, 2, 2]\nans = first_row", "\nM = Symbol('M')\nA = Symbol('A')\nD = Symbol('D')\nB = Symbol('B')\nE = Symbol('E')\nR = Symbol('R')\nI = Symbol('I')\nsolution = solve_it([M * A * D, B * E, M * A * D, R * A * E, A * M * I * D], [M, A, D, B, E, R, I])\nans = (solution[M], solution[A], solution[D], solution[B], solution[E], solution[R], solution[I])", "\nfirst_row = [9, 2, 0]\nsecond_row = [2, 0, 9]\nthird_row = [0, 9, 1]\nans = [first_row[0] * second_row[0] * third_row[0], first_row[1] * second_row[1] * third_row[1], first_row[2] * second_row[2] * third_row[2]]", "\nM = Symbol('M')\nA = Symbol('A')\nD = Symbol('D')\nB = Symbol('B')\nE = Symbol('E')\nR = Symbol('R')\nI = Symbol('I')\nsolution = solve_it([M * B - M * A, M * E - M * D, A * R - A * M, A * A - A * E, D * I - D * M], [M, A, D, B, E, R, I])\nans = (solution[M], solution[A], solution[D], solution[B], solution[E], solution[R], solution[I])", "\nfirst_row = [9, 2, 0]\nsecond_row = [0, 9, 2]\nthird_row = [2, 2, 2]\nans = [first_row[0] * second_row[0], first_row[1] * second_row[1], first_row[2] * second_row[2], third_row[0]]", "\nmad = Symbol('mad', positive=True)\nbe = Symbol('be', positive=True)\nrae = Symbol('rae', positive=True)\namid = Symbol('amid', positive=True)\nsolution = solve_it([mad * be - 9200, mad * rae - 9200, be * amid - 9200], [mad, be, rae, amid])\nans = (solution[mad], solution[be], solution[rae], solution[amid])", "\n# Hint: The answer is the multiplication of the numbers in the first row and the numbers in the first column.\nans = 9 * 2 * 0 * 0"], "generated_prediction": "(9, 2, 0, 0)", "options": ["A)9 2 0 0", "B)9 2 0 9", "C)9 2 0 1", "D)9 2 0 7", "E)9 2 2 2"], "answer": "D", "prediction": "A"}
{"question": "Sachin was twice as old as Ajay 10 years back. How old is Ajay today if Sachin will be 40 years old in 10 years", "generated": ["\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it([sachin_age - 2 * ajay_age - 10, sachin_age + 10 - 40], [sachin_age, ajay_age])\nans = solution[ajay_age]", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it([sachin_age - 2 * ajay_age - 10, sachin_age + 10 - 40], [sachin_age, ajay_age])\nans = solution[ajay_age]", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it([sachin_age - 2 * ajay_age - 10, sachin_age + 10 - 40], [sachin_age, ajay_age])\nans = solution[ajay_age]", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsachin_age_10_years_back = sachin_age - 10\najay_age_10_years_back = ajay_age - 10\nsolution = solve_it([sachin_age_10_years_back - 2 * ajay_age_10_years_back, sachin_age + 10 - 40], [sachin_age, ajay_age])\nans = solution[ajay_age]", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsachin_age_10_years_back = sachin_age - 10\najay_age_10_years_back = ajay_age - 10\nsolution = solve_it([sachin_age_10_years_back - 2 * ajay_age_10_years_back, sachin_age + 10 - 40], [sachin_age, ajay_age])\nans = solution[ajay_age]", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsachin_age_10_years_back = sachin_age - 10\najay_age_10_years_back = ajay_age - 10\nsolution = solve_it([sachin_age_10_years_back - 2 * ajay_age_10_years_back, sachin_age + 10 - 40], [sachin_age, ajay_age])\nans = solution[ajay_age]", "\nAjay = Symbol('Ajay', positive=True)\nSachin = Symbol('Sachin', positive=True)\nsolution = solve_it(Ajay + 10 - 2 * (Sachin - 10), Ajay)\nans = solution[Ajay]", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsachin_age_10_years_back = sachin_age - 10\najay_age_10_years_back = ajay_age - 10\nsachin_age_in_10_years = sachin_age + 10\nsolution = solve_it([sachin_age_10_years_back - 2 * ajay_age_10_years_back, sachin_age_in_10_years - 40], [sachin_age, ajay_age])\nans = solution[ajay_age]", "\nAjay_age_10_years_back = Symbol('Ajay_age_10_years_back', positive=True)\nSachin_age_10_years_back = 2 * Ajay_age_10_years_back\nsolution = solve_it(Sachin_age_10_years_back + 10 - 40, Ajay_age_10_years_back)\nans = solution[Ajay_age_10_years_back] + 10", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsachin_age_10_years_back = sachin_age - 10\najay_age_10_years_back = ajay_age - 10\nsolution = solve_it(sachin_age_10_years_back - 2 * ajay_age_10_years_back, ajay_age)\nans = solution[ajay_age]", "\nAjay_age = Symbol('Ajay_age', positive=True)\nSachin_age_10_years_back = Ajay_age * 2\nSachin_age_today = Sachin_age_10_years_back + 10\nSachin_age_10_years_later = Sachin_age_today + 10\nsolution = solve_it(Sachin_age_10_years_later - 40, Ajay_age)\nans = solution[Ajay_age]", "\nAjay = Symbol('Ajay', positive=True)\nSachin = Symbol('Sachin', positive=True)\nsolution = solve_it(Sachin - 2 * Ajay - 10, Ajay)\nans = solution[Ajay]", "\nAjay_age_10_years_back = Symbol('Ajay_age_10_years_back', positive=True)\nSachin_age_10_years_back = 2 * Ajay_age_10_years_back\nSachin_age_today = Sachin_age_10_years_back + 10\nSachin_age_in_10_years = Sachin_age_today + 10\nsolution = solve_it(Sachin_age_in_10_years - 40, Ajay_age_10_years_back)\nans = solution[Ajay_age_10_years_back] + 10", "\nage_of_ajay = Symbol('age_of_ajay', positive=True)\nage_of_sachin = Symbol('age_of_sachin', positive=True)\nsolution = solve_it([age_of_sachin - age_of_ajay - 10, age_of_sachin + 10 - 40], [age_of_sachin, age_of_ajay])\nans = solution[age_of_ajay]", "\nAjay_age_10_years_back = Symbol('Ajay_age_10_years_back', positive=True)\nSachin_age_10_years_back = 2 * Ajay_age_10_years_back\nSachin_age_today = Sachin_age_10_years_back + 10\nSachin_age_in_10_years = Sachin_age_today + 10\nsolution = solve_it(Sachin_age_in_10_years - 40, Ajay_age_10_years_back)\nans = solution[Ajay_age_10_years_back] + 10", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsachin_age_10_years_back = sachin_age - 10\najay_age_10_years_back = ajay_age - 10\nsolution = solve_it(sachin_age_10_years_back - 2 * ajay_age_10_years_back, sachin_age)\nans = solution[ajay_age]", "\nage_of_ajay = Symbol('age_of_ajay', positive=True)\nage_of_sachin = Symbol('age_of_sachin', positive=True)\nsolution = solve_it([age_of_sachin - 10 - 2 * (age_of_ajay - 10), age_of_sachin + 10 - 40], [age_of_ajay, age_of_sachin])\nans = solution[age_of_ajay]", "\najay_age = Symbol('ajay_age', positive=True)\nsachin_age = Symbol('sachin_age', positive=True)\nsolution = solve_it([sachin_age - ajay_age - 10, sachin_age + 10 - 40], [sachin_age, ajay_age])\nans = solution[ajay_age]", "\nage_of_sachin_10_years_back = Symbol('age_of_sachin_10_years_back', positive=True)\nage_of_ajay_10_years_back = age_of_sachin_10_years_back / 2\nage_of_sachin_today = age_of_sachin_10_years_back + 10\nage_of_sachin_in_10_years = age_of_sachin_today + 10\nsolution = solve_it([age_of_sachin_in_10_years - 40, age_of_ajay_10_years_back + 10 - age_of_ajay_10_years_back], [age_of_sachin_10_years_back, age_of_ajay_10_years_back])\nans = solution[age_of_ajay_10_years_back]", "\najay_age = Symbol('ajay_age', positive=True)\nsachin_age = Symbol('sachin_age', positive=True)\nsolution = solve_it([ajay_age + 10 - sachin_age / 2, ajay_age + 10 + 10 - sachin_age], [ajay_age, sachin_age])\nans = solution[ajay_age]", "\nAjay_age = Symbol('Ajay_age', positive=True)\nSachin_age = Symbol('Sachin_age', positive=True)\nsolution = solve_it(Sachin_age - Ajay_age - 10, Ajay_age)\nans = solution[Ajay_age]", "\nAjay_age = Symbol('Ajay_age', positive=True)\nSachin_age = Symbol('Sachin_age', positive=True)\nsolution = solve_it([Sachin_age - Ajay_age - 10, Ajay_age + 10 - 40], [Ajay_age, Sachin_age])\nans = solution[Ajay_age]", "\nage_difference = 10\nage_sachin = 40\nage_ajay = age_sachin - 2 * age_difference\nans = age_ajay", "\nage_of_sachin_10_years_back = Symbol('age_of_sachin_10_years_back', positive=True)\nage_of_ajay_10_years_back = age_of_sachin_10_years_back / 2\nage_of_ajay_today = age_of_ajay_10_years_back + 10\nage_of_sachin_today = age_of_sachin_10_years_back + 10\nsolution = solve_it([age_of_sachin_today - 40, age_of_ajay_today - age_of_sachin_today], [age_of_sachin_10_years_back, age_of_ajay_today])\nans = solution[age_of_ajay_today]", "\nage_of_ajay = Symbol('age_of_ajay', positive=True)\nage_of_sachin = Symbol('age_of_sachin', positive=True)\nsolution = solve_it([age_of_sachin - 2 * age_of_ajay - 10, age_of_sachin + 10 - 40], [age_of_sachin, age_of_ajay])\nans = solution[age_of_ajay]", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsachin_age_10_years_back = sachin_age - 10\najay_age_10_years_back = ajay_age - 10\nsachin_age_10_years_back = 2 * ajay_age_10_years_back\nsolution = solve_it(sachin_age_10_years_back - ajay_age_10_years_back, ajay_age)\nans = solution[ajay_age]", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsachin_age_10_years_ago = sachin_age - 10\najay_age_10_years_ago = ajay_age - 10\nsachin_age_10_years_ago_twice_ajay_age_10_years_ago = sachin_age_10_years_ago - 2 * ajay_age_10_years_ago\nsachin_age_in_10_years = sachin_age + 10\nsolution = solve_it([sachin_age_10_years_ago_twice_ajay_age_10_years_ago, sachin_age_in_10_years - 40], [sachin_age, ajay_age])\nans = solution[ajay_age]", "\nage_of_ajay = Symbol('age_of_ajay', positive=True)\nage_of_sachin = Symbol('age_of_sachin', positive=True)\nage_of_sachin_10_years_back = age_of_sachin - 10\nage_of_ajay_10_years_back = age_of_ajay - 10\nsolution = solve_it([age_of_sachin_10_years_back - 2 * age_of_ajay_10_years_back, age_of_sachin + 10 - 40], [age_of_sachin, age_of_ajay])\nans = solution[age_of_ajay]", "\nAjay_age_10_years_back = Symbol('Ajay_age_10_years_back', positive=True)\nAjay_age_today = Ajay_age_10_years_back + 10\nSachin_age_10_years_back = Ajay_age_10_years_back * 2\nSachin_age_today = Sachin_age_10_years_back + 10\nsolution = solve_it([Sachin_age_today - 40, Ajay_age_today - Ajay_age_10_years_back - 10], [Ajay_age_10_years_back, Sachin_age_10_years_back])\nans = solution[Ajay_age_today]", "\nsachin_age = Symbol('sachin_age', positive=True)\najay_age = Symbol('ajay_age', positive=True)\nsachin_age_10_years_ago = sachin_age - 10\najay_age_10_years_ago = ajay_age - 10\nsachin_age_10_years_ago = 2 * ajay_age_10_years_ago\nsolution = solve_it(sachin_age - sachin_age_10_years_ago - 40, sachin_age)\nans = solution[ajay_age]"], "generated_prediction": "20.0", "options": ["A)18", "B)25", "C)15", "D)20", "E)21"], "answer": "D", "prediction": "D"}
{"question": "What will be the cost of gardening 1-metre \u2013 broad boundary around a rectangular plot having perimeter of 340 metres at the rate of 10 per square metre?", "generated": ["\nperimeter = 340\ncost_per_square_metre = 10\nans = perimeter * cost_per_square_metre", "\nperimeter = 340\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it(2 * (width + height) - perimeter, width)\nans = solution[width]", "\nperimeter = 340\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter, width - 1], [width, height])\nans = solution[width] * solution[height] * 10", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 10\npermimeter = 340\nsolution = solve_it([width * height - area, 2 * (width + height) - permimeter], [width, height])\nans = solution[width] * area", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\nsolution = solve_it([2 * (width + height) - perimeter], [width, height])\nans = solution[width] * 10", "\nperimeter = 340\nrate = 10\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it(2 * (width + height) - perimeter, width)\nans = solution[width] * rate", "\nperimeter = 340\ncost = 10\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter, width - 1], [width, height])\nans = solution[height] * cost", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\ncost_per_square_metre = 10\nsolution = solve_it([2 * (width + height) - perimeter, width * height * cost_per_square_metre], [width, height])\nans = solution[width * height * cost_per_square_metre]", "\nperimeter = 340\nrate = 10\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\nsolution = solve_it([2 * (width + length) - perimeter, width - 1], [width, length])\nans = solution[length] * rate", "\nperimeter = 340\ncost_per_square_metre = 10\ncost = perimeter * cost_per_square_metre\nans = cost", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\nperimeter = 340\ncost_per_square_meter = 10\nsolution = solve_it([2 * (width + length) - perimeter, width * cost_per_square_meter + length * cost_per_square_meter], [width, length])\nans = solution[width] * cost_per_square_meter + solution[length] * cost_per_square_meter", "\nperimeter = 340\ncost_per_square_meter = 10\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter, width * cost_per_square_meter], [width, height])\nans = solution[width]", "\nperimeter = 340\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it(2 * (width + height) - perimeter, width)\nans = solution[width] * 10", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\nsolution = solve_it([width + height - perimeter / 2, width * height - perimeter / 2], [width, height])\nans = solution[width] * solution[height] * 10", "\nperimeter = 340\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter, width - 1], [width, height])\nans = solution[height] * 10", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\nsolution = solve_it(2 * (width + height) - perimeter, width)\nans = solution[width] * 10", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\nsolution = solve_it(2 * (width + height) - perimeter, width)\nans = solution[width] * 10", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\ncost = 10\nsolution = solve_it([2 * (width + height) - perimeter, cost * (2 * width + 2 * height) - 3400], [width, height])\nans = (solution[width], solution[height])", "\nperimeter = 340\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter], [width])\nans = 10 * solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\nsolution = solve_it(2 * (width + height) - perimeter, width)\nans = solution[width] * 10", "\nperimeter = 340\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter, width - 1], [width, height])\nans = solution[height] * 10", "\nperimeter = 340\ncost_per_sq_meter = 10\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter, width * height - 1], [width, height])\nans = cost_per_sq_meter * perimeter", "\nperimeter = 340\ncost_per_unit_area = 10\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter, width * cost_per_unit_area], [width, height])\nans = solution[width] * cost_per_unit_area", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nperimeter = 340\nsolution = solve_it([2 * (length + width) - perimeter, length - width], [length, width])\nans = solution[length] * 10", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\ncost = 10\nsolution = solve_it([2 * (width + height) - perimeter, width * cost - height * cost], [width, height])\nans = solution[width] * cost", "\nperimeter = 340\ncost_per_square_metre = 10\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter, width - 1], [width, height])\nans = solution[width] * cost_per_square_metre", "\nperimeter = 340\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nsolution = solve_it([2 * (width + height) - perimeter, width - 1], [width, height])\nans = solution[height] * 10", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nperimeter = 340\ncost = 10\nsolution = solve_it([2 * (width + height) - perimeter, 2 * width + 2 * height - perimeter], [width, height])\nans = cost * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\ncost_per_meter = 10\npermimeter = 340\nsolution = solve_it([2 * (width + height) - permimeter], [width, height])\nans = solution[width] * cost_per_meter", "\nperimeter = 340\ncost_per_square_metre = 10\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nsolution = solve_it([2 * (length + width) - perimeter, length * width - 1], [length, width])\nans = solution[length] * cost_per_square_metre + solution[width] * cost_per_square_metre"], "generated_prediction": "1700 - 10*height", "options": ["A)3400", "B)1700", "C)3440", "D)Cannot be determined", "E)None of these"], "answer": "C", "prediction": "B"}
{"question": "Last year, 34 percent of Ace Book Company's sales revenue came from the sale of novels. Of the remaining revenue, 1/3 was from the sale of biographies. The company's revenue from the sale of novels was approximately, how many times its revenue from the sale of biographies?", "generated": ["\nnovel_revenue = 34\nbiography_revenue = (100 - novel_revenue) / 3\nans = novel_revenue / biography_revenue", "\nnovel_sales_percentage = 0.34\nbiography_sales_percentage = (1 - novel_sales_percentage) / 3\nans = novel_sales_percentage / biography_sales_percentage", "\nnovel_revenue = 34\nbiography_revenue = (100 - 34) * 1 / 3\nans = novel_revenue / biography_revenue", "\nnovel_sales_percentage = 34\nbiography_sales_percentage = (100 - novel_sales_percentage) / 3\nans = novel_sales_percentage / biography_sales_percentage", "\nnovel_sales_percentage = 0.34\nbiography_sales_percentage = (1 - novel_sales_percentage) / 3\nnovel_sales_percentage / biography_sales_percentage", "\nnovel_revenue = 0.34 * 100\nbiography_revenue = (1 - 0.34) * 100 / 3\nans = novel_revenue / biography_revenue", "\nnovel_revenue = 0.34\nbiography_revenue = (1 - novel_revenue) / 3\nans = novel_revenue / biography_revenue", "\nnovel_revenue = 0.34\nbiography_revenue = (1 - novel_revenue) / 3\nans = novel_revenue / biography_revenue", "\nnovels_revenue = 0.34\nbiographies_revenue = (1 - novels_revenue) / 3\nans = novels_revenue / biographies_revenue", "\nnovel_percentage = 0.34\nbiography_percentage = (1 - novel_percentage) / 3\nans = novel_percentage / biography_percentage", "\nnovel_revenue = 0.34\nbiography_revenue = (1 - novel_revenue) / 3\nans = novel_revenue / biography_revenue", "\nnovel_sales_percent = 0.34\nbiography_sales_percent = 1 - novel_sales_percent\nnovel_sales_percent = novel_sales_percent / biography_sales_percent\nans = novel_sales_percent", "\nnovel_revenue = 0.34\nbiography_revenue = (1 - novel_revenue) / 3\nans = novel_revenue / biography_revenue", "\nnovel_revenue = 0.34\nbiography_revenue = (1 - novel_revenue) / 3\nans = novel_revenue / biography_revenue", "\nnovel_revenue = 0.34\nbiography_revenue = (1 - novel_revenue) / 3\nans = novel_revenue / biography_revenue", "\nnovel_revenue = 0.34\nbiography_revenue = 0.33 * (1 - 0.34)\nans = novel_revenue / biography_revenue", "\nnovel_revenue = Symbol('novel_revenue', positive=True)\nbiography_revenue = Symbol('biography_revenue', positive=True)\nsolution = solve_it([novel_revenue + biography_revenue - 100, novel_revenue - 34, biography_revenue - 33 / 3], [novel_revenue, biography_revenue])\nans = solution[novel_revenue] / solution[biography_revenue]", "\nnovel_revenue = Symbol('novel_revenue', positive=True)\nbiography_revenue = Symbol('biography_revenue', positive=True)\ntotal_revenue = Symbol('total_revenue', positive=True)\nsolution = solve_it([novel_revenue / total_revenue - 0.34, (total_revenue - novel_revenue) / biography_revenue - 3, novel_revenue + biography_revenue - total_revenue], [novel_revenue, biography_revenue, total_revenue])\nans = solution[novel_revenue] / solution[biography_revenue]", "\nnovels_revenue = Symbol('novels_revenue', positive=True)\nbiographies_revenue = Symbol('biographies_revenue', positive=True)\nsolution = solve_it([novels_revenue + biographies_revenue - 100, novels_revenue - 34, biographies_revenue - 33 / 3], [novels_revenue, biographies_revenue])\nans = solution[novels_revenue] / solution[biographies_revenue]", "\nnovel_revenue = Symbol('novel_revenue', positive=True)\nbiography_revenue = Symbol('biography_revenue', positive=True)\ntotal_revenue = Symbol('total_revenue', positive=True)\nsolution = solve_it([total_revenue - novel_revenue - biography_revenue, novel_revenue - 0.34 * total_revenue, biography_revenue - 1/3 * (total_revenue - novel_revenue)], [novel_revenue, biography_revenue, total_revenue])\nans = solution[novel_revenue] / solution[biography_revenue]", "\nnovel_sales = 0.34\nbiography_sales = (1 - novel_sales) / 3\nans = novel_sales / biography_sales", "\nnovel_sales_percent = 34\nbiography_sales_percent = 100 - novel_sales_percent\nnovel_sales = 1\nbiography_sales = novel_sales * biography_sales_percent / (3 * novel_sales_percent)\nans = novel_sales / biography_sales", "\nnovel_revenue = Symbol('novel_revenue', positive=True)\nbiography_revenue = Symbol('biography_revenue', positive=True)\ntotal_revenue = Symbol('total_revenue', positive=True)\nsolution = solve_it([novel_revenue + biography_revenue + total_revenue * 0.66 - total_revenue, novel_revenue / biography_revenue - 3.1], [novel_revenue, biography_revenue, total_revenue])\nans = solution[novel_revenue] / solution[biography_revenue]", "\nnovel_revenue = Symbol('novel_revenue', positive=True)\nbiography_revenue = Symbol('biography_revenue', positive=True)\nsolution = solve_it([novel_revenue / (novel_revenue + biography_revenue) - 0.34, novel_revenue / biography_revenue - 3], [novel_revenue, biography_revenue])\nans = solution[novel_revenue] / solution[biography_revenue]", "\nnovel_percentage = 0.34\nbiography_percentage = 1 - novel_percentage\nbiography_percentage = biography_percentage / 3\nans = novel_percentage / biography_percentage", "\nnovel_revenue = Symbol('novel_revenue', positive=True)\nbiography_revenue = Symbol('biography_revenue', positive=True)\nnovel_percentage = 34\nbiography_percentage = 1 / 3 * (100 - novel_percentage)\nsolution = solve_it([novel_revenue * novel_percentage / 100 - biography_revenue * biography_percentage / 100, novel_revenue + biography_revenue - 100], [novel_revenue, biography_revenue])\nans = solution[novel_revenue] / solution[biography_revenue]", "\nnovels_revenue = Symbol('novels_revenue', positive=True)\nbiographies_revenue = Symbol('biographies_revenue', positive=True)\nsolution = solve_it([novels_revenue + biographies_revenue - 100, novels_revenue - 34, biographies_revenue - 33], [novels_revenue, biographies_revenue])\nans = solution[novels_revenue] / solution[biographies_revenue]", "\nnovels_revenue = Symbol('novels_revenue', positive=True)\nbiographies_revenue = Symbol('biographies_revenue', positive=True)\nnovels_percentage = 34\nbiographies_percentage = 1/3 * (100 - novels_percentage)\nsolution = solve_it([novels_revenue * novels_percentage - biographies_revenue * biographies_percentage, novels_revenue + biographies_revenue - 100], [novels_revenue, biographies_revenue])\nans = solution[novels_revenue] / solution[biographies_revenue]", "\nnovel_sales_percentage = 0.34\nnovel_sales_revenue = Symbol('novel_sales_revenue', positive=True)\nbiography_sales_revenue = Symbol('biography_sales_revenue', positive=True)\nbiography_sales_percentage = (1 - novel_sales_percentage) / 3\nsolution = solve_it([novel_sales_revenue + biography_sales_revenue - 1, biography_sales_revenue - biography_sales_percentage], [novel_sales_revenue, biography_sales_revenue])\nans = solution[novel_sales_revenue] / solution[biography_sales_revenue]", "\nnovel_revenue = Symbol('novel_revenue', positive=True)\nbiography_revenue = Symbol('biography_revenue', positive=True)\nsolution = solve_it([novel_revenue + biography_revenue - 100, novel_revenue - 34, biography_revenue - (100 - 34) / 3], [novel_revenue, biography_revenue])\nans = solution[novel_revenue] / solution[biography_revenue]"], "generated_prediction": "1.5454545454545459", "options": ["A)1.3", "B)1.5", "C)2.1", "D)2.5", "E)3.1"], "answer": "B", "prediction": "B"}
{"question": "A bee bypasses 0.05% of flowers it flies by because it can sense they don't have any nectar in them. How many flowers will the bee fly by to bypass 8 flowers?", "generated": ["\nflowers = Symbol('flowers', positive=True)\nflowers_bypassed = 8\nsolution = solve_it(flowers * 0.0005 - flowers_bypassed, flowers)\nans = solution[flowers]", "\nflowers = Symbol('flowers', positive=True)\nflowers_bypassed = 8\nsolution = solve_it(flowers * 0.0005 - flowers_bypassed, flowers)\nans = solution[flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_bypassed = 8\nsolution = solve_it(num_flowers * 0.0005 - num_flowers_bypassed, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_bypassed = 8\nsolution = solve_it(num_flowers * 0.0005 - num_flowers_bypassed, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nbypassed_flowers = 0.0005 * num_flowers\nsolution = solve_it(bypassed_flowers - 8, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_bypassed = 8\nsolution = solve_it(num_flowers * 0.0005 - num_flowers_bypassed, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nbypassed_flowers = 0.0005 * num_flowers\nsolution = solve_it(bypassed_flowers - 8, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_bypassed = 8\nsolution = solve_it(num_flowers * 0.0005 - num_flowers_bypassed, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_bypassed = 8\nsolution = solve_it(num_flowers * 0.0005 - num_flowers_bypassed, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_bypassed = 8\nsolution = solve_it(num_flowers * 0.0005 - num_flowers_bypassed, num_flowers)\nans = solution[num_flowers]", "\nflowers = Symbol('flowers', positive=True)\nflowers_bypassed = 8\npercentage_bypassed = 0.05\nsolution = solve_it(flowers * percentage_bypassed / 100 - flowers_bypassed, flowers)\nans = solution[flowers]", "\nflowers = Symbol('flowers', positive=True)\nflowers_bypassed = 8\npercentage_bypassed = 0.05\nsolution = solve_it(flowers * percentage_bypassed / 100 - flowers_bypassed, flowers)\nans = solution[flowers]", "\nflowers_bypassed = Symbol('flowers_bypassed', positive=True)\nflowers_visited = Symbol('flowers_visited', positive=True)\nsolution = solve_it(flowers_bypassed / flowers_visited - 0.0005, flowers_visited)\nans = solution[flowers_visited] * 8", "\nnum_flowers = Symbol('num_flowers', positive=True)\npercent_bypassed = 0.05\nnum_bypassed = num_flowers * percent_bypassed\nsolution = solve_it(num_bypassed - 8, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_without_nectar = num_flowers * 0.0005\nsolution = solve_it(num_flowers_without_nectar - 8, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_without_nectar = 0.05 * num_flowers / 100\nsolution = solve_it(num_flowers_without_nectar - 8, num_flowers)\nans = solution[num_flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_without_nectar = 0.05 / 100 * num_flowers\nsolution = solve_it(num_flowers_without_nectar - 8, num_flowers)\nans = solution[num_flowers]", "\nflowers = Symbol('flowers', positive=True)\nnum_flowers_bypassed = 8\npercentage_of_flowers_bypassed = 0.05\nsolution = solve_it(flowers * percentage_of_flowers_bypassed / 100 - num_flowers_bypassed, flowers)\nans = solution[flowers]", "\nnum_flowers_to_bypass = 8\npercentage_of_flowers_to_bypass = 0.05\nnum_flowers_to_fly_by = num_flowers_to_bypass / percentage_of_flowers_to_bypass\nans = num_flowers_to_fly_by", "\nnum_flowers_without_nectar = Symbol('num_flowers_without_nectar', positive=True)\nnum_flowers = Symbol('num_flowers', positive=True)\nsolution = solve_it(num_flowers_without_nectar / num_flowers - 0.0005, num_flowers_without_nectar)\nans = solution[num_flowers_without_nectar] * 8", "\nflowers_bypassed = Symbol('flowers_bypassed', positive=True)\nflowers_visited = 0.05 / 100 * flowers_bypassed\nsolution = solve_it(flowers_visited - 8, flowers_bypassed)\nans = solution[flowers_bypassed]", "\nflowers_to_bypass = 8\nnum_flowers_to_fly_by = Symbol('num_flowers_to_fly_by', positive=True)\nsolution = solve_it(num_flowers_to_fly_by * 0.05 / 100 - flowers_to_bypass, num_flowers_to_fly_by)\nans = solution[num_flowers_to_fly_by]", "\nflowers = Symbol('flowers', positive=True)\nflowers_bypassed = 8\nbypass_rate = 0.05 / 100\nsolution = solve_it(flowers * bypass_rate - flowers_bypassed, flowers)\nans = solution[flowers]", "\nflowers_bypassed = Symbol('flowers_bypassed', positive=True)\nflowers_bypassed_percentage = 0.05\nflowers_bypassed_count = 8\nsolution = solve_it(flowers_bypassed * flowers_bypassed_percentage / 100 - flowers_bypassed_count, flowers_bypassed)\nans = solution[flowers_bypassed]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_to_bypass = 8\nsolution = solve_it(num_flowers * 0.0005 - num_flowers_to_bypass, num_flowers)\nans = solution[num_flowers]", "\nflowers = Symbol('flowers', positive=True)\nflowers_bypassed = 8\nsolution = solve_it(flowers * 0.05 / 100 - flowers_bypassed, flowers)\nans = solution[flowers]", "\nnum_flowers = Symbol('num_flowers', positive=True)\nnum_flowers_with_nectar = num_flowers * 0.9995\nsolution = solve_it(num_flowers_with_nectar - 8, num_flowers)\nans = solution[num_flowers]", "\nflowers_to_bypass = 8\npercentage_of_flowers_to_bypass = 0.05\nans = flowers_to_bypass / percentage_of_flowers_to_bypass", "\nflowers_bypassed = Symbol('flowers_bypassed', positive=True)\nflowers_bypassed_percent = 0.05\nflowers_bypassed_count = 8\nsolution = solve_it(flowers_bypassed * flowers_bypassed_percent / 100 - flowers_bypassed_count, flowers_bypassed)\nans = solution[flowers_bypassed]", "\nnum_flowers_bypassed = Symbol('num_flowers_bypassed', positive=True)\nnum_flowers_bypassed_percentage = 0.05\nnum_flowers_bypassed_target = 8\nsolution = solve_it(num_flowers_bypassed * num_flowers_bypassed_percentage / 100 - num_flowers_bypassed_target, num_flowers_bypassed)\nans = solution[num_flowers_bypassed]"], "generated_prediction": "16000.0", "options": ["A)2000", "B)4000", "C)8000", "D)16000", "E)32000"], "answer": "D", "prediction": "D"}
{"question": "Fernando purchased a university meal plan that allows him to have a total of 3 lunches and 3 dinners per week. If the cafeteria is closed on weekends and Fernando always goes home for a dinner on Friday nights, how many options does he have to allocate his meals?", "generated": ["\nans = math.factorial(5) / (math.factorial(3) * math.factorial(2)) * math.factorial(4) / (math.factorial(3) * math.factorial(1))", "\nans = math.factorial(5) / (math.factorial(3) * math.factorial(2)) * math.factorial(4) / (math.factorial(3) * math.factorial(1))", "\nans = math.factorial(5) / (math.factorial(3) * math.factorial(2)) * math.factorial(4) / (math.factorial(3) * math.factorial(1))", "\nans = math.factorial(5) / (math.factorial(3) * math.factorial(2)) * math.factorial(4) / (math.factorial(3) * math.factorial(1))", "\nans = math.factorial(5) / (math.factorial(3) * math.factorial(2)) * math.factorial(4) / (math.factorial(3) * math.factorial(1))", "\nans = math.factorial(5) / (math.factorial(3) * math.factorial(2)) * math.factorial(4) / (math.factorial(3) * math.factorial(1))", "\nans = math.factorial(5) / (math.factorial(3) * math.factorial(2)) * math.factorial(4) / (math.factorial(3) * math.factorial(1))", "\nans = math.factorial(5) / (math.factorial(3) * math.factorial(2)) * math.factorial(4) / (math.factorial(3) * math.factorial(1))", "\nans = math.factorial(5) / (math.factorial(3) * math.factorial(2)) * math.factorial(4) / (math.factorial(2) * math.factorial(2))", "\nans = math.factorial(5) / math.factorial(3) / math.factorial(2) * math.factorial(4) / math.factorial(3) / math.factorial(1)", "\nfrom math import factorial\nans = factorial(5) / (factorial(3) * factorial(2)) * factorial(4) / (factorial(3) * factorial(1))", "\nans = math.factorial(5) / math.factorial(3) / math.factorial(2) * math.factorial(4) / math.factorial(3) / math.factorial(1)", "\nans = math.factorial(5) / math.factorial(3) / math.factorial(2) * math.factorial(4) / math.factorial(3) / math.factorial(1)", "\nans = math.factorial(5) / math.factorial(3) / math.factorial(2) * math.factorial(4) / math.factorial(3) / math.factorial(1)", "\nimport math\nans = math.factorial(5) / math.factorial(3) / math.factorial(2) * math.factorial(4) / math.factorial(2) / math.factorial(2)", "\nimport math\nans = math.factorial(5) / math.factorial(3) / math.factorial(2) * math.factorial(4) / math.factorial(2) / math.factorial(2)", "\nfrom math import factorial\nans = factorial(5) / factorial(3) / factorial(2) * factorial(4) / factorial(3) / factorial(1)", "\nans = math.factorial(5) / math.factorial(2) / math.factorial(3) * math.factorial(4) / math.factorial(4) / math.factorial(0)", "\nans = math.factorial(5) / math.factorial(2) / math.factorial(3) * math.factorial(4) / math.factorial(4) / math.factorial(0)", "\nans = math.factorial(5) / math.factorial(3) / math.factorial(2) * math.factorial(4) / math.factorial(3) / math.factorial(1)", "\nfrom scipy.special import comb\nans = comb(5, 3) * comb(4, 3)", "\nans = math.factorial(5) / math.factorial(2) / math.factorial(3) * math.factorial(4) / math.factorial(4) / math.factorial(0)", "\nfrom scipy.special import comb\nans = comb(5, 3) * comb(4, 3)", "\nfrom scipy.special import comb\nans = comb(5, 3) * comb(4, 3)", "\nfrom scipy.special import comb\nans = comb(5, 3) * comb(4, 3)", "\nfrom scipy.special import comb\nans = comb(5, 3, exact=True) * comb(4, 3, exact=True)", "\nfrom sympy.utilities.iterables import multiset_permutations", "\nimport math\nans = math.comb(5, 3) * math.comb(4, 3)", "\nnum_lunches = 3\nnum_dinners = 3\nnum_days = 5\nnum_weekdays = 4\nans = math.factorial(num_days) / math.factorial(num_lunches) / math.factorial(num_days - num_lunches) * math.factorial(num_weekdays) / math.factorial(num_dinners) / math.factorial(num_weekdays - num_dinners)", "\nfrom sympy.utilities.iterables import multiset_permutations\nfrom sympy.utilities.iterables import multiset_combinations\nfrom sympy.utilities.iterables import cartes"], "generated_prediction": "40.0", "options": ["A)5C3*4C3", "B)5C4*4C2", "C)5C2*4C4", "D)5C6*4C5", "E)4C3*4C3"], "answer": "A", "prediction": "B"}
{"question": "What should come in place of the question mark(?) in each of the following questions ?\na2 - b2/(a + b)2 (?)=(a - b)2", "generated": ["\na = Symbol('a')\nb = Symbol('b')\nans = (a + b) * (a - b)", "\na = Symbol('a')\nb = Symbol('b')\nans = (a + b) * (a - b)", "\na = Symbol('a')\nb = Symbol('b')\nans = (a + b) * (a - b)", "\na = Symbol('a')\nb = Symbol('b')\nans = (a + b) * (a - b)", "\na = Symbol('a')\nb = Symbol('b')\nans = (a + b) * (a - b)", "\na = Symbol('a')\nb = Symbol('b')\nans = (a + b) * (a - b)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify(a ** 2 - b ** 2 / (a + b) ** 2)", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nans = (a + b) * (a - b)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a + b) * (a - b))", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a + b) * (a - b))", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a + b) * (a - b))", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a + b) * (a - b))", "\na = Symbol('a')\nb = Symbol('b')\nans=simplify((a ** 2 - b ** 2) / (a + b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2 - (a - b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2 - (a - b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2 - (a - b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2 - (a - b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2 - (a - b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2 - (a - b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2 - (a - b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = (a - b) ** 2", "\na = Symbol('a')\nb = Symbol('b')\nans = (a - b) ** 2", "\na = Symbol('a')\nb = Symbol('b')\nans = (a - b) ** 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nans = simplify((a ** 2 - b ** 2) / (a + b) ** 2 - (a - b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a + b) ** 2 - (a - b) ** 2)", "\na = Symbol('a')\nb = Symbol('b')\nans = simplify((a + b) ** 2 - (a - b) ** 2)"], "generated_prediction": "(a - b)*(a + b)", "options": ["A)(a + b)(a - b)", "B)(a - b)2", "C)(a + b)2", "D)a3 + b3", "E)None of these"], "answer": "A", "prediction": "A"}
{"question": "A number is as much greater than 36 as is less than 86. Find the Number.", "generated": ["\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - 86 + number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - 86 + number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - 86 + number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - 36 - 86 + number, number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(number - 36 - (86 - number), number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(number - 36 - 86 + number, number)\nans = solution[number]"], "generated_prediction": "61.0", "options": ["A)60", "B)56", "C)51", "D)61", "E)41"], "answer": "D", "prediction": "D"}
{"question": "A certain phone manufacturer ships its products in crates. A crate consists of p pallets, and each pallet holds 1250 phones. If the manufacturer ships 4 crates, how many phones are shipped?", "generated": ["\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nans = 4 * p * 1250", "\np = Symbol('p', positive=True)\nnum_phones = 4 * p * 1250\nans = num_phones", "\np = Symbol('p', positive=True)\nnum_phones = 4 * p * 1250\nans = num_phones", "\np = Symbol('p', positive=True)\ncrate_size = p * 1250\nans = 4 * crate_size", "\np = Symbol('p', positive=True)\nnum_pallets = p\nnum_phones_per_pallet = 1250\nnum_crates = 4\nans = num_pallets * num_phones_per_pallet * num_crates"], "generated_prediction": "5000*p", "options": ["A)1000p", "B)1500p", "C)2000p", "D)2500p", "E)30000"], "answer": "D", "prediction": "D"}
{"question": "A can construct a wall in 40 min and B can construct the wall in 45 min. How many hours is needed to contruct a wall if both the person working together.", "generated": ["\nA = 40\nB = 45\nans = (A * B) / (A + B)", "\nA = 40\nB = 45\nans = (A * B) / (A + B)", "\nA = 40\nB = 45\nans = A * B / (A + B)", "\nA = 40\nB = 45\nans = A * B / (A + B)", "\nA = 1 / 40\nB = 1 / 45\nans = 1 / (A + B)", "\nA_time = 40\nB_time = 45\nans = (A_time * B_time) / (A_time + B_time)", "\nA = 40\nB = 45\ntotal_time = 1 / (1 / A + 1 / B)\nans = total_time", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nsolution = solve_it(A + B - 1, A)\nans = solution[A]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nsolution = solve_it(A + B - 1, A)\nans = solution[A]", "\nA_time = 40\nB_time = 45\ntotal_time = A_time * B_time / (A_time + B_time)\nans = total_time", "\nA_time = 40\nB_time = 45\ntotal_time = A_time * B_time / (A_time + B_time)\nans = total_time", "\nA_time = 40\nB_time = 45\ntotal_time = A_time * B_time / (A_time + B_time)\nans = total_time", "\nA_time = 40\nB_time = 45\nans = A_time * B_time / (A_time + B_time)", "\nA_time = 40\nB_time = 45\ntime_taken = A_time * B_time / (A_time + B_time)\nans = time_taken", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(1 / A + 1 / B - 1 / time_taken_by_A - 1 / time_taken_by_B, A)\nans = solution[A]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A / B - time_taken_by_A / time_taken_by_B, A)\nans = solution[A]", "\nA_time = 40\nB_time = 45\ntotal_time = A_time * B_time / (A_time + B_time)\nans = total_time", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_for_A = 40\ntime_for_B = 45\nsolution = solve_it([A + B - time_for_A, A - B - time_for_B], [A, B])\nans = solution[A]", "\nA = Symbol('A')\nB = Symbol('B')\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A / time_taken_by_A + B / time_taken_by_B - 1, A)\nans = solution[A]", "\nA_time = 40\nB_time = 45\ntotal_time = A_time * B_time / (A_time + B_time)\nans = total_time", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A / time_taken_by_A + B / time_taken_by_B - 1, [A, B])\nans = solution[A] + solution[B]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A + B - time_taken_by_A, A - time_taken_by_B, B)\nans = solution[A]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A + B - time_taken_by_A, A - time_taken_by_B, B)\nans = solution[A]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A + B - time_taken_by_A, B - time_taken_by_B, A)\nans = solution[A]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nsolution = solve_it(A / 40 + B / 45 - 1, A)\nans = solution[A]", "\nA = Symbol('A')\nB = Symbol('B')\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A + B - time_taken_by_A, B - time_taken_by_B, A)\nans = solution[A]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A / time_taken_by_A + B / time_taken_by_B - 1, [A, B])\nans = solution[A] / 60", "\nA_time = 40\nB_time = 45\ntime_needed = A_time * B_time / (A_time + B_time)\nans = time_needed", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A + B - time_taken_by_A, B + A - time_taken_by_B, [A, B])\nans = solution[A]", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\ntime_taken_by_A = 40\ntime_taken_by_B = 45\nsolution = solve_it(A + B - time_taken_by_A, B + A - time_taken_by_B, A, B)\nans = solution[A]"], "generated_prediction": "21.176470588235293", "options": ["A)20 min", "B)22 min", "C)23 min", "D)21 min", "E)20 min"], "answer": "D", "prediction": "D"}
{"question": "An express electric train takes exact three seconds to enter tunnel which is 1 mile long.\nIf train is traveling at 120 mile an hour, how long will it take to pass completely through the tunnel ?", "generated": ["\ntrain_speed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = tunnel_length / train_speed\nans = time_to_enter_tunnel + time_to_exit_tunnel", "\ntrain_speed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = tunnel_length / train_speed\nans = time_to_enter_tunnel + time_to_exit_tunnel", "\ntunnel_length = 1\ntrain_speed = 120\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = tunnel_length / train_speed\nans = time_to_enter_tunnel + time_to_exit_tunnel", "\ntrain_speed = 120\ntunnel_length = 1\ntunnel_time = 3\nans = tunnel_length / train_speed + tunnel_time", "\ntrain_speed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_tunnel = tunnel_length / train_speed\nans = time_to_enter_tunnel + time_to_pass_tunnel", "\nspeed = 120\ndistance = 1\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = distance / speed\nans = time_to_enter_tunnel + time_to_exit_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_through_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_pass_through_tunnel", "\ntrain_speed = 120\ntunnel_length = 1\ntunnel_time = 3\nans = tunnel_time + tunnel_length / train_speed", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter = 3\ntime_to_pass = tunnel_length / speed + time_to_enter\nans = time_to_pass", "\ndistance = 1\nspeed = 120\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = distance / speed\nans = time_to_enter_tunnel + time_to_exit_tunnel", "\nspeed = 120\ndistance = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_tunnel = distance / speed\nans = time_to_enter_tunnel + time_to_pass_tunnel", "\ntrain_speed = 120\ntunnel_length = 1\ntunnel_time = 3\nans = tunnel_time + tunnel_length / train_speed * 60 * 60", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_exit_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_exit_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_exit_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_pass_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_pass_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_pass_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_pass_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_pass_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_pass_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\ntime_to_pass_tunnel = tunnel_length / speed\nans = time_to_enter_tunnel + time_to_pass_tunnel", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\nans = time_to_enter_tunnel + tunnel_length / speed", "\ntunnel_length = 1\ntrain_speed = 120\ntime_to_enter_tunnel = 3\ntime_to_pass_through_tunnel = tunnel_length / train_speed\nans = time_to_enter_tunnel + time_to_pass_through_tunnel", "\ntrain_speed = 120\ntunnel_length = 1\ntunnel_entering_time = 3\nans = tunnel_length / train_speed + tunnel_entering_time", "\nspeed = 120\ntunnel_length = 1\ntime_to_enter_tunnel = 3\nans = tunnel_length / speed + time_to_enter_tunnel", "\ntunnel_length = 1\ntrain_speed = 120\ntrain_length = Symbol('train_length', positive=True)\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = tunnel_length / train_speed\nsolution = solve_it(train_length / train_speed + time_to_enter_tunnel - time_to_exit_tunnel, train_length)\nans = solution[train_length]", "\ntunnel_length = 1\ntrain_speed = 120\ntrain_length = Symbol('train_length', positive=True)\ntime_to_enter_tunnel = 3\ntime_to_exit_tunnel = tunnel_length / train_speed\nsolution = solve_it(train_length / train_speed - time_to_enter_tunnel - time_to_exit_tunnel, train_length)\nans = solution[train_length]", "\ntunnel_length = 1\ntrain_speed = 120\ntrain_length = Symbol('train_length', positive=True)\ntrain_entering_time = 3\ntrain_exiting_time = tunnel_length / train_speed + train_entering_time\nsolution = solve_it(train_length / train_speed - train_exiting_time, train_length)\nans = solution[train_length]", "\ntunnel_length = 1\ntunnel_entrance_time = 3\ntrain_speed = 120\ntrain_length = Symbol('train_length', positive=True)\ntrain_entrance_time = tunnel_length / train_speed\ntrain_exit_time = train_entrance_time + tunnel_entrance_time\ntrain_exit_time_in_seconds = train_exit_time * 60 * 60\nsolution = solve_it(train_exit_time_in_seconds - train_length / train_speed, train_length)\nans = solution[train_length]"], "generated_prediction": "3.0083333333333333", "options": ["A)43 seconds", "B)39 seconds", "C)20 seconds", "D)33 seconds", "E)55 seconds"], "answer": "D", "prediction": "B"}
{"question": "A merchant receives an invoice for a motor boat for $20 000 with terms 4/30, n/100. What is the highest simple interest rate at which he can afford to borrow money in order to take advantage of the discount?", "generated": ["\ninvoice_amount = 20000\ndiscount_rate = 4 / 30\ndiscount_amount = invoice_amount * discount_rate\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount = discount_amount / (1 - interest_rate / 100)\nsolution = solve_it(loan_amount - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\namount = 20000\ndiscount = 4\ndiscount_days = 30\namount_with_discount = amount * (1 - discount / 100)\ninterest_rate = Symbol('interest_rate', positive=True)\namount_with_interest = amount_with_discount * (1 + interest_rate / 100)\nsolution = solve_it(amount_with_interest - amount, interest_rate)\nans = solution[interest_rate]", "\namount = Symbol('amount', positive=True)\ndiscount = amount * 0.04\nnet_amount = amount - discount\ninterest_rate = Symbol('interest_rate', positive=True)\namount_with_interest = net_amount * (1 + interest_rate / 100)\nsolution = solve_it(amount_with_interest - 20000, interest_rate)\nans = solution[interest_rate]", "\namount = 20000\ndiscount = 4\ndiscount_days = 30\ninterest_rate = Symbol('interest_rate', positive=True)\namount_with_discount = amount * (1 - discount / 100)\namount_with_interest = amount_with_discount * (1 + interest_rate / 100 * discount_days / 365)\nsolution = solve_it(amount_with_interest - amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4\ndiscount_days = 30\nloan_amount = invoice_amount * (100 - discount_rate) / 100\nloan_days = 100 - discount_days\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount_with_interest = loan_amount * (1 + interest_rate / 100)\nsolution = solve_it(loan_amount_with_interest - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4\ndiscount_days = 30\nloan_amount = invoice_amount * (100 - discount_rate) / 100\nloan_days = 100 - discount_days\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount_with_interest = loan_amount * (1 + interest_rate / 100)\nsolution = solve_it(loan_amount_with_interest - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4 / 30\ndiscount_amount = invoice_amount * discount_rate\nloan_amount = invoice_amount - discount_amount\nloan_period = 30\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_with_interest = loan_amount * (1 + interest_rate / 100)\nsolution = solve_it(loan_with_interest - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4 / 30\ndiscount_amount = invoice_amount * discount_rate\nloan_amount = invoice_amount - discount_amount\nloan_duration = 30\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount_with_interest = loan_amount * (1 + interest_rate / 100)\nsolution = solve_it(loan_amount_with_interest - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4 / 30\ndiscount_amount = invoice_amount * discount_rate\nloan_amount = invoice_amount - discount_amount\nloan_duration = 30\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount_with_interest = loan_amount * (1 + interest_rate / 100)\nsolution = solve_it(loan_amount_with_interest - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_amount = invoice_amount * 4 / 30\nloan_amount = invoice_amount - discount_amount\nloan_duration = 30\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount_with_interest = loan_amount * (1 + interest_rate / 100)\nsolution = solve_it(loan_amount_with_interest - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\namount = 20000\ndiscount_percentage = 4\ndiscount_days = 30\ninterest_rate = Symbol('interest_rate', positive=True)\ninterest_days = 100 - discount_days\namount_with_discount = amount * (1 - discount_percentage / 100)\namount_with_interest = amount_with_discount * (1 + interest_rate / 100) ** (interest_days / 365)\nsolution = solve_it(amount_with_interest - amount, interest_rate)\nans = solution[interest_rate]", "\namount = 20000\ndiscount = 4\ndays_to_pay = 30\ninterest_rate = Symbol('interest_rate', positive=True)\namount_with_interest = amount * (1 + interest_rate / 100)\nsolution = solve_it(amount_with_interest - amount * (1 - discount / 100), interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_amount = invoice_amount * 4 / 100\ndiscount_days = 30\ninterest_rate = Symbol('interest_rate', positive=True)\namount_due = invoice_amount - discount_amount\namount_due_with_interest = amount_due * (1 + interest_rate / 100)\nsolution = solve_it(amount_due_with_interest - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4\ndiscount_days = 30\ninterest_rate = Symbol('interest_rate', positive=True)\namount_after_discount = invoice_amount * (1 - discount_rate / 100)\namount_after_interest = amount_after_discount * (1 + interest_rate / 100)\nsolution = solve_it(amount_after_interest - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4 / 30\ndiscount_amount = invoice_amount * discount_rate\nloan_amount = invoice_amount - discount_amount\nloan_term = 30\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount_with_interest = loan_amount * (1 + interest_rate / 100)\nsolution = solve_it(loan_amount_with_interest - loan_amount - discount_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount = 4\ndays = 30\ninterest_rate = Symbol('interest_rate', positive=True)\nsimple_interest = invoice_amount * interest_rate / 100 * days / 30\ndiscounted_amount = invoice_amount - invoice_amount * discount / 100\nsolution = solve_it(discounted_amount - simple_interest, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4\ndiscount_period = 30\nloan_amount = invoice_amount * (100 - discount_rate) / 100\nloan_period = 100 - discount_period\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount_with_interest = loan_amount * (1 + interest_rate * loan_period / 100)\nsolution = solve_it(loan_amount_with_interest - invoice_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_amount = invoice_amount * 4 / 30\nloan_amount = invoice_amount - discount_amount\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_period = 30\nloan_repayment = loan_amount * (1 + interest_rate / 100)\nsolution = solve_it(loan_repayment - loan_amount, interest_rate)\nans = solution[interest_rate]", "\namount = 20000\ndiscount_rate = 4\ndiscount_days = 30\ninterest_rate = Symbol('interest_rate', positive=True)\ninterest_days = 100\namount_with_discount = amount * (1 - discount_rate / 100)\namount_with_interest = amount_with_discount * (1 + interest_rate / 100)\nsolution = solve_it(amount_with_interest - amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4\ndiscount_days = 30\nloan_amount = invoice_amount * (100 - discount_rate) / 100\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount_with_interest = loan_amount * (1 + interest_rate / 100)\nloan_amount_with_interest_after_discount_days = loan_amount_with_interest * (100 - discount_rate) / 100\nsolution = solve_it(loan_amount_with_interest_after_discount_days - loan_amount, interest_rate)\nans = solution[interest_rate]", "\noriginal_price = 20000\ndiscount = 4\ndiscount_period = 30\ndiscount_rate = n\nsolution = solve_it(original_price * (1 - discount / 100) * (1 - discount_rate / 100) - original_price * (1 - discount / 100), discount_rate)\nans = solution[discount_rate]", "\namount = 20000\ndiscount = 4\ndays_to_pay = 30\ninterest_rate = Symbol('interest_rate', positive=True)\namount_to_be_paid = amount * (1 - discount / 100)\namount_to_be_paid_with_interest = amount_to_be_paid * (1 + interest_rate / 100)\nsolution = solve_it(amount_to_be_paid_with_interest - amount_to_be_paid - amount_to_be_paid * interest_rate * days_to_pay / 100, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4 / 30\ndiscount_amount = invoice_amount * discount_rate\nloan_amount = invoice_amount - discount_amount\nloan_duration = 30\ninterest_rate = Symbol('interest_rate', positive=True)\nloan_amount_with_interest = loan_amount * (1 + interest_rate / 100)\nloan_amount_with_interest_and_discount = loan_amount_with_interest * (1 - discount_rate)\nsolution = solve_it(loan_amount_with_interest_and_discount - loan_amount, interest_rate)\nans = solution[interest_rate]", "\namount = 20000\ndiscount_rate = 4\ndiscount_days = 30\ninterest_rate = Symbol('interest_rate', positive=True)\ninterest_days = 100\namount_with_discount = amount * (100 - discount_rate) / 100\namount_with_interest = amount_with_discount * (100 + interest_rate) / 100\nsolution = solve_it(amount_with_interest - amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_amount = 0.04 * invoice_amount\ndiscount_period = 30\nannual_interest_rate = Symbol('annual_interest_rate', positive=True)\nmoney_after_discount_period = discount_amount * (1 + annual_interest_rate / 100 * discount_period / 365)\nmoney_before_discount_period = invoice_amount * (1 + annual_interest_rate / 100 * discount_period / 365)\nsolution = solve_it(money_after_discount_period - money_before_discount_period, annual_interest_rate)\nans = solution[annual_interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4\ndiscount_days = 30\npayment_days = 100\ndiscount_amount = invoice_amount * discount_rate / 100\ndiscount_period = discount_days / 360\npayment_period = payment_days / 360\ninterest_rate = Symbol('interest_rate', positive=True)\namount_with_simple_interest = invoice_amount + discount_amount * (1 + interest_rate / 100 * payment_period)\nsolution = solve_it(amount_with_simple_interest - discount_amount, interest_rate)\nans = solution[interest_rate]", "\ninvoice_amount = 20000\ndiscount_rate = 4\ndiscount_days = 30\nborrow_days = 100\nborrow_rate = Symbol('borrow_rate', positive=True)\ndiscount_amount = invoice_amount * (discount_rate / 100)\nborrow_amount = invoice_amount - discount_amount\nborrow_interest = borrow_amount * (borrow_rate / 100) * (borrow_days / 365)\nsolution = solve_it(borrow_interest - discount_amount, borrow_rate)\nans = solution[borrow_rate]", "\ndays_to_pay = 30\ndiscount_rate = 4\ndiscount_amount = discount_rate / 100 * 20000\nsimple_interest_rate = Symbol('simple_interest_rate', positive=True)\namount_to_be_paid = 20000 - discount_amount\namount_to_be_paid_after_days = amount_to_be_paid * (1 + simple_interest_rate / 100 * days_to_pay / 365)\nsolution = solve_it(amount_to_be_paid_after_days - amount_to_be_paid, simple_interest_rate)\nans = solution[simple_interest_rate]", "\ninvoice = 20000\ndiscount = 4\ndays = 30\nrate = Symbol('rate', positive=True)\ndiscount_amount = invoice * discount / 100\ndiscount_days = days * discount / 100\ndiscount_rate = rate * discount_days / 100\nsolution = solve_it(discount_amount - discount_rate, rate)\nans = solution[rate]", "\ninvoice_amount = 20000\ndiscount_percent = 4\ndiscount_days = 30\ninterest_rate = Symbol('interest_rate', positive=True)\namount_after_discount = invoice_amount * (100 - discount_percent) / 100\namount_after_discount_with_interest = amount_after_discount * (1 + interest_rate / 100)\namount_after_discount_with_interest_in_days = amount_after_discount_with_interest * discount_days / 365\nsolution = solve_it(amount_after_discount_with_interest_in_days - amount_after_discount, interest_rate)\nans = solution[interest_rate]"], "generated_prediction": "4.17", "options": ["A)247.67", "B)237.67", "C)227.67", "D)215.67", "E)None of these"], "answer": "A", "prediction": "B"}
{"question": "There are ten lime soda bottles on a table in a restaurant. They are to be served among two different groups of customers consisting of 5 members each. How many ways are there to create these 2 groups?", "generated": ["\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nans = math.factorial(10) / math.factorial(5) ** 2", "\nimport math\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\nfrom math import factorial\nans = factorial(10) / (factorial(5) * factorial(5))", "\nfrom math import factorial\nans = factorial(10) / (factorial(5) * factorial(5))", "\nfrom sympy import factorial\nans = factorial(10) / (factorial(5) * factorial(5))", "\n# Hint: Use combination formula\nans = math.factorial(10) / (math.factorial(5) * math.factorial(5))", "\n# Hint: Use permutation and combination\nfrom scipy.special import comb\nans = comb(10, 5, exact=True) * comb(5, 5, exact=True)"], "generated_prediction": "252.0", "options": ["A)90", "B)105", "C)126", "D)252", "E)525"], "answer": "D", "prediction": "D"}
{"question": "A special cereal mixture contains rice, wheat and corn in the ratio of 2:3:5. If a bag of the mixture contains 3 pounds of rice, how much corn does it contain?", "generated": ["\nrice = 3\nwheat = 2 * rice\ncorn = 5 * rice\nans = corn", "\nrice = 3\nwheat = 2 * rice\ncorn = 5 * rice\nans = corn", "\nrice = 3\nwheat = 2 * rice\ncorn = 5 * rice\nans = corn", "\nrice = 3\nwheat = 2 * rice\ncorn = 5 * rice\nans = corn", "\nrice_weight = 3\ntotal_weight = rice_weight / (2 / 10)\ncorn_weight = total_weight * 5 / 10\nans = corn_weight", "\nrice_weight = 3\ntotal_weight = rice_weight / (2 / 10)\ncorn_weight = 5 * total_weight / 10\nans = corn_weight", "\nrice = 3\ntotal_weight = rice / (2 / 10)\ncorn = total_weight * 5 / 10\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\nwheat = 2 * rice / 3\ncorn = 5 * rice / 3\nans = corn", "\nrice = 3\ntotal_weight = rice / 2 + rice / 3 + rice / 5\ncorn = rice / 5 * total_weight\nans = corn", "\nrice = 3\nwheat = 3 * 2 / 3\ncorn = 3 * 5 / 3\nans = corn", "\nrice = Symbol('rice', positive=True)\nwheat = Symbol('wheat', positive=True)\ncorn = Symbol('corn', positive=True)\nsolution = solve_it([2 * rice + 3 * wheat + 5 * corn - 3, rice + wheat + corn - 1], [rice, wheat, corn])\nans = solution[corn]", "\nrice = 3\ncorn = 5 * rice / 2\nans = corn", "\nrice_ratio = 2\nwheat_ratio = 3\ncorn_ratio = 5\nrice_weight = 3\ntotal_weight = rice_weight / rice_ratio * (rice_ratio + wheat_ratio + corn_ratio)\ncorn_weight = total_weight / corn_ratio * corn_ratio\nans = corn_weight", "\nrice = 3\nwheat = 3 * 2 / 3\ncorn = 5 * 3 / 3\nans = corn", "\nrice = 3\ntotal_weight = rice / 2 + rice / 3 + rice / 5\ncorn = total_weight * 5 / 2\nans = corn", "\nrice = 3\nwheat = 3 * 2 / 3\ncorn = 5 * 3 / 3\nans = corn", "\nrice_weight = 3\ncorn_weight = Symbol('corn_weight', positive=True)\ntotal_weight = 2 + 3 + corn_weight\ncorn_weight = total_weight * 5 / 10\nans = corn_weight", "\nrice = 3\nratio_rice_wheat_corn = (2, 3, 5)\nratio_rice_wheat_corn_sum = sum(ratio_rice_wheat_corn)\nrice_in_ratio = rice * ratio_rice_wheat_corn_sum / ratio_rice_wheat_corn[0]\ncorn_in_ratio = rice_in_ratio * ratio_rice_wheat_corn[2] / ratio_rice_wheat_corn[0]\nans = corn_in_ratio", "\nrice = 3\nratio = (2, 3, 5)\ntotal_weight = sum(ratio)\ncorn_weight = rice * ratio[2] / ratio[0]\nans = corn_weight", "\nrice = 3\nratio = [2, 3, 5]\ntotal_weight = sum(ratio)\ncorn_weight = rice * ratio[2] / ratio[0]\nans = corn_weight"], "generated_prediction": "5.0", "options": ["A)6.5", "B)7.5", "C)7", "D)6", "E)None of the above"], "answer": "B", "prediction": "D"}
{"question": "You can purchase one soda and two energy bars for 150 cents, or two sodas and three energy bars for 300\ncents. If the costs of the items do not change, compute the cost in cents of six sodas and seven bars.", "generated": ["\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nsoda_cost = solution[soda_cost]\nbar_cost = solution[bar_cost]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda = Symbol('soda', positive=True)\nenergy_bar = Symbol('energy_bar', positive=True)\nsolution = solve_it([soda + 2 * energy_bar - 150, 2 * soda + 3 * energy_bar - 300], [soda, energy_bar])\nans = 6 * solution[soda] + 7 * solution[energy_bar]", "\nsoda_cost = Symbol('soda_cost', positive=True)\nenergy_bar_cost = Symbol('energy_bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * energy_bar_cost - 150, 2 * soda_cost + 3 * energy_bar_cost - 300], [soda_cost, energy_bar_cost])\nans = 6 * solution[soda_cost] + 7 * solution[energy_bar_cost]", "\nsoda_cost = Symbol('soda_cost', positive=True)\nenergy_bar_cost = Symbol('energy_bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * energy_bar_cost - 150, 2 * soda_cost + 3 * energy_bar_cost - 300], [soda_cost, energy_bar_cost])\nans = 6 * solution[soda_cost] + 7 * solution[energy_bar_cost]", "\nsoda_price = Symbol('soda_price', positive=True)\nbar_price = Symbol('bar_price', positive=True)\nsolution = solve_it([soda_price + 2 * bar_price - 150, 2 * soda_price + 3 * bar_price - 300], [soda_price, bar_price])\nsoda_price = solution[soda_price]\nbar_price = solution[bar_price]\nans = 6 * soda_price + 7 * bar_price", "\nsoda_price = Symbol('soda_price', positive=True)\nbar_price = Symbol('bar_price', positive=True)\nsolution = solve_it([soda_price + 2 * bar_price - 150, 2 * soda_price + 3 * bar_price - 300], [soda_price, bar_price])\nsoda_price = solution[soda_price]\nbar_price = solution[bar_price]\nans = 6 * soda_price + 7 * bar_price", "\nsoda_price = Symbol('soda_price', positive=True)\nbar_price = Symbol('bar_price', positive=True)\nsolution = solve_it([soda_price + 2 * bar_price - 150, 2 * soda_price + 3 * bar_price - 300], [soda_price, bar_price])\nsoda_price = solution[soda_price]\nbar_price = solution[bar_price]\nans = 6 * soda_price + 7 * bar_price", "\nsoda_price = Symbol('soda_price', positive=True)\nbar_price = Symbol('bar_price', positive=True)\nsolution = solve_it([soda_price + 2 * bar_price - 150, 2 * soda_price + 3 * bar_price - 300], [soda_price, bar_price])\nsoda_price = solution[soda_price]\nbar_price = solution[bar_price]\nans = 6 * soda_price + 7 * bar_price", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nans = 6 * solution[soda_cost] + 7 * solution[bar_cost]", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nans = 6 * solution[soda_cost] + 7 * solution[bar_cost]", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nans = 6 * solution[soda_cost] + 7 * solution[bar_cost]", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nans = 6 * solution[soda_cost] + 7 * solution[bar_cost]", "\nsoda = Symbol('soda', positive=True)\nbar = Symbol('bar', positive=True)\nsolution = solve_it([soda + 2 * bar - 150, 2 * soda + 3 * bar - 300], [soda, bar])\nsoda_cost = solution[soda]\nbar_cost = solution[bar]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda = Symbol('soda', positive=True)\nbar = Symbol('bar', positive=True)\nsolution = solve_it([soda + 2 * bar - 150, 2 * soda + 3 * bar - 300], [soda, bar])\nsoda_cost = solution[soda]\nbar_cost = solution[bar]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda = Symbol('soda', positive=True)\nbar = Symbol('bar', positive=True)\nsolution = solve_it([soda + 2 * bar - 150, 2 * soda + 3 * bar - 300], [soda, bar])\nsoda_cost = solution[soda]\nbar_cost = solution[bar]\nans = 6 * soda_cost + 7 * bar_cost", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nans = 6 * solution[soda_cost] + 7 * solution[bar_cost]", "\nsoda_cost = Symbol('soda_cost', positive=True)\nbar_cost = Symbol('bar_cost', positive=True)\nsolution = solve_it([soda_cost + 2 * bar_cost - 150, 2 * soda_cost + 3 * bar_cost - 300], [soda_cost, bar_cost])\nans = 6 * solution[soda_cost] + 7 * solution[bar_cost]", "\nsoda_price = Symbol('soda_price', positive=True)\nenergy_bar_price = Symbol('energy_bar_price', positive=True)\nsolution = solve_it([soda_price + 2 * energy_bar_price - 150, 2 * soda_price + 3 * energy_bar_price - 300], [soda_price, energy_bar_price])\nsoda_price = solution[soda_price]\nenergy_bar_price = solution[energy_bar_price]\nans = 6 * soda_price + 7 * energy_bar_price"], "generated_prediction": "None", "options": ["A)500", "B)600", "C)750", "D)800", "E)900"], "answer": "E", "prediction": "A"}
{"question": "A pen company produces very fine quality of writing pens. Company knows that on average 10% of the produced pens are always defective so are rejected before packing. Company promises to deliver 7200 pens to its wholesaler at Rs. 10 each. It estimates the overall profit on all the manufactured pens to be 25%. What is the manufactured cost of each pen?", "generated": ["\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens = 7200\nprofit_percentage = 25\nsolution = solve_it(cost_per_pen * (1 + profit_percentage / 100) - 10, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens = 7200\nprofit_percentage = 25\nsolution = solve_it(cost_per_pen * (1 + profit_percentage / 100) - 10, cost_per_pen)\nans = solution[cost_per_pen]", "\nnum_pens = 7200\ncost_per_pen = 10\nprofit = 0.25\nsolution = solve_it(num_pens * cost_per_pen * (1 + profit) - num_pens * cost_per_pen, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\ncost_of_all_pens = cost_per_pen * (1 - 0.1) * 7200\nprofit_of_all_pens = 0.25 * cost_of_all_pens\nsolution = solve_it(cost_of_all_pens + profit_of_all_pens - 7200 * 10, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\ntotal_cost = cost_per_pen * (1 - 0.1) * 7200\ntotal_revenue = 7200 * 10\nprofit = total_revenue - total_cost\nsolution = solve_it(profit / total_revenue - 0.25, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens = 7200\nprofit_percent = 25\nsolution = solve_it(cost_per_pen * (1 + profit_percent / 100) * (1 - 0.1) - 10, cost_per_pen)\nans = solution[cost_per_pen]", "\nprice = 10\nprofit = 0.25\ncost = price / (1 + profit)\ncost_of_good_pens = cost / (1 - 0.1)\nans = cost_of_good_pens", "\ntotal_cost = Symbol('total_cost', positive=True)\ntotal_profit = 0.25 * total_cost\ntotal_revenue = 7200 * 10\nsolution = solve_it(total_revenue - total_profit - total_cost, total_cost)\nans = solution[total_cost] / 7200", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens_sold = 7200\nnum_pens_produced = num_pens_sold / (1 - 0.1)\nprofit = 0.25 * num_pens_produced * cost_per_pen\nsolution = solve_it(profit - num_pens_sold * 10, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens = 7200\nrejected_pens = 0.1 * num_pens\nprofit_percentage = 25\nsolution = solve_it(cost_per_pen * (num_pens - rejected_pens) * (1 + profit_percentage / 100) - 10 * num_pens, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_of_pen = Symbol('cost_of_pen', positive=True)\nnum_pens_produced = 7200 / (1 - 0.1)\nprofit = 0.25 * num_pens_produced * 10\nans = simplify(profit / (num_pens_produced - 7200))", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nprofit = 0.25\nnum_pens = 7200\nnum_defective_pens = 0.1 * num_pens\nnum_good_pens = num_pens - num_defective_pens\ntotal_cost = num_good_pens * cost_per_pen\ntotal_revenue = num_good_pens * 10\nsolution = solve_it(total_revenue - total_cost - total_cost * profit, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens = 7200\nprofit_per_pen = 0.25 * cost_per_pen\nrevenue_per_pen = cost_per_pen + profit_per_pen\nsolution = solve_it(revenue_per_pen - 10, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nprofit_percentage = 25\nnum_pens = 7200\nnum_defective_pens = 0.1 * num_pens\nnum_good_pens = num_pens - num_defective_pens\ntotal_cost = num_good_pens * cost_per_pen\ntotal_profit = total_cost * profit_percentage / 100\ntotal_revenue = total_cost + total_profit\nsolution = solve_it(total_revenue - num_good_pens * 10, cost_per_pen)\nans = solution[cost_per_pen]", "\nnum_pens = 7200\ncost_per_pen = 10\nprofit_percentage = 25\nnum_defective_pens = 0.1 * num_pens\ncost_per_pen = cost_per_pen / (1 + profit_percentage / 100)\ncost_per_pen = (num_pens * cost_per_pen + num_defective_pens * cost_per_pen) / num_pens\nans = cost_per_pen", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens = 7200\nprofit_percentage = 0.25\nprofit = num_pens * cost_per_pen * profit_percentage\nrejected_pens = 0.1 * num_pens\nsolution = solve_it(profit + rejected_pens * cost_per_pen - num_pens * 10, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_of_pen = Symbol('cost_of_pen', positive=True)\nprofit_percentage = 25\nnum_pens_sold = 7200\nnum_pens_produced = num_pens_sold / (1 - 0.1)\nprofit = cost_of_pen * num_pens_produced * profit_percentage / 100\nsolution = solve_it(profit - num_pens_sold * 10, cost_of_pen)\nans = solution[cost_of_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens = 7200\nrevenue = num_pens * 10\nprofit = revenue * 0.25\nnum_defective_pens = num_pens * 0.1\nnum_good_pens = num_pens - num_defective_pens\ncost = num_good_pens * cost_per_pen\nsolution = solve_it(cost + profit - revenue, cost_per_pen)\nans = solution[cost_per_pen]", "\nnum_pens = 7200\nprofit_percentage = 25\ncost_per_pen = 10 / (1 + profit_percentage / 100)\ncost_per_pen_before_rejection = cost_per_pen / (1 - 10 / 100)\nans = cost_per_pen_before_rejection", "\ncost = Symbol('cost', positive=True)\nnum_pens = Symbol('num_pens', positive=True)\nnum_defective_pens = 0.1 * num_pens\nnum_good_pens = num_pens - num_defective_pens\nprofit = 0.25 * num_good_pens * cost\nsolution = solve_it(profit - 7200 * 10, cost)\nans = solution[cost]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens = 7200\nnum_defective_pens = 0.1 * num_pens\nnum_good_pens = num_pens - num_defective_pens\nprofit = num_good_pens * (10 - cost_per_pen)\nsolution = solve_it(profit - num_good_pens * cost_per_pen * 0.25, cost_per_pen)\nans = solution[cost_per_pen]", "\ndefective_percentage = 0.1\ncost_per_pen = 10\nprofit_percentage = 0.25\ntotal_pens = 7200\nmanufactured_pens = total_pens / (1 - defective_percentage)\nprofit = profit_percentage * manufactured_pens * cost_per_pen\ncost_per_pen = profit / (manufactured_pens * profit_percentage)\nans = cost_per_pen", "\ncost_of_pen = Symbol('cost_of_pen', positive=True)\nrevenue = 7200 * 10\nprofit = 0.25 * revenue\ncost_of_good_pens = (1 - 0.1) * 7200 * cost_of_pen\nsolution = solve_it(cost_of_good_pens + cost_of_pen - profit, cost_of_pen)\nans = solution[cost_of_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nnum_pens = 7200\nprofit_percentage = 25\nprofit = num_pens * cost_per_pen * profit_percentage / 100\ncost = num_pens * cost_per_pen - profit\nsolution = solve_it(cost - num_pens * 10, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nprofit_percentage = 25\nrejected_pens = 0.1\ntotal_pens = 7200\ntotal_cost = cost_per_pen * total_pens\ntotal_sales = total_cost * (1 + profit_percentage / 100)\nsolution = solve_it(total_sales - total_cost - 10 * (total_pens - rejected_pens), cost_per_pen)\nans = solution[cost_per_pen]", "\ncost = Symbol('cost', positive=True)\nprofit_percentage = 25\nnum_defective_pens = 0.1 * 7200\nnum_good_pens = 7200 - num_defective_pens\ncost_of_good_pens = cost * num_good_pens\nprofit = cost_of_good_pens * profit_percentage / 100\nsolution = solve_it(cost_of_good_pens + profit - 7200 * 10, cost)\nans = solution[cost]", "\ncost_of_one_pen = Symbol('cost_of_one_pen', positive=True)\nprofit_percentage = 25\nrejected_pens = 0.1\ndelivered_pens = 1 - rejected_pens\ndelivered_pens_cost = delivered_pens * cost_of_one_pen\nprofit = delivered_pens_cost * profit_percentage / 100\ndelivered_pens_cost_with_profit = delivered_pens_cost + profit\nsolution = solve_it(delivered_pens_cost_with_profit - 10, cost_of_one_pen)\nans = solution[cost_of_one_pen]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\ncost_per_pen_after_rejection = cost_per_pen * 0.9\nprofit_on_each_pen = cost_per_pen * 0.25\ntotal_cost_of_7200_pens = 7200 * cost_per_pen_after_rejection\ntotal_profit_on_7200_pens = 7200 * profit_on_each_pen\nsolution = solve_it(total_cost_of_7200_pens + total_profit_on_7200_pens - 7200 * 10, cost_per_pen)\nans = solution[cost_per_pen]", "\ncost = Symbol('cost', positive=True)\nprofit = 0.25\nrejected_pen_percentage = 0.1\nnum_pens = 7200\nrejected_pens = num_pens * rejected_pen_percentage\nnum_pens_to_be_sold = num_pens - rejected_pens\ntotal_cost = num_pens_to_be_sold * cost\ntotal_profit = num_pens_to_be_sold * cost * profit\nsolution = solve_it(total_profit - total_cost, cost)\nans = solution[cost]", "\ncost_per_pen = Symbol('cost_per_pen', positive=True)\nprofit_per_pen = Symbol('profit_per_pen', positive=True)\ncost_per_pen_sold = cost_per_pen + profit_per_pen\ncost_per_pen_rejected = cost_per_pen\ncost_per_pen_sold_to_wholesaler = 10\ncost_per_pen_rejected_to_wholesaler = 0\nsolution = solve_it([cost_per_pen_sold - cost_per_pen_sold_to_wholesaler, cost_per_pen_rejected - cost_per_pen_rejected_to_wholesaler], [cost_per_pen, profit_per_pen])\nans = solution[cost_per_pen]"], "generated_prediction": "8.0", "options": ["A)Rs. 6", "B)Rs. 7.2", "C)Rs. 5.6", "D)Rs. 8", "E)None of these"], "answer": "B", "prediction": "D"}
{"question": "A two digit number exceeds the sum of the digits of that number by 18. If the digit at the unit's place is double the digit in the ten's place, what is the number?", "generated": ["\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nsolution = solve_it([unit_digit + ten_digit - 18, unit_digit - 2 * ten_digit], [unit_digit, ten_digit])\nans = solution[ten_digit] * 10 + solution[unit_digit]", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nsolution = solve_it([unit_digit + ten_digit - 18, unit_digit - 2 * ten_digit], [unit_digit, ten_digit])\nans = solution[ten_digit] * 10 + solution[unit_digit]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number - (number // 10 + number % 10) - 18, number)\nans = solution[number]", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nsolution = solve_it([unit_digit + ten_digit - 18, unit_digit - 2 * ten_digit], [unit_digit, ten_digit])\nans = solution[ten_digit] * 10 + solution[unit_digit]", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nsolution = solve_it([unit_digit + ten_digit - 18, unit_digit - 2 * ten_digit], [unit_digit, ten_digit])\nans = solution[unit_digit] * 10 + solution[ten_digit]", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nsolution = solve_it([unit_digit + ten_digit - 18, unit_digit - 2 * ten_digit], [unit_digit, ten_digit])\nans = solution[unit_digit] * 10 + solution[ten_digit]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - (num // 10 + num % 10) - 18, num)\nans = solution[num]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - (num // 10 + num % 10) - 18, num)\nans = solution[num]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - (num // 10 + num % 10) - 18, num)\nans = solution[num]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - (num // 10 + num % 10) - 18, num)\nans = solution[num]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num - (num // 10 + num % 10) - 18, num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\ntens_digit = number // 10\nunits_digit = number % 10\nsolution = solve_it(number - (tens_digit + units_digit) - 18, number)\nans = solution[number]", "\nunits_digit = Symbol('units_digit', positive=True)\ntens_digit = Symbol('tens_digit', positive=True)\nsolution = solve_it([units_digit + tens_digit + 18 - (10 * tens_digit + units_digit), units_digit - 2 * tens_digit], [units_digit, tens_digit])\nans = 10 * solution[tens_digit] + solution[units_digit]", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nnumber = 10 * ten_digit + unit_digit\nsolution = solve_it([number - (ten_digit + unit_digit) - 18, unit_digit - 2 * ten_digit], [ten_digit, unit_digit])\nans = 10 * solution[ten_digit] + solution[unit_digit]", "\ntens_digit = Symbol('tens_digit', positive=True)\nunits_digit = Symbol('units_digit', positive=True)\nsolution = solve_it([tens_digit + units_digit + 18 - tens_digit * 10 - units_digit, units_digit - 2 * tens_digit], [tens_digit, units_digit])\nans = solution[tens_digit] * 10 + solution[units_digit]", "\nnumber = Symbol('number', positive=True)\nunit_digit = number % 10\nten_digit = number // 10\nsolution = solve_it(number - (unit_digit + ten_digit) - 18, number)\nans = solution[number]", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nsolution = solve_it([unit_digit + ten_digit - (unit_digit + ten_digit + 18), unit_digit - 2 * ten_digit], [unit_digit, ten_digit])\nans = int(str(solution[ten_digit]) + str(solution[unit_digit]))", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nsolution = solve_it([unit_digit + ten_digit - (unit_digit + ten_digit + 18), unit_digit - 2 * ten_digit], [unit_digit, ten_digit])\nans = solution[unit_digit] * 10 + solution[ten_digit]", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nnumber = 10 * ten_digit + unit_digit\nsolution = solve_it([number - (ten_digit + unit_digit) - 18, unit_digit - 2 * ten_digit], [unit_digit, ten_digit])\nans = solution[ten_digit] * 10 + solution[unit_digit]", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nsolution = solve_it([(ten_digit + unit_digit) - (10 * ten_digit + unit_digit) + 18, unit_digit - 2 * ten_digit], [ten_digit, unit_digit])\nans = 10 * solution[ten_digit] + solution[unit_digit]", "\ndigit_1 = Symbol('digit_1', positive=True)\ndigit_2 = Symbol('digit_2', positive=True)\nnumber = 10 * digit_1 + digit_2\nsolution = solve_it([number - 18 - (digit_1 + digit_2), digit_1 - 2 * digit_2], [digit_1, digit_2])\nans = 10 * solution[digit_1] + solution[digit_2]", "\nnumber = Symbol('number', positive=True)\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nsolution = solve_it([number - unit_digit - ten_digit - 18, unit_digit - 2 * ten_digit], [number, unit_digit, ten_digit])\nans = solution[number]", "\ntens = Symbol('tens', positive=True)\nunits = Symbol('units', positive=True)\nsolution = solve_it([10 * tens + units - (tens + units), units - 2 * tens - 18], [tens, units])\nans = 10 * solution[tens] + solution[units]", "\nunit_digit = Symbol('unit_digit', positive=True)\nten_digit = Symbol('ten_digit', positive=True)\nnumber = ten_digit * 10 + unit_digit\nexcess = 18\nsolution = solve_it([number - (ten_digit + unit_digit) - excess, unit_digit - 2 * ten_digit], [unit_digit, ten_digit])\nans = solution[unit_digit] * 10 + solution[ten_digit]", "\nnumber = Symbol('number', positive=True)\nsum_of_digits = Symbol('sum_of_digits', positive=True)\nsolution = solve_it([number - sum_of_digits - 18, number % 10 - 2 * (number // 10)], [number, sum_of_digits])\nans = solution[number]", "\nunits_digit = Symbol('units_digit', positive=True)\ntens_digit = Symbol('tens_digit', positive=True)\nsolution = solve_it([units_digit + tens_digit - 18, units_digit - 2 * tens_digit], [units_digit, tens_digit])\nans = solution[units_digit] * 10 + solution[tens_digit]", "\nnum = Symbol('num', positive=True)\ndigit_1 = Symbol('digit_1', positive=True)\ndigit_2 = Symbol('digit_2', positive=True)\nsolution = solve_it([num - digit_1 - digit_2 - 18, digit_1 - 2 * digit_2], [num, digit_1, digit_2])\nans = solution[num]", "\nunit_digit = Symbol('unit_digit', positive=True)\ntens_digit = Symbol('tens_digit', positive=True)\nsolution = solve_it([unit_digit + tens_digit - (unit_digit + tens_digit + 18), unit_digit - 2 * tens_digit], [unit_digit, tens_digit])\nans = solution[unit_digit] * 10 + solution[tens_digit]", "\nunit_digit = Symbol('unit_digit', positive=True)\ntens_digit = Symbol('tens_digit', positive=True)\nnumber = 10 * tens_digit + unit_digit\nsolution = solve_it([number - (unit_digit + tens_digit) - 18, unit_digit - 2 * tens_digit], [unit_digit, tens_digit])\nans = solution[unit_digit] * 10 + solution[tens_digit]", "\nnumber = Symbol('number', positive=True)\nnumber_string = str(number)\nnumber_string_list = list(number_string)\nnumber_sum = sum([int(digit) for digit in number_string_list])\nnumber_sum_plus_18 = number_sum + 18\nsolution = solve_it(number - number_sum_plus_18, number)\nans = solution[number]"], "generated_prediction": "24.0", "options": ["A)12", "B)24", "C)42", "D)48", "E)49"], "answer": "B", "prediction": "B"}
{"question": "Suppose for any real number x, [x] denotes the greatest integer less than or equal to x. Let L(x,y) = [x] + [y] + [x + y] and R(x,y) = [2x] + [2y]. Then it is impossible to find any two positive real numbers x and y for which", "generated": ["\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = simplify(L - R)", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = simplify(L - R)", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(2 * x) + 2 * math.floor(2 * y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(2 * x) + 2 * math.floor(2 * y)\nans = L - R", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(2 * x) + 2 * math.floor(2 * y)\nans = 'B)L(x,y) \u2260 R(x,y)'", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = 'L(x,y) \u2260 R(x,y)'", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = math.floor(2 * x) + math.floor(2 * y)\nsolution = solve_it(L - R, [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = L == R", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = math.floor(2 * x) + math.floor(2 * y)\nans = L - R", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = L == R", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = math.floor(2 * x) + math.floor(2 * y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = 'B)L(x,y) \u2260 R(x,y)'", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = 'B)L(x,y) \u2260 R(x,y)'", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = 'B)L(x,y) \u2260 R(x,y)'", "\nx = Symbol('x')\ny = Symbol('y')\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L - R, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = 'B)L(x,y) \u2260 R(x,y)'", "\nx = Symbol('x')\ny = Symbol('y')\nL = math.floor(x) + math.floor(y) + math.floor(x + y)\nR = 2 * math.floor(x) + 2 * math.floor(y)\nans = 'B)L(x,y) \u2260 R(x,y)'", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nL_x_y = math.floor(x) + math.floor(y) + math.floor(x + y)\nR_x_y = 2 * math.floor(x) + 2 * math.floor(y)\nsolution = solve_it(L_x_y - R_x_y, [x, y])\nans = 'B)L(x,y) \u2260 R(x,y)'"], "generated_prediction": "None", "options": ["A)L(x,y) = R(x,y)", "B)L(x,y) \u2260 R(x,y)", "C)L(x,y) < R(x,y)", "D)L(x,y) < R(x,y)", "E)None"], "answer": "D", "prediction": "A"}
{"question": "Three bells ring at intervals of 36 seconds, 40 seconds and 48 seconds, respectively. They start ringing together at a particular time. When they will ring together again?", "generated": ["\nbell1 = 36\nbell2 = 40\nbell3 = 48\nlcm = math.lcm(bell1, math.lcm(bell2, bell3))\nans = lcm / 60", "\nbell1 = 36\nbell2 = 40\nbell3 = 48\nlcm = math.lcm(bell1, math.lcm(bell2, bell3))\nans = lcm / 60", "\nbell_1 = 36\nbell_2 = 40\nbell_3 = 48\nlcm = math.lcm(bell_1, math.lcm(bell_2, bell_3))\nans = lcm / 60", "\nbell_1 = 36\nbell_2 = 40\nbell_3 = 48\nlcm = math.lcm(bell_1, math.lcm(bell_2, bell_3))\nans = lcm / 60", "\nbell1 = 36\nbell2 = 40\nbell3 = 48\nans = math.gcd(math.gcd(bell1, bell2), bell3)", "\nbell_1 = 36\nbell_2 = 40\nbell_3 = 48\nlcm = math.lcm(math.lcm(bell_1, bell_2), bell_3)\nans = lcm / 60", "\nbell1 = 36\nbell2 = 40\nbell3 = 48\nlcm = math.lcm(bell1, math.lcm(bell2, bell3))\nans = lcm", "\nbell_1 = 36\nbell_2 = 40\nbell_3 = 48\nlcm = math.lcm(bell_1, bell_2, bell_3)\nans = lcm / 60", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(bell_1_interval, math.lcm(bell_2_interval, bell_3_interval))\nans = lcm / 60", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(bell_1_interval, math.lcm(bell_2_interval, bell_3_interval))\nans = lcm / 60", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(math.lcm(bell_1_interval, bell_2_interval), bell_3_interval)\nans = lcm / 60", "\nbell_1 = Symbol('bell_1', positive=True)\nbell_2 = Symbol('bell_2', positive=True)\nbell_3 = Symbol('bell_3', positive=True)\nsolution = solve_it([bell_1 - 36, bell_2 - 40, bell_3 - 48], [bell_1, bell_2, bell_3])\nans = max(solution[bell_1], solution[bell_2], solution[bell_3])", "\nbell1_interval = 36\nbell2_interval = 40\nbell3_interval = 48\nlcm = math.lcm(bell1_interval, bell2_interval, bell3_interval)\nans = lcm / 60", "\nbell_a = 36\nbell_b = 40\nbell_c = 48\nans = math.gcd(bell_a, math.gcd(bell_b, bell_c))", "\nbell_36 = 36\nbell_40 = 40\nbell_48 = 48\nans = math.lcm(bell_36, bell_40, bell_48)", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.gcd(bell_1_interval, bell_2_interval)\nlcm = math.gcd(lcm, bell_3_interval)\nans = lcm", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(bell_1_interval, bell_2_interval, bell_3_interval)\nans = lcm / 60", "\nbells = [36, 40, 48]\ntime = 0\nwhile True:\n    if time % 36 == 0 and time % 40 == 0 and time % 48 == 0:\n        ans = time\n        break\n    time += 1", "\nbell1 = Symbol('bell1', positive=True)\nbell2 = Symbol('bell2', positive=True)\nbell3 = Symbol('bell3', positive=True)\nsolution = solve_it([bell1 - 36, bell2 - 40, bell3 - 48], [bell1, bell2, bell3])\nans = solution[bell1]", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(bell_1_interval, bell_2_interval, bell_3_interval)\nans = lcm / 60", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(bell_1_interval, bell_2_interval, bell_3_interval)\nans = lcm / 60", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(bell_1_interval, bell_2_interval, bell_3_interval)\nans = lcm / 60", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(bell_1_interval, bell_2_interval, bell_3_interval)\nans = lcm / 60", "\nbell1 = 36\nbell2 = 40\nbell3 = 48\nans = lcm(bell1, bell2, bell3) / 60", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\ntime_to_ring_together = math.lcm(bell_1_interval, bell_2_interval, bell_3_interval)\nans = time_to_ring_together / 60", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(bell_1_interval, bell_2_interval, bell_3_interval)\nans = lcm / 60", "\nbell_1 = 36\nbell_2 = 40\nbell_3 = 48\nlcm = math.gcd(bell_1, bell_2)\nlcm = math.gcd(lcm, bell_3)\nans = lcm", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\nlcm = math.lcm(bell_1_interval, bell_2_interval, bell_3_interval)\nans = lcm / 60", "\nbell_1_interval = 36\nbell_2_interval = 40\nbell_3_interval = 48\ninterval_in_seconds = bell_1_interval * bell_2_interval * bell_3_interval\ninterval_in_minutes = interval_in_seconds / 60\nans = interval_in_minutes", "\nfirst_bell_interval = 36\nsecond_bell_interval = 40\nthird_bell_interval = 48\ntime_to_wait = lcm(first_bell_interval, lcm(second_bell_interval, third_bell_interval))\nans = time_to_wait / 60"], "generated_prediction": "12.0", "options": ["A)After 6 minutes", "B)After 12 minutes", "C)After 18 minutes", "D)After 24 minutes", "E)none"], "answer": "B", "prediction": "B"}
{"question": "An electric pole, 14 metres high, casts a shadow of 10 metres. Find the height of a tree that casts a shadow of 15 metres under similar conditions.", "generated": ["\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = (tree_shadow * pole_height) / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = (tree_shadow * pole_height) / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = (tree_shadow * pole_height) / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = (pole_height * tree_shadow) / pole_shadow\nans = tree_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = (pole_height * tree_shadow) / pole_shadow\nans = tree_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = (tree_shadow / pole_shadow) * pole_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = (tree_shadow / pole_shadow) * pole_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = (tree_shadow * pole_height) / pole_shadow", "\ntree_height = Symbol('tree_height', positive=True)\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nsolution = solve_it(pole_height / pole_shadow - tree_height / tree_shadow, tree_height)\nans = solution[tree_height]", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = (tree_shadow * pole_height) / pole_shadow", "\ntree_height = Symbol('tree_height', positive=True)\npole_height = 14\npole_shadow = 10\nsolution = solve_it(tree_height * pole_shadow / pole_height - 15, tree_height)\nans = solution[tree_height]", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = (tree_shadow * pole_height) / pole_shadow\nans = tree_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = (tree_shadow * pole_height) / pole_shadow\nans = tree_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = (pole_height * tree_shadow) / pole_shadow\nans = tree_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = tree_shadow * pole_height / pole_shadow", "\nheight = Symbol('height', positive=True)\nshadow = Symbol('shadow', positive=True)\npole_height = 14\npole_shadow = 10\nsolution = solve_it([height / pole_height - shadow / pole_shadow, shadow - 15], [height, shadow])\nans = solution[height]", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = pole_height * tree_shadow / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = pole_height * tree_shadow / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = pole_height * tree_shadow / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = pole_height * tree_shadow / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = pole_height * tree_shadow / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = pole_height * tree_shadow / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = tree_shadow * pole_height / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = pole_height * tree_shadow / pole_shadow\nans = tree_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = pole_height * tree_shadow / pole_shadow\nans = tree_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = pole_height * tree_shadow / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = pole_height * tree_shadow / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\nans = tree_shadow * pole_height / pole_shadow", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = pole_height * tree_shadow / pole_shadow\nans = tree_height", "\npole_height = 14\npole_shadow = 10\ntree_shadow = 15\ntree_height = pole_height * tree_shadow / pole_shadow\nans = tree_height"], "generated_prediction": "21.0", "options": ["A)21", "B)22", "C)20", "D)23", "E)24"], "answer": "A", "prediction": "A"}
{"question": "At my favorite fruit stand, an orange costs 18 dollars, a pineapple costs 27 dollars, and a grape costs 15 dollars. Using the same logic, can you tell how much a mango costs?", "generated": ["\norange = 18\npineapple = 27\ngrape = 15\nmango = orange + pineapple - grape\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple) / 2\nans = mango", "\ncost_of_orange = 18\ncost_of_pineapple = 27\ncost_of_grape = 15\ncost_of_mango = cost_of_orange + cost_of_pineapple - cost_of_grape\nans = cost_of_mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange_cost = 18\npineapple_cost = 27\ngrape_cost = 15\nmango_cost = (orange_cost + pineapple_cost + grape_cost) / 3\nans = mango_cost", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange_cost = 18\npineapple_cost = 27\ngrape_cost = 15\nmango_cost = (orange_cost + pineapple_cost + grape_cost) / 3\nans = mango_cost", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange_cost = 18\npineapple_cost = 27\ngrape_cost = 15\nmango_cost = (orange_cost + pineapple_cost + grape_cost) / 3\nans = mango_cost", "\norange_cost = 18\npineapple_cost = 27\ngrape_cost = 15\nmango_cost = (orange_cost + pineapple_cost + grape_cost) / 3\nans = mango_cost", "\norange = Symbol('orange', positive=True)\npineapple = Symbol('pineapple', positive=True)\ngrape = Symbol('grape', positive=True)\nmango = Symbol('mango', positive=True)\nsolution = solve_it([orange + pineapple + grape + mango - 60, orange - 18, pineapple - 27, grape - 15], [orange, pineapple, grape, mango])\nans = solution[mango]", "\norange_cost = 18\npineapple_cost = 27\ngrape_cost = 15\nmango_cost = (orange_cost + pineapple_cost - grape_cost) / 2\nans = mango_cost", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple + grape) / 3\nans = mango", "\norange = 18\npineapple = 27\ngrape = 15\nmango = (orange + pineapple) / 2 - grape\nans = mango"], "generated_prediction": "20.0", "options": ["A)22 dollars", "B)15 dollars", "C)20 dollars", "D)18 dollars", "E)10 dollars"], "answer": "B", "prediction": "C"}
{"question": "In the coordinate plane, a triangle has vertices at (a,0), (b,0), and (x,y). If a>x>b>0>y, which of the following represents the area of that triangle?", "generated": ["\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = simplify((a * y - b * y) / 2)", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = simplify((a * y - b * y) / 2)", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = (a * y - b * y) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = (a * y - b * y) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = (a * y - b * y) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = (a * y - b * y) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = (a * y - b * y) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = (a * y - b * y) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = (a * y - b * y) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = (a * y - b * y) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nans = (a * y - b * y) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\narea = (a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([a - x, x - b, b - y], [a, b, x, y])\nans = (solution[a] * solution[y] - solution[b] * solution[y]) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nsolution = solve_it([a - x, x - b, b - y], [a, b, x, y])\nans = (solution[a] * solution[y] - solution[b] * solution[y]) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nsolution = solve_it([a - x, x - b, b - y], [a, b, x, y])\nans = (solution[a] * solution[y] - solution[b] * solution[y]) / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([a - x, b - x, x - y], [a, b, x, y])\nans = (solution[a] - solution[b]) * solution[y] / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([a - x, x - b, b - y, a - y], [a, b, x, y])\nans = (solution[a] - solution[b]) * solution[y] / 2", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\narea = abs(a * y - b * y) / 2\nans = area", "\na = Symbol('a', positive=True)\nb = Symbol('b', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', negative=True)\nsolution = solve_it([a - b, a - x, x - b, x - y], [a, b, x, y])\nans = (solution[a] * solution[y] - solution[b] * solution[y]) / 2"], "generated_prediction": "a*y/2 - b*y/2", "options": ["A)(ay\u2212by)/2", "B)(ab\u2212ay)/2", "C)(by\u2212ay)/2", "D)(ay+by)/x", "E)(a\u2212b)/2y"], "answer": "C", "prediction": "C"}
{"question": "A car finishes a journey in 20 hours at the speed of 60 km/hr. If the same distance is to be covered in 10 hours, how much speed does the car gain?", "generated": ["\noriginal_speed = 60\noriginal_time = 20\nnew_time = 10\nnew_speed = original_speed * new_time / original_time\nans = new_speed - original_speed", "\noriginal_speed = 60\nnew_speed = Symbol('new_speed', positive=True)\nsolution = solve_it(new_speed * 10 - original_speed * 20, new_speed)\nans = solution[new_speed]", "\ndistance = Symbol('distance', positive=True)\noriginal_speed = 60\noriginal_time = 20\nnew_speed = Symbol('new_speed', positive=True)\nnew_time = 10\nsolution = solve_it([distance / original_speed - original_time, distance / new_speed - new_time], [new_speed])\nans = solution[new_speed]", "\ndistance = Symbol('distance', positive=True)\noriginal_speed = 60\noriginal_time = 20\nnew_speed = Symbol('new_speed', positive=True)\nnew_time = 10\nsolution = solve_it([distance / original_speed - original_time, distance / new_speed - new_time], [new_speed])\nans = solution[new_speed]", "\noriginal_speed = 60\noriginal_time = 20\nnew_time = 10\nsolution = solve_it(original_speed * original_time - new_time * (original_speed + new_speed), new_speed)\nans = solution[new_speed]", "\noriginal_speed = 60\ntime_taken = 20\nnew_time_taken = 10\nnew_speed = original_speed * new_time_taken / time_taken\nans = new_speed - original_speed", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = 20\nnew_time = 10\nsolution = solve_it([speed * time - distance, speed * new_time - distance], [speed, distance])\nans = solution[speed] - 60", "\ndistance = Symbol('distance', positive=True)\nspeed = 60\ntime = 20\nnew_speed = distance / 10\nsolution = solve_it(new_speed - speed, distance)\nans = solution[distance]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([distance / (time + 10) - speed, distance / time - 60], [distance, speed])\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\nsolution = solve_it([speed * time - distance, original_speed * original_time - distance], [speed, distance])\nans = solution[speed] - original_speed", "\nspeed_gain = Symbol('speed_gain', positive=True)\ndistance = Symbol('distance', positive=True)\noriginal_speed = 60\noriginal_time = 20\nnew_speed = original_speed + speed_gain\nnew_time = 10\nsolution = solve_it([distance / original_speed - original_time, distance / new_speed - new_time], [distance, speed_gain])\nans = solution[speed_gain]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([speed * time - distance, speed + 60 - distance / 20], [speed, distance])\nans = solution[speed]", "\nspeed_gain = Symbol('speed_gain', positive=True)\ndistance = Symbol('distance', positive=True)\noriginal_speed = 60\nnew_speed = original_speed + speed_gain\noriginal_time = 20\nnew_time = 10\nsolution = solve_it([distance / original_speed - original_time, distance / new_speed - new_time], [speed_gain, distance])\nans = solution[speed_gain]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\nsolution = solve_it([speed * time - distance, speed - original_speed, time - original_time], [speed, distance, time])\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\nsolution = solve_it([speed * time - distance, speed - original_speed, time - original_time], [speed, distance, time])\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\nsolution = solve_it([speed * time - distance, speed - original_speed, time - original_time], [speed, distance, time])\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\nsolution = solve_it([speed * time - distance, speed - original_speed, time - original_time], [speed, distance, time])\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\nsolution = solve_it([speed * time - distance, speed - original_speed, time - original_time], [speed, distance, time])\nans = solution[speed]", "\noriginal_speed = 60\noriginal_time = 20\nnew_time = 10\nnew_speed = original_speed * new_time / original_time\nans = new_speed", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\nsolution = solve_it([speed * time - distance, speed - original_speed, time - original_time], [speed, distance, time])\nans = solution[speed]", "\nspeed_gain = Symbol('speed_gain', positive=True)\noriginal_speed = 60\nnew_speed = original_speed + speed_gain\nnew_time = 10\nsolution = solve_it(new_speed * new_time - original_speed * 20, speed_gain)\nans = solution[speed_gain]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\nsolution = solve_it([speed * time - distance, original_speed * original_time - distance, time - 10], [speed, distance, time])\nans = solution[speed] - original_speed", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\nsolution = solve_it([speed * time - distance, original_speed * original_time - distance, time - 10], [speed, distance, time])\nans = solution[speed] - original_speed", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = 20\nspeed_gain = speed - 60\nsolution = solve_it(speed_gain * time - distance, speed)\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\noriginal_speed = 60\ntime_to_cover_distance = 20\nsolution = solve_it([speed * time_to_cover_distance - distance, speed - original_speed], [speed, distance])\nans = solution[speed]", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = 20\ntime_to_cover_distance = 10\nsolution = solve_it([speed * time - distance, speed * time_to_cover_distance - distance], [speed, distance])\nans = solution[speed]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([distance / speed - 20, distance / (speed + 50) - 10], [distance, speed])\nans = solution[speed] + 50", "\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\ndistance = Symbol('distance', positive=True)\nsolution = solve_it([speed * time - distance, speed + 60 - 80], [speed, distance])\nans = solution[speed]", "\ndistance = Symbol('distance', positive=True)\nspeed = Symbol('speed', positive=True)\ntime = Symbol('time', positive=True)\nsolution = solve_it([distance / speed - 20, distance / (speed + 50) - 10], [distance, speed])\nans = solution[speed] + 50", "\nspeed = Symbol('speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntime = Symbol('time', positive=True)\noriginal_speed = 60\noriginal_time = 20\noriginal_distance = original_speed * original_time\nsolution = solve_it([distance - original_distance, time - 10, speed - original_speed], [speed, distance, time])\nans = solution[speed] - original_speed"], "generated_prediction": "60.0", "options": ["A)80 kmph", "B)50 kmph", "C)120 kmph", "D)70 kmph", "E)80 kmph"], "answer": "C", "prediction": "A"}
{"question": "Three friends Alan, Roger and Peter attempt to answer a question on an exam. Alan randomly guesses the answer, giving him a 1/5 probability of guessing correctly. Roger cheats by looking at the paper of the student in front of him, giving him a 2/3 probability of answering correctly. And Peter dutifully performs the calculations, then marks the answer, giving him a 5/6 probability of a correct answer. What is the probability that the question is answered correctly, but not via cheating?", "generated": ["\nprobability_of_correct_answer = (1/5 + 2/3 + 5/6) - (1/5 + 2/3)\nans = probability_of_correct_answer", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_correct_not_cheating = prob_peter_correct - prob_roger_correct\nans = prob_correct_not_cheating", "\ncorrect_answer_probability = 1 / 5 + 2 / 3 + 5 / 6 - 1\nans = correct_answer_probability", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_alan_correct_and_not_cheating = prob_alan_correct * (1 - prob_roger_correct) * (1 - prob_peter_correct)\nprob_roger_correct_and_not_cheating = prob_roger_correct * (1 - prob_alan_correct) * (1 - prob_peter_correct)\nprob_peter_correct_and_not_cheating = prob_peter_correct * (1 - prob_alan_correct) * (1 - prob_roger_correct)\nans = prob_alan_correct_and_not_cheating + prob_roger_correct_and_not_cheating + prob_peter_correct_and_not_cheating", "\ncorrect_answer_probability = 1 / 5 + 2 / 3 + 5 / 6 - 1\nans = correct_answer_probability", "\np_alan_correct = 1 / 5\np_roger_correct = 2 / 3\np_peter_correct = 5 / 6\np_correct = p_alan_correct + p_roger_correct + p_peter_correct - p_alan_correct * p_roger_correct - p_alan_correct * p_peter_correct - p_roger_correct * p_peter_correct\np_not_cheating = p_alan_correct + p_peter_correct - p_alan_correct * p_peter_correct\nans = p_not_cheating / p_correct", "\np_alan = 1/5\np_roger = 2/3\np_peter = 5/6\np_correct_answer = p_alan + p_roger + p_peter - p_alan * p_roger - p_alan * p_peter - p_roger * p_peter + p_alan * p_roger * p_peter\np_correct_answer_without_cheating = p_correct_answer - p_roger\nans = p_correct_answer_without_cheating", "\nprob_alan = 1 / 5\nprob_roger = 2 / 3\nprob_peter = 5 / 6\nprob_correct_answer = prob_alan + prob_roger + prob_peter - prob_alan * prob_roger - prob_alan * prob_peter - prob_roger * prob_peter\nprob_correct_answer_without_cheating = prob_correct_answer - prob_roger\nans = prob_correct_answer_without_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_correct_answer = prob_alan_correct + prob_roger_correct + prob_peter_correct - prob_alan_correct * prob_roger_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct\nprob_correct_answer_not_cheating = prob_correct_answer - prob_roger_correct\nans = prob_correct_answer_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_correct = prob_alan_correct + prob_roger_correct + prob_peter_correct - prob_alan_correct * prob_roger_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct\nprob_not_cheating = prob_correct - prob_alan_correct - prob_roger_correct\nans = prob_not_cheating", "\nprobability_alan_guessing_correctly = 1 / 5\nprobability_roger_guessing_correctly = 2 / 3\nprobability_peter_guessing_correctly = 5 / 6\nprobability_alan_guessing_correctly_and_not_cheating = probability_alan_guessing_correctly * (1 - probability_roger_guessing_correctly) * (1 - probability_peter_guessing_correctly)\nprobability_roger_guessing_correctly_and_not_cheating = probability_roger_guessing_correctly * (1 - probability_alan_guessing_correctly) * (1 - probability_peter_guessing_correctly)\nprobability_peter_guessing_correctly_and_not_cheating = probability_peter_guessing_correctly * (1 - probability_alan_guessing_correctly) * (1 - probability_roger_guessing_correctly)\nans = probability_alan_guessing_correctly_and_not_cheating + probability_roger_guessing", "\nans = 1 / 3 * (1 / 5 + 1 / 6)", "\ncorrect_answer_probability = 1/5 + 2/3 + 5/6 - 1\nans = correct_answer_probability", "\nprob_alan = 1/5\nprob_roger = 2/3\nprob_peter = 5/6\nprob_correct_answer = prob_alan + prob_roger + prob_peter - prob_alan * prob_roger - prob_alan * prob_peter - prob_roger * prob_peter\nprob_correct_answer_not_cheating = prob_correct_answer - prob_roger\nans = prob_correct_answer_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_correct = prob_alan_correct + prob_roger_correct + prob_peter_correct - prob_alan_correct * prob_roger_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct + prob_alan_correct * prob_roger_correct * prob_peter_correct\nprob_correct_and_not_cheating = prob_peter_correct - prob_peter_correct * prob_roger_correct - prob_peter_correct * prob_alan_correct + prob_peter_correct * prob_roger_correct * prob_alan_correct\nans = prob_correct_and_not_cheating / prob_correct", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_cheating = prob_alan_correct + prob_roger_correct\nprob_not_cheating = prob_peter_correct\nprob_correct = prob_cheating * prob_not_cheating + prob_not_cheating * prob_not_cheating\nans = prob_correct", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_cheating_correct = prob_roger_correct + prob_peter_correct\nprob_not_cheating_correct = prob_alan_correct\nprob_correct_not_cheating = prob_not_cheating_correct / (prob_not_cheating_correct + prob_cheating_correct)\nans = prob_correct_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_alan_correct_and_not_cheating = prob_alan_correct\nprob_roger_correct_and_not_cheating = 0\nprob_peter_correct_and_not_cheating = prob_peter_correct\nprob_correct_and_not_cheating = prob_alan_correct_and_not_cheating + prob_roger_correct_and_not_cheating + prob_peter_correct_and_not_cheating\nans = prob_correct_and_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_alan_correct_and_not_cheating = prob_alan_correct\nprob_roger_correct_and_not_cheating = 0\nprob_peter_correct_and_not_cheating = prob_peter_correct\nprob_correct_and_not_cheating = prob_alan_correct_and_not_cheating + prob_roger_correct_and_not_cheating + prob_peter_correct_and_not_cheating\nans = prob_correct_and_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_alan_correct_and_not_cheating = prob_alan_correct\nprob_roger_correct_and_not_cheating = 0\nprob_peter_correct_and_not_cheating = prob_peter_correct\nprob_correct_and_not_cheating = prob_alan_correct_and_not_cheating + prob_roger_correct_and_not_cheating + prob_peter_correct_and_not_cheating\nans = prob_correct_and_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_alan_correct_and_not_cheating = prob_alan_correct\nprob_roger_correct_and_not_cheating = 0\nprob_peter_correct_and_not_cheating = prob_peter_correct\nprob_correct_and_not_cheating = prob_alan_correct_and_not_cheating + prob_roger_correct_and_not_cheating + prob_peter_correct_and_not_cheating\nans = prob_correct_and_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_alan_correct_and_not_cheating = prob_alan_correct\nprob_roger_correct_and_not_cheating = 0\nprob_peter_correct_and_not_cheating = prob_peter_correct\nprob_correct_and_not_cheating = prob_alan_correct_and_not_cheating + prob_roger_correct_and_not_cheating + prob_peter_correct_and_not_cheating\nans = prob_correct_and_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_alan_correct_and_not_cheating = prob_alan_correct\nprob_roger_correct_and_not_cheating = 0\nprob_peter_correct_and_not_cheating = prob_peter_correct\nprob_correct_and_not_cheating = prob_alan_correct_and_not_cheating + prob_roger_correct_and_not_cheating + prob_peter_correct_and_not_cheating\nans = prob_correct_and_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_cheating = prob_roger_correct + prob_peter_correct\nprob_not_cheating = 1 - prob_cheating\nprob_correct_not_cheating = prob_alan_correct * prob_not_cheating\nans = prob_correct_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_alan_correct_and_not_cheating = prob_alan_correct\nprob_roger_correct_and_not_cheating = 0\nprob_peter_correct_and_not_cheating = prob_peter_correct\nprob_correct_and_not_cheating = prob_alan_correct_and_not_cheating + prob_roger_correct_and_not_cheating + prob_peter_correct_and_not_cheating\nans = prob_correct_and_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_correct = prob_alan_correct + prob_roger_correct + prob_peter_correct - prob_alan_correct * prob_roger_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct + prob_alan_correct * prob_roger_correct * prob_peter_correct\nprob_correct_but_not_cheating = prob_correct - prob_roger_correct - prob_peter_correct + prob_roger_correct * prob_peter_correct\nans = prob_correct_but_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_correct = prob_alan_correct + prob_roger_correct + prob_peter_correct - prob_alan_correct * prob_roger_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct\nprob_cheating = prob_roger_correct + prob_peter_correct - prob_roger_correct * prob_peter_correct\nprob_correct_but_not_cheating = prob_correct - prob_cheating\nans = prob_correct_but_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_correct = prob_alan_correct + prob_roger_correct + prob_peter_correct - prob_alan_correct * prob_roger_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct + prob_alan_correct * prob_roger_correct * prob_peter_correct\nprob_correct_not_cheating = prob_correct - prob_roger_correct\nans = prob_correct_not_cheating", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_correct = prob_alan_correct + prob_roger_correct + prob_peter_correct - prob_alan_correct * prob_roger_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct\nprob_correct_not_cheating = prob_peter_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct\nans = prob_correct_not_cheating / prob_correct", "\nprob_alan_correct = 1 / 5\nprob_roger_correct = 2 / 3\nprob_peter_correct = 5 / 6\nprob_correct = prob_alan_correct + prob_roger_correct + prob_peter_correct - prob_alan_correct * prob_roger_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct + prob_alan_correct * prob_roger_correct * prob_peter_correct\nprob_correct_not_cheating = prob_peter_correct - prob_alan_correct * prob_peter_correct - prob_roger_correct * prob_peter_correct + prob_alan_correct * prob_roger_correct * prob_peter_correct\nans = prob_correct_not_cheating / prob_correct"], "generated_prediction": "1.0333333333333334", "options": ["A)1/18", "B)1/9", "C)23/90", "D)5/18", "E)13/45"], "answer": "A", "prediction": "B"}
{"question": "The difference between simple interest and C.I. at the same rate for Rs.5000 for 2 years in Rs.72. The rate of interest is?", "generated": ["\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 2 * interest_rate / 100)\namount_with_compound_interest = amount * (1 + interest_rate / 100) ** 2\nsolution = solve_it(amount_with_compound_interest - amount_with_simple_interest - 72, interest_rate)\nans = solution[interest_rate]"], "generated_prediction": "12.0", "options": ["A)10%", "B)12%", "C)6%", "D)8%", "E)4%"], "answer": "B", "prediction": "B"}
{"question": "All 250 files on Sam's hard drive are infected by either a virus or a worm or both. The number of files that are infected only by a worm is 2.5 times the number of files that are infected by both a virus and a worm. If 50% of the files were not infected by a virus, how many of Sam's files were NOT infected by a worm?", "generated": ["\nnum_files = 250\nnum_files_not_infected_by_virus = 0.5 * num_files\nnum_files_infected_by_worm = 2.5 * num_files_not_infected_by_virus\nnum_files_not_infected_by_worm = num_files - num_files_infected_by_worm\nans = num_files_not_infected_by_worm", "\nfiles_infected_by_virus = Symbol('files_infected_by_virus', positive=True)\nfiles_infected_by_worm = Symbol('files_infected_by_worm', positive=True)\nfiles_infected_by_both = Symbol('files_infected_by_both', positive=True)\nsolution = solve_it([files_infected_by_worm - 2.5 * files_infected_by_both, files_infected_by_virus + files_infected_by_worm + files_infected_by_both - 250, files_infected_by_virus - 0.5 * 250], [files_infected_by_virus, files_infected_by_worm, files_infected_by_both])\nans = 250 - solution[files_infected_by_worm]", "\nfiles_infected_by_virus = Symbol('files_infected_by_virus', positive=True)\nfiles_infected_by_worm = Symbol('files_infected_by_worm', positive=True)\nfiles_infected_by_both = Symbol('files_infected_by_both', positive=True)\nsolution = solve_it([files_infected_by_worm - 2.5 * files_infected_by_both, files_infected_by_virus + files_infected_by_worm + files_infected_by_both - 250, files_infected_by_virus - 0.5 * 250], [files_infected_by_virus, files_infected_by_worm, files_infected_by_both])\nans = 250 - solution[files_infected_by_worm]", "\nfiles_infected_by_virus = Symbol('files_infected_by_virus', positive=True)\nfiles_infected_by_worm = Symbol('files_infected_by_worm', positive=True)\nfiles_infected_by_both = Symbol('files_infected_by_both', positive=True)\nsolution = solve_it([files_infected_by_virus + files_infected_by_worm + files_infected_by_both - 250, files_infected_by_worm - 2.5 * files_infected_by_both, files_infected_by_virus - 0.5 * 250], [files_infected_by_virus, files_infected_by_worm, files_infected_by_both])\nans = 250 - solution[files_infected_by_worm]", "\nfiles_infected_by_virus = Symbol('files_infected_by_virus', positive=True)\nfiles_infected_by_worm = Symbol('files_infected_by_worm', positive=True)\nfiles_infected_by_both = Symbol('files_infected_by_both', positive=True)\nsolution = solve_it([files_infected_by_virus + files_infected_by_worm + files_infected_by_both - 250, files_infected_by_worm - 2.5 * files_infected_by_both, files_infected_by_virus - 0.5 * 250], [files_infected_by_virus, files_infected_by_worm, files_infected_by_both])\nans = 250 - solution[files_infected_by_worm]", "\nfiles_infected_by_virus = Symbol('files_infected_by_virus', positive=True)\nfiles_infected_by_worm = Symbol('files_infected_by_worm', positive=True)\nfiles_infected_by_both = Symbol('files_infected_by_both', positive=True)\nsolution = solve_it([files_infected_by_worm - 2.5 * files_infected_by_both, files_infected_by_virus + files_infected_by_worm + files_infected_by_both - 250, files_infected_by_virus - 0.5 * 250], [files_infected_by_virus, files_infected_by_worm, files_infected_by_both])\nans = solution[files_infected_by_worm]", "\ntotal_files = 250\nfiles_infected_by_worm_only = 2.5 * (total_files / 2)\nfiles_not_infected_by_virus = total_files / 2\nfiles_not_infected_by_worm = files_not_infected_by_virus - files_infected_by_worm_only\nans = files_not_infected_by_worm", "\nnum_files_not_infected_by_virus = 250 * 0.5\nnum_files_infected_by_virus_and_worm = num_files_not_infected_by_virus / 2.5\nnum_files_infected_by_worm = num_files_infected_by_virus_and_worm * 2.5\nnum_files_not_infected_by_worm = 250 - num_files_infected_by_worm\nans = num_files_not_infected_by_worm", "\nnum_files = 250\nnum_files_with_virus = 0.5 * num_files\nnum_files_with_worm = 2.5 * num_files_with_virus\nnum_files_with_both = num_files_with_virus - num_files_with_worm\nnum_files_without_worm = num_files - num_files_with_worm\nans = num_files_without_worm", "\nnum_files = 250\nnum_files_infected_by_virus = 0.5 * num_files\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_worm\nnum_files_infected_by_both = num_files - num_files_infected_by_virus - num_files_infected_by_worm\nans = num_files - num_files_infected_by_worm", "\nnum_files_infected_by_virus = 0.5 * 250\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_virus\nnum_files_infected_by_both = num_files_infected_by_virus\nnum_files_not_infected_by_worm = 250 - num_files_infected_by_worm\nans = num_files_not_infected_by_worm", "\nnum_files_infected_by_virus = 50\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_virus\nnum_files_infected_by_both = num_files_infected_by_virus\nnum_files_not_infected_by_worm = 250 - num_files_infected_by_worm - num_files_infected_by_both\nans = num_files_not_infected_by_worm", "\nnum_files = 250\nnum_files_infected_by_virus = 0.5 * num_files\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_virus\nnum_files_infected_by_both = num_files_infected_by_virus - num_files_infected_by_worm\nnum_files_not_infected_by_virus = num_files - num_files_infected_by_virus\nnum_files_not_infected_by_worm = num_files - num_files_infected_by_worm\nnum_files_not_infected_by_both = num_files - num_files_infected_by_both\nans = num_files_not_infected_by_worm", "\nnum_files_not_infected_by_virus = 50\nnum_files_infected_by_virus_and_worm = num_files_not_infected_by_virus / 2\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_virus_and_worm\nnum_files_not_infected_by_worm = 250 - num_files_infected_by_worm - num_files_infected_by_virus_and_worm\nans = num_files_not_infected_by_worm", "\nnum_files_not_infected_by_virus = 50\nnum_files_infected_by_virus_and_worm = num_files_not_infected_by_virus / 2\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_virus_and_worm\nnum_files_not_infected_by_worm = 250 - num_files_infected_by_worm\nans = num_files_not_infected_by_worm", "\nnum_files_not_infected_by_virus = 50\nnum_files_infected_by_virus_and_worm = num_files_not_infected_by_virus / 2\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_virus_and_worm\nnum_files_not_infected_by_worm = 250 - num_files_infected_by_worm\nans = num_files_not_infected_by_worm", "\nnum_files = 250\nnum_files_infected_by_worm = 2.5 * num_files / 3\nnum_files_not_infected_by_virus = num_files / 2\nnum_files_not_infected_by_worm = num_files - num_files_infected_by_worm - num_files_not_infected_by_virus\nans = num_files_not_infected_by_worm", "\nnum_files_not_infected_by_virus = 50\nnum_files_infected_by_both = num_files_not_infected_by_virus / 2\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_both\nnum_files_not_infected_by_worm = 250 - num_files_infected_by_worm - num_files_infected_by_both - num_files_not_infected_by_virus\nans = num_files_not_infected_by_worm", "\ntotal_files = 250\nfiles_infected_by_worm = Symbol('files_infected_by_worm', positive=True)\nfiles_infected_by_both = Symbol('files_infected_by_both', positive=True)\nsolution = solve_it([total_files - files_infected_by_worm - files_infected_by_both - 125, files_infected_by_worm - 2.5 * files_infected_by_both], [files_infected_by_worm, files_infected_by_both])\nans = solution[files_infected_by_worm]", "\nfiles_infected_by_both_virus_and_worm = Symbol('files_infected_by_both_virus_and_worm', positive=True)\nfiles_infected_by_worm = 2.5 * files_infected_by_both_virus_and_worm\nfiles_infected_by_virus = 0.5 * 250\nfiles_infected_by_worm_only = files_infected_by_worm - files_infected_by_both_virus_and_worm\nfiles_not_infected_by_worm = 250 - files_infected_by_worm_only - files_infected_by_worm\nans = files_not_infected_by_worm", "\nnum_files = 250\nnum_files_infected_by_worm = Symbol('num_files_infected_by_worm', positive=True)\nnum_files_infected_by_virus = Symbol('num_files_infected_by_virus', positive=True)\nnum_files_infected_by_both = Symbol('num_files_infected_by_both', positive=True)\nsolution = solve_it([num_files_infected_by_worm - 2.5 * num_files_infected_by_both, num_files_infected_by_virus + num_files_infected_by_both - num_files * 0.5, num_files_infected_by_worm + num_files_infected_by_virus + num_files_infected_by_both - num_files], [num_files_infected_by_worm, num_files_infected_by_virus, num_files_infected_by_both])\nans = num_files - solution[num_files_infected_by_worm]", "\nnum_files = 250\nnum_files_with_virus = 0.5 * num_files\nnum_files_with_worm = 2.5 * num_files_with_virus\nnum_files_with_virus_and_worm = num_files_with_worm - num_files_with_virus\nnum_files_without_virus = num_files - num_files_with_virus\nnum_files_without_worm = num_files - num_files_with_worm\nnum_files_without_virus_and_worm = num_files - num_files_with_virus_and_worm\nans = num_files_without_worm", "\nnum_files_infected_by_virus = Symbol('num_files_infected_by_virus', positive=True)\nnum_files_infected_by_worm = Symbol('num_files_infected_by_worm', positive=True)\nnum_files_infected_by_both = Symbol('num_files_infected_by_both', positive=True)\nnum_files_infected_by_worm_only = 2.5 * num_files_infected_by_both\nnum_files_infected_by_virus_only = num_files_infected_by_virus - num_files_infected_by_both\nnum_files_not_infected_by_virus = 0.5 * 250\nnum_files_not_infected_by_worm = num_files_not_infected_by_virus - num_files_infected_by_virus_only\nsolution = solve_it([num_files_infected_by_virus + num_files_infected_by_worm + num_files_infected_by_both", "\nnum_files_infected_by_both = Symbol('num_files_infected_by_both', positive=True)\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_both\nnum_files_not_infected_by_virus = 0.5 * 250\nnum_files_infected_by_virus = 250 - num_files_not_infected_by_virus\nnum_files_infected_by_worm_only = num_files_infected_by_worm - num_files_infected_by_both\nnum_files_not_infected_by_worm = 250 - num_files_infected_by_worm_only - num_files_infected_by_both\nsolution = solve_it([num_files_infected_by_virus + num_files_infected_by_worm_only + num_files_infected_by_both - 250, num_files_infected_by_worm - 2.5 * num_files_infected_by_both], [num_files_infected", "\nnum_files = 250\nnum_files_infected_by_virus = 0.5 * num_files\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_virus\nnum_files_infected_by_both = num_files_infected_by_virus\nnum_files_not_infected_by_worm = num_files - num_files_infected_by_worm\nans = num_files_not_infected_by_worm", "\nnum_files_infected_by_virus = Symbol('num_files_infected_by_virus', positive=True)\nnum_files_infected_by_worm = Symbol('num_files_infected_by_worm', positive=True)\nnum_files_infected_by_both = Symbol('num_files_infected_by_both', positive=True)\nnum_files_not_infected_by_virus = 0.5 * 250\nnum_files_not_infected_by_worm = 250 - num_files_infected_by_worm\nnum_files_not_infected_by_both = 250 - num_files_infected_by_both\nsolution = solve_it([num_files_infected_by_worm - 2.5 * num_files_infected_by_both, num_files_infected_by_virus + num_files_infected_by_worm + num_files_infected_by_both - 250, num_files_not_infected_by_virus + num_files_infected_by_virus", "\nnum_files = 250\nnum_files_infected_by_worm = Symbol('num_files_infected_by_worm', positive=True)\nnum_files_infected_by_both = Symbol('num_files_infected_by_both', positive=True)\nnum_files_infected_by_worm_only = 2.5 * num_files_infected_by_both\nnum_files_not_infected_by_virus = 0.5 * num_files\nsolution = solve_it([num_files_infected_by_worm + num_files_infected_by_both - num_files, num_files_infected_by_worm - num_files_infected_by_worm_only - num_files_infected_by_both, num_files_not_infected_by_virus - num_files_infected_by_worm - num_files_infected_by_both], [num_files_infected_by_worm, num_files_infected_by_both])\nans = solution[num_files_infected_by_", "\nnum_files_infected_by_virus_and_worm = Symbol('num_files_infected_by_virus_and_worm', positive=True)\nnum_files_infected_by_worm = 2.5 * num_files_infected_by_virus_and_worm\nnum_files_infected_by_virus = 250 - num_files_infected_by_virus_and_worm - num_files_infected_by_worm\nnum_files_infected_by_worm_only = num_files_infected_by_worm - num_files_infected_by_virus_and_worm\nsolution = solve_it([num_files_infected_by_virus - 0.5 * 250, num_files_infected_by_worm_only - 50], [num_files_infected_by_virus_and_worm, num_files_infected_by_worm])\nans = solution[num_files_infected_by_worm_only]", "\nnum_files = 250\nnum_files_infected_by_only_worm = 2.5 * num_files_infected_by_both_virus_and_worm\nnum_files_infected_by_virus = 0.5 * num_files\nnum_files_not_infected_by_virus = num_files - num_files_infected_by_virus\nnum_files_infected_by_worm = num_files_infected_by_only_worm + num_files_infected_by_both_virus_and_worm\nnum_files_not_infected_by_worm = num_files - num_files_infected_by_worm\nans = num_files_not_infected_by_worm", "\nnum_files_with_virus = 50\nnum_files_with_worm = 2.5 * num_files_with_virus\nnum_files_with_virus_and_worm = num_files_with_worm / 3.5\nnum_files_with_virus_and_worm = num_files_with_virus_and_worm.n()\nnum_files_with_virus_and_worm = int(num_files_with_virus_and_worm)\nnum_files_with_worm_only = num_files_with_worm - num_files_with_virus_and_worm\nnum_files_without_worm = 250 - num_files_with_worm_only - num_files_with_virus_and_worm\nans = num_files_without_worm"], "generated_prediction": "-62.5", "options": ["A)50", "B)70", "C)75", "D)100", "E)125"], "answer": "C", "prediction": "A"}
{"question": "A father wants to divide Rs. 5100 between his two sons, Mohan and Sohan who are 23 and 24 at present. He divides the amount in such a way that if their shares are invested at compound interest at 4% p.a. they will receive equal amount on attaining the age of 26 years. Find Mohan's share.", "generated": ["\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nsolution = solve_it([mohan_share * (1 + 0.04) ** 3 - sohan_share * (1 + 0.04) ** 3, mohan_share + sohan_share - 5100], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\nmohan_share_after_3_years = mohan_share * (1 + 4 / 100) ** 3\nsohan_share_after_3_years = sohan_share * (1 + 4 / 100) ** 3\nsolution = solve_it([mohan_share_after_3_years - sohan_share_after_3_years, mohan_share + sohan_share - 5100], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\nmohan_share_at_26 = mohan_share * (1 + 4 / 100) ** 3\nsohan_share_at_26 = sohan_share * (1 + 4 / 100) ** 2\nsolution = solve_it([mohan_share + sohan_share - 5100, mohan_share_at_26 - sohan_share_at_26], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\nmohan_share_at_26 = mohan_share * (1 + 4 / 100) ** 3\nsohan_share_at_26 = sohan_share * (1 + 4 / 100) ** 2\nsolution = solve_it([mohan_share + sohan_share - 5100, mohan_share_at_26 - sohan_share_at_26], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nMohan_share = Symbol('Mohan_share', positive=True)\nSohan_share = Symbol('Sohan_share', positive=True)\namount = 5100\ninterest_rate = 4\nage = 26\nsolution = solve_it([Mohan_share * (1 + interest_rate / 100) ** (age - 23) - Sohan_share * (1 + interest_rate / 100) ** (age - 24), Mohan_share + Sohan_share - amount], [Mohan_share, Sohan_share])\nans = solution[Mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\nage_after_3_years = 26\ninterest_rate = 4\nsolution = solve_it([mohan_share * (1 + interest_rate / 100) ** 3 - sohan_share * (1 + interest_rate / 100) ** 3, mohan_share + sohan_share - 5100], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ninterest_rate = 4\nmohan_share_after_3_years = mohan_share * (1 + interest_rate / 100) ** 3\nsohan_share_after_2_years = sohan_share * (1 + interest_rate / 100) ** 2\nsolution = solve_it([mohan_share_after_3_years - sohan_share_after_2_years, mohan_share + sohan_share - 5100], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ninterest_rate = 4\nmohan_share_at_26 = mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age)\nsohan_share_at_26 = sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age)\nsolution = solve_it([mohan_share + sohan_share - 5100, mohan_share_at_26 - sohan_share_at_26], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\ntotal_amount = 5100\nmohan_amount_after_26_years = mohan_share * (1 + 0.04) ** 3\nsohan_amount_after_26_years = sohan_share * (1 + 0.04) ** 3\nsolution = solve_it([mohan_amount_after_26_years - sohan_amount_after_26_years, mohan_share + sohan_share - total_amount], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\nmohan_amount_at_age_26 = mohan_share * (1 + 4 / 100) ** (26 - mohan_age)\nsohan_amount_at_age_26 = sohan_share * (1 + 4 / 100) ** (26 - sohan_age)\nsolution = solve_it([mohan_amount_at_age_26 - sohan_amount_at_age_26, mohan_share + sohan_share - 5100], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ninterest_rate = 0.04\nmohan_amount_after_3_years = mohan_share * (1 + interest_rate) ** 3\nsohan_amount_after_2_years = sohan_share * (1 + interest_rate) ** 2\nsolution = solve_it([mohan_amount_after_3_years - sohan_amount_after_2_years, mohan_share + sohan_share - 5100], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ntotal_amount = 5100\ninterest_rate = 4\nmohan_amount_at_26 = mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age)\nsohan_amount_at_26 = sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age)\nsolution = solve_it([mohan_amount_at_26 - sohan_amount_at_26, mohan_share + sohan_share - total_amount], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\nmohan_share_in_26_years = mohan_share * (1 + 4 / 100) ** (26 - mohan_age)\nsohan_share_in_26_years = sohan_share * (1 + 4 / 100) ** (26 - sohan_age)\nsolution = solve_it([mohan_share + sohan_share - 5100, mohan_share_in_26_years - sohan_share_in_26_years], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ninterest_rate = 4\nsolution = solve_it([mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age) - sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age), mohan_share + sohan_share - 5100], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ntotal_amount = 5100\ninterest_rate = 4\nmohan_share_at_age_26 = mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age)\nsohan_share_at_age_26 = sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age)\nsolution = solve_it([mohan_share + sohan_share - total_amount, mohan_share_at_age_26 - sohan_share_at_age_26], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\ntotal_amount = 5100\nmohan_age = 23\nsohan_age = 24\ninterest_rate = 4\nmohan_final_amount = mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age)\nsohan_final_amount = sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age)\nsolution = solve_it([mohan_final_amount - sohan_final_amount, mohan_share + sohan_share - total_amount], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ninterest_rate = 4\nsolution = solve_it([mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age) - sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age), mohan_share + sohan_share - 5100], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\namount_at_26 = 5100\ninterest_rate = 4\nsolution = solve_it([mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age) - sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age), mohan_share + sohan_share - amount_at_26], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nMohan_share = Symbol('Mohan_share', positive=True)\nSohan_share = Symbol('Sohan_share', positive=True)\nage_difference = 1\ninterest_rate = 4\nMohan_share_at_26 = Mohan_share * (1 + interest_rate / 100) ** age_difference\nSohan_share_at_26 = Sohan_share * (1 + interest_rate / 100) ** age_difference\nsolution = solve_it([Mohan_share + Sohan_share - 5100, Mohan_share_at_26 - Sohan_share_at_26], [Mohan_share, Sohan_share])\nans = solution[Mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ntotal_amount = 5100\ninterest_rate = 4\nmohan_share_in_3_years = mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age)\nsohan_share_in_2_years = sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age)\nsolution = solve_it([mohan_share + sohan_share - total_amount, mohan_share_in_3_years - sohan_share_in_2_years], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\ntotal_amount = 5100\nage_difference = 3\ninterest_rate = 4\nsolution = solve_it([mohan_share * (1 + interest_rate / 100) ** age_difference - sohan_share * (1 + interest_rate / 100) ** age_difference, mohan_share + sohan_share - total_amount], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nMohan_share = Symbol('Mohan_share', positive=True)\nSohan_share = Symbol('Sohan_share', positive=True)\ninterest_rate = 4\nage_difference = 3\nsolution = solve_it([Mohan_share * (1 + interest_rate / 100) ** age_difference - Sohan_share * (1 + interest_rate / 100) ** age_difference, Mohan_share + Sohan_share - 5100], [Mohan_share, Sohan_share])\nans = solution[Mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\ntotal_amount = 5100\nage_difference = 1\ninterest_rate = 4\nmohan_share_at_age_26 = mohan_share * (1 + interest_rate / 100) ** age_difference\nsohan_share_at_age_26 = sohan_share * (1 + interest_rate / 100) ** age_difference\nsolution = solve_it([mohan_share + sohan_share - total_amount, mohan_share_at_age_26 - sohan_share_at_age_26], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ntotal_amount = 5100\ninterest_rate = 4\nsolution = solve_it([mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age) - sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age), mohan_share + sohan_share - total_amount], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\ntotal_amount = 5100\nmohan_age = 23\nsohan_age = 24\ninterest_rate = 4\nsolution = solve_it([mohan_share * (1 + interest_rate / 100) ** (26 - mohan_age) - sohan_share * (1 + interest_rate / 100) ** (26 - sohan_age), mohan_share + sohan_share - total_amount], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nMohan_share = Symbol('Mohan_share', positive=True)\nSohan_share = Symbol('Sohan_share', positive=True)\ntotal_amount = 5100\ninterest_rate = 4\nMohan_amount_at_26 = Mohan_share * (1 + interest_rate / 100) ** 3\nSohan_amount_at_26 = Sohan_share * (1 + interest_rate / 100) ** 3\nsolution = solve_it([Mohan_amount_at_26 - Sohan_amount_at_26, Mohan_share + Sohan_share - total_amount], [Mohan_share, Sohan_share])\nans = solution[Mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\nage_difference = sohan_age - mohan_age\nmohan_share_after_interest = mohan_share * (1 + 0.04) ** age_difference\nsohan_share_after_interest = sohan_share * (1 + 0.04) ** age_difference\nsolution = solve_it([mohan_share + sohan_share - 5100, mohan_share_after_interest - sohan_share_after_interest], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\nage_difference = mohan_age - sohan_age\ninterest_rate = 0.04\nsolution = solve_it([mohan_share * (1 + interest_rate) ** age_difference - sohan_share, mohan_share + sohan_share - 5100], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = Symbol('sohan_share', positive=True)\nmohan_age = 23\nsohan_age = 24\ninterest_rate = 4\nyears = 26 - mohan_age\nmohan_share_after_interest = mohan_share * (1 + interest_rate / 100) ** years\nsohan_share_after_interest = sohan_share * (1 + interest_rate / 100) ** years\nsolution = solve_it([mohan_share + sohan_share - 5100, mohan_share_after_interest - sohan_share_after_interest], [mohan_share, sohan_share])\nans = solution[mohan_share]", "\namount = 5100\nage_difference = 2\nmohan_share = Symbol('mohan_share', positive=True)\nsohan_share = amount - mohan_share\nmohan_amount = mohan_share * (1 + 0.04) ** age_difference\nsohan_amount = sohan_share * (1 + 0.04) ** age_difference\nsolution = solve_it(mohan_amount - sohan_amount, mohan_share)\nans = solution[mohan_share]"], "generated_prediction": "2500.0", "options": ["A)2400", "B)2500", "C)2600", "D)2700", "E)None of these"], "answer": "B", "prediction": "B"}
{"question": "What is 60% of 30% of 1400 grams?", "generated": ["\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400", "\nans = 0.6 * 0.3 * 1400"], "generated_prediction": "252.0", "options": ["A)450 gms", "B)100 gms", "C)252 gms", "D)240 gms", "E)None of these"], "answer": "C", "prediction": "C"}
{"question": "A certain liquid passes through a drain at a rate of w/25 gallons every x seconds. At that rate, how many minutes will it take y gallons to pass through the drain?", "generated": ["\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nans = y / (1200 * x * y)", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime = y / (w / 25 * x)\nans = time / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime = y / (w / 25 * x)\nans = time / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime = y / (w / 25 * x) / 60\nans = time", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_in_seconds = y / (w / 25 * x)\nans = time_in_seconds / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_in_seconds = y / (w / 25 * x)\nans = time_in_seconds / 60", "\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\ntime_taken = y / (w / 25 * x)\nans = time_taken / 60", "\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\ntime_taken = y / (w / 25 * x)\nans = time_taken / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nrate = w / 25\ntime = y / rate\nans = time / x / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_to_pass_y_gallons = y / (w / 25 * x)\nans = time_to_pass_y_gallons / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_to_pass_y_gallons = y / (w / 25 * x)\nans = time_to_pass_y_gallons / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_to_pass_y_gallons = y / (w / 25 * x)\nans = time_to_pass_y_gallons / 60", "\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\nans = simplify(y / (w / 25 * x) / 60)", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nflow_rate = w / (25 * x)\ntime_to_pass_y_gallons = y / flow_rate\nans = time_to_pass_y_gallons / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_to_pass_y_gallons = y / (w / 25 * x) / 60\nans = time_to_pass_y_gallons", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nrate = w / (25 * x)\ntime_in_seconds = y / rate\ntime_in_minutes = time_in_seconds / 60\nans = time_in_minutes", "\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\ntime_for_y_gallons = y / (w / 25 * x)\nans = time_for_y_gallons / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_taken = y / (w / 25 * x)\nans = time_taken / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_taken = y / (w / 25 * x)\nans = time_taken / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_to_pass_1_gallon = x / (w / 25)\ntime_to_pass_y_gallons = y * time_to_pass_1_gallon\nans = time_to_pass_y_gallons / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_to_pass_through_drain = y / (w / 25 * x)\nans = time_to_pass_through_drain / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\ntime_to_pass_1_gallon = x / (w / 25)\ntime_to_pass_y_gallon = y * time_to_pass_1_gallon\nans = time_to_pass_y_gallon / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nrate = w / (25 * x)\ntime = y / rate\nans = time / 60", "\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\ntime = y / (w / 25 * x)\nans = time / 60", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nrate = w / (25 * x)\ntime_to_pass_y_gallons = y / rate\nans = time_to_pass_y_gallons / 60", "\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\ntime = y / (w / 25 * x)\nans = time / 60", "\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\ntime = y / (w * x / 25)\nans = time / 60", "\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\ntime_in_seconds = y / (w / 25 * x)\nans = time_in_seconds / 60", "\nw = Symbol('w')\nx = Symbol('x')\ny = Symbol('y')\ntime_to_pass_y_gallons = y / (w / 25 * x) / 60\nans = time_to_pass_y_gallons", "\nw = Symbol('w', positive=True)\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nrate = w / (25 * x)\ntime_in_seconds = y / rate\nans = time_in_seconds / 60"], "generated_prediction": "5*y/(12*w*x)", "options": ["A)y/(1200xy)", "B)20xy/w", "C)5xy/(12w)", "D)w/(3xy)", "E)3y/(wx)"], "answer": "C", "prediction": "C"}
{"question": "A coin made of alloy of aluminum and silver measures 2 x 15 mm (it is 2 mm thick and its diameter is 15 mm). If the weight of the coin is 30 grams and the volume of aluminum in the alloy equals that of silver, what will be the weight of a coin measuring 1 x 30 mm made of pure aluminum if silver is twice as heavy as aluminum?", "generated": ["\nsilver_weight = Symbol('silver_weight', positive=True)\naluminium_weight = Symbol('aluminium_weight', positive=True)\ntotal_weight = 30\nsolution = solve_it([silver_weight + aluminium_weight - total_weight, silver_weight - 2 * aluminium_weight], [silver_weight, aluminium_weight])\nsilver_weight = solution[silver_weight]\naluminium_weight = solution[aluminium_weight]", "\ncoin_weight = 30\ncoin_volume = math.pi * (15 / 2) ** 2 * 2\naluminum_volume = coin_volume / 2\naluminum_weight = aluminum_volume * 2.7\nnew_coin_volume = math.pi * (30 / 2) ** 2 * 1\nnew_coin_weight = new_coin_volume * 2.7\nans = new_coin_weight", "\naluminum_weight = Symbol('aluminum_weight', positive=True)\nsilver_weight = Symbol('silver_weight', positive=True)\ncoin_weight = 30\naluminum_volume = Symbol('aluminum_volume', positive=True)\nsilver_volume = Symbol('silver_volume', positive=True)\nsolution = solve_it([aluminum_weight + silver_weight - coin_weight, aluminum_volume - silver_volume], [aluminum_weight, silver_volume])\nans = solution[aluminum_weight] * 2", "\nweight_of_coin = 30\nweight_of_aluminum = weight_of_coin / 3\nweight_of_silver = 2 * weight_of_aluminum\nweight_of_pure_aluminum = weight_of_aluminum * (30 / 15) ** 2\nans = weight_of_pure_aluminum", "\nweight_of_coin = 30\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nsolution = solve_it([weight_of_aluminum + weight_of_silver - weight_of_coin, weight_of_aluminum - weight_of_silver], [weight_of_aluminum, weight_of_silver])\nweight_of_aluminum = solution[weight_of_aluminum]\nweight_of_silver = solution[weight_of_silver]\nweight_of_pure_aluminum = weight_of_aluminum * 2\nans = weight_of_pure_aluminum", "\nweight_of_alloy = 30\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nsolution = solve_it([weight_of_silver + weight_of_aluminum - weight_of_alloy, weight_of_silver - 2 * weight_of_aluminum], [weight_of_silver, weight_of_aluminum])\nans = 2 * solution[weight_of_aluminum]", "\nweight_of_alloy = 30\nweight_of_silver = weight_of_alloy / 3\nweight_of_aluminum = weight_of_alloy - weight_of_silver\nweight_of_pure_aluminum = weight_of_aluminum * (30 ** 2 / 15 ** 2)\nans = weight_of_pure_aluminum", "\naluminum_weight = Symbol('aluminum_weight', positive=True)\nsilver_weight = Symbol('silver_weight', positive=True)\nalloy_weight = 30\nalloy_volume = 2 * math.pi * 7.5 * 15\nsolution = solve_it([aluminum_weight + silver_weight - alloy_weight, aluminum_weight - silver_weight, aluminum_weight - alloy_volume], [aluminum_weight, silver_weight])\nans = solution[aluminum_weight] * 2", "\nweight_of_coin = 30\nweight_of_silver = 2 * weight_of_coin / 3\nweight_of_aluminum = weight_of_coin / 3\nweight_of_aluminum_in_pure_coin = weight_of_aluminum * (1 * 30) ** 3 / (2 * 15) ** 3\nans = weight_of_aluminum_in_pure_coin", "\nweight_of_coin = 30\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_pure_aluminum = Symbol('weight_of_pure_aluminum', positive=True)\nsolution = solve_it([weight_of_aluminum + weight_of_silver - weight_of_coin, weight_of_aluminum - weight_of_silver, weight_of_aluminum * 2 - weight_of_pure_aluminum], [weight_of_aluminum, weight_of_silver, weight_of_pure_aluminum])\nans = solution[weight_of_pure_aluminum]", "\naluminum_weight = Symbol('aluminum_weight', positive=True)\nsilver_weight = Symbol('silver_weight', positive=True)\ntotal_weight = 30\nvolume_of_aluminum = Symbol('volume_of_aluminum', positive=True)\nvolume_of_silver = Symbol('volume_of_silver', positive=True)\nsolution = solve_it([aluminum_weight + silver_weight - total_weight, volume_of_aluminum - volume_of_silver, 2 * aluminum_weight - silver_weight], [aluminum_weight, silver_weight, volume_of_aluminum, volume_of_silver])\naluminum_weight = solution[aluminum_weight]\nsilver_weight = solution[silver_weight]\nvolume_of_aluminum = solution[volume_of_aluminum]\nvolume_of_silver = solution[volume_of_silver]", "\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nweight_of_coin = 30\nvolume_of_silver = weight_of_silver / 2\nvolume_of_aluminum = weight_of_aluminum / 1\nsolution = solve_it([volume_of_silver - volume_of_aluminum, weight_of_silver + weight_of_aluminum - weight_of_coin], [weight_of_silver, weight_of_aluminum])\nweight_of_aluminum_in_new_coin = solution[weight_of_aluminum]\nweight_of_silver_in_new_coin = solution[weight_of_silver]\nweight_of_new_coin = weight_of_aluminum_in_new_coin + weight_of_silver_in_new_coin\nans = weight_of_new_coin", "\nweight_of_coin = 30\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nsolution = solve_it([weight_of_silver + weight_of_aluminum - weight_of_coin, weight_of_silver - 2 * weight_of_aluminum], [weight_of_silver, weight_of_aluminum])\nweight_of_aluminum = solution[weight_of_aluminum]\nvolume_of_aluminum = weight_of_aluminum / 2.7\nvolume_of_silver = weight_of_silver / 10.5\nvolume_of_coin = volume_of_aluminum + volume_of_silver\nweight_of_coin = volume_of_coin * 2.7\nans = weight_of_coin", "\naluminum_weight = Symbol('aluminum_weight', positive=True)\nsilver_weight = Symbol('silver_weight', positive=True)\naluminum_volume = Symbol('aluminum_volume', positive=True)\nsilver_volume = Symbol('silver_volume', positive=True)\ncoin_weight = 30\ncoin_thickness = 2\ncoin_diameter = 15\ncoin_volume = math.pi * (coin_diameter / 2) ** 2 * coin_thickness\nsolution = solve_it([aluminum_weight + silver_weight - coin_weight, aluminum_volume - silver_volume], [aluminum_weight, silver_weight])\naluminum_weight = solution[aluminum_weight]\nsilver_weight = solution[silver_weight]\npure_aluminum_coin_diameter = 30\npure_aluminum_coin_thickness = 1\npure_aluminum_coin_volume = math.pi * (pure_aluminum_coin_diameter / 2) ** 2 * pure_aluminum_coin_thickness\nans = aluminum_weight * pure_aluminum_coin_volume / coin_", "\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nweight_of_alloy = 30\nvolume_of_aluminum = weight_of_aluminum / 2\nvolume_of_silver = weight_of_silver / 2\nsolution = solve_it([weight_of_aluminum + weight_of_silver - weight_of_alloy, volume_of_aluminum - volume_of_silver], [weight_of_aluminum, weight_of_silver])\nweight_of_aluminum = solution[weight_of_aluminum]\nweight_of_aluminum_coin = weight_of_aluminum * (30 / 15) ** 2\nans = weight_of_aluminum_coin", "\naluminum_weight = Symbol('aluminum_weight', positive=True)\nsilver_weight = Symbol('silver_weight', positive=True)\naluminum_volume = Symbol('aluminum_volume', positive=True)\nsilver_volume = Symbol('silver_volume', positive=True)\ntotal_weight = 30\ntotal_volume = 2 * math.pi * (15 / 2) ** 2 * 2\nsolution = solve_it([aluminum_weight + silver_weight - total_weight, aluminum_volume + silver_volume - total_volume, aluminum_weight - silver_weight / 2, aluminum_volume - silver_volume], [aluminum_weight, silver_weight, aluminum_volume, silver_volume])\naluminum_weight = solution[aluminum_weight]\nsilver_weight = solution[silver_weight]\naluminum_volume = solution[aluminum_volume]\nsilver_volume = solution[silver_volume]", "\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nsolution = solve_it([weight_of_silver - 2 * weight_of_aluminum, weight_of_silver + weight_of_aluminum - 30], [weight_of_silver, weight_of_aluminum])\nweight_of_silver = solution[weight_of_silver]\nweight_of_aluminum = solution[weight_of_aluminum]\nweight_of_aluminum_in_new_coin = 30\nvolume_of_aluminum_in_new_coin = weight_of_aluminum_in_new_coin / weight_of_aluminum\nvolume_of_silver_in_new_coin = volume_of_aluminum_in_new_coin\nweight_of_silver_in_new_coin = volume_of_silver_in_new_coin * weight_of_silver\nweight_of_new_coin = weight_of_silver_in_new_coin + weight_of_aluminum_in", "\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_aluminium = Symbol('weight_of_aluminium', positive=True)\nweight_of_coin = 30\nvolume_of_silver = weight_of_silver / 2\nvolume_of_aluminium = weight_of_aluminium / 3\nsolution = solve_it([volume_of_silver - volume_of_aluminium, weight_of_silver + weight_of_aluminium - weight_of_coin], [weight_of_silver, weight_of_aluminium])\nweight_of_pure_aluminium_coin = solution[weight_of_aluminium] / 3\nans = weight_of_pure_aluminium_coin", "\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nweight_of_alloy = 30\nweight_of_aluminum_in_alloy = weight_of_silver\nweight_of_silver_in_alloy = weight_of_aluminum\nsolution = solve_it([weight_of_aluminum_in_alloy - weight_of_aluminum, weight_of_silver_in_alloy - weight_of_silver, weight_of_aluminum_in_alloy + weight_of_silver_in_alloy - weight_of_alloy], [weight_of_aluminum, weight_of_silver])\nweight_of_aluminum_in_alloy = solution[weight_of_aluminum]\nweight_of_silver_in_alloy = solution[weight_of_silver]\nweight_of_aluminum_in_pure_aluminum = weight_of_aluminum_in_alloy\nweight_of_silver_in_pure_aluminum = 0", "\nvolume_of_aluminum = Symbol('volume_of_aluminum', positive=True)\nvolume_of_silver = Symbol('volume_of_silver', positive=True)\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_coin = 30\nsolution = solve_it([volume_of_aluminum - volume_of_silver, weight_of_aluminum - weight_of_silver / 2, volume_of_aluminum * weight_of_aluminum + volume_of_silver * weight_of_silver - weight_of_coin], [volume_of_aluminum, volume_of_silver, weight_of_aluminum])\nweight_of_aluminum = solution[weight_of_aluminum]\nvolume_of_aluminum = solution[volume_of_aluminum]\nvolume_of_silver = solution[volume_of_silver]\nweight_of_silver = weight_of_aluminum * 2\nweight_of_coin = volume_of_aluminum * weight", "\naluminum_weight = 30\nsilver_weight = 2 * aluminum_weight\naluminum_volume = aluminum_weight / 2.7\nsilver_volume = silver_weight / 10.5\ncoin_volume = math.pi * (15 / 2) ** 2 * 2\naluminum_percentage = aluminum_volume / coin_volume\nsilver_percentage = silver_volume / coin_volume\naluminum_weight_in_pure_aluminum_coin = aluminum_weight / aluminum_percentage\nans = aluminum_weight_in_pure_aluminum_coin", "\naluminum_volume = 2 * 15 * 2\nsilver_volume = aluminum_volume\ncoin_weight = 30\nsilver_weight = coin_weight * silver_volume / (aluminum_volume + silver_volume)\naluminum_weight = coin_weight - silver_weight\nsilver_density = 2 * aluminum_weight / silver_volume\naluminum_density = aluminum_weight / aluminum_volume\npure_aluminum_weight = 1 * 30 * aluminum_density\nans = pure_aluminum_weight", "\naluminum_weight = Symbol('aluminum_weight', positive=True)\nsilver_weight = Symbol('silver_weight', positive=True)\nvolume_aluminum = Symbol('volume_aluminum', positive=True)\nvolume_silver = Symbol('volume_silver', positive=True)\nweight_of_coin = 30\nvolume_of_coin = 2 * 15 * 15 * math.pi / 4\nsolution = solve_it([aluminum_weight + silver_weight - weight_of_coin, volume_aluminum - volume_silver, 2 * aluminum_weight - silver_weight], [aluminum_weight, silver_weight, volume_aluminum])\nans = solution[aluminum_weight] * (1 * 30 * 30 * math.pi / 4) / volume_of_coin", "\naluminum_weight = Symbol('aluminum_weight', positive=True)\nsilver_weight = Symbol('silver_weight', positive=True)\naluminum_volume = Symbol('aluminum_volume', positive=True)\nsilver_volume = Symbol('silver_volume', positive=True)\nalloy_weight = 30\nalloy_volume = math.pi * 7.5 * 7.5 * 2\nsolution = solve_it([aluminum_weight + silver_weight - alloy_weight, aluminum_volume - silver_volume, aluminum_weight - 2 * silver_weight], [aluminum_weight, silver_weight, aluminum_volume])\nans = solution[aluminum_weight] * (15 * 15 * 2) / (1 * 30 * 2)", "\naluminum_weight = Symbol('aluminum_weight', positive=True)\nsilver_weight = Symbol('silver_weight', positive=True)\naluminum_volume = Symbol('aluminum_volume', positive=True)\nsilver_volume = Symbol('silver_volume', positive=True)\ncoin_weight = 30\ncoin_aluminum_volume = math.pi * 7.5 ** 2 * 2\ncoin_silver_volume = math.pi * 7.5 ** 2 * 2\nsolution = solve_it([aluminum_weight + silver_weight - coin_weight, aluminum_volume - silver_volume, aluminum_volume - coin_aluminum_volume], [aluminum_weight, silver_weight, aluminum_volume])\nans = solution[aluminum_weight] * 2 * math.pi * 15 ** 2 * 1", "\nweight_of_coin = 30\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nsolution = solve_it([weight_of_aluminum + weight_of_silver - weight_of_coin, weight_of_aluminum - 2 * weight_of_silver], [weight_of_aluminum, weight_of_silver])\nweight_of_aluminum = solution[weight_of_aluminum]\nweight_of_silver = solution[weight_of_silver]\nweight_of_aluminum_per_mm3 = weight_of_aluminum / (2 * 15 * 15)\nweight_of_aluminum_per_mm3_in_new_coin = weight_of_aluminum_per_mm3 * 1 * 30\nans = weight_of_aluminum_per_mm3_in_new_coin", "\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_aluminum = Symbol('weight_of_aluminum', positive=True)\nweight_of_coin = 30\nvolume_of_silver = weight_of_silver / 2\nvolume_of_aluminum = weight_of_aluminum / 3\nsolution = solve_it([volume_of_silver - volume_of_aluminum, weight_of_silver + weight_of_aluminum - weight_of_coin], [weight_of_silver, weight_of_aluminum])\nweight_of_aluminum = solution[weight_of_aluminum]\nweight_of_silver = solution[weight_of_silver]\nvolume_of_silver = weight_of_silver / 2\nvolume_of_aluminum = weight_of_aluminum / 3\nweight_of_aluminum_in_new_coin = volume_of_aluminum * 3\nans = weight_of_aluminum_in_new_coin", "\naluminum_volume = Symbol('aluminum_volume', positive=True)\nsilver_volume = Symbol('silver_volume', positive=True)\naluminum_weight = Symbol('aluminum_weight', positive=True)\nsilver_weight = Symbol('silver_weight', positive=True)\ncoin_weight = 30\nsolution = solve_it([aluminum_volume + silver_volume - 15 * 15 * 2, aluminum_weight + silver_weight - coin_weight, aluminum_weight - silver_weight / 2], [aluminum_volume, silver_volume, aluminum_weight, silver_weight])\naluminum_weight = solution[aluminum_weight]\nsilver_weight = solution[silver_weight]\naluminum_volume = solution[aluminum_volume]\nsilver_volume = solution[silver_volume]\naluminum_weight_in_new_coin = aluminum_weight * 30 * 30 / (aluminum_volume + silver_volume)\nans = aluminum_weight_in_new_coin", "\nweight_of_coin = 30\nweight_of_silver = Symbol('weight_of_silver', positive=True)\nweight_of_aluminum = weight_of_silver / 2\nvolume_of_silver = weight_of_silver / 10.5\nvolume_of_aluminum = volume_of_silver\nvolume_of_coin = 2 * math.pi * 7.5 * 15 * 2 / 1000000\nweight_of_aluminum_in_coin = volume_of_aluminum / volume_of_coin * weight_of_coin\nweight_of_aluminum_in_coin_1 = weight_of_aluminum_in_coin\nweight_of_aluminum_in_coin_2 = weight_of_aluminum * math.pi * 15 * 30 / 1000000\nsolution = solve_it(weight_of_aluminum_in_coin_1 - weight_of_aluminum_in_coin_2, weight_of_silver)\nans = solution[weight_of_silver]", "\nweight = Symbol('weight', positive=True)\nvolume = Symbol('volume', positive=True)\ndensity = Symbol('density', positive=True)\nweight_of_alloy = 30\nvolume_of_aluminum = volume / 3\nvolume_of_silver = volume / 3\nsolution = solve_it([weight_of_alloy - weight, volume_of_aluminum - volume_of_silver], [weight, volume])\nweight_of_pure_aluminum = solution[weight]\nweight_of_pure_silver = 2 * weight_of_pure_aluminum\nweight_of_pure_aluminum_in_new_coin = weight_of_pure_aluminum * (1 / 2) ** 3\nans = weight_of_pure_aluminum_in_new_coin"], "generated_prediction": "30.0", "options": ["A)36 grams", "B)40 grams", "C)42 grams", "D)48 grams", "E)50 grams"], "answer": "B", "prediction": "A"}
{"question": "If 10 is subtracted from 2/3 of a number the result is equal to sum of 40 and 1/3 of the number. Find the number", "generated": ["\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 / 3 * number - 10 - (40 + 1 / 3 * number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2/3 * number - 10 - 40 - 1/3 * number, number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(2 / 3 * num - 10 - 40 - 1 / 3 * num, num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2/3 * number - 10 - (40 + 1/3 * number), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - (40 + number / 3), number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(2 / 3 * num - 10 - (40 + 1 / 3 * num), num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it((2 / 3 * number - 10) - (40 + 1 / 3 * number), number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(2/3 * num - 10 - 40 - 1/3 * num, num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - (40 + 1 * number / 3), number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - 40 - number / 3, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - 40 - number / 3, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - number / 3 - 40, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - number / 3 - 40, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - number / 3 - 40, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - number / 3 - 40, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - 40 - number / 3, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - number / 3 - 40, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 2 / 3 - 10 - 40 - number / 3, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(2 * number / 3 - 10 - number / 3 - 40, number)\nans = solution[number]", "\nnumber = Symbol('number')\nsolution = solve_it(2 / 3 * number - 10 - 40 - 1 / 3 * number, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number / 3 - 10 - 40 - number / 3, number)\nans = solution[number]"], "generated_prediction": "150.0", "options": ["A)100", "B)160", "C)150", "D)210", "E)220"], "answer": "C", "prediction": "C"}
{"question": "What is the largest integral value of 'k' for which the quadratic equation x2 - 5x + k = 0 will have two real and distinct roots?", "generated": ["\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - 5 ** 2 / 4, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - 5 ** 2 + 4 * k, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nx = Symbol('x')\nsolution = solve_it(x ** 2 - 5 * x + k, x)\nans = solution[k]", "\nk = Symbol('k', positive=True)\na = 1\nb = -5\nc = k\nsolution = solve_it(a * x ** 2 + b * x + c, x)\nans = solution[x]", "\nk = Symbol('k')\nx = Symbol('x')\nsolution = solve_it(x ** 2 - 5 * x + k, x)\nans = max(solution[x])", "\nk = Symbol('k', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it(x ** 2 - 5 * x + k, x)\nans = solution[0] * solution[1]", "\nx = Symbol('x')\nk = Symbol('k', positive=True)\nsolution = solve_it(x ** 2 - 5 * x + k, x)\nans = -solution[0] * solution[1]", "\nk = Symbol('k', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it(x ** 2 - 5 * x + k, x)\nans = solution[0] * solution[1]", "\nk = Symbol('k', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it(x ** 2 - 5 * x + k, x)\nans = solution[0] ** 2 - 5 * solution[0] + k", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - 4 * k + 5, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4 * 1 * k), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4 * 1 * k), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4 * 1 * k), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - (5 ** 2 - 4 * 1 * k), k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\na = 1\nb = -5\nc = k\nsolution = solve_it([a * x ** 2 + b * x + c], [x])\nans = solution[x]", "\nk = Symbol('k', positive=True)\na = 1\nb = -5\nc = k\ndelta = b ** 2 - 4 * a * c\nsolution = solve_it(delta, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it(x ** 2 - 5 * x + k, x)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it(x ** 2 - 5 * x + k, x)\nans = solution[0] ** 2 - 5 * solution[0]", "\nk = Symbol('k', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it(x ** 2 - 5 * x + k, x)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - 5 ** 2 + 4 * 5 * k, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nsolution = solve_it(k - 5 ** 2 + 4 * 5 * k, k)\nans = solution[k]", "\nk = Symbol('k', positive=True)\nx1 = Symbol('x1', positive=True)\nx2 = Symbol('x2', positive=True)\nsolution = solve_it([x1 ** 2 - 5 * x1 + k, x2 ** 2 - 5 * x2 + k, x1 - x2], [x1, x2, k])\nans = math.ceil(solution[k])"], "generated_prediction": "21.0", "options": ["A)9", "B)7", "C)3", "D)8", "E)12"], "answer": "C", "prediction": "E"}
{"question": "900 + 5 \u00d7 12 = ?", "generated": ["\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12", "\nans = 900 + 5 * 12"], "generated_prediction": "960", "options": ["A)820", "B)202", "C)420", "D)209", "E)960"], "answer": "E", "prediction": "E"}
{"question": "Shweta rides at the rate of 10 km per hour but stops for 10 minutes to take rest at the end of every 15 km. How many hours will she take to cover 100 km", "generated": ["\ntime_to_cover_15_km = 15 / 10 + 10 / 60\ntime_to_cover_100_km = 100 / 15 * time_to_cover_15_km\nans = math.ceil(time_to_cover_100_km)", "\ndistance = 100\nrest_time = 10 / 60\ntotal_time = distance / 10 + rest_time\nans = math.ceil(total_time)", "\ndistance = 100\nrest_time = 10 / 60\ntotal_time = distance / 10 + rest_time\nans = math.ceil(total_time)", "\nrest_time = 10 / 60\ntotal_time = 100 / 10 + rest_time\nans = math.ceil(total_time)", "\nspeed = 10\nrest_time = 10 / 60\ntotal_distance = 100\ntime_taken = total_distance / speed + rest_time * math.ceil(total_distance / 15)\nans = time_taken", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\nsolution = solve_it(distance / speed - rest_time, rest_time)\nans = distance / speed + solution[rest_time]", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\nduration = (distance / speed) + (distance / 15) * rest_time\nans = math.ceil(duration)", "\nspeed = 10\nrest_time = 10 / 60\ndistance_between_rest = 15\ntotal_distance = 100\ntotal_time = total_distance / speed + (total_distance // distance_between_rest) * rest_time\nans = total_time", "\ndistance = 100\nrest_time = 10 / 60\nride_time = 15 / 10\nans = distance / ride_time + (distance / ride_time - 1) * rest_time", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\ntime_to_cover_15_km = 15 / speed + rest_time\ntime_to_cover_distance = distance / 15 * time_to_cover_15_km\nans = time_to_cover_distance", "\ndistance = 100\nrest_time = 10 / 60\nspeed = 10\nsolution = solve_it(distance / speed - (distance / 15) * rest_time, speed)\nans = distance / solution[speed]", "\nspeed = 10\nrest_time = 10 / 60\ndistance_between_rests = 15\ntotal_distance = 100\ntotal_time = total_distance / speed + (total_distance // distance_between_rests) * rest_time\nans = total_time", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\nnum_of_stops = distance // 15\ntotal_time = distance / speed + num_of_stops * rest_time\nans = total_time", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\ntime_taken = distance / speed + (distance / 15) * rest_time\nans = math.ceil(time_taken)", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\ntime_to_cover_15_km = 15 / speed + rest_time\ntime_to_cover_100_km = distance / 15 * time_to_cover_15_km\nans = time_to_cover_100_km", "\ndistance = 100\nspeed = 10\nbreak_time = 10 / 60\nnum_breaks = distance / 15\ntotal_time = distance / speed + num_breaks * break_time\nans = total_time", "\ndistance = 100\nrest_time = 10 / 60\nrest_distance = 15\nspeed = 10\ntime_taken = distance / speed + (rest_time * distance / rest_distance)\nans = time_taken", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\ntime_taken = distance / speed + distance / 15 * rest_time\nans = math.ceil(time_taken)", "\ndistance = 100\nspeed = 10\nrest_duration = 10 / 60\ntotal_duration = distance / speed + (distance // 15) * rest_duration\nans = math.ceil(total_duration)", "\nspeed = 10\nrest_time = 10 / 60\ndistance = 15\nnum_stops = 100 / distance\ntotal_time = num_stops * rest_time + 100 / speed\nans = math.ceil(total_time)", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\ntime_to_cover_15_km = 15 / speed + rest_time\ntime_to_cover_100_km = time_to_cover_15_km * 100 / 15\nans = time_to_cover_100_km", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\ntime_to_cover_15_km = 15 / speed + rest_time\ntime_to_cover_100_km = distance / 15 * time_to_cover_15_km\nans = time_to_cover_100_km", "\nspeed = 10\nrest_time = 10 / 60\ndistance_covered_in_one_hour = speed * (1 - rest_time / 15)\ntotal_time = 100 / distance_covered_in_one_hour\nans = math.ceil(total_time)", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\ndistance_covered_before_rest = 15\ntime_to_cover_distance = distance / speed + (distance // distance_covered_before_rest) * rest_time\nans = time_to_cover_distance", "\ndistance = 100\ntime_to_cover_15_km = 15 / 10\ntime_to_cover_100_km = time_to_cover_15_km * (distance / 15)\nans = math.ceil(time_to_cover_100_km)", "\ndistance = 100\nspeed = 10\nrest_time = 10 / 60\ntime_to_cover_15_km = 15 / speed + rest_time\ntime_to_cover_100_km = time_to_cover_15_km * (distance / 15)\nans = math.ceil(time_to_cover_100_km)", "\ntotal_distance = 100\nrest_time = 10 / 60\ndistance_covered_per_hour = 15 - rest_time\nhours_to_cover_total_distance = total_distance / distance_covered_per_hour\nans = hours_to_cover_total_distance", "\nspeed = 10\nrest_time = 10 / 60\ndistance_between_rests = 15\ntotal_distance = 100\ntime_to_cover_distance_between_rests = distance_between_rests / speed\ntime_to_cover_total_distance = (total_distance / distance_between_rests) * (time_to_cover_distance_between_rests + rest_time)\nans = time_to_cover_total_distance", "\ndistance_covered_per_hour = 10\ndistance_covered_per_minute = distance_covered_per_hour / 60\ndistance_covered_per_15_minutes = 15 * distance_covered_per_minute\ndistance_covered_per_hour_with_break = distance_covered_per_hour - distance_covered_per_15_minutes\nans = 100 / distance_covered_per_hour_with_break", "\ndistance_covered_in_one_hour = 10\ndistance_covered_in_one_hour_with_rest = distance_covered_in_one_hour * (60 - 10) / 60\ndistance_covered_in_one_hour_with_rest_and_rest_time = distance_covered_in_one_hour_with_rest * (60 - 10) / 60\nans = 100 / distance_covered_in_one_hour_with_rest_and_rest_time"], "generated_prediction": "12", "options": ["A)9 hours.", "B)10 hours.", "C)11 hours.", "D)12 hours.", "E)13 hours."], "answer": "C", "prediction": "D"}
{"question": "Mr.Sam takes 17 hours to go by train to a certain city and return by car. He loses 4 hours if he goes both ways by train. How long would he have taken if he had traveled by car in both ways?", "generated": ["\ntime_by_train = 17\ntime_by_car = Symbol('time_by_car', positive=True)\nsolution = solve_it(2 * time_by_car - 2 * time_by_train + 4, time_by_car)\nans = solution[time_by_car]", "\ntime_by_train = 17\ntime_by_car = Symbol('time_by_car', positive=True)\nsolution = solve_it(2 * time_by_car + 4 - 2 * time_by_train, time_by_car)\nans = solution[time_by_car]", "\ntime_by_train = 17\ntime_by_car = Symbol('time_by_car', positive=True)\nsolution = solve_it(time_by_train * 2 - 4 - time_by_car * 2, time_by_car)\nans = solution[time_by_car]", "\ntime_by_train = 17\ntime_by_car = Symbol('time_by_car', positive=True)\nsolution = solve_it(time_by_train + time_by_car - 17 - 4, time_by_car)\nans = solution[time_by_car]", "\ntime_by_train = 17\ntime_by_car = Symbol('time_by_car', positive=True)\nsolution = solve_it(time_by_train - time_by_car - 4, time_by_car)\nans = solution[time_by_car]", "\ntime_by_train = 17\ntime_by_car = Symbol('time_by_car', positive=True)\nsolution = solve_it(time_by_train - time_by_car - 4, time_by_car)\nans = solution[time_by_car]", "\ntime_by_train = 17\ntime_by_car = Symbol('time_by_car', positive=True)\nsolution = solve_it(time_by_train - time_by_car - 4, time_by_car)\nans = solution[time_by_car]", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntime_by_car = 17\ntime_by_train = 17 + 4\nsolution = solve_it([time_by_car - 2 * car_speed, time_by_train - 2 * train_speed], [car_speed, train_speed])\nans = 2 * solution[car_speed]", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntrain_time = 17\nsolution = solve_it(car_speed + train_speed - train_time, car_speed)\nans = solution[car_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntotal_time_by_train = 17\ntotal_time_by_car = total_time_by_train - 4\nsolution = solve_it([train_speed + car_speed - total_time_by_train, train_speed - car_speed - total_time_by_car], [train_speed, car_speed])\nans = solution[car_speed]", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntrain_time = 17\ncar_time = train_time - 4\nsolution = solve_it([car_time - 2 * car_speed, train_time - 2 * train_speed], [car_speed, train_speed])\nans = solution[car_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntrain_time = 17\nsolution = solve_it([train_speed + car_speed - train_time, train_speed + car_speed - 4], [train_speed, car_speed])\nans = solution[car_speed]", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntime_by_car = 17\ntime_by_train = time_by_car + 4\nsolution = solve_it([time_by_car - car_speed, time_by_train - 2 * train_speed], [car_speed, train_speed])\nans = solution[car_speed]", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntime_taken_by_car = 17\ntime_taken_by_train = 17 + 4\nsolution = solve_it([car_speed - time_taken_by_car, train_speed - time_taken_by_train], [car_speed, train_speed])\nans = solution[car_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntrain_time = 17\ncar_time = train_time - 4\nsolution = solve_it([train_speed - car_speed - 4, train_speed * train_time - car_speed * car_time], [train_speed, car_speed])\nans = car_time * solution[car_speed]", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntime_by_train = 17\ntime_by_car = time_by_train * train_speed / (car_speed - train_speed)\nsolution = solve_it(time_by_car - (time_by_train - 4), car_speed)\nans = solution[car_speed]", "\ntime_by_train = 17\ntime_by_car = Symbol('time_by_car', positive=True)\nsolution = solve_it(time_by_train + time_by_car - 4 - time_by_train, time_by_car)\nans = solution[time_by_car]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntrain_time = 17\ncar_time = train_time - 4\nsolution = solve_it([train_speed - car_speed, train_time - car_time], [train_speed, car_speed])\nans = solution[car_speed] * 2 * train_time", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntrain_duration = 17\nsolution = solve_it(train_duration - (2 * train_speed / car_speed) - 4, car_speed)\nans = solution[car_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntrain_time = 17\ncar_time = train_time - 4\nsolution = solve_it([train_speed - car_speed - train_time, train_speed + car_speed - car_time], [train_speed, car_speed])\nans = solution[car_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntrain_time = 17\ncar_time = train_time + 4\nsolution = solve_it([train_speed + car_speed - train_time, car_speed - train_speed - car_time], [train_speed, car_speed])\nans = solution[car_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntrain_time = 17\ncar_time = train_time - 4\nsolution = solve_it([train_speed - car_speed, train_time - car_time], [train_speed, car_speed])\nans = solution[car_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ndistance = Symbol('distance', positive=True)\ntrain_time = 17\ncar_time = train_time - 4\nsolution = solve_it([train_speed * train_time - car_speed * car_time, train_speed * train_time - distance], [train_speed, car_speed, distance])\nans = solution[car_speed] * solution[distance] / solution[train_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntrain_distance = Symbol('train_distance', positive=True)\ncar_distance = Symbol('car_distance', positive=True)\ntrain_time = 17\ncar_time = train_time - 4\nsolution = solve_it([train_distance / train_speed + car_distance / car_speed - train_time, train_distance / car_speed + car_distance / car_speed - car_time], [train_distance, car_distance])\nans = solution[car_distance] / car_speed", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntime_by_train = 17\ntime_by_car = time_by_train * train_speed / car_speed\ntime_by_car_both_ways = time_by_car + 4\nans = time_by_car_both_ways", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntime_by_train = 17\ntime_by_car = time_by_train * train_speed / car_speed\nsolution = solve_it(2 * time_by_car - 4 - time_by_train, car_speed)\nans = solution[car_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntrain_time = 17\ncar_time = train_time - 4\nsolution = solve_it([train_speed - car_speed - 4, train_speed + car_speed - train_time], [train_speed, car_speed])\nans = solution[car_speed] * 2", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntotal_time_by_train = 17\ntotal_time_by_car = total_time_by_train - 4\nsolution = solve_it([total_time_by_car - 2 * car_speed, total_time_by_train - 2 * train_speed], [car_speed, train_speed])\nans = solution[car_speed]", "\ntrain_speed = Symbol('train_speed', positive=True)\ncar_speed = Symbol('car_speed', positive=True)\ntotal_distance = Symbol('total_distance', positive=True)\ntrain_time = 17\ncar_time = train_time - 4\nsolution = solve_it([train_speed * train_time - car_speed * car_time, train_speed + car_speed - total_distance], [train_speed, car_speed, total_distance])\nans = solution[car_speed] * 2", "\ncar_speed = Symbol('car_speed', positive=True)\ntrain_speed = Symbol('train_speed', positive=True)\ntime_with_train = 17\ntime_with_car = time_with_train * train_speed / (train_speed - car_speed)\ntime_with_car_both_ways = time_with_car * 2 - 4\nans = time_with_car_both_ways"], "generated_prediction": "13.0", "options": ["A)22 hrs", "B)18 hrs", "C)16 hrs", "D)20 hrs", "E)13 hrs"], "answer": "E", "prediction": "E"}
{"question": "Jim filled his dog's bowl with dog food. Starting at 8:00 am, Jim's dog ate exactly once an hour, consuming exactly 1/3 of the dog food remaining in the bowl at each feeding session. Approximately, what percent of the original food was in the dog's bowl right before the dog began to eat at noon of the same day?", "generated": ["\nans = (1/3) ** 4 * 100", "\nans = 1 - (1 / 3) ** 4", "\nfood_left = 1 / 3 ** 4\nans = food_left * 100", "\nfood_left = 1 / 3 ** 4\nans = food_left * 100", "\nfood_left = 1 / 3 ** 4\nans = food_left * 100", "\nfood_remaining_at_noon = 1 / 3 ** 4\nans = food_remaining_at_noon * 100", "\nfood_left_at_noon = 1 / 3 ** 4\nans = food_left_at_noon * 100", "\nfood_left_at_noon = 1 / 3 ** 4\nans = food_left_at_noon * 100", "\nfood_left_at_noon = 1 / 3 ** 4\nans = food_left_at_noon * 100", "\nfood_left_at_noon = 1 / 3 ** 4\nans = food_left_at_noon * 100", "\nfood_left_at_noon = 1 / 3 ** 4\nans = food_left_at_noon * 100", "\nfood_left_at_noon = 1 / 3 ** 4\nans = food_left_at_noon * 100", "\nfood_left = 1 / 3 ** 3\nans = food_left * 100", "\nfood_left_before_noon = 1 / 3 ** 4\nans = food_left_before_noon * 100", "\nfood_left_before_noon = 1 / 3 ** 4\nans = food_left_before_noon * 100", "\nfood_left = 1\nfor i in range(4):\n    food_left = food_left * 2 / 3\nans = food_left * 100", "\nfood_left = 1 / 3\nfor i in range(4):\n    food_left = food_left * 2 / 3\nans = food_left * 100", "", "\nfood_in_bowl = 1\nfor hour in range(8, 12):\n    food_in_bowl = food_in_bowl - 1 / 3\nans = food_in_bowl * 100", "\nfood_in_bowl = 1\nfor i in range(8, 12):\n    food_in_bowl = food_in_bowl * 2 / 3\nans = food_in_bowl", "\noriginal_food = 1\nfood_left = original_food * (1 - 1 / 3) ** 4\nans = food_left / original_food * 100", "\noriginal_food = 1\nfood_left_at_noon = original_food * (1/3) ** 4\nans = food_left_at_noon * 100", "\namount_of_food = 1\nfor i in range(4):\n    amount_of_food = amount_of_food - 1 / 3\nans = amount_of_food / 1", "\nfood_left = 1/3\nfor i in range(8, 12):\n    food_left *= 2\nans = food_left * 100", "\noriginal_food = 1\nfood_left_after_first_feeding = original_food * 2 / 3\nfood_left_after_second_feeding = food_left_after_first_feeding * 2 / 3\nfood_left_after_third_feeding = food_left_after_second_feeding * 2 / 3\nfood_left_after_fourth_feeding = food_left_after_third_feeding * 2 / 3\nans = food_left_after_fourth_feeding", "\nfood_remaining_at_8am = 1\nfood_remaining_at_9am = food_remaining_at_8am * 2 / 3\nfood_remaining_at_10am = food_remaining_at_9am * 2 / 3\nfood_remaining_at_11am = food_remaining_at_10am * 2 / 3\nfood_remaining_at_12pm = food_remaining_at_11am * 2 / 3\nans = food_remaining_at_12pm * 100", "\ndef get_food_left(time):\n    return 1 / 3 ** (time - 8)", "\noriginal_food = 1\nfood_eaten_by_noon = original_food * (1/3) ** 4\nfood_left_in_bowl = original_food - food_eaten_by_noon\nans = food_left_in_bowl / original_food", "\npercentage_of_food_remaining = (1/3) ** 4\nans = percentage_of_food_remaining * 100", "\nfood_left_at_8am = 1\nfood_left_at_9am = food_left_at_8am * (1 - 1 / 3)\nfood_left_at_10am = food_left_at_9am * (1 - 1 / 3)\nfood_left_at_11am = food_left_at_10am * (1 - 1 / 3)\nfood_left_at_12am = food_left_at_11am * (1 - 1 / 3)\nans = food_left_at_12am * 100"], "generated_prediction": "1.2345679012345678", "options": ["A)20%", "B)25%", "C)30%", "D)35%", "E)40%"], "answer": "A", "prediction": "A"}
{"question": "John conducted a survey about car color. 60% of the people who took the survey were women. Of the men who were surveyed, 75% preferred red cars over green cars. If 10 men liked green cars more than red, how many people took the survey?", "generated": ["\ntotal_people = Symbol('total_people', positive=True)\nwomen = 0.6 * total_people\nmen = total_people - women\nmen_liking_red_cars = 0.75 * men\nmen_liking_green_cars = men - men_liking_red_cars\nsolution = solve_it(men_liking_green_cars - 10, total_people)\nans = solution[total_people]", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_liking_green = 0.25 * num_men\nnum_men_liking_red = num_men - num_men_liking_green\nsolution = solve_it(num_men_liking_red - 10, num_people)\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_liking_green = 0.25 * num_men\nnum_men_liking_red = num_men - num_men_liking_green\nsolution = solve_it(num_men_liking_red - 10, num_people)\nans = solution[num_people]", "\nnum_people_surveyed = Symbol('num_people_surveyed', positive=True)\nnum_women_surveyed = 0.6 * num_people_surveyed\nnum_men_surveyed = num_people_surveyed - num_women_surveyed\nnum_men_preferring_red_cars = 0.75 * num_men_surveyed\nnum_men_preferring_green_cars = num_men_surveyed - num_men_preferring_red_cars\nsolution = solve_it(num_men_preferring_green_cars - 10, num_people_surveyed)\nans = solution[num_people_surveyed]", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_prefer_red = 0.25 * num_men\nnum_men_prefer_green = 10\nsolution = solve_it(num_men_prefer_red + num_men_prefer_green - num_men, num_people)\nans = solution[num_people]", "\npeople_surveyed = Symbol('people_surveyed', positive=True)\nwomen_surveyed = 0.6 * people_surveyed\nmen_surveyed = people_surveyed - women_surveyed\nmen_prefer_red_cars = 0.75 * men_surveyed\nmen_prefer_green_cars = 10\nsolution = solve_it(men_prefer_red_cars - men_prefer_green_cars, people_surveyed)\nans = solution[people_surveyed]", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_liking_red_cars = 0.75 * num_men\nnum_men_liking_green_cars = 10\nsolution = solve_it(num_men_liking_red_cars - num_men_liking_green_cars, num_people)\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_liking_red_cars = 0.25 * num_men\nnum_men_liking_green_cars = 10\nsolution = solve_it(num_men_liking_red_cars + num_men_liking_green_cars - num_men, num_people)\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_liking_red_cars = 0.75 * num_men\nnum_men_liking_green_cars = 10\nsolution = solve_it(num_men_liking_red_cars - num_men_liking_green_cars, num_people)\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_liking_green_cars = 0.25 * num_men\nnum_men_liking_red_cars = num_men - num_men_liking_green_cars\nsolution = solve_it(num_men_liking_red_cars - 10, num_people)\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_liking_green_cars = 0.25 * num_men\nnum_men_liking_red_cars = num_men - num_men_liking_green_cars\nsolution = solve_it(num_men_liking_red_cars - 10, num_people)\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_preferring_red = 0.75 * num_men\nnum_men_preferring_green = 10\nsolution = solve_it(num_men_preferring_red + num_men_preferring_green - num_men, num_people)\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\nnum_men = 0.4 * num_people\nnum_women = 0.6 * num_people\nnum_men_liking_red_cars = 0.25 * num_men\nnum_men_liking_green_cars = num_men - num_men_liking_red_cars\nsolution = solve_it(num_men_liking_green_cars - 10, num_people)\nans = solution[num_people]", "\nnum_people = Symbol('num_people', positive=True)\nnum_men = num_people * 0.4\nnum_women = num_people * 0.6\nnum_men_prefer_green = num_men * 0.25\nnum_men_prefer_red = num_men - num_men_prefer_green\nsolution = solve_it(num_men_prefer_red - 10, num_people)\nans = solution[num_people]", "\nnum_women = 60\nnum_men = 100 - num_women\nnum_men_prefer_red = 0.25 * num_men\nnum_men_prefer_green = 10\nnum_people_surveyed = num_women + num_men\nans = num_people_surveyed", "\nnum_women = 60\nmen_liking_red_cars = 25\ntotal_men = men_liking_red_cars + 10\ntotal_people = total_men + num_women\nans = total_people", "\nnum_people = Symbol('num_people', positive=True)\nnum_women = 0.6 * num_people\nnum_men = num_people - num_women\nnum_men_liking_green_cars = 0.25 * num_men\nnum_men_liking_red_cars = num_men - num_men_liking_green_cars\nsolution = solve_it(num_men_liking_red_cars - num_men_liking_green_cars - 10, num_people)\nans = solution[num_people]", "\nnum_people_surveyed = Symbol('num_people_surveyed', positive=True)\nnum_men = num_people_surveyed * (1 - 0.6)\nnum_men_liking_green_cars = num_men * 0.25\nnum_men_liking_red_cars = num_men - num_men_liking_green_cars\nsolution = solve_it(num_men_liking_red_cars - 10, num_people_surveyed)\nans = solution[num_people_surveyed]", "\nnum_people = Symbol('num_people', positive=True)\nmen_surveyed = (1 - 0.6) * num_people\nmen_prefer_red = men_surveyed * 0.75\nmen_prefer_green = 10\nsolution = solve_it(men_prefer_red + men_prefer_green - men_surveyed, num_people)\nans = solution[num_people]", "\nnum_women = 60\nnum_men = 100 - num_women\nnum_men_liking_red_cars = num_men * 0.75\nnum_men_liking_green_cars = 10\nnum_people_liking_red_cars = num_men_liking_red_cars + num_women\nnum_people_liking_green_cars = num_men_liking_green_cars + num_women\nsolution = solve_it(num_people_liking_red_cars - num_people_liking_green_cars, num_people_liking_red_cars)\nans = solution[num_people_liking_red_cars]", "\ntotal_people = Symbol('total_people', positive=True)\nmen = total_people * (1 - 0.6)\nmen_prefer_red = men * 0.75\nmen_prefer_green = men * 0.25\nmen_prefer_green_over_red = 10\nsolution = solve_it(men_prefer_green - men_prefer_red - men_prefer_green_over_red, total_people)\nans = solution[total_people]", "\nnum_women = 60\nnum_men = 100 - num_women\nnum_men_liking_red_cars = num_men * 0.75\nnum_men_liking_green_cars = 10\nnum_people_liking_green_cars = num_women + num_men_liking_green_cars\nnum_people_liking_red_cars = num_women + num_men_liking_red_cars\nnum_people_taking_survey = num_people_liking_green_cars + num_people_liking_red_cars\nans = num_people_taking_survey", "\nnum_women = 60\nnum_men = 40\nmen_prefer_green = 10\nmen_prefer_red = num_men - men_prefer_green\nsolution = solve_it(num_women + num_men - men_prefer_red / 0.75 - men_prefer_green, num_men)\nans = solution[num_men]", "\nnum_men = Symbol('num_men', positive=True)\nnum_women = Symbol('num_women', positive=True)\nnum_men_liking_green_cars = 10\nnum_men_liking_red_cars = num_men - num_men_liking_green_cars\nnum_women_liking_red_cars = 0.6 * num_women\nnum_people_liking_red_cars = num_men_liking_red_cars + num_women_liking_red_cars\nsolution = solve_it(num_people_liking_red_cars / num_men - 0.75, num_men)\nans = solution[num_men] + num_women", "\nnum_men = Symbol('num_men', positive=True)\nnum_women = Symbol('num_women', positive=True)\nnum_people = num_men + num_women\nmen_liking_green = 0.25 * num_men\nmen_liking_red = num_men - men_liking_green\nwomen_liking_green = 0.4 * num_women\nwomen_liking_red = num_women - women_liking_green\nsolution = solve_it([num_people - 120, men_liking_red - 10], [num_men, num_women])\nans = solution[num_people]", "\nnum_men = Symbol('num_men', positive=True)\nnum_women = Symbol('num_women', positive=True)\nnum_men_liking_red_cars = 0.75 * num_men\nnum_men_liking_green_cars = 10\nnum_women_liking_red_cars = 0.6 * num_women\nnum_people_liking_red_cars = num_men_liking_red_cars + num_women_liking_red_cars\nnum_people_liking_green_cars = num_men_liking_green_cars + num_women_liking_red_cars\nsolution = solve_it([num_people_liking_red_cars - num_people_liking_green_cars, num_men + num_women - 100], [num_men, num_women])\nans = solution[num_men] + solution[num_women]", "\nnum_men = Symbol('num_men', positive=True)\nnum_women = Symbol('num_women', positive=True)\ntotal_people = num_men + num_women\nmen_prefer_red = 0.75 * num_men\nmen_prefer_green = 10\nmen_prefer_red_over_green = men_prefer_red - men_prefer_green\nwomen_prefer_red = 0.6 * num_women\npeople_prefer_red = men_prefer_red_over_green + women_prefer_red\nsolution = solve_it([total_people - 100, people_prefer_red - 60], [num_men, num_women])\nans = solution[num_men] + solution[num_women]", "\nnum_men = Symbol('num_men', positive=True)\nnum_women = Symbol('num_women', positive=True)\nnum_people = num_men + num_women\nnum_men_liking_red_cars = 0.25 * num_men\nnum_men_liking_green_cars = 10\nnum_women_liking_red_cars = 0.6 * num_women\nnum_women_liking_green_cars = 0.4 * num_women\nsolution = solve_it([num_people - 100, num_men_liking_red_cars - num_men_liking_green_cars, num_women_liking_red_cars - num_women_liking_green_cars], [num_men, num_women])\nans = solution[num_people]", "\nnum_women = 60\nnum_men = 40\nmen_liking_red = 75\nmen_liking_green = 25\nmen_liking_green_more = 10\ntotal_people = num_women + num_men\nsolution = solve_it([total_people * men_liking_red / 100 - total_people * num_men / 100 + men_liking_green_more, total_people * men_liking_green / 100 - total_people * num_men / 100 - men_liking_green_more], [total_people, men_liking_red])\nans = solution[total_people]", "\nnum_men = Symbol('num_men', positive=True)\nnum_women = Symbol('num_women', positive=True)\nmen_prefer_red = 0.25 * num_men\nmen_prefer_green = 10\nmen_total = men_prefer_green + men_prefer_red\nwomen_prefer_red = 0.4 * num_women\nwomen_prefer_green = 0.6 * num_women\nwomen_total = women_prefer_green + women_prefer_red\ntotal_surveyed = men_total + women_total\nsolution = solve_it([total_surveyed - 100, men_total - num_men], [num_men, num_women])\nans = solution[num_men] + solution[num_women]"], "generated_prediction": "33.33", "options": ["A)100", "B)120", "C)50", "D)200", "E)80"], "answer": "A", "prediction": "A"}
{"question": "How many ways A boy can reach the top of stairs which contain 10 steps, when he can take either one or two steps every time?", "generated": ["\nsteps = 10\nways = 0\nfor i in range(steps + 1):\n    ways += math.factorial(steps) / (math.factorial(i) * math.factorial(steps - i))\nans = ways", "\nsteps = 10\nways = [1, 1]\nfor i in range(2, steps + 1):\n    ways.append(ways[i - 1] + ways[i - 2])\nans = ways[steps]", "\nnum_steps = 10\nways = 0\nfor i in range(num_steps + 1):\n    ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = ways", "\nnum_steps = 10\nways = 0\nfor i in range(num_steps // 2 + 1):\n    ways += math.factorial(num_steps - i) / (math.factorial(i) * math.factorial(num_steps - 2 * i))\nans = int(ways)", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps + 1):\n    num_ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = num_ways", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps + 1):\n    num_ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = num_ways", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps + 1):\n    num_ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = num_ways", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps + 1):\n    num_ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = num_ways", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps + 1):\n    num_ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = num_ways", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps + 1):\n    num_ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = num_ways", "\nsteps = 10\nways = 0\nfor i in range(steps+1):\n    ways += math.factorial(steps) / (math.factorial(i) * math.factorial(steps - i))\nans = ways", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps // 2 + 1):\n    num_ways += math.factorial(num_steps - i) / (math.factorial(i) * math.factorial(num_steps - 2 * i))\nans = int(num_ways)", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps + 1):\n    num_ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = num_ways", "\nsteps = 10\nways = 0\nfor i in range(steps // 2 + 1):\n    ways += math.factorial(steps - i) / (math.factorial(i) * math.factorial(steps - 2 * i))\nans = ways", "\nnum_steps = 10\nnum_ways = 0\nfor num_one_steps in range(num_steps + 1):\n    num_two_steps = num_steps - num_one_steps\n    num_ways += math.factorial(num_one_steps + num_two_steps) / (math.factorial(num_one_steps) * math.factorial(num_two_steps))\nans = num_ways", "\nnum_steps = 10\nnum_ways = 0\nfor one_step in range(num_steps + 1):\n    two_step = num_steps - one_step\n    num_ways += math.factorial(one_step + two_step) / (math.factorial(one_step) * math.factorial(two_step))\nans = num_ways", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps + 1):\n    num_ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = num_ways", "\nnum_steps = 10\nans = math.factorial(num_steps + 1) / (math.factorial(num_steps - 1) * math.factorial(2))", "\nnum_steps = 10\nways_to_reach_top = 0\nfor i in range(num_steps // 2 + 1):\n    ways_to_reach_top += math.factorial(num_steps - i) / (math.factorial(i) * math.factorial(num_steps - 2 * i))\nans = ways_to_reach_top", "\nnum_steps = 10\nways = [1, 2]\nans = 0\nfor i in range(num_steps):\n    ans += ways[i]", "\nnum_ways = 1\nfor i in range(10):\n    num_ways = num_ways * 2\nans = num_ways", "\nsteps = 10\none_step_ways = 1\ntwo_step_ways = 1\nfor i in range(1, steps):\n    one_step_ways = one_step_ways + two_step_ways\n    two_step_ways = one_step_ways\nans = one_step_ways + two_step_ways", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(num_steps // 2 + 1):\n    num_ways += math.factorial(num_steps - i) / (math.factorial(i) * math.factorial(num_steps - 2 * i))\nans = num_ways", "\nnum_steps = 10\nnum_ways = 0\nfor i in range(0, num_steps + 1):\n    if i % 2 == 0:\n        num_ways += 1\nans = num_ways", "\n# Hint: Use fibonacci series\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)", "\nnum_steps = 10\nways_to_reach_top = 0\nfor i in range(0, num_steps + 1):\n    ways_to_reach_top += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = ways_to_reach_top", "\n# Answer: 89\nnum_steps = 10\nways = 0\nfor i in range(num_steps + 1):\n    ways += math.factorial(num_steps) / (math.factorial(i) * math.factorial(num_steps - i))\nans = ways", "\n# A boy can reach the top of stairs which contain 10 steps, when he can take either one or two steps every time.\n# This is a fibonacci sequence.\nans = math.fib(10)", "\n# Solution: https://www.mathsisfun.com/algebra/sequences-sums-arithmetic.html\n# The formula is:\n# a(n) = a(n-1) + a(n-2)\n# a(0) = 0\n# a(1) = 1\n# a(2) = 1\n# a(3) = 2\n# a(4) = 3\n# a(5) = 5\n# a(6) = 8\n# a(7) = 13\n# a(8) = 21\n# a(9) = 34\n# a(10) = 55\n# a(11) = 89\nans = 89", "\n# Answer: 89\n# Explanation:\n# The boy can take either one or two steps every time.\n# The boy can reach the top of the stairs in 10 steps, if he takes one step every time.\n# The boy can reach the top of the stairs in 5 steps, if he takes two steps every time.\n# So, the boy can reach the top of the stairs in any number of steps, which is a multiple of 2 or 5.\n# The number of steps that are multiples of 2 or 5, between 1 and 10 are: 2, 4, 5, 6, 8, 10.\n# So, the boy can reach the top of the stairs in 6 ways.\n# The boy can reach the top of the stairs in any number of steps, which is a multiple of 2 or 5.\n# The number of steps that are multiples of 2 or 5, between 1 and 20 are: 2, 4, 5, 6, 8, 10, 11, 12, 14, 15, 16, 17, 18, 20.\n# So, the boy can reach the top of the stairs in 14 ways.\n# The boy can reach the top of the stairs in any number of steps"], "generated_prediction": "1024.0", "options": ["A)88", "B)89", "C)90", "D)91", "E)92"], "answer": "B", "prediction": "E"}
{"question": "IF one gallon of soft drink is made of 40% orange juice and 60% water, how many additional gallons of orange juice must be mixed in order to make the orange juice 60% of the soft drink?", "generated": ["\norange_juice = Symbol('orange_juice', positive=True)\nwater = Symbol('water', positive=True)\nsolution = solve_it(orange_juice / (orange_juice + water) - 0.6, orange_juice)\nans = solution[orange_juice]", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_after_mixing = 60\nadditional_orange_juice_percentage = orange_juice_percentage_after_mixing - orange_juice_percentage\nans = additional_orange_juice_percentage / orange_juice_percentage", "\norange_juice = Symbol('orange_juice', positive=True)\nwater = Symbol('water', positive=True)\nsoft_drink = Symbol('soft_drink', positive=True)\nsolution = solve_it([orange_juice + water - soft_drink, 0.4 * soft_drink - orange_juice, 0.6 * soft_drink - water, 0.6 * soft_drink - 1.5 * orange_juice], [orange_juice, water, soft_drink])\nans = solution[soft_drink] - solution[orange_juice]", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_after_mixing = 60\nsolution = solve_it(orange_juice_percentage + orange_juice_percentage_after_mixing - 60, orange_juice_percentage)\nans = solution[orange_juice_percentage]", "\norange_juice_percentage = 40\nwater_percentage = 60\ndesired_orange_juice_percentage = 60\nadditional_orange_juice_percentage = desired_orange_juice_percentage - orange_juice_percentage\nadditional_orange_juice_gallons = additional_orange_juice_percentage / desired_orange_juice_percentage\nans = additional_orange_juice_gallons", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_after_mixing = 60\nsolution = solve_it(orange_juice_percentage + orange_juice_percentage_after_mixing - 60, orange_juice_percentage)\nans = solution[orange_juice_percentage]", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_after_mixing = 60\nsolution = solve_it((orange_juice_percentage + orange_juice_percentage_after_mixing) / (water_percentage + orange_juice_percentage_after_mixing) - 0.6, orange_juice_percentage_after_mixing)\nans = solution[orange_juice_percentage_after_mixing]", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_after_mixing = 60\nadditional_orange_juice = (orange_juice_percentage_after_mixing - orange_juice_percentage) / (orange_juice_percentage_after_mixing - water_percentage)\nans = additional_orange_juice", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_after_mixing = 60\nsolution = solve_it(orange_juice_percentage + orange_juice_percentage_after_mixing - 100, orange_juice_percentage)\nans = solution[orange_juice_percentage] / 100", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_to_be_added = 60 - orange_juice_percentage\nwater_percentage_to_be_added = 100 - orange_juice_percentage_to_be_added - orange_juice_percentage\nans = water_percentage_to_be_added / water_percentage", "\norange_juice = Symbol('orange_juice', positive=True)\nwater = Symbol('water', positive=True)\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_after_mixing = 60\nsolution = solve_it([orange_juice / (orange_juice + water) - orange_juice_percentage / 100, orange_juice / (orange_juice + water) - orange_juice_percentage_after_mixing / 100], [orange_juice, water])\nans = solution[orange_juice]", "\norange_juice_percentage = 40\nwater_percentage = 60\nrequired_orange_juice_percentage = 60\norange_juice_gallons = Symbol('orange_juice_gallons', positive=True)\nwater_gallons = Symbol('water_gallons', positive=True)\nsolution = solve_it([orange_juice_gallons / (orange_juice_gallons + water_gallons) - orange_juice_percentage / 100, orange_juice_gallons / (orange_juice_gallons + water_gallons) - required_orange_juice_percentage / 100], [orange_juice_gallons, water_gallons])\nans = solution[orange_juice_gallons]", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_in_soft_drink = 40\nwater_percentage_in_soft_drink = 60\nsolution = solve_it([orange_juice_percentage + water_percentage - 100, orange_juice_percentage * orange_juice_percentage_in_soft_drink / 100 - 60], [orange_juice_percentage, water_percentage])\nans = solution[orange_juice_percentage]", "\norange_juice = Symbol('orange_juice', positive=True)\nwater = Symbol('water', positive=True)\nsoft_drink = orange_juice + water\norange_juice_percentage = 0.4\nwater_percentage = 0.6\nsolution = solve_it([soft_drink - 1, orange_juice / soft_drink - orange_juice_percentage, water / soft_drink - water_percentage], [orange_juice, water])\nans = solution[orange_juice]", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_to_be_added = (orange_juice_percentage - 60) / (60 - orange_juice_percentage)\nans = orange_juice_to_be_added", "\norange_juice = Symbol('orange_juice', positive=True)\nwater = Symbol('water', positive=True)\ntotal_gallons = orange_juice + water\norange_juice_percentage = orange_juice / total_gallons\nsolution = solve_it(orange_juice_percentage - 0.6, orange_juice)\nans = solution[orange_juice] - 0.4", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_after_mixing = 60\nsolution = solve_it(orange_juice_percentage_after_mixing - orange_juice_percentage - (1 - orange_juice_percentage) * orange_juice_percentage / (1 - orange_juice_percentage - water_percentage), orange_juice_percentage)\nans = solution[orange_juice_percentage]", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_after_mixing = 60\norange_juice_percentage_after_mixing_in_gallons = orange_juice_percentage_after_mixing / (orange_juice_percentage + water_percentage)\nans = orange_juice_percentage_after_mixing_in_gallons - 1", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\nsolution = solve_it([orange_juice_percentage + water_percentage - 100, orange_juice_percentage * 0.4 + water_percentage * 0.6 - 60], [orange_juice_percentage, water_percentage])\nans = (solution[orange_juice_percentage] - 60) / (60 - solution[orange_juice_percentage])", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_after_mixing = 60\nadditional_gallons = (orange_juice_percentage_after_mixing - orange_juice_percentage) / (orange_juice_percentage_after_mixing - water_percentage)\nans = additional_gallons", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_after_mixing = 60\norange_juice_to_be_mixed = orange_juice_percentage_after_mixing - orange_juice_percentage\nans = orange_juice_to_be_mixed / orange_juice_percentage", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_after_mixing = 60\nwater_percentage_after_mixing = 40\nadditional_orange_juice_percentage = orange_juice_percentage_after_mixing - orange_juice_percentage\nans = additional_orange_juice_percentage / orange_juice_percentage", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_in_soft_drink = 40\nwater_percentage_in_soft_drink = 60\norange_juice_percentage_in_soft_drink_after_mixing = 60\nsolution = solve_it([orange_juice_percentage + water_percentage - 100, orange_juice_percentage * orange_juice_percentage_in_soft_drink_after_mixing - orange_juice_percentage_in_soft_drink * orange_juice_percentage], [orange_juice_percentage, water_percentage])\nans = solution[orange_juice_percentage]", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_after_mixing = 60\norange_juice_to_mix = (orange_juice_percentage_after_mixing - orange_juice_percentage) / (100 - orange_juice_percentage)\nans = orange_juice_to_mix", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_in_soft_drink = 40\nwater_in_soft_drink = 60\norange_juice_in_soft_drink_after_mixing = 60\nsolution = solve_it([orange_juice_percentage + water_percentage - 100, orange_juice_in_soft_drink * orange_juice_percentage + water_in_soft_drink * water_percentage - 100 * orange_juice_in_soft_drink, orange_juice_in_soft_drink_after_mixing * orange_juice_percentage + water_in_soft_drink * water_percentage - 100 * orange_juice_in_soft_drink_after_mixing], [orange_juice_percentage, water_percentage])\nans = solution[orange_juice_percentage] - orange_juice_in_soft_drink", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_in_soft_drink = 40\nwater_in_soft_drink = 60\nsolution = solve_it([orange_juice_percentage + water_percentage - 100, orange_juice_percentage * orange_juice_in_soft_drink + water_percentage * water_in_soft_drink - 100], [orange_juice_percentage, water_percentage])\nans = solution[orange_juice_percentage]", "\norange_juice_percentage = 40\nwater_percentage = 60\norange_juice_percentage_after_mixing = 60\norange_juice_percentage_after_mixing = Symbol('orange_juice_percentage_after_mixing', positive=True)\nwater_percentage_after_mixing = Symbol('water_percentage_after_mixing', positive=True)\nsolution = solve_it([orange_juice_percentage_after_mixing + water_percentage_after_mixing - 100, orange_juice_percentage_after_mixing - orange_juice_percentage - water_percentage + water_percentage_after_mixing], [orange_juice_percentage_after_mixing, water_percentage_after_mixing])\nans = solution[orange_juice_percentage_after_mixing]", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_in_soft_drink = 40\nwater_percentage_in_soft_drink = 60\norange_juice_percentage_in_soft_drink_after_mixing = 60\nsolution = solve_it([orange_juice_percentage + water_percentage - 100, orange_juice_percentage * orange_juice_percentage_in_soft_drink / 100 + water_percentage * water_percentage_in_soft_drink / 100 - 100, orange_juice_percentage * orange_juice_percentage_in_soft_drink_after_mixing / 100 + water_percentage * water_percentage_in_soft_drink / 100 - 100], [orange_juice_percentage, water_percentage])\nans = solution[orange_juice_percentage]", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_after_mixing = 60\nsolution = solve_it(orange_juice_percentage + water_percentage - 100, water_percentage)\nwater_percentage = solution[water_percentage]\nsolution = solve_it(orange_juice_percentage + water_percentage - 100, orange_juice_percentage)\norange_juice_percentage = solution[orange_juice_percentage]\nsolution = solve_it(orange_juice_percentage_after_mixing - (orange_juice_percentage + orange_juice_percentage_after_mixing) / 2, orange_juice_percentage_after_mixing)\norange_juice_percentage_after_mixing = solution[orange_juice_percentage_after_mixing]\nans = orange_juice_percentage_after_mixing / orange_juice_percent", "\norange_juice_percentage = Symbol('orange_juice_percentage', positive=True)\nwater_percentage = Symbol('water_percentage', positive=True)\norange_juice_percentage_in_soft_drink = 40\nwater_percentage_in_soft_drink = 60\norange_juice_percentage_in_soft_drink_after_mixing = 60\nsolution = solve_it([orange_juice_percentage + water_percentage - 100, orange_juice_percentage * orange_juice_percentage_in_soft_drink / 100 + water_percentage * water_percentage_in_soft_drink / 100 - 100, orange_juice_percentage * orange_juice_percentage_in_soft_drink_after_mixing / 100 + water_percentage * water_percentage_in_soft_drink / 100 - 100], [orange_juice_percentage, water_percentage])\nans = solution[orange_juice_percentage]"], "generated_prediction": "0.5", "options": ["A)0.5", "B)1", "C)1.25", "D)1.5", "E)2"], "answer": "A", "prediction": "A"}
{"question": "What is the units digit of 9^3-7?", "generated": ["\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = (9 ** 3 - 7) % 10", "\nans = 9 ** 3 - 7 % 10", "\nans = 9 ** 3 - 7 % 10", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7", "\nans = 9 ** 3 - 7"], "generated_prediction": "2", "options": ["A)1", "B)3", "C)5", "D)2", "E)4"], "answer": "D", "prediction": "D"}
{"question": "5 horses are in a race. Mr.Jain selects two of horses at random and bets on them. The probability that he selected the winning horse is", "generated": ["\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nans = 2 / 5", "\nnum_horses = 5\nnum_winning_horses = 1\nans = num_winning_horses / num_horses", "\nnum_horses = 5\nnum_winning_horses = 1\nnum_selections = 2\nans = num_winning_horses / (num_horses ** num_selections)", "\nnum_horses = 5\nnum_winning_horses = 1\nnum_possible_combinations = num_horses * (num_horses - 1)\nnum_winning_combinations = num_winning_horses * (num_horses - 1)\nans = num_winning_combinations / num_possible_combinations", "\nnum_horses = 5\nnum_winning_horses = 1\nnum_losing_horses = num_horses - num_winning_horses\nnum_ways_to_select_winning_horse = num_horses * (num_horses - 1)\nnum_ways_to_select_losing_horse = num_losing_horses * (num_losing_horses - 1)\nnum_ways_to_select_two_horses = num_horses * (num_horses - 1)\nans = num_ways_to_select_winning_horse / num_ways_to_select_two_horses", "\nnum_horses = 5\nnum_winning_horses = 1\nnum_losing_horses = num_horses - num_winning_horses\nnum_ways_to_select_winning_horse = 2\nnum_ways_to_select_losing_horse = num_horses - num_ways_to_select_winning_horse\nnum_ways_to_select_winning_horse_and_losing_horse = num_ways_to_select_winning_horse * num_ways_to_select_losing_horse\nnum_ways_to_select_two_horses = num_horses * (num_horses - 1) / 2\nans = num_ways_to_select_winning_horse_and_losing_horse / num_ways_to_select_two_horses"], "generated_prediction": "0.4", "options": ["A)1/5", "B)2/5", "C)3/5", "D)4/5", "E)6/5"], "answer": "B", "prediction": "D"}
{"question": "On dividing 2272 and 875 by a 3-digit number N, we get the same remainder. The sum of the digits of N is:", "generated": ["\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N', positive=True)\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N', positive=True)\nremainder = Symbol('remainder', positive=True)\nsolution = solve_it([2272 % N - remainder, 875 % N - remainder], [N, remainder])\nans = solution[N]", "\nN = Symbol('N')\nremainder = Symbol('remainder')\nsolution = solve_it([2272 % N - remainder, 875 % N - remainder], [N, remainder])\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N')\nremainder = Symbol('remainder')\nsolution = solve_it([2272 % N - remainder, 875 % N - remainder], [N, remainder])\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N')\nremainder = Symbol('remainder')\nsolution = solve_it([2272 % N - remainder, 875 % N - remainder], [N, remainder])\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N')\nremainder = Symbol('remainder', positive=True)\nsolution = solve_it([2272 % N - remainder, 875 % N - remainder], [N, remainder])\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N', positive=True)\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(map(int, list(str(solution[N]))))", "\nN = Symbol('N', positive=True)\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(map(int, list(str(solution[N]))))", "\nN = Symbol('N', positive=True)\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(int(i) for i in str(solution[N]))", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N')\nremainder = Symbol('remainder')\nsolution = solve_it([2272 % N - remainder, 875 % N - remainder], [N, remainder])\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N')\nremainder = Symbol('remainder')\nsolution = solve_it([2272 % N - remainder, 875 % N - remainder], [N, remainder])\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N', positive=True)\nremainder = Symbol('remainder', positive=True)\nsolution = solve_it([2272 % N - remainder, 875 % N - remainder], [N, remainder])\nans = sum(int(digit) for digit in str(solution[N]))", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N', positive=True)\nsolution = solve_it(N * (2272 // N + 875 // N) - 2272 - 875, N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum(int(digit) for digit in str(solution[N]))", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N')\nsolution = solve_it([N - 2272 % N, N - 875 % N], N)\nans = sum(map(int, str(solution[N])))", "\nN = Symbol('N')\nsolution = solve_it([2272 % N, 875 % N], N)\nans = sum([int(digit) for digit in str(solution[N])])", "\nN = Symbol('N')\nsolution = solve_it([2272 % N - 875 % N, N - (N % 10) - ((N // 10) % 10) - (N // 100)], [N])\nans = solution[N]"], "generated_prediction": "None", "options": ["A)10", "B)11", "C)12", "D)13", "E)14"], "answer": "A", "prediction": "A"}
{"question": "On a test the passing students had an average of 83, while the failing students had an average\nof 55. If the overall class average was 76, what percent of the class passed?", "generated": ["\npass_avg = 83\nfail_avg = 55\noverall_avg = 76\npass_percent = (overall_avg - fail_avg) / (pass_avg - fail_avg)\nans = pass_percent * 100", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_average = 83\nfailing_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_average + failing_students * failing_average - overall_average * (passing_students + failing_students), passing_students - failing_students], [passing_students, failing_students])\nans = solution[passing_students] / (solution[passing_students] + solution[failing_students])", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_average = 83\nfailing_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_average + failing_students * failing_average - overall_average * (passing_students + failing_students), passing_students - failing_students], [passing_students, failing_students])\nans = solution[passing_students] / (solution[passing_students] + solution[failing_students])", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - overall_average * (passing_students + failing_students), passing_students + failing_students - 100], [passing_students, failing_students])\nans = solution[passing_students]", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - overall_average * (passing_students + failing_students), passing_students + failing_students - 100], [passing_students, failing_students])\nans = solution[passing_students]", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_class_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - overall_class_average * (passing_students + failing_students), passing_students - failing_students], [passing_students, failing_students])\nans = solution[passing_students] / (solution[passing_students] + solution[failing_students])", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_average = 83\nfailing_average = 55\ntotal_average = 76\nsolution = solve_it([passing_students * passing_average + failing_students * failing_average - total_average * (passing_students + failing_students), passing_students - failing_students], [passing_students, failing_students])\nans = solution[passing_students] / (solution[passing_students] + solution[failing_students])", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - passing_students - failing_students - overall_average, passing_students + failing_students - 100], [passing_students, failing_students])\nans = solution[passing_students]", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - overall_average * (passing_students + failing_students)], [passing_students])\nans = solution[passing_students] / (passing_students + failing_students)", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_average = 83\nfailing_average = 55\ntotal_average = 76\nsolution = solve_it([passing_students * passing_average + failing_students * failing_average - total_average * (passing_students + failing_students), passing_students - failing_students], [passing_students, failing_students])\npassing_students = solution[passing_students]\nfailing_students = solution[failing_students]\nans = passing_students / (passing_students + failing_students)", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\ntotal_students = passing_students + failing_students\npassing_students_average = 83\nfailing_students_average = 55\ntotal_students_average = 76\nsolution = solve_it([passing_students_average * passing_students + failing_students_average * failing_students - total_students_average * total_students, passing_students - failing_students], [passing_students, failing_students])\nans = solution[passing_students] / total_students", "\npassed_students = Symbol('passed_students', positive=True)\nfailed_students = Symbol('failed_students', positive=True)\npassed_students_average = 83\nfailed_students_average = 55\ntotal_students = passed_students + failed_students\ntotal_average = 76\nsolution = solve_it([passed_students * passed_students_average + failed_students * failed_students_average - total_average * total_students, passed_students - failed_students], [passed_students, failed_students])\nans = solution[passed_students] / total_students", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_average = 83\nfailing_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_average + failing_students * failing_average - overall_average * (passing_students + failing_students), passing_students + failing_students - 100], [passing_students, failing_students])\nans = solution[passing_students]", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\ntotal_students = passing_students + failing_students\npassing_students_average = 83\nfailing_students_average = 55\ntotal_students_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - total_students * total_students_average, passing_students + failing_students - total_students], [passing_students, failing_students])\nans = solution[passing_students] / total_students", "\npassing_students = Symbol('passing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_students_average + (100 - passing_students) * failing_students_average - 100 * overall_average, passing_students - 100], [passing_students])\nans = solution[passing_students]", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_average = 83\nfailing_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_average + failing_students * failing_average - overall_average * (passing_students + failing_students), passing_students + failing_students - 100], [passing_students, failing_students])\nans = solution[passing_students]", "\npassed = Symbol('passed', positive=True)\nfailed = Symbol('failed', positive=True)\npassed_average = 83\nfailed_average = 55\ntotal_average = 76\nsolution = solve_it([passed * passed_average + failed * failed_average - total_average * (passed + failed), passed - failed], [passed, failed])\nans = solution[passed] / (solution[passed] + solution[failed])", "\npassing_students_avg = 83\nfailing_students_avg = 55\noverall_class_avg = 76\nnum_passing_students = (overall_class_avg - failing_students_avg) * 100 / (passing_students_avg - failing_students_avg)\nans = num_passing_students", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_average = 83\nfailing_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_average + failing_students * failing_average - overall_average * (passing_students + failing_students), passing_students + failing_students - 100], [passing_students, failing_students])\nans = solution[passing_students]", "\npassing_students = Symbol('passing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\ntotal_students = passing_students + 100 - passing_students\ntotal_average = 76\nsolution = solve_it([passing_students * passing_students_average + (total_students - passing_students) * failing_students_average - total_students * total_average], [passing_students])\nans = solution[passing_students] / total_students", "\npassed_students = Symbol('passed_students', positive=True)\nfailed_students = Symbol('failed_students', positive=True)\ntotal_students = passed_students + failed_students\npassed_students_average = 83\nfailed_students_average = 55\ntotal_students_average = 76\nsolution = solve_it([passed_students_average * passed_students + failed_students_average * failed_students - total_students_average * total_students, passed_students - failed_students], [passed_students, failed_students])\nans = solution[passed_students] / total_students", "\npassed_students = Symbol('passed_students', positive=True)\nfailed_students = Symbol('failed_students', positive=True)\ntotal_students = passed_students + failed_students\npassed_students_average = 83\nfailed_students_average = 55\ntotal_average = 76\nsolution = solve_it([passed_students * passed_students_average + failed_students * failed_students_average - total_average * total_students, total_students - total_average], [passed_students, failed_students])\nans = solution[passed_students] / total_students", "\npassing_students_avg = 83\nfailing_students_avg = 55\noverall_class_avg = 76\npassing_students_percent = (overall_class_avg - failing_students_avg) / (passing_students_avg - failing_students_avg)\nans = passing_students_percent * 100", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_average = 83\nfailing_average = 55\ntotal_average = 76\nsolution = solve_it([passing_students * passing_average + failing_students * failing_average - total_average * (passing_students + failing_students), passing_students + failing_students - 100], [passing_students, failing_students])\nans = solution[passing_students]", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - overall_average * (passing_students + failing_students), passing_students - failing_students], [passing_students, failing_students])\nans = solution[passing_students] / (solution[passing_students] + solution[failing_students])", "\npassed = Symbol('passed', positive=True)\nfailed = Symbol('failed', positive=True)\ntotal = passed + failed\npassed_average = 83\nfailed_average = 55\ntotal_average = 76\nsolution = solve_it([passed * passed_average + failed * failed_average - total_average * total, passed - failed], [passed, failed])\nans = solution[passed] / total", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - overall_average * (passing_students + failing_students), passing_students + failing_students], [passing_students, failing_students])\nans = solution[passing_students] / (solution[passing_students] + solution[failing_students])", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - overall_average * (passing_students + failing_students), passing_students - failing_students], [passing_students, failing_students])\nans = solution[passing_students] / (solution[passing_students] + solution[failing_students])", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\ntotal_students = passing_students + failing_students\ntotal_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - total_average * total_students, passing_students - failing_students], [passing_students, failing_students])\nans = solution[passing_students] / total_students", "\npassing_students = Symbol('passing_students', positive=True)\nfailing_students = Symbol('failing_students', positive=True)\npassing_students_average = 83\nfailing_students_average = 55\noverall_average = 76\nsolution = solve_it([passing_students * passing_students_average + failing_students * failing_students_average - overall_average * (passing_students + failing_students), passing_students - failing_students], [passing_students, failing_students])\nans = solution[passing_students] / (solution[passing_students] + solution[failing_students])"], "generated_prediction": "75.0", "options": ["A)44%", "B)66%", "C)68%", "D)72%", "E)75%"], "answer": "E", "prediction": "E"}
{"question": "The average wages of a worker during a fortnight comprising of 15 consecutive working days was $90 per day. During the first 7 days, his average wage was $87 per day and the average wage during the last 7 days was $92 per day. What was his wage on the 8th day?", "generated": ["\ntotal_wages = 90 * 15\nwages_in_first_7_days = 87 * 7\nwages_in_last_7_days = 92 * 7\nwages_in_8th_day = total_wages - wages_in_first_7_days - wages_in_last_7_days\nans = wages_in_8th_day", "\nwages_on_8th_day = Symbol('wages_on_8th_day', positive=True)\ntotal_wages = 90 * 15\nwages_in_first_7_days = 87 * 7\nwages_in_last_7_days = 92 * 7\nsolution = solve_it(total_wages - wages_in_first_7_days - wages_in_last_7_days - wages_on_8th_day, wages_on_8th_day)\nans = solution[wages_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wage = 90 * 15\ntotal_wage_first_7_days = 87 * 7\ntotal_wage_last_7_days = 92 * 7\nsolution = solve_it(total_wage - total_wage_first_7_days - total_wage_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wage = 90 * 15\ntotal_wage_first_7_days = 87 * 7\ntotal_wage_last_7_days = 92 * 7\nsolution = solve_it(total_wage - total_wage_first_7_days - total_wage_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwages_on_8th_day = Symbol('wages_on_8th_day', positive=True)\ntotal_wages = 90 * 15\ntotal_wages_first_7_days = 87 * 7\ntotal_wages_last_7_days = 92 * 7\nsolution = solve_it(total_wages - total_wages_first_7_days - total_wages_last_7_days - wages_on_8th_day, wages_on_8th_day)\nans = solution[wages_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wage = 90 * 15\ntotal_wage_first_7_days = 87 * 7\ntotal_wage_last_7_days = 92 * 7\nsolution = solve_it(total_wage - total_wage_first_7_days - total_wage_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wages = 90 * 15\ntotal_wages_first_7_days = 87 * 7\ntotal_wages_last_7_days = 92 * 7\nsolution = solve_it(total_wages - total_wages_first_7_days - total_wages_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wages = 90 * 15\ntotal_wages_first_7_days = 87 * 7\ntotal_wages_last_7_days = 92 * 7\nsolution = solve_it(total_wages - total_wages_first_7_days - total_wages_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wages = 90 * 15\ntotal_wages_first_7_days = 87 * 7\ntotal_wages_last_7_days = 92 * 7\nsolution = solve_it(total_wages - total_wages_first_7_days - total_wages_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwages_on_8th_day = Symbol('wages_on_8th_day', positive=True)\ntotal_wages = 90 * 15\ntotal_wages_in_first_7_days = 87 * 7\ntotal_wages_in_last_7_days = 92 * 7\nsolution = solve_it(total_wages - total_wages_in_first_7_days - total_wages_in_last_7_days - wages_on_8th_day, wages_on_8th_day)\nans = solution[wages_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wage = 90 * 15\ntotal_wage_in_first_7_days = 87 * 7\ntotal_wage_in_last_7_days = 92 * 7\nsolution = solve_it(total_wage - total_wage_in_first_7_days - total_wage_in_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wage = 90 * 15\ntotal_wage_in_first_7_days = 87 * 7\ntotal_wage_in_last_7_days = 92 * 7\nsolution = solve_it(total_wage - total_wage_in_first_7_days - total_wage_in_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wages = 90 * 15\ntotal_wages_in_first_7_days = 87 * 7\ntotal_wages_in_last_7_days = 92 * 7\nsolution = solve_it(total_wages - total_wages_in_first_7_days - total_wages_in_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wage = 90 * 15\nwage_for_first_7_days = 87 * 7\nwage_for_last_7_days = 92 * 7\nsolution = solve_it(total_wage - wage_for_first_7_days - wage_for_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wage = 90 * 15\ntotal_wage_during_first_7_days = 87 * 7\ntotal_wage_during_last_7_days = 92 * 7\nsolution = solve_it(total_wage - (total_wage_during_first_7_days + total_wage_during_last_7_days + wage_on_8th_day), wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwages_8th_day = Symbol('wages_8th_day', positive=True)\ntotal_wages = 90 * 15\nwages_first_7_days = 87 * 7\nwages_last_7_days = 92 * 7\nsolution = solve_it(total_wages - wages_first_7_days - wages_last_7_days - wages_8th_day, wages_8th_day)\nans = solution[wages_8th_day]", "\nwage = Symbol('wage', positive=True)\ntotal_wage = 15 * 90\ntotal_wage_first_7_days = 7 * 87\ntotal_wage_last_7_days = 7 * 92\nsolution = solve_it([total_wage - total_wage_first_7_days - total_wage_last_7_days - wage], [wage])\nans = solution[wage]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wages = 90 * 15\nwages_in_first_7_days = 87 * 7\nwages_in_last_7_days = 92 * 7\nsolution = solve_it(total_wages - wages_in_first_7_days - wages_in_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nday_1_to_7_wages = 87 * 7\nday_8_to_15_wages = 92 * 7\nday_8_wages = (day_1_to_7_wages + day_8_to_15_wages) / 15 - day_1_to_7_wages / 7\nans = day_8_wages", "\nwages_for_first_7_days = 87 * 7\nwages_for_last_7_days = 92 * 7\nwages_for_8th_day = (wages_for_first_7_days + wages_for_last_7_days) / 14 - 90\nans = wages_for_8th_day", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wages = 90 * 15\nwages_in_first_7_days = 87 * 7\nwages_in_last_7_days = 92 * 7\nsolution = solve_it(total_wages - wages_in_first_7_days - wages_in_last_7_days - wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage = Symbol('wage', positive=True)\ntotal_wages = 90 * 15\nfirst_7_days_wages = 87 * 7\nlast_7_days_wages = 92 * 7\nsolution = solve_it([total_wages - first_7_days_wages - last_7_days_wages - wage, first_7_days_wages + wage - last_7_days_wages], [wage])\nans = solution[wage]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wages = 90 * 15\nwages_during_first_7_days = 87 * 7\nwages_during_last_7_days = 92 * 7\nsolution = solve_it(total_wages - wages_during_first_7_days - wages_during_last_7_days + wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wages = 90 * 15\nwages_during_first_7_days = 87 * 7\nwages_during_last_7_days = 92 * 7\nsolution = solve_it(total_wages - wages_during_first_7_days - wages_during_last_7_days + wage_on_8th_day, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwages_in_first_7_days = 87 * 7\nwages_in_last_7_days = 92 * 7\nwages_in_8th_day = wages_in_first_7_days + wages_in_last_7_days + 90 * 15 - wages_in_first_7_days - wages_in_last_7_days\nans = wages_in_8th_day / 15", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wage_for_15_days = 90 * 15\ntotal_wage_for_first_7_days = 87 * 7\ntotal_wage_for_last_7_days = 92 * 7\nsolution = solve_it(total_wage_for_first_7_days + total_wage_for_last_7_days + wage_on_8th_day - total_wage_for_15_days, wage_on_8th_day)\nans = solution[wage_on_8th_day]", "\nwages = Symbol('wages', positive=True)\ndays = 15\nfirst_7_days_average_wage = 87\nlast_7_days_average_wage = 92\nsolution = solve_it([wages * days - 90 * days, wages * 7 - 87 * 7, wages * 8 - 92 * 8], wages)\nans = solution[wages]", "\nwage_on_8th_day = Symbol('wage_on_8th_day', positive=True)\ntotal_wage = 90 * 15\ntotal_wage_before_8th_day = 87 * 7 + wage_on_8th_day\ntotal_wage_after_8th_day = 92 * 7 + wage_on_8th_day\nsolution = solve_it([total_wage_before_8th_day + total_wage_after_8th_day - total_wage, total_wage_before_8th_day - 7 * wage_on_8th_day], [wage_on_8th_day])\nans = solution[wage_on_8th_day]", "\nwages_for_8th_day = Symbol('wages_for_8th_day', positive=True)\ntotal_wages_for_first_7_days = 7 * 87\ntotal_wages_for_last_7_days = 7 * 92\ntotal_wages_for_15_days = 15 * 90\ntotal_wages_for_8_days = wages_for_8th_day + total_wages_for_first_7_days + total_wages_for_last_7_days\nsolution = solve_it(total_wages_for_8_days - total_wages_for_15_days, wages_for_8th_day)\nans = solution[wages_for_8th_day]", "\nwages_8th_day = Symbol('wages_8th_day', positive=True)\ntotal_wages = 90 * 15\nwages_in_first_7_days = 87 * 7\nwages_in_last_7_days = 92 * 7\nsolution = solve_it([wages_in_first_7_days + wages_8th_day + wages_in_last_7_days - total_wages, wages_in_first_7_days + wages_8th_day - 7 * wages_8th_day], [wages_8th_day])\nans = solution[wages_8th_day]"], "generated_prediction": "97.0", "options": ["A)$83", "B)$92", "C)$90", "D)$97", "E)$104"], "answer": "D", "prediction": "D"}
{"question": "Two numbers are in the ratio 3:5. If 9 is subtracted from each, the new numbers are in the ratio 12:23. The smaller number is?", "generated": ["\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nsolution = solve_it([num1 / num2 - 3 / 5, (num1 - 9) / (num2 - 9) - 12 / 23], [num1, num2])\nans = solution[num1]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([3 * x - 5 * y, 12 * (x - 9) - 23 * (y - 9)], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x / y - 3 / 5, (x - 9) / (y - 9) - 12 / 23], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x / y - 3 / 5, (x - 9) / (y - 9) - 12 / 23], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x / y - 3 / 5, (x - 9) / (y - 9) - 12 / 23], [x, y])\nans = solution[x]", "\nratio = 3 / 5\nfirst_number = Symbol('first_number', positive=True)\nsecond_number = Symbol('second_number', positive=True)\nsolution = solve_it([first_number / second_number - ratio, (first_number - 9) / (second_number - 9) - 12 / 23], [first_number, second_number])\nans = solution[first_number]", "\nfirst_num = Symbol('first_num', positive=True)\nsecond_num = Symbol('second_num', positive=True)\nsolution = solve_it([first_num / second_num - 3 / 5, (first_num - 9) / (second_num - 9) - 12 / 23], [first_num, second_num])\nans = solution[first_num]", "\nratio = 3 / 5\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([x / y - ratio, (x - 9) / (y - 9) - 12 / 23], [x, y])\nans = solution[x]", "\nratio = 3 / 5\nsmaller_num = Symbol('smaller_num', positive=True)\nlarger_num = smaller_num * ratio\nsolution = solve_it(larger_num / (smaller_num - 9) - 23 / 12, smaller_num)\nans = solution[smaller_num]", "\nratio1 = 3 / 5\nratio2 = 12 / 23\nsolution = solve_it(ratio1 * x - ratio2 * (x - 9), x)\nans = solution[x]", "\n# x:y = 3:5\n# (x-9):(y-9) = 12:23\n# x-9 = 12 * (y-9) / 23\n# x - y = 12\n# x = y + 12\n# x:y = (y+12):y = 3:5\n# y = 12 * 3 / 5 = 7.2\n# x = y + 12 = 7.2 + 12 = 19.2\nans = 19.2"], "generated_prediction": "55.0", "options": ["A)21", "B)33", "C)35", "D)42", "E)58"], "answer": "B", "prediction": "E"}
{"question": "If 6 yrs are subtracted from the present age of Ajay and the remainder is divided by 18, then the present age of Rahul is obtained. If Rahul is 2 yrs younger to Denis whose age is 5 yrs, then what is Ajay's present age?", "generated": ["\nAjay = Symbol('Ajay', positive=True)\nRahul = Symbol('Rahul', positive=True)\nDenis = Symbol('Denis', positive=True)\nsolution = solve_it([(Ajay - 6) / 18 - Rahul, Rahul - Denis - 2, Denis - 5], [Ajay, Rahul, Denis])\nans = solution[Ajay]", "\nAjay = Symbol('Ajay', positive=True)\nRahul = Symbol('Rahul', positive=True)\nDenis = 5\nsolution = solve_it([(Ajay - 6) / 18 - Rahul, Rahul - Denis - 2], [Ajay, Rahul])\nans = solution[Ajay]", "\nAjay = Symbol('Ajay', positive=True)\nRahul = Symbol('Rahul', positive=True)\nDenis = 5\nsolution = solve_it([(Ajay - 6) / 18 - Rahul, Rahul - Denis - 2], [Ajay, Rahul])\nans = solution[Ajay]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = 5\nsolution = solve_it([(ajay_age - 6) / 18 - rahul_age, rahul_age - denis_age - 2], [ajay_age, rahul_age])\nans = solution[ajay_age]", "\najay = Symbol('ajay', positive=True)\nsolution = solve_it(ajay - 6 - ajay / 18 - 5, ajay)\nans = solution[ajay]", "\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it(ajay_age - 6 - (ajay_age - 6) / 18 - (ajay_age - 8) - 5, ajay_age)\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = 5\nsolution = solve_it([ajay_age - 6 - 18 * rahul_age, rahul_age - denis_age - 2], [ajay_age, rahul_age])\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = 5\nsolution = solve_it([ajay_age - 6 - 18 * rahul_age, rahul_age - denis_age - 2], [ajay_age, rahul_age])\nans = solution[ajay_age]", "\nAjay = Symbol('Ajay', positive=True)\nRahul = Symbol('Rahul', positive=True)\nDenis = Symbol('Denis', positive=True)\nsolution = solve_it([Ajay - 6 - 18, Rahul - 2, Denis - 5], [Ajay, Rahul, Denis])\nans = solution[Ajay]", "\nAjay_age = Symbol('Ajay_age', positive=True)\nRahul_age = Symbol('Rahul_age', positive=True)\nDenis_age = Symbol('Denis_age', positive=True)\nsolution = solve_it([(Ajay_age - 6) / 18 - Rahul_age, Rahul_age - Denis_age - 2, Denis_age - 5], [Ajay_age, Rahul_age, Denis_age])\nans = solution[Ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it(ajay_age - 6 - (ajay_age - 6) / 18 - (ajay_age - 8), ajay_age)\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it(ajay_age - 6 - (ajay_age - 6) / 18 - (ajay_age - 8), ajay_age)\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = 5\nsolution = solve_it([ajay_age - 6 - 18 - rahul_age, rahul_age - denis_age - 2], [ajay_age, rahul_age])\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = 5\nsolution = solve_it([ajay_age - 6 - rahul_age / 18, rahul_age - denis_age - 2], [ajay_age, rahul_age])\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = 5\nsolution = solve_it([ajay_age - 6 - 18, rahul_age - denis_age - 2], [ajay_age, rahul_age])\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = 5\nsolution = solve_it([ajay_age - 6 - 18, rahul_age - denis_age - 2], [ajay_age, rahul_age])\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\ndenis_age = 5\nrahul_age = denis_age + 2\nsolution = solve_it(ajay_age - 6 - rahul_age * 18, ajay_age)\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\ndenis_age = 5\nrahul_age = denis_age + 2\nsolution = solve_it(ajay_age - 6 - rahul_age * 18, ajay_age)\nans = solution[ajay_age]", "\nage_of_ajay = Symbol('age_of_ajay', positive=True)\nage_of_rahul = Symbol('age_of_rahul', positive=True)\nage_of_denis = 5\nsolution = solve_it([age_of_ajay - age_of_rahul - 2, age_of_rahul - age_of_denis - 2, (age_of_ajay - 6) / 18 - age_of_rahul], [age_of_ajay, age_of_rahul])\nans = solution[age_of_ajay]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = Symbol('denis_age', positive=True)\nsolution = solve_it([ajay_age - 6 - 18 * rahul_age, rahul_age - 2 - denis_age, denis_age - 5], [ajay_age, rahul_age, denis_age])\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it(ajay_age - 6 - 18 * (ajay_age - 6) / 18 - 5 - 2, ajay_age)\nans = solution[ajay_age]", "\nAjay_age = Symbol('Ajay_age', positive=True)\nRahul_age = Symbol('Rahul_age', positive=True)\nDenis_age = Symbol('Denis_age', positive=True)\nsolution = solve_it([Ajay_age - 6 - 18 * Rahul_age, Rahul_age - Denis_age - 2, Denis_age - 5], [Ajay_age, Rahul_age, Denis_age])\nans = solution[Ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = Symbol('denis_age', positive=True)\nsolution = solve_it([ajay_age - 6 - rahul_age, rahul_age - denis_age - 2, denis_age - 5], [ajay_age, rahul_age, denis_age])\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it(ajay_age - 6 - 18 * (ajay_age - 6) / 18 - 5 + 2, ajay_age)\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = Symbol('rahul_age', positive=True)\ndenis_age = Symbol('denis_age', positive=True)\nsolution = solve_it([ajay_age - 6 - rahul_age, rahul_age - 2 - denis_age, denis_age - 5], [ajay_age, rahul_age, denis_age])\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\ndenis_age = Symbol('denis_age', positive=True)\nsolution = solve_it([ajay_age - 6 - (ajay_age - 6) / 18 - denis_age + 2, denis_age - 5], [ajay_age, denis_age])\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it(ajay_age - 6 - 18 - (ajay_age - 6 - 18 - 5 - 2), ajay_age)\nans = solution[ajay_age]", "\najay_age = Symbol('ajay_age', positive=True)\nsolution = solve_it(ajay_age - 6 - 18 - (ajay_age - 6 - 18 - 5) - 2, ajay_age)\nans = solution[ajay_age]", "\nAjay = Symbol('Ajay', positive=True)\nRahul = Symbol('Rahul', positive=True)\nDenis = Symbol('Denis', positive=True)\nsolution = solve_it([Ajay - 6 - 18, Rahul - Denis - 2, Denis - 5], [Ajay, Rahul, Denis])\nans = solution[Ajay]", "\najay_age = Symbol('ajay_age', positive=True)\nrahul_age = ajay_age - 6\ndenis_age = rahul_age - 2\nsolution = solve_it([rahul_age - (ajay_age - 6) / 18, denis_age - 5], [ajay_age, rahul_age])\nans = solution[ajay_age]"], "generated_prediction": "132.0", "options": ["A)40", "B)60", "C)70", "D)80", "E)90"], "answer": "B", "prediction": "D"}
{"question": "Anna has 4 books. If she decide to arrange the 4 books in every possible combination and moved just one book every minute, how long would it taken by her ?", "generated": ["\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nbooks = 4\nans = math.factorial(books)", "\nans = math.factorial(4)", "\nans = math.factorial(4)", "\nans = math.factorial(4)", "\nimport math\nans = math.factorial(4)", "\nnum_books = 4\nans = math.factorial(num_books)", "\nnum_books = 4\nans = math.factorial(num_books)", "\nnum_books = 4\nnum_combinations = math.factorial(num_books)\nans = num_combinations", "\nnum_books = 4\nnum_combinations = math.factorial(num_books)\nans = num_combinations", "\nnum_books = 4\nnum_combinations = math.factorial(num_books)\nans = num_combinations", "\nnum_books = 4\nnum_combinations = math.factorial(num_books)\nans = num_combinations", "\nnum_books = 4\nnum_combinations = math.factorial(num_books)\nans = num_combinations", "\nnum_books = 4\nnum_combinations = math.factorial(num_books)\nans = num_combinations", "\nnum_books = 4\nnum_combinations = math.factorial(num_books)\nans = num_combinations", "\nnum_books = 4\nnum_combinations = math.factorial(num_books)\nans = num_combinations * 1", "\ntotal_books = 4\ntotal_combinations = math.factorial(total_books)\nans = total_combinations", "\nnum_books = 4\nnum_combinations = math.factorial(num_books)\ntime_taken = num_combinations * 1\nans = time_taken"], "generated_prediction": "24", "options": ["A)22 minutes", "B)30 minutes", "C)15 minutes", "D)24 minutes", "E)35 minutes"], "answer": "D", "prediction": "D"}
{"question": "The manufacturer of tyres is offering a 20% discount on the price of its tubeless tyres. Some retailers are offering additional discounts. If a retailer offers an additional 20% discount, then what is the total discount available at that retailer?", "generated": ["\nmanufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = manufacturer_discount + retailer_discount\nans = total_discount", "\nmanufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = manufacturer_discount + retailer_discount\nans = total_discount", "\nmanufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = manufacturer_discount + retailer_discount\nans = total_discount", "\nmanufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = manufacturer_discount + retailer_discount\nans = total_discount", "\nmanufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = manufacturer_discount + retailer_discount\nans = total_discount", "\nmanufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = manufacturer_discount + retailer_discount\nans = total_discount", "\nmanufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = manufacturer_discount + retailer_discount\nans = total_discount", "\nmanufacturer_discount = 0.2\nretailer_discount = 0.2\ntotal_discount = manufacturer_discount + retailer_discount\nans = total_discount", "\ndiscount = 0.2\nadditional_discount = 0.2\ntotal_discount = discount + additional_discount\nans = total_discount", "\ndiscount = 0.2\nadditional_discount = 0.2\ntotal_discount = discount + additional_discount\nans = total_discount", "\ndiscount = 0.2\nadditional_discount = 0.2\ntotal_discount = discount + additional_discount\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\nans = discount_1 + discount_2", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2\nans = total_discount", "\ndiscount_by_manufacturer = 0.2\ndiscount_by_retailer = 0.2\ntotal_discount = discount_by_manufacturer + discount_by_retailer\nans = total_discount", "\ndiscount_by_manufacturer = 0.2\ndiscount_by_retailer = 0.2\ntotal_discount = discount_by_manufacturer + discount_by_retailer\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2 * (1 - discount_1)\nans = total_discount", "\ndiscount_1 = 0.2\ndiscount_2 = 0.2\ntotal_discount = discount_1 + discount_2 * (1 - discount_1)\nans = total_discount", "\ndiscount_1 = 20\ndiscount_2 = 20\ntotal_discount = discount_1 + discount_2 * (100 - discount_1) / 100\nans = total_discount", "\ndiscount_1 = 20\ndiscount_2 = 20\ntotal_discount = discount_1 + discount_2 * (100 - discount_1) / 100\nans = total_discount", "\ndiscount = Symbol('discount', positive=True)\nsolution = solve_it(discount * (1 - discount) - 0.2 * 0.2, discount)\nans = solution[discount]", "\ndiscount_percentage = Symbol('discount_percentage', positive=True)\nsolution = solve_it(discount_percentage * (1 - discount_percentage / 100) - 0.2, discount_percentage)\nans = solution[discount_percentage]"], "generated_prediction": "0.4", "options": ["A)10%", "B)25%", "C)28%", "D)30%", "E)36%"], "answer": "E", "prediction": "B"}
{"question": "A rectangular parking space is marked out by painting three of its sides. If the length of the unpainted side is 9 feet, and the sum of the lengths of the painted sides is 37 feet, then what is the area of the parking space in square feet?", "generated": ["\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height - unpainted_side, 2 * (width + height) - painted_sides], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height - unpainted_side, 2 * (width + height) - painted_sides], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height - unpainted_side, 2 * (width + height) - painted_sides], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height - unpainted_side, 2 * (width + height) - painted_sides], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height - unpainted_side, 2 * (width + height) - painted_sides], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + length - unpainted_side, 2 * (width + length) - painted_sides], [width, length])\nans = solution[width] * solution[length]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height + unpainted_side - painted_sides], [width, height])\nans = solution[width] * solution[height]", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([length * width - unpainted_side, 2 * (length + width) - painted_sides], [length, width])\nans = solution[length] * solution[width]", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\nunpainted_side = 9\npainted_side = 37 - unpainted_side\nsolution = solve_it([width + length - unpainted_side, 2 * (width + length) - painted_side], [width, length])\nans = solution[width] * solution[length]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_side = 37 - unpainted_side\nsolution = solve_it([width + height - painted_side, width * height - unpainted_side], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_side = 37\nsolution = solve_it([width + height - unpainted_side, 2 * (width + height) - painted_side], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height + unpainted_side - painted_sides, width * height - 252], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height + unpainted_side - painted_sides, width * height - 252], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height + unpainted_side - painted_sides, width * height - 252], [width, height])\nans = solution[width] * solution[height]", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nsolution = solve_it([length + width - 9, 2 * (length + width) - 37], [length, width])\nans = solution[length] * solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height + unpainted_side - painted_sides, width * height - 252], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height + unpainted_side - painted_sides, width * height - 252], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\nsolution = solve_it([width + length - 9, 2 * (width + length) - 37], [width, length])\nans = solution[width] * solution[length]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height + unpainted_side - painted_sides, width * height - 252], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([width + height + unpainted_side - painted_sides, width * height - 252], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\nunpainted_side = 9\nsum_of_painted_sides = 37\nsolution = solve_it([width + length + unpainted_side - sum_of_painted_sides, width * length - 252], [width, length])\nans = solution[width] * solution[length]", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nsolution = solve_it([length + width - 9, 2 * (length + width) - 37], [length, width])\nans = solution[length] * solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = width * height\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([area - unpainted_side * height, width + height - painted_sides], [width, height])\nans = solution[width] * solution[height]", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([length + width + unpainted_side - painted_sides, length * width - 252], [length, width])\nans = solution[length] * solution[width]", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\nunpainted_side = 9\npainted_sides = 37\nsolution = solve_it([length + width + unpainted_side - painted_sides, length * width - 252], [length, width])\nans = solution[length] * solution[width]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\npainted_sides_length = 37\nunpainted_side_length = 9\nsolution = solve_it([width + unpainted_side_length - painted_sides_length, width * height - unpainted_side_length * width], [width, height])\nans = solution[width] * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = width * height\nsolution = solve_it([area - 9 * (37 - 2 * width), width + height - 37], [width, height])\nans = solution[width] * solution[height]", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\narea = length * width\nsolution = solve_it([area - 46, length + width - 37], [length, width])\nans = (solution[length], solution[width])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = width * height\nsolution = solve_it([area - 46, width + height - 9, width + 2 * height - 37], [width, height])\nans = (solution[width], solution[height])", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\narea = length * width\nsolution = solve_it([area - 46, length + width - 9, length + width + length - 37], [length, width])\nans = solution[length] * solution[width]"], "generated_prediction": "9.0", "options": ["A)46", "B)81", "C)126", "D)252", "E)None"], "answer": "C", "prediction": "A"}
{"question": "Peter wants to find 10 additional people to form a scavenger hunt team with him. If he has 10 friends who would like to participate, how many choices does he have for forming his team?", "generated": ["\nans = math.factorial(10) / math.factorial(10 - 10)", "\nimport math\nans = math.factorial(10)", "\nimport math\nans = math.factorial(10)", "\nimport math\nans = math.factorial(10)", "\nans = math.factorial(10) / (math.factorial(10 - 10) * math.factorial(10))", "\nfrom math import factorial\nans = factorial(10)", "\nfrom math import factorial\nans = factorial(10)", "\nfrom math import factorial\nans = factorial(10)", "\nfrom math import factorial\nans = factorial(10)", "\nfrom math import factorial\nans = factorial(10)", "\nfrom math import factorial\nans = factorial(10) / factorial(10 - 10)", "\nfrom math import factorial\nans = factorial(10) / (factorial(10 - 10) * factorial(10))", "\nfrom math import factorial\nans = factorial(10) / factorial(10 - 10)", "\nfrom math import factorial\nans = factorial(10) / (factorial(10 - 10) * factorial(10))", "\nfrom math import factorial\nans = factorial(10) / (factorial(10 - 10) * factorial(10))", "\nfrom scipy.special import comb\nans = comb(10, 10, exact=True)", "\nfrom math import factorial\nans = factorial(10) / (factorial(10 - 10) * factorial(10))", "\nfrom math import factorial\nans = factorial(10) / (factorial(10 - 10) * factorial(10))", "\nn = 10\nr = 10\nans = math.factorial(n) / (math.factorial(r) * math.factorial(n - r))", "\nfrom sympy.functions.combinatorial.numbers import nC\nans = nC(10, 10)", "\nfrom scipy.special import comb\nans = comb(10, 10)", "\nfrom scipy.special import comb\nans = comb(10, 10)", "\nfrom scipy.special import comb\nans = comb(10, 10)", "\nfrom scipy.special import comb\nans = comb(10, 10)", "\nfrom scipy.special import comb\nans = comb(10, 10)", "\nfrom math import factorial\nans = factorial(10) / factorial(10-10)", "\nfrom itertools import combinations\nans = len(list(combinations(range(10), 10)))", "\nimport math\nans = math.factorial(10) / math.factorial(10 - 10)", "\nimport math\nans = math.factorial(10) / math.factorial(10 - 10)", "\nfrom itertools import combinations\nfriends = [1,2,3,4,5,6,7,8,9,10]\nadditional_people = [1,2,3,4,5,6,7,8,9,10]\nans = len(list(combinations(additional_people, 10)))"], "generated_prediction": "1.0", "options": ["A)0", "B)1", "C)2", "D)3", "E)4"], "answer": "B", "prediction": "B"}
{"question": "The average weight of 10 oarsmen in a boat is increased by 1.8 kg when one of the crew, who weighs 53 kg is replaced by a new man. Find the weight of the new man.", "generated": ["\noriginal_weight = 10 * 53\nnew_weight = original_weight - 53 + 1.8 * 10\nnew_man_weight = new_weight / 10\nans = new_man_weight", "\nnew_man_weight = Symbol('new_man_weight', positive=True)\naverage_weight = 10 * 53 / 11 + 1.8\nsolution = solve_it(new_man_weight - average_weight, new_man_weight)\nans = solution[new_man_weight]", "\nold_average_weight = 53\nnew_average_weight = old_average_weight + 1.8\nnew_man_weight = new_average_weight * 10 - old_average_weight * 9\nans = new_man_weight", "\nweight = Symbol('weight', positive=True)\ntotal_weight = 10 * weight + 53\nnew_total_weight = total_weight + 1.8 * 10\nsolution = solve_it(new_total_weight - total_weight - 1.8, weight)\nans = solution[weight]", "\nnum_oarsmen = 10\ntotal_weight = 10 * 53\nnew_weight = total_weight + 1.8 * num_oarsmen\nnew_man_weight = new_weight / num_oarsmen\nans = new_man_weight", "\nweight = Symbol('weight', positive=True)\ntotal_weight = 10 * weight + 53\nnew_total_weight = total_weight + 1.8 * 10\nsolution = solve_it(new_total_weight - total_weight - 1.8 * 10, weight)\nans = solution[weight]", "\nweight = Symbol('weight', positive=True)\ntotal_weight = 10 * weight + 53\nnew_total_weight = total_weight + 1.8 * 10\nsolution = solve_it(new_total_weight - total_weight - 1.8 * 10, weight)\nans = solution[weight]", "\nnum_oarsmen = 10\ntotal_weight_before_replacement = 10 * 53\ntotal_weight_after_replacement = total_weight_before_replacement + 1.8 * num_oarsmen\nnew_man_weight = total_weight_after_replacement / num_oarsmen\nans = new_man_weight", "\nnew_man_weight = Symbol('new_man_weight', positive=True)\naverage_weight = (10 * 53 + new_man_weight) / 10\nsolution = solve_it(average_weight - (10 * 53 + 1.8) / 10, new_man_weight)\nans = solution[new_man_weight]", "\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\naverage_weight_of_10_oarsmen = (10 * 53 + weight_of_new_man) / 10\nsolution = solve_it(average_weight_of_10_oarsmen - 53 - 1.8, weight_of_new_man)\nans = solution[weight_of_new_man]", "\nnew_man_weight = Symbol('new_man_weight', positive=True)\naverage_weight = (10 * 53 + new_man_weight) / 10\nsolution = solve_it(average_weight - 53 - 1.8, new_man_weight)\nans = solution[new_man_weight]", "\nnum_oarsmen = 10\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\ntotal_weight = 10 * 53 + weight_of_new_man\naverage_weight = total_weight / num_oarsmen\nsolution = solve_it(average_weight - 53 - 1.8, weight_of_new_man)\nans = solution[weight_of_new_man]", "\naverage_weight = Symbol('average_weight', positive=True)\nnew_man_weight = Symbol('new_man_weight', positive=True)\nold_man_weight = 53\nsolution = solve_it([average_weight * 10 + 1.8 - old_man_weight, average_weight * 11 - new_man_weight], [average_weight, new_man_weight])\nans = solution[new_man_weight]", "\nnew_man_weight = Symbol('new_man_weight', positive=True)\naverage_weight = (10 * 53 + new_man_weight) / 10 - 1.8\nsolution = solve_it(average_weight - 53, new_man_weight)\nans = solution[new_man_weight]", "\nnew_man_weight = Symbol('new_man_weight', positive=True)\naverage_weight = 10 * (53 + new_man_weight) / 11 - 53\nsolution = solve_it(average_weight - 1.8, new_man_weight)\nans = solution[new_man_weight]", "\nnew_man_weight = Symbol('new_man_weight', positive=True)\naverage_weight = (10 * 53 + new_man_weight) / 10\nsolution = solve_it(average_weight - 53 - 1.8, new_man_weight)\nans = solution[new_man_weight]", "\ntotal_weight = 10 * 53 + 1.8 * 10\nnew_man_weight = Symbol('new_man_weight', positive=True)\nsolution = solve_it(total_weight - new_man_weight - 10 * 53, new_man_weight)\nans = solution[new_man_weight]", "\nnew_man_weight = Symbol('new_man_weight', positive=True)\naverage_weight = Symbol('average_weight', positive=True)\ntotal_weight = average_weight * 10\ntotal_weight_after_replacement = total_weight - 53 + new_man_weight\nsolution = solve_it(total_weight_after_replacement - total_weight - 1.8 * 10, new_man_weight)\nans = solution[new_man_weight]", "\nold_average_weight = Symbol('old_average_weight', positive=True)\nnew_average_weight = Symbol('new_average_weight', positive=True)\nnew_man_weight = Symbol('new_man_weight', positive=True)\nsolution = solve_it([10 * old_average_weight + 53 - 10 * new_average_weight, new_average_weight - old_average_weight - 1.8, new_man_weight - new_average_weight], [old_average_weight, new_average_weight, new_man_weight])\nans = solution[new_man_weight]", "\naverage_weight = Symbol('average_weight', positive=True)\nnum_oarsmen = 10\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\nsolution = solve_it(average_weight * num_oarsmen + weight_of_new_man - (average_weight * num_oarsmen + 53), weight_of_new_man)\nans = solution[weight_of_new_man]", "\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\nweight_of_old_man = 53\nweight_of_9_men = 9 * (weight_of_new_man + 1.8)\nans = weight_of_9_men - weight_of_old_man", "\nweight = Symbol('weight', positive=True)\ntotal_weight = 10 * weight + 53\ntotal_weight_after_replacement = 10 * (weight + 1.8) + weight\nsolution = solve_it(total_weight - total_weight_after_replacement, weight)\nans = solution[weight]", "\naverage_weight_of_oarsmen = Symbol('average_weight_of_oarsmen', positive=True)\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\nweight_of_old_man = 53\nsolution = solve_it([average_weight_of_oarsmen * 10 + weight_of_old_man - (average_weight_of_oarsmen + 1.8) * 10, weight_of_new_man - average_weight_of_oarsmen], [average_weight_of_oarsmen, weight_of_new_man])\nans = solution[weight_of_new_man]", "\nnum_oarsmen = 10\nweight_increase = 1.8\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\nweight_of_old_man = 53\naverage_weight_before_change = (num_oarsmen * weight_increase + weight_of_old_man) / num_oarsmen\naverage_weight_after_change = (num_oarsmen * weight_increase + weight_of_new_man) / num_oarsmen\nsolution = solve_it(average_weight_before_change - average_weight_after_change, weight_of_new_man)\nans = solution[weight_of_new_man]", "\nnum_oarsmen = 10\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\nweight_of_old_man = 53\naverage_weight_increase = 1.8\naverage_weight_before_change = (num_oarsmen * average_weight_increase + weight_of_old_man) / num_oarsmen\naverage_weight_after_change = (num_oarsmen * average_weight_increase + weight_of_new_man) / num_oarsmen\nsolution = solve_it(average_weight_before_change - average_weight_after_change, weight_of_new_man)\nans = solution[weight_of_new_man]", "\noriginal_average_weight = Symbol('original_average_weight', positive=True)\nnew_average_weight = Symbol('new_average_weight', positive=True)\noriginal_weight_of_new_man = 53\nnew_weight_of_new_man = Symbol('new_weight_of_new_man', positive=True)\nsolution = solve_it([(original_average_weight * 10 - original_weight_of_new_man + new_weight_of_new_man) / 10 - new_average_weight, new_weight_of_new_man - original_weight_of_new_man - 1.8], [original_average_weight, new_weight_of_new_man])\nans = solution[new_weight_of_new_man]", "\ntotal_weight = Symbol('total_weight', positive=True)\nnum_oarsmen = 10\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\nweight_of_old_man = 53\nsolution = solve_it([total_weight + weight_of_new_man - (total_weight + weight_of_old_man) / num_oarsmen - 1.8, total_weight - num_oarsmen * (total_weight + weight_of_old_man) / num_oarsmen], [total_weight, weight_of_new_man])\nans = solution[weight_of_new_man]", "\nnew_man_weight = Symbol('new_man_weight', positive=True)\ntotal_weight = 10 * 53 + new_man_weight\nnew_average_weight = total_weight / 10 + 1.8\nans = new_average_weight * 10 - total_weight", "\naverage_weight = Symbol('average_weight', positive=True)\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\nweight_of_old_man = 53\nsolution = solve_it([average_weight * 10 + weight_of_new_man - 10 * (average_weight + 1.8), average_weight * 10 + weight_of_old_man - 10 * average_weight], [average_weight, weight_of_new_man])\nans = solution[weight_of_new_man]", "\ntotal_weight = Symbol('total_weight', positive=True)\nnum_oarsmen = 10\nweight_of_new_man = Symbol('weight_of_new_man', positive=True)\nweight_of_replaced_man = 53\nsolution = solve_it([total_weight + weight_of_new_man - (total_weight + weight_of_replaced_man) / num_oarsmen - 1.8, total_weight - num_oarsmen * (total_weight + weight_of_replaced_man) / num_oarsmen], [total_weight, weight_of_new_man])\nans = solution[weight_of_new_man]"], "generated_prediction": "18.0", "options": ["A)71", "B)62", "C)43", "D)67", "E)40"], "answer": "A", "prediction": "A"}
{"question": "A box contains a certain number of balls, marked successively from 1 to n. If there are 45 different ways that two balls can be selected from the box such that the ball with number 3 marked on it is not selected, then what is the value of n?", "generated": ["\nn = Symbol('n', positive=True)\nsolution = solve_it(n * (n - 1) - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nsolution = solve_it(n * (n - 1) - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nsolution = solve_it(n * (n - 1) - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nsolution = solve_it(n * (n - 1) - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nsolution = solve_it(n * (n - 1) - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nsolution = solve_it(math.factorial(n) - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nans = solve_it(n * (n - 1) / 2 - 45, n)[n]", "\nn = Symbol('n')\nnum_ways = 45\nsolution = solve_it(n * (n - 1) / 2 - num_ways, n)\nans = solution[n]", "\nn = Symbol('n')\nnum_ways = 45\nsolution = solve_it(n * (n - 1) / 2 - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(n * (n - 1) - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(n * (n - 1) - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(n * (n - 1) - num_ways, n)\nans = solution[n]", "\nn = Symbol('n')\nnum_ways = 45\nsolution = solve_it(math.factorial(n - 1) - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(math.factorial(n) - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nways_of_selecting_two_balls = n * (n - 1) / 2\nsolution = solve_it(ways_of_selecting_two_balls - 45, n)\nans = solution[n]", "\nn = Symbol('n')\nnum_ways = 45\nsolution = solve_it(n * (n - 1) - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(math.factorial(n) / math.factorial(n - 2) - num_ways - 1, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(n * (n - 1) / 2 - num_ways - 3, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nsolution = solve_it(n * (n - 1) / 2 - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nsolution = solve_it(n * (n - 1) / 2 - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nsolution = solve_it(n * (n - 1) / 2 - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nways_to_select_two_balls = n * (n - 1) / 2\nways_to_select_two_balls_without_3 = ways_to_select_two_balls - (n - 1)\nsolution = solve_it(ways_to_select_two_balls_without_3 - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nways_to_select_two_balls = n * (n - 1) / 2\nways_to_select_two_balls_without_3 = ways_to_select_two_balls - (n - 1)\nsolution = solve_it(ways_to_select_two_balls_without_3 - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nways_to_select_two_balls = n * (n - 1)\nways_to_select_two_balls_without_3 = ways_to_select_two_balls - (n - 1)\nsolution = solve_it(ways_to_select_two_balls_without_3 - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(n * (n - 1) / 2 - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nways_to_select_2_balls = n * (n - 1) / 2\nways_to_select_2_balls_without_3 = ways_to_select_2_balls - (n - 1)\nsolution = solve_it(ways_to_select_2_balls_without_3 - 45, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(n * (n - 1) / 2 - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(n * (n - 1) / 2 - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways = 45\nsolution = solve_it(n * (n - 1) / 2 - num_ways, n)\nans = solution[n]", "\nn = Symbol('n', positive=True)\nnum_ways_to_select_2_balls_without_3 = 45\nnum_ways_to_select_2_balls_without_3_formula = n * (n - 1) / 2\nsolution = solve_it(num_ways_to_select_2_balls_without_3_formula - num_ways_to_select_2_balls_without_3, n)\nans = solution[n]"], "generated_prediction": "10.0", "options": ["A)11", "B)10", "C)9", "D)8", "E)7"], "answer": "A", "prediction": "B"}
{"question": "If Q, a positive integer, has 5 factors, which of the following must be true about Q?\nI. Q is the square of a prime number.\nII. Q is the fourth power of a prime number.\nIII. Q is the product of two prime numbers.", "generated": ["\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - 5, Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - 5, Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - 5, Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - 5, Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - 5, Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - 2, Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - 2, Q)\nans = solution[Q]", "\n# Question: If Q, a positive integer, has 5 factors, which of the following must be true about Q?\nI. Q is the square of a prime number.\nII. Q is the fourth power of a prime number.\nIII. Q is the product of two prime numbers.\n# Answer option: ['A)I only', 'B)III only', 'C)II only', 'D)I and II only', 'E)I and III only']\n# Question: If Q, a positive integer, has 5 factors, which of the following must be true about Q?\nI. Q is the square of a prime number.\nII. Q is the fourth power of a prime number.\nIII. Q is the product of two prime numbers.\n# Answer option: ['A)I only', 'B)III only', 'C)II only', 'D)I and II only', 'E)I and III only']\n# Question: If Q, a positive integer, has 5 factors, which of the following must be true about Q?\nI. Q is the square of a prime number.\nII. Q is the fourth power of a prime number.\nIII. Q", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - math.floor(Q ** 0.5), Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - math.floor(Q ** 0.5), Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - math.floor(Q ** 0.5), Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - math.floor(Q ** 0.5), Q)\nans = solution[Q]", "", "", "\nnum_factors = 5\nans = 'E)I and III only'", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 2 - 5, Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 2 - 5, Q)\nans = solution[Q]", "\nnum_factors = 5\nif num_factors == 5:\n    ans = 'D)I and II only'", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q ** 0.5 - int(Q ** 0.5), Q)\nans = solution[Q]", "\nQ = Symbol('Q')\nfactors = Symbol('factors', positive=True)\nsolution = solve_it(factors - 5, Q)\nans = solution[Q]", "\ndef is_prime(n):\n    if n == 2 or n == 3: return True\n    if n < 2 or n%2 == 0: return False\n    if n < 9: return True\n    if n%3 == 0: return False\n    r = int(n**0.5)\n    f = 5\n    while f <= r:\n        if n%f == 0: return False\n        if n%(f+2) == 0: return False\n        f +=6\n    return True", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q - 1, Q)\nans = solution[Q]", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q - 1, Q)\nans = solution[Q]", "\ndef is_prime(n):\n    if n == 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True", "\n# Q is the square of a prime number.\n# Q is the fourth power of a prime number.\n# Q is the product of two prime numbers.", "\nQ = Symbol('Q', positive=True)\nprime_number = Symbol('prime_number', positive=True)\nsolution = solve_it([Q - prime_number ** 2, Q - prime_number ** 4, Q - prime_number * prime_number], [Q, prime_number])\nans = (solution[Q], solution[prime_number])", "\nQ = Symbol('Q', positive=True)\nsolution = solve_it(Q - 2 * 3 * 5 * 7 * 11, Q)\nans = solution[Q]", "\n# A number has 5 factors if it is the square of a prime number.\n# A number has 5 factors if it is the fourth power of a prime number.\n# A number has 5 factors if it is the product of two prime numbers.\nans = 'A'", "\n# Explanation: Q has 5 factors. So, Q is a perfect square. So, I is true.\n# Q has 5 factors. So, Q is a perfect square. So, II is false.\n# Q has 5 factors. So, Q is a perfect square. So, III is false.\n# Q has 5 factors. So, Q is a perfect square. So, I and II are true.\n# Q has 5 factors. So, Q is a perfect square. So, I and III are true.\nans = 'E'", "\n# Explanation: If Q is the square of a prime number, then Q has 3 factors (1, Q and prime number).\n# If Q is the fourth power of a prime number, then Q has 5 factors (1, Q, prime number, square of prime number and fourth power of prime number).\n# If Q is the product of two prime numbers, then Q has 4 factors (1, Q, first prime number and second prime number)."], "generated_prediction": "25.0", "options": ["A)I only", "B)III only", "C)II only", "D)I and II only", "E)I and III only"], "answer": "B", "prediction": "E"}
{"question": "If 6x - y = 24 and y = 3x, what is the value of x?", "generated": ["\nx = Symbol('x', positive=True)\nsolution = solve_it(6 * x - 3 * x - 24, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nsolution = solve_it([6 * x - y - 24, y - 3 * x], [x, y])\nans = solution[x]"], "generated_prediction": "8.0", "options": ["A)8", "B)9", "C)10", "D)11", "E)12"], "answer": "A", "prediction": "A"}
{"question": "You can rent DVDs at a local video store for $4.00 per movie without a membership. However, if you purchase a membership for $7.00 per month, you can rent DVDs for $2.00 each. What is the minimum amount of DVDs you would have to rent to make it worth it to purchase the membership?", "generated": ["\nmembership_cost = 7\nmovie_cost_without_membership = 4\nmovie_cost_with_membership = 2\nans = math.ceil(membership_cost / (movie_cost_without_membership - movie_cost_with_membership))", "\nnum_dvds = Symbol('num_dvds', positive=True)\nsolution = solve_it(7 + 2 * num_dvds - 4 * num_dvds, num_dvds)\nans = solution[num_dvds]", "\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = 4 * num_dvds\ncost_with_membership = 7 + 2 * num_dvds\nsolution = solve_it(cost_without_membership - cost_with_membership, num_dvds)\nans = solution[num_dvds]", "\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = 4 * num_dvds\ncost_with_membership = 7 + 2 * num_dvds\nsolution = solve_it(cost_without_membership - cost_with_membership, num_dvds)\nans = solution[num_dvds]", "\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = 4 * num_dvds\ncost_with_membership = 7 + 2 * num_dvds\nsolution = solve_it(cost_without_membership - cost_with_membership, num_dvds)\nans = solution[num_dvds]", "\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = 4 * num_dvds\ncost_with_membership = 7 + 2 * num_dvds\nsolution = solve_it(cost_without_membership - cost_with_membership, num_dvds)\nans = solution[num_dvds]", "\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = 4 * num_dvds\ncost_with_membership = 2 * num_dvds + 7\nsolution = solve_it(cost_without_membership - cost_with_membership, num_dvds)\nans = solution[num_dvds]", "\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = 4 * num_dvds\ncost_with_membership = 2 * num_dvds + 7\nsolution = solve_it(cost_with_membership - cost_without_membership, num_dvds)\nans = solution[num_dvds]", "\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = 4 * num_dvds\ncost_with_membership = 2 * num_dvds + 7\nsolution = solve_it(cost_with_membership - cost_without_membership, num_dvds)\nans = solution[num_dvds]", "\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = 4 * num_dvds\ncost_with_membership = 7 + 2 * num_dvds\nsolution = solve_it(cost_without_membership - cost_with_membership, num_dvds)\nans = solution[num_dvds]", "\nnum_dvds = Symbol('num_dvds', positive=True)\nwithout_membership_cost = 4 * num_dvds\nwith_membership_cost = 7 + 2 * num_dvds\nsolution = solve_it(with_membership_cost - without_membership_cost, num_dvds)\nans = solution[num_dvds]", "\noptions = [1, 2, 3, 4, 5]\nfor option in options:\n    if option * 2 + 7 <= option * 4:\n        ans = option\n        break", "\nmembership_cost = 7\nmovie_cost_without_membership = 4\nmovie_cost_with_membership = 2\nnum_movies_to_break_even = membership_cost / (movie_cost_without_membership - movie_cost_with_membership)\nans = math.ceil(num_movies_to_break_even)", "\nmembership_cost = 7\nnon_member_cost = 4\nmember_cost = 2\nnum_dvds = Symbol('num_dvds', positive=True)\nsolution = solve_it(num_dvds * member_cost + membership_cost - num_dvds * non_member_cost, num_dvds)\nans = solution[num_dvds]", "\nmembership_cost = 7\nmovie_cost_without_membership = 4\nmovie_cost_with_membership = 2\nnumber_of_movies = Symbol('number_of_movies', positive=True)\nsolution = solve_it(membership_cost - (movie_cost_without_membership - movie_cost_with_membership) * number_of_movies, number_of_movies)\nans = solution[number_of_movies]", "\nmembership_cost = 7\nmovie_cost_without_membership = 4\nmovie_cost_with_membership = 2\nnum_movies = Symbol('num_movies', positive=True)\nsolution = solve_it(membership_cost - num_movies * (movie_cost_with_membership - movie_cost_without_membership), num_movies)\nans = solution[num_movies]", "\ncost_without_membership = 4\ncost_with_membership = 2\nmembership_fee = 7\nnum_movies = Symbol('num_movies', positive=True)\ncost_without_membership_for_num_movies = cost_without_membership * num_movies\ncost_with_membership_for_num_movies = cost_with_membership * num_movies + membership_fee\nsolution = solve_it(cost_without_membership_for_num_movies - cost_with_membership_for_num_movies, num_movies)\nans = solution[num_movies]", "\nmembership_cost = 7\nmovie_cost = 4\nmembership_movie_cost = 2\nnum_movies = Symbol('num_movies', positive=True)\nsolution = solve_it(membership_cost - num_movies * (membership_movie_cost - movie_cost), num_movies)\nans = solution[num_movies]", "\nmembership_cost = 7\nnon_member_cost = 4\nmember_cost = 2\nnum_movies = Symbol('num_movies', positive=True)\nsolution = solve_it(membership_cost - num_movies * (member_cost - non_member_cost), num_movies)\nans = solution[num_movies]", "\nmembership_cost = 7\nmembership_discount = 2\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = 4 * num_dvds\ncost_with_membership = membership_cost + num_dvds * membership_discount\nsolution = solve_it(cost_without_membership - cost_with_membership, num_dvds)\nans = solution[num_dvds]", "\nmembership_cost = 7\nnon_membership_cost = 4\nmembership_discount = 2\nmembership_discount_threshold = membership_cost / (non_membership_cost - membership_discount)\nans = math.ceil(membership_discount_threshold)", "\nmembership_cost = 7\nnon_membership_cost = 4\nmembership_discount = 2\nmembership_discount_threshold = membership_cost / (membership_discount - non_membership_cost)\nans = math.ceil(membership_discount_threshold)", "\nmembership_cost = 7\nmovie_cost_without_membership = 4\nmovie_cost_with_membership = 2\nnum_movies = Symbol('num_movies', positive=True)\ncost_without_membership = num_movies * movie_cost_without_membership\ncost_with_membership = membership_cost + num_movies * movie_cost_with_membership\nsolution = solve_it(cost_without_membership - cost_with_membership, num_movies)\nans = solution[num_movies]", "\nmembership_cost = 7\nnon_membership_cost = 4\nmembership_rental_cost = 2\nnon_membership_rental_cost = 4\nmin_num_rentals = math.ceil(membership_cost / (non_membership_rental_cost - membership_rental_cost))\nans = min_num_rentals", "\nmembership_cost = 7\nmovie_cost_without_membership = 4\nmovie_cost_with_membership = 2\nnumber_of_movies = Symbol('number_of_movies', positive=True)\nsolution = solve_it(number_of_movies * movie_cost_with_membership - membership_cost - number_of_movies * movie_cost_without_membership, number_of_movies)\nans = solution[number_of_movies]", "\nmembership_cost = 7\nmovie_cost_without_membership = 4\nmovie_cost_with_membership = 2\nmin_number_of_movies = membership_cost / (movie_cost_without_membership - movie_cost_with_membership)\nans = math.ceil(min_number_of_movies)", "\nmembership_cost = 7\nnon_membership_cost = 4\nmembership_rental_cost = 2\nnon_membership_rental_cost = 4\nnum_dvds = Symbol('num_dvds', positive=True)\nsolution = solve_it(membership_cost - membership_rental_cost * num_dvds + non_membership_rental_cost * num_dvds, num_dvds)\nans = solution[num_dvds]", "\nmembership_cost = 7\nmembership_saving = 2\nnum_dvds = Symbol('num_dvds', positive=True)\nsolution = solve_it(num_dvds * membership_saving - membership_cost, num_dvds)\nans = solution[num_dvds]", "\ncost_without_membership = 4\ncost_with_membership = 2\nmembership_fee = 7\nnum_dvds = Symbol('num_dvds', positive=True)\ncost_without_membership = num_dvds * cost_without_membership\ncost_with_membership = num_dvds * cost_with_membership + membership_fee\nsolution = solve_it(cost_without_membership - cost_with_membership, num_dvds)\nans = solution[num_dvds]", "\nmembership_cost = 7\nmembership_cost_per_month = membership_cost / 30\nnon_membership_cost_per_movie = 4\nmembership_cost_per_movie = 2\nsolution = solve_it(membership_cost_per_month - non_membership_cost_per_movie + membership_cost_per_movie, membership_cost_per_month)\nans = solution[membership_cost_per_month]"], "generated_prediction": "3.5", "options": ["A)1", "B)2", "C)3", "D)4", "E)5"], "answer": "D", "prediction": "C"}
{"question": "A bag of cat food weighs 7 pounds and 4 ounces. How much does the bag weigh in ounces?", "generated": ["\nweight = 7 * 16 + 4\nans = weight", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = 7 + 4 / 16\nweight_in_ounces = weight_in_pounds * 16\nans = weight_in_ounces", "\nans = 7 * 16 + 4", "\nans = 7 * 16 + 4", "\nans = 7 * 16 + 4", "\nweight_in_pounds = 7\nweight_in_ounces = 4\nweight_in_ounces = weight_in_pounds * 16 + weight_in_ounces\nans = weight_in_ounces", "\nweight_in_pounds = 7\nweight_in_ounces = 4\nans = weight_in_pounds * 16 + weight_in_ounces", "\nweight_in_lbs = 7 + 4 / 16\nweight_in_oz = weight_in_lbs * 16\nans = weight_in_oz", "\nweight_in_pounds = 7 + 4 / 16\nans = weight_in_pounds * 16", "\nweight_in_pounds = 7 + 4 / 16\nans = weight_in_pounds * 16", "\nweight_in_pounds = 7 + 4 / 16\nans = weight_in_pounds * 16", "\nweight_in_pounds = 7\nweight_in_ounces = 4\nweight_in_ounces += weight_in_pounds * 16\nans = weight_in_ounces", "\nweight_in_pounds = Symbol('weight_in_pounds', positive=True)\nweight_in_ounces = Symbol('weight_in_ounces', positive=True)\nweight_in_ounces_total = weight_in_pounds * 16 + weight_in_ounces\nsolution = solve_it(weight_in_ounces_total - 7 * 16 - 4, [weight_in_pounds, weight_in_ounces])\nans = solution[weight_in_ounces_total]"], "generated_prediction": "116.0", "options": ["A) 108", "B) 112", "C) 116", "D) 120", "E) 124"], "answer": "C", "prediction": "C"}
{"question": "By himself, Jack can clean a yacht in 12 hours. On a particular day, he happens to finish two-thirds of the work. The remaining portion of the work is done by Jill, whose rate of cleaning is just 5% of what Jack can do. How long does it take Jill to finish the remaining work?", "generated": ["\njack_speed = 1 / 12\njill_speed = jack_speed * 0.05\nremaining_work = 1 - 2 / 3\nans = remaining_work / jill_speed", "\njack_speed = 1 / 12\njill_speed = jack_speed * 0.05\nremaining_work = 1 - 2 / 3\nans = remaining_work / jill_speed", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njack_work = 2 / 3\njill_work = 1 - jack_work\nans = jill_work / jill_speed", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njack_work = 2 / 3\njill_work = 1 - jack_work\nans = jill_work / jill_speed", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njack_work = 2 / 3\njill_work = 1 - jack_work\nans = jill_work / jill_speed", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njack_work = 2 / 3\njill_work = 1 - jack_work\nans = jill_work / jill_speed", "\njack_speed = 1 / 12\njill_speed = jack_speed * 0.05\nremaining_work = 1 - 2 / 3\njill_time = remaining_work / jill_speed\nans = jill_time", "\njack_speed = 1 / 12\njill_speed = jack_speed * 0.05\nremaining_work = 1 - 2 / 3\njill_time = remaining_work / jill_speed\nans = jill_time", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\nwork_done_by_jack = 2 / 3\nwork_done_by_jill = 1 - work_done_by_jack\nans = work_done_by_jill / jill_speed", "\njack_cleaning_rate = 1 / 12\njill_cleaning_rate = 0.05 * jack_cleaning_rate\njill_cleaning_time = 1 / jill_cleaning_rate\nans = jill_cleaning_time", "\njack_speed = 1 / 12\njill_speed = 5 / 100 * jack_speed\nremaining_work = 1 - 2 / 3\nans = remaining_work / jill_speed", "\njack_speed = 1 / 12\njill_speed = jack_speed * 0.05\njill_work_time = 1 / jill_speed\nans = jill_work_time", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njill_time = 1 / jill_speed\nans = jill_time", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njill_time = 1 / jill_speed\nans = jill_time", "\njack_speed = 1 / 12\njill_speed = jack_speed * 0.05\ntotal_work = 1\nwork_done_by_jack = 2 / 3\nwork_done_by_jill = total_work - work_done_by_jack\nans = work_done_by_jill / jill_speed", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\ntotal_work = 1\nremaining_work = 1 / 3\ntime_taken_by_jill = remaining_work / jill_speed\nans = time_taken_by_jill", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njill_time = 1 / jill_speed\nans = jill_time", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njill_time = 1 / jill_speed\nans = jill_time", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njill_time = 1 / jill_speed\nans = jill_time", "\njack_rate = 1 / 12\njill_rate = jack_rate * 0.05\ntime_taken_by_jack = 2 / 3\ntime_taken_by_jill = (1 - 2 / 3) / jill_rate\nans = time_taken_by_jill", "\njack_speed = 1/12\njill_speed = 0.05 * jack_speed\ntotal_time = 1 / (jack_speed + jill_speed)\nans = total_time", "\njack_cleaning_rate = 1 / 12\njill_cleaning_rate = jack_cleaning_rate * 0.05\nremaining_work = 1 / 3\nsolution = solve_it(remaining_work / jack_cleaning_rate - remaining_work / jill_cleaning_rate, remaining_work)\nans = solution[remaining_work]", "\njack_speed = 1 / 12\njill_speed = jack_speed * 0.05\njill_time = 1 / jill_speed\nans = jill_time", "\njack_rate = 1 / 12\njill_rate = 0.05 * jack_rate\njill_time = 1 / jill_rate\nans = jill_time", "\njack_speed = 1 / 12\njill_speed = jack_speed * 0.05\njill_time = 1 / jill_speed\nans = jill_time", "\njack_rate = 1 / 12\njill_rate = 0.05 * jack_rate\nremaining_work = 1 - (2 / 3)\nsolution = solve_it(remaining_work / jill_rate, 'duration')\nans = solution['duration']", "\njack_speed = 1 / 12\njill_speed = 0.05 * jack_speed\njill_time = Symbol('jill_time', positive=True)\nsolution = solve_it(jack_time + jill_time - 1, jill_time)\nans = solution[jill_time]", "\njack_cleaning_rate = 1 / 12\njill_cleaning_rate = 0.05 * jack_cleaning_rate\nremaining_work = 1 - 2 / 3\nans = remaining_work / jill_cleaning_rate", "\njill_speed = 5\njack_speed = 100\njack_work = 2 / 3\njill_work = 1 - jack_work\nsolution = solve_it(jill_work / jill_speed - jack_work / jack_speed, jill_work)\nans = solution[jill_work]", "\njack_speed = Symbol('jack_speed', positive=True)\njill_speed = Symbol('jill_speed', positive=True)\njack_time = 12\nsolution = solve_it([jack_speed * jack_time - 2 / 3 * jack_time, jill_speed - 0.05 * jack_speed], [jack_speed, jill_speed])\nans = solution[jill_speed]"], "generated_prediction": "80.00000000000001", "options": ["A)4", "B)8", "C)22", "D)50", "E)20"], "answer": "E", "prediction": "B"}
{"question": "Professors borrowed Rs. 5000 from the university at simple interest. After 3 years, the university got Rs. 300 on interest. What was the rate of interest per annum?", "generated": ["\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest_rate = Symbol('interest_rate', positive=True)\namount_with_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest_rate = Symbol('interest_rate', positive=True)\namount_with_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\namount_with_simple_interest = amount * (1 + 3 * interest_rate / 100)\nsolution = solve_it(amount_with_simple_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\ntime = 3\ninterest = 300\nsolution = solve_it(amount * time * interest_rate / 100 - interest, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest_rate = Symbol('interest_rate', positive=True)\ninterest_amount = amount * 3 * interest_rate / 100\nsolution = solve_it(interest_amount - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\ninterest = 300\ntime = 3\nsolution = solve_it(amount * time * interest_rate / 100 - interest, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest_rate = Symbol('interest_rate', positive=True)\namount_with_interest = amount * (1 + interest_rate / 100 * 3)\nsolution = solve_it(amount_with_interest - amount - 300, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest_rate = Symbol('interest_rate', positive=True)\ninterest = amount * interest_rate / 100\nsolution = solve_it(interest - 300, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest = 300\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount * (1 + 3 * interest_rate / 100) - amount - interest, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\ninterest_amount = 300\nsolution = solve_it(interest_amount - amount * 3 * interest_rate / 100, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest = 300\ninterest_rate = Symbol('interest_rate', positive=True)\ntime = 3\nsolution = solve_it(interest - amount * time * interest_rate / 100, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest = Symbol('interest', positive=True)\ninterest_amount = 3 * interest\nsolution = solve_it(interest_amount - 300, interest)\nans = solution[interest]", "\namount = 5000\ninterest = 300\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(amount * (1 + interest_rate / 100) - amount - interest, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\ninterest = amount * 3 * interest_rate / 100\nsolution = solve_it(interest - 300, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest_rate = Symbol('interest_rate', positive=True)\ninterest = amount * 3 * interest_rate / 100\nsolution = solve_it(interest - 300, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest_rate = Symbol('interest_rate', positive=True)\ninterest = amount * 3 * interest_rate / 100\nsolution = solve_it(interest - 300, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\ninterest = 300\nsolution = solve_it(amount * interest_rate / 100 * 3 - interest, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\ninterest = 300\nsolution = solve_it(amount * interest_rate / 100 * 3 - interest, interest_rate)\nans = solution[interest_rate]", "\ninterest_rate = Symbol('interest_rate', positive=True)\namount = 5000\nnum_years = 3\ninterest = 300\nsolution = solve_it(amount * num_years * interest_rate / 100 - interest, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest_rate = Symbol('interest_rate', positive=True)\ninterest = 300\nsolution = solve_it(amount * interest_rate / 100 * 3 - interest, interest_rate)\nans = solution[interest_rate]", "\namount = 5000\ninterest = 300\ninterest_rate = Symbol('interest_rate', positive=True)\nsolution = solve_it(interest - amount * interest_rate / 100 * 3, interest_rate)\nans = solution[interest_rate]"], "generated_prediction": "2.0", "options": ["A)2%", "B)8%", "C)5%", "D)10%", "E)None of these"], "answer": "A", "prediction": "A"}
{"question": "In a sale, a discount of 20% was available on all the articles. If Vinit purchased an article for Rs.4578 in the sale. What was the actual selling price of the article?", "generated": ["\ndiscount_rate = 0.2\nselling_price = 4578 / (1 - discount_rate)\nans = selling_price", "\nprice = Symbol('price', positive=True)\ndiscount = 0.2\nsolution = solve_it(price * (1 - discount) - 4578, price)\nans = solution[price]", "\ndiscount = 0.2\nselling_price = 4578 / (1 - discount)\nans = selling_price", "\ndiscount = 0.2\nselling_price = 4578 / (1 - discount)\nans = selling_price", "\ndiscount = 0.2\nselling_price = 4578 / (1 - discount)\nans = selling_price", "\ndiscount = 0.2\nselling_price = 4578 / (1 - discount)\nans = selling_price", "\ndiscount = 0.2\ndiscounted_price = 4578\nactual_price = discounted_price / (1 - discount)\nans = actual_price", "\ndiscount = 0.2\nactual_price = 4578 / (1 - discount)\nans = actual_price", "\ndiscount = 0.2\nactual_price = 4578 / (1 - discount)\nans = actual_price", "\ndiscount = 20\nselling_price = 4578\nactual_selling_price = selling_price / (1 - discount / 100)\nans = actual_selling_price", "\ndiscount = 20\nselling_price = 4578 / (1 - discount / 100)\nans = selling_price", "\ndiscount = 0.2\nselling_price = Symbol('selling_price', positive=True)\ndiscounted_price = selling_price * (1 - discount)\nsolution = solve_it(discounted_price - 4578, selling_price)\nans = solution[selling_price]", "\nselling_price = Symbol('selling_price', positive=True)\ndiscount = 20\nactual_selling_price = selling_price * (1 - discount / 100)\nsolution = solve_it(actual_selling_price - 4578, selling_price)\nans = solution[selling_price]", "\nactual_price = Symbol('actual_price', positive=True)\ndiscount_percentage = 20\nsolution = solve_it(actual_price * (1 - discount_percentage / 100) - 4578, actual_price)\nans = solution[actual_price]", "\ndiscount_rate = 20\nactual_price = 4578\nans = actual_price / (1 - discount_rate / 100)", "\ndiscount = 20\nactual_price = 4578\ndiscounted_price = actual_price * (100 - discount) / 100\nans = discounted_price", "\ndiscount = 20\nactual_price = 4578\nans = actual_price / (1 - discount / 100)", "\nselling_price = Symbol('selling_price', positive=True)\ndiscount = 0.2\nsolution = solve_it(selling_price * (1 - discount) - 4578, selling_price)\nans = solution[selling_price]", "\nselling_price = Symbol('selling_price', positive=True)\ndiscount = 0.2\nsolution = solve_it(selling_price * (1 - discount) - 4578, selling_price)\nans = solution[selling_price]", "\nprice = Symbol('price', positive=True)\ndiscount = 0.2\nprice_after_discount = price - price * discount\nsolution = solve_it(price_after_discount - 4578, price)\nans = solution[price]", "\nselling_price = Symbol('selling_price', positive=True)\ndiscount = 0.2\nsolution = solve_it(selling_price * (1 - discount) - 4578, selling_price)\nans = solution[selling_price]", "\nactual_price = Symbol('actual_price', positive=True)\ndiscount = 0.2\nsolution = solve_it(actual_price * (1 - discount) - 4578, actual_price)\nans = solution[actual_price]", "\nactual_price = Symbol('actual_price', positive=True)\ndiscount = 0.2\nsolution = solve_it(actual_price * (1 - discount) - 4578, actual_price)\nans = solution[actual_price]", "\ndiscount = 0.2\nselling_price = Symbol('selling_price', positive=True)\nsolution = solve_it(selling_price * (1 - discount) - 4578, selling_price)\nans = solution[selling_price]", "\ndiscount = 0.2\nselling_price = Symbol('selling_price', positive=True)\nsolution = solve_it(selling_price * (1 - discount) - 4578, selling_price)\nans = solution[selling_price]", "\ndiscount_percentage = 20\nselling_price = 4578 / (1 - discount_percentage / 100)\nans = selling_price", "\ndiscount = 0.2\npurchase_price = 4578\nactual_selling_price = purchase_price / (1 - discount)\nans = actual_selling_price", "\noriginal_price = Symbol('original_price', positive=True)\ndiscount = 0.2\nfinal_price = 4578\nsolution = solve_it(original_price * (1 - discount) - final_price, original_price)\nans = solution[original_price]", "\ndiscount_percentage = 20\nactual_price = 4578\nselling_price = actual_price / (1 - discount_percentage / 100)\nans = selling_price", "\ndiscount_percentage = 20\nactual_price = 4578\nselling_price = actual_price / (1 - discount_percentage / 100)\nans = selling_price"], "generated_prediction": "5722.5", "options": ["A)s.5050", "B)s.5723", "C)s.5040", "D)s.4950", "E)s.4870"], "answer": "B", "prediction": "B"}
{"question": "If 27 bottles of soda cost A cents, how much will B bottles cost in dollars?", "generated": ["\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = cost_of_27_bottles * B / 27\nans = cost_of_B_bottles", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = cost_of_27_bottles * B / 27\nans = cost_of_B_bottles", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A\ncost_of_B_bottles = cost_of_27_bottles * B / 27\nans = cost_of_B_bottles / 100", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A\ncost_of_B_bottles = cost_of_27_bottles * B / 27\nans = cost_of_B_bottles / 100", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A\ncost_of_B_bottles = B * cost_of_27_bottles / 27\nans = cost_of_B_bottles / 100", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A\ncost_of_B_bottles = B * cost_of_27_bottles / 27\nans = cost_of_B_bottles / 100", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A\ncost_of_B_bottles = B * cost_of_27_bottles / 27\nans = cost_of_B_bottles / 100", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A\ncost_of_B_bottles = B * A / 27\nans = cost_of_B_bottles / 100", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A\ncost_of_B_bottles = B * A / 27\nans = cost_of_B_bottles / 100", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = B / 100\nans = cost_of_B_bottles / cost_of_27_bottles", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = B * cost_of_27_bottles\nans = cost_of_B_bottles", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = B * cost_of_27_bottles\nans = cost_of_B_bottles", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\nsolution = solve_it(A / 27 - 100 * B / A, A)\nans = solution[A]", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = cost_of_27_bottles * B / 27\nans=simplify(cost_of_B_bottles)", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = B / 100\nsolution = solve_it(cost_of_B_bottles - cost_of_27_bottles, B)\nans = solution[B] / 100", "\nA = Symbol('A')\nB = Symbol('B')\nans = B * A / 2700", "\nA = Symbol('A', positive=True)\nB = Symbol('B', positive=True)\nans = B * A / 2700", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = B / 100\nans=simplify(cost_of_B_bottles / cost_of_27_bottles)", "\nA = Symbol('A')\nB = Symbol('B')\nans = A * B / 2700", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = B / 100\nans = simplify(cost_of_B_bottles / cost_of_27_bottles)", "\nA = Symbol('A')\nB = Symbol('B')\ncost_of_27_bottles = A / 100\ncost_of_B_bottles = B / 100\nsolution = solve_it(cost_of_B_bottles - cost_of_27_bottles * B / 27, B)\nans = solution[B]"], "generated_prediction": "A*B/2700", "options": ["A)AB/2700", "B)27/AB", "C)AB/270", "D)2700/AB", "E)100AB/27"], "answer": "A", "prediction": "A"}
{"question": "A bag contains 11 candy bars: three cost 50 cents each, four cost $1 each and four cost $2\neach. How many ways can 3 candy bars be selected from the 11 candy bars so that the total cost is more than $4?", "generated": ["\nans = 70", "", "\nans = math.factorial(3) * math.factorial(4) * math.factorial(4)", "\nans = 0\nfor i in range(3):\n    for j in range(4):\n        for k in range(4):\n            if i * 0.5 + j + k * 2 > 4:\n                ans += 1", "\nnum_50_cent_candies = 3\nnum_1_dollar_candies = 4\nnum_2_dollar_candies = 4", "\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "\ncandy_bars = [50, 100, 200]\nans = 0\nfor i in range(3):\n    for j in range(3):\n        for k in range(3):\n            if candy_bars[i] + candy_bars[j] + candy_bars[k] > 400:\n                ans += 1", "\nnum_50_cent_candies = 3\nnum_1_dollar_candies = 4\nnum_2_dollar_candies = 4\nnum_candies = num_50_cent_candies + num_1_dollar_candies + num_2_dollar_candies\nans = math.factorial(num_candies) / (math.factorial(num_50_cent_candies) * math.factorial(num_1_dollar_candies) * math.factorial(num_2_dollar_candies))", "\ncost_50_cents = 3\ncost_1_dollar = 4\ncost_2_dollars = 4\ntotal_cost = cost_50_cents * 0.5 + cost_1_dollar + cost_2_dollars * 2\nans = total_cost - 4", "\ncost_50_cents = 3\ncost_1_dollar = 4\ncost_2_dollars = 4\ntotal_cost = cost_50_cents + cost_1_dollar + cost_2_dollars\nans = total_cost * (total_cost - 1) * (total_cost - 2) / 6", "\noptions_1 = [50, 100, 200]\noptions_2 = [50, 100, 200]\noptions_3 = [50, 100, 200]\nans = 0\nfor option_1 in options_1:\n    for option_2 in options_2:\n        for option_3 in options_3:\n            if option_1 + option_2 + option_3 > 400:\n                ans += 1", "\ndef get_combinations(n, k):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))", "\ncost_50_cents = 3\ncost_1_dollar = 4\ncost_2_dollars = 4\ntotal_candy_bars = cost_50_cents + cost_1_dollar + cost_2_dollars\nans = math.factorial(total_candy_bars) / (math.factorial(3) * math.factorial(total_candy_bars - 3))", "\nnum_50_cent_candy_bars = 3\nnum_1_dollar_candy_bars = 4\nnum_2_dollar_candy_bars = 4\nnum_candy_bars = num_50_cent_candy_bars + num_1_dollar_candy_bars + num_2_dollar_candy_bars\nans = num_50_cent_candy_bars * num_1_dollar_candy_bars * num_2_dollar_candy_bars", "\ncost_50 = 3\ncost_1 = 4\ncost_2 = 4\ntotal_cost = cost_50 * 0.5 + cost_1 + cost_2 * 2\nans = total_cost - 4", "\noptions = [\n    (3, 0, 0),\n    (2, 1, 0),\n    (2, 0, 1),\n    (1, 2, 0),\n    (1, 1, 1),\n    (1, 0, 2),\n    (0, 3, 0),\n    (0, 2, 1),\n    (0, 1, 2),\n    (0, 0, 3),\n]\nans = 0\nfor option in options:\n    if option[0] * 0.5 + option[1] + option[2] * 2 > 4:\n        ans += 1", "\n# Hint: Use combinations\nfrom scipy.special import comb\nans = comb(4, 3, exact=True) + comb(4, 2, exact=True) + comb(3, 2, exact=True)", "\ntotal_cost = Symbol('total_cost', positive=True)\ncost_50_cents = Symbol('cost_50_cents', positive=True)\ncost_1_dollar = Symbol('cost_1_dollar', positive=True)\ncost_2_dollars = Symbol('cost_2_dollars', positive=True)\nsolution = solve_it([total_cost - (cost_50_cents * 0.5 + cost_1_dollar + cost_2_dollars * 2), cost_50_cents + cost_1_dollar + cost_2_dollars - 3, cost_50_cents - 3, cost_1_dollar - 4, cost_2_dollars - 4], [total_cost, cost_50_cents, cost_1_dollar, cost_2_dollars])\nans = solution[total_cost]", "\ncost_50_cents = 3\ncost_1_dollar = 4\ncost_2_dollars = 4\ntotal_cost = cost_50_cents + cost_1_dollar + cost_2_dollars\nans = 0\nfor i in range(cost_50_cents + 1):\n    for j in range(cost_1_dollar + 1):\n        for k in range(cost_2_dollars + 1):\n            if i + j + k == 3 and i * 50 + j * 100 + k * 200 > 400:\n                ans += 1", "\n# Hint: Use combinations\nfrom sympy import factorial\nfrom sympy import binomial", "\ntotal_cost = Symbol('total_cost', positive=True)\nnum_candy_bars = 3\ncandy_bar_costs = [0.5, 1, 2]\nsolution = solve_it(total_cost - sum(candy_bar_costs), total_cost)\nans = solution[total_cost]", "\nans = 0\nfor cost_50_cents in range(0, 4):\n    for cost_1_dollar in range(0, 5):\n        for cost_2_dollars in range(0, 5):\n            if cost_50_cents + cost_1_dollar + cost_2_dollars == 3 and cost_50_cents * 0.5 + cost_1_dollar + cost_2_dollars * 2 > 4:\n                ans += 1", "\nnum_50_cent_candy_bars = 3\nnum_1_dollar_candy_bars = 4\nnum_2_dollar_candy_bars = 4\nnum_candy_bars = num_50_cent_candy_bars + num_1_dollar_candy_bars + num_2_dollar_candy_bars\nnum_ways = 0\nfor num_50_cent_candy_bars_selected in range(num_50_cent_candy_bars + 1):\n    for num_1_dollar_candy_bars_selected in range(num_1_dollar_candy_bars + 1):\n        for num_2_dollar_candy_bars_selected in range(num_2_dollar_candy_bars + 1):\n            if num_50_cent_candy_bars_selected + num_1_dollar_candy_bars_selected + num_2_dollar_candy_bars_selected == 3:\n                if num_50_cent_candy_bars_selected * 0.5 + num_1_dollar_candy_bars_selected * 1 +", "\ncost_50 = 3\ncost_1 = 4\ncost_2 = 4\ntotal_cost = 3 * cost_50 + 4 * cost_1 + 4 * cost_2\nnum_ways = 0\nfor i in range(cost_50 + 1):\n    for j in range(cost_1 + 1):\n        for k in range(cost_2 + 1):\n            if i * 50 + j * 1 + k * 2 > 4:\n                num_ways += 1\nans = num_ways", "\ncost_50_cents = 3\ncost_1_dollar = 4\ncost_2_dollars = 4\ntotal_cost = cost_50_cents + cost_1_dollar + cost_2_dollars\ncombinations = 0\nfor cost_50_cents_selected in range(0, cost_50_cents + 1):\n    for cost_1_dollar_selected in range(0, cost_1_dollar + 1):\n        for cost_2_dollars_selected in range(0, cost_2_dollars + 1):\n            if cost_50_cents_selected + cost_1_dollar_selected + cost_2_dollars_selected == 3:\n                if cost_50_cents_selected * 0.5 + cost_1_dollar_selected * 1 + cost_2_dollars_selected * 2 > 4:\n                    combinations += 1\nans = combinations", "\nnum_50_cents_candy = 3\nnum_1_dollar_candy = 4\nnum_2_dollar_candy = 4\nnum_candy_bars = 11\nnum_50_cents_candy_selected = Symbol('num_50_cents_candy_selected', positive=True)\nnum_1_dollar_candy_selected = Symbol('num_1_dollar_candy_selected', positive=True)\nnum_2_dollar_candy_selected = Symbol('num_2_dollar_candy_selected', positive=True)\ntotal_cost = 0.5 * num_50_cents_candy_selected + num_1_dollar_candy_selected + 2 * num_2_dollar_candy_selected\nsolution = solve_it([num_50_cents_candy_selected + num_1_dollar_candy_selected + num_2_dollar_candy_selected - 3, total_cost - 4], [num_50_cents_candy_selected, num_1_dollar_candy_selected, num_2_dollar_", "\ntotal_cost = Symbol('total_cost', positive=True)\ncost_50_cent = Symbol('cost_50_cent', positive=True)\ncost_1_dollar = Symbol('cost_1_dollar', positive=True)\ncost_2_dollar = Symbol('cost_2_dollar', positive=True)\nsolution = solve_it([total_cost - cost_50_cent * 0.5 - cost_1_dollar - cost_2_dollar * 2, cost_50_cent + cost_1_dollar + cost_2_dollar - 3], [total_cost, cost_50_cent, cost_1_dollar, cost_2_dollar])\nans = 0\nfor cost_50_cent in range(0, 4):\n    for cost_1_dollar in range(0, 5):\n        for cost_2_dollar in range(0, 5):\n            if cost_50_cent + cost_1_dollar + cost_2_dollar == 3 and solution[total_cost] > 4:\n                ans += 1", "\n# Hint: Use binomial theorem\nimport math\nn = 11\nk = 3\nans = math.comb(n, k)", "\n# Hint: You can use the combination formula: nCr = n! / r! * (n - r)!\nn = 11\nr = 3\nnCr = math.factorial(n) / (math.factorial(r) * math.factorial(n - r))\nans = nCr", "\n# Hint: Use combinations(n, k) function\nfrom sympy import combinations\nnum_of_50_cents_candy_bars = 3\nnum_of_1_dollar_candy_bars = 4\nnum_of_2_dollar_candy_bars = 4\ntotal_num_of_candy_bars = num_of_50_cents_candy_bars + num_of_1_dollar_candy_bars + num_of_2_dollar_candy_bars\nans = combinations(num_of_2_dollar_candy_bars, 3) + combinations(num_of_1_dollar_candy_bars, 2) * combinations(num_of_2_dollar_candy_bars, 1) + combinations(num_of_1_dollar_candy_bars, 1) * combinations(num_of_2_dollar_candy_bars, 2)"], "generated_prediction": "3", "options": ["A)8", "B)28", "C)46", "D)66", "E)70"], "answer": "C", "prediction": "A"}
{"question": "At a conference, one team is made up of 4 men and 4 women. Four presenters are chosen to present the team's findings in front of the entire conference. How many different groups of presenters can be chosen from the team if a team cannot be composed of men only or women only? (Two groups of presenters are considered different if at least one presenter is different.)", "generated": ["\nmen = 4\nwomen = 4\ntotal_people = men + women\nans = math.factorial(total_people) / (math.factorial(men) * math.factorial(women))", "\nmen = 4\nwomen = 4\ntotal_people = men + women\nans = math.factorial(total_people) / (math.factorial(men) * math.factorial(women))", "\nmen = 4\nwomen = 4\ntotal_people = men + women\nans = math.factorial(total_people) / (math.factorial(men) * math.factorial(women))", "\nmen = 4\nwomen = 4\npresenters = 4\nans = math.factorial(men) * math.factorial(women) / math.factorial(presenters) / math.factorial(men + women - presenters)", "\nmen = 4\nwomen = 4\nnum_presenters = 4\nans = math.factorial(men) * math.factorial(women) / math.factorial(men - num_presenters) / math.factorial(women - num_presenters)", "\nmen_count = 4\nwomen_count = 4\ntotal_count = men_count + women_count\npresenters_count = 4\nans = math.factorial(total_count) / (math.factorial(presenters_count) * math.factorial(total_count - presenters_count))", "\nmen = 4\nwomen = 4\nmen_presenters = Symbol('men_presenters', positive=True)\nwomen_presenters = Symbol('women_presenters', positive=True)\nsolution = solve_it([men_presenters + women_presenters - 4, men_presenters - men, women_presenters - women], [men_presenters, women_presenters])\nans = math.factorial(solution[men_presenters]) * math.factorial(solution[women_presenters])", "\nmen = 4\nwomen = 4\ntotal_people = men + women\nnum_presenters = 4\nans = math.factorial(total_people) / (math.factorial(num_presenters) * math.factorial(total_people - num_presenters))", "\nmen = 4\nwomen = 4\ntotal_people = men + women\ntotal_presenters = 4\nans = math.factorial(total_people) / (math.factorial(total_presenters) * math.factorial(total_people - total_presenters))", "\nmen = 4\nwomen = 4\ntotal = men + women\nans = math.factorial(total) / (math.factorial(men) * math.factorial(women))", "\nmen = 4\nwomen = 4\ntotal_team_members = men + women\npresenters = 4\nans = math.factorial(total_team_members) / math.factorial(presenters) / math.factorial(total_team_members - presenters)", "\nnum_men = 4\nnum_women = 4\nnum_presenters = 4\nnum_groups = math.factorial(num_men + num_women) / (math.factorial(num_presenters) * math.factorial(num_men + num_women - num_presenters))\nans = num_groups", "\nnum_men = 4\nnum_women = 4\nnum_presenters = 4\nnum_groups_of_presenters = math.factorial(num_men + num_women) / (math.factorial(num_presenters) * math.factorial(num_men + num_women - num_presenters)) - 2\nans = num_groups_of_presenters", "\nmen_presenters = 4\nwomen_presenters = 4\ntotal_presenters = men_presenters + women_presenters\nans = math.factorial(total_presenters) / (math.factorial(men_presenters) * math.factorial(women_presenters))", "\nmen = 4\nwomen = 4\ntotal_presenters = men + women\npresenters_needed = 4\nans = math.factorial(total_presenters) / math.factorial(total_presenters - presenters_needed)", "\nmen = 4\nwomen = 4\ntotal_presenters = men + women\nnum_presenters = 4\nans = math.factorial(total_presenters) / (math.factorial(num_presenters) * math.factorial(total_presenters - num_presenters))", "\nmen = 4\nwomen = 4\ntotal_presenters = men + women\nnum_groups = math.factorial(total_presenters) / (math.factorial(men) * math.factorial(total_presenters - men))\nnum_groups -= 2\nans = num_groups", "\nmen = 4\nwomen = 4\ntotal_people = men + women\npresenters = 4\nans = math.factorial(total_people) / (math.factorial(presenters) * math.factorial(total_people - presenters))", "\nmen = 4\nwomen = 4\ntotal_presenters = men + women\ngroups_of_presenters = total_presenters - 1\nans = math.factorial(groups_of_presenters) / (math.factorial(men - 1) * math.factorial(women - 1))", "\nmen = 4\nwomen = 4\ntotal_people = men + women\nmen_presenters = Symbol('men_presenters', positive=True)\nwomen_presenters = Symbol('women_presenters', positive=True)\nsolution = solve_it([men_presenters + women_presenters - 4, men_presenters - men, women_presenters - women], [men_presenters, women_presenters])\nans = math.factorial(solution[men_presenters]) * math.factorial(solution[women_presenters]) * math.factorial(total_people - 4) / math.factorial(total_people)", "\nmen = 4\nwomen = 4\nnum_presenters = 4\nmen_presenters = Symbol('men_presenters', positive=True)\nwomen_presenters = Symbol('women_presenters', positive=True)\nsolution = solve_it([men_presenters + women_presenters - num_presenters, men_presenters - men, women_presenters - women], [men_presenters, women_presenters])\nans = math.factorial(solution[men_presenters]) * math.factorial(solution[women_presenters])", "\nfrom sympy.utilities.iterables import multiset_permutations\nteam = ['M'] * 4 + ['W'] * 4\npresenters = 4\nans = len(list(multiset_permutations(team, presenters)))", "\nmen = 4\nwomen = 4\ntotal_presenters = 8\nmen_presenters = Symbol('men_presenters', positive=True)\nwomen_presenters = Symbol('women_presenters', positive=True)\nsolution = solve_it([men_presenters + women_presenters - total_presenters, men_presenters - men, women_presenters - women], [men_presenters, women_presenters])\nans = math.factorial(solution[men_presenters]) * math.factorial(solution[women_presenters])", "\nnum_men = 4\nnum_women = 4\nnum_presenters = 4\nnum_men_presenters = num_men\nnum_women_presenters = num_women\nnum_mixed_presenters = num_men_presenters * num_women_presenters\nnum_all_men_presenters = math.factorial(num_men) / math.factorial(num_presenters) / math.factorial(num_men - num_presenters)\nnum_all_women_presenters = math.factorial(num_women) / math.factorial(num_presenters) / math.factorial(num_women - num_presenters)\nans = num_mixed_presenters - num_all_men_presenters - num_all_women_presenters", "\nimport math\nmen = 4\nwomen = 4\ntotal_presenters = 4\nmen_presenters = Symbol('men_presenters', positive=True)\nwomen_presenters = Symbol('women_presenters', positive=True)\nsolution = solve_it([men_presenters + women_presenters - total_presenters, men_presenters - men, women_presenters - women], [men_presenters, women_presenters])\nans = math.factorial(men) * math.factorial(women) / math.factorial(total_presenters)", "\nfrom sympy import factorial\nmen = 4\nwomen = 4\ntotal_presenters = men + women\nnum_presenters_to_choose = 4\nans = factorial(total_presenters) / (factorial(num_presenters_to_choose) * factorial(total_presenters - num_presenters_to_choose))", "\nmen = 4\nwomen = 4\ntotal_presenters = men + women\ntotal_groups = math.factorial(total_presenters) / math.factorial(total_presenters - 4) / math.factorial(4)\ntotal_groups_with_only_men = math.factorial(men) / math.factorial(men - 4) / math.factorial(4)\ntotal_groups_with_only_women = math.factorial(women) / math.factorial(women - 4) / math.factorial(4)\nans = total_groups - total_groups_with_only_men - total_groups_with_only_women", "\nmen = 4\nwomen = 4\ntotal_presenters = 8\npossible_groups_of_presenters = math.factorial(total_presenters) / (math.factorial(men) * math.factorial(total_presenters - men))\nans = possible_groups_of_presenters - 2", "\nfrom sympy.combinatorics.permutations import Permutation\nfrom sympy.combinatorics.generators import permutations\nfrom sympy.combinatorics.generators import variations\nfrom sympy.combinatorics.generators import variations_with_replacement\nfrom sympy.combinatorics.generators import combinations\nfrom sympy.combinatorics.generators import combinations_with_replacement\nfrom sympy.combinatorics.generators import subsets", "\nnum_men = 4\nnum_women = 4\nnum_presenters = 4\nnum_men_presenters = num_men\nnum_women_presenters = num_women\nnum_mixed_presenters = num_presenters - num_men_presenters - num_women_presenters\nnum_mixed_presenters_combinations = math.factorial(num_mixed_presenters) / (math.factorial(num_men_presenters) * math.factorial(num_women_presenters))\nnum_men_presenters_combinations = math.factorial(num_men_presenters)\nnum_women_presenters_combinations = math.factorial(num_women_presenters)\nans = num_mixed_presenters_combinations + num_men_presenters_combinations + num_women_presenters_combinations"], "generated_prediction": "70.0", "options": ["A)120", "B)19", "C)180", "D)420", "E)460"], "answer": "B", "prediction": "A"}
{"question": "Exactly 2/5th of the children in a certain class are girls. If there are 100 boys in the class, how many girls are in the class?", "generated": ["\nnum_boys = 100\nnum_girls = 2 / 5 * (num_boys + num_girls)\nans = num_girls", "\nnum_boys = 100\nnum_girls = 2 / 5 * (num_boys + num_girls)\nans = num_girls", "\nnum_boys = 100\nnum_girls = 2 / 5 * (num_boys + num_girls)\nans = num_girls", "\ngirls = Symbol('girls', positive=True)\nboys = 100\nsolution = solve_it(girls / (girls + boys) - 2 / 5, girls)\nans = solution[girls]", "\ngirls = Symbol('girls', positive=True)\nboys = 100\nsolution = solve_it(girls / (girls + boys) - 2 / 5, girls)\nans = solution[girls]", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\nsolution = solve_it(num_girls / (num_girls + num_boys) - 2 / 5, num_girls)\nans = solution[num_girls]", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\nsolution = solve_it(2 * num_girls / 5 - num_boys, num_girls)\nans = solution[num_girls]", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\nsolution = solve_it(2 * num_girls / 5 - num_boys, num_girls)\nans = solution[num_girls]", "\ngirls = Symbol('girls', positive=True)\nboys = 100\nsolution = solve_it(girls + boys - 100, girls)\nans = solution[girls]", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\nnum_children = num_girls + num_boys\nsolution = solve_it(num_girls / num_children - 2 / 5, num_girls)\nans = solution[num_girls]", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\nnum_children = num_girls + num_boys\nsolution = solve_it(num_girls / num_children - 2 / 5, num_girls)\nans = solution[num_girls]", "\nboys = 100\ngirls = boys * 2 / 5\nans = girls", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\nnum_children = num_girls + num_boys\nsolution = solve_it(num_children * 2 / 5 - num_girls, num_girls)\nans = solution[num_girls]", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\nnum_children = num_girls + num_boys\nsolution = solve_it(num_children * 2 / 5 - num_girls, num_girls)\nans = solution[num_girls]", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\ntotal_children = num_girls + num_boys\nsolution = solve_it(total_children * 2 / 5 - num_girls, num_girls)\nans = solution[num_girls]", "\nboys = 100\ngirls = Symbol('girls', positive=True)\nsolution = solve_it(boys + girls - 2 * girls / 5, girls)\nans = solution[girls]", "\nboys = 100\ngirls = Symbol('girls', positive=True)\nsolution = solve_it(boys + girls - 2 * girls / 5, girls)\nans = solution[girls]", "\ngirls = Symbol('girls', positive=True)\nboys = 100\ntotal_children = boys + girls\nsolution = solve_it(total_children * 2 / 5 - girls, girls)\nans = solution[girls]", "\nnum_girls = 2 / 5 * 100\nans = num_girls", "\nnum_boys = 100\nnum_girls = 2 * num_boys / 5\nans = num_girls", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\ntotal_children = num_girls + num_boys\nsolution = solve_it(num_girls / total_children - 2 / 5, num_girls)\nans = solution[num_girls]", "\nboys = 100\ngirls = boys * 2 / 5\nans = girls", "\nboys = 100\ngirls = boys * 2 / 5\nans = girls", "\nboys = 100\ngirls = Symbol('girls', positive=True)\nsolution = solve_it(boys + girls - 100 * 2 / 5, girls)\nans = solution[girls]", "\nboys = 100\ngirls = boys * 2 / 5\nans = girls", "\nnum_boys = 100\nnum_girls = num_boys * 2 / 5\nans = num_girls", "\nboys = 100\ngirls = boys * 2 / 5\nans = girls", "\nnum_boys = 100\nnum_girls = num_boys * 2 / 5\nans = num_girls", "\nnum_boys = 100\nnum_girls = (2 / 5) * (num_boys + num_girls)\nans = num_girls", "\nnum_girls = Symbol('num_girls', positive=True)\nnum_boys = 100\ntotal_num_students = num_girls + num_boys\nsolution = solve_it(num_girls / total_num_students - 2 / 5, num_girls)\nans = solution[num_girls]"], "generated_prediction": "66.67", "options": ["A)50", "B)100", "C)150", "D)200", "E)70"], "answer": "C", "prediction": "A"}
{"question": "Two numbers are said to be relatively prime if they share no common positive factors other than 1. Set S contains the set of integers from 1 to 1,000, inclusive. What is the probability that a number chosen from S is relatively prime to 1,000?", "generated": ["\nnum_relatively_prime_to_1000 = 0\nfor i in range(1, 1001):\n    if math.gcd(i, 1000) == 1:\n        num_relatively_prime_to_1000 += 1\nans = num_relatively_prime_to_1000 / 1000", "\nnum_relatively_prime_to_1000 = 0\nfor i in range(1, 1000):\n    if math.gcd(i, 1000) == 1:\n        num_relatively_prime_to_1000 += 1\nans = num_relatively_prime_to_1000 / 1000", "\ntotal_numbers = 1000\nrelatively_prime_numbers = 0\nfor i in range(1, 1001):\n    if math.gcd(i, 1000) == 1:\n        relatively_prime_numbers += 1\nans = relatively_prime_numbers / total_numbers", "\nprobability = 0\nfor number in range(1, 1000):\n    if math.gcd(number, 1000) == 1:\n        probability += 1\nans = probability / 1000", "\ntotal_numbers = 1000\nnumbers_relatively_prime_to_1000 = 0\nfor i in range(1, total_numbers + 1):\n    if math.gcd(i, total_numbers) == 1:\n        numbers_relatively_prime_to_1000 += 1\nans = numbers_relatively_prime_to_1000 / total_numbers", "\ntotal_numbers = 1000\nnumbers_relatively_prime_to_1000 = 0\nfor i in range(1, total_numbers + 1):\n    if math.gcd(i, total_numbers) == 1:\n        numbers_relatively_prime_to_1000 += 1\nans = numbers_relatively_prime_to_1000 / total_numbers", "\ntotal_numbers = 1000\nnumbers_relatively_prime_to_1000 = 0\nfor i in range(1, 1000):\n    if math.gcd(i, 1000) == 1:\n        numbers_relatively_prime_to_1000 += 1\nans = numbers_relatively_prime_to_1000 / total_numbers", "\ntotal_numbers = 1000\nnumbers_relatively_prime_to_1000 = 0\nfor i in range(1, total_numbers + 1):\n    if math.gcd(i, total_numbers) == 1:\n        numbers_relatively_prime_to_1000 += 1\nans = numbers_relatively_prime_to_1000 / total_numbers", "\nnum_relatively_prime = 0\nfor i in range(1, 1001):\n    if math.gcd(i, 1000) == 1:\n        num_relatively_prime += 1\nans = num_relatively_prime / 1000", "\ntotal_numbers = 1000\nrelatively_prime_numbers = 0\nfor i in range(1, total_numbers + 1):\n    if math.gcd(i, total_numbers) == 1:\n        relatively_prime_numbers += 1\nans = relatively_prime_numbers / total_numbers", "\ntotal_numbers = 1000\nrelatively_prime_numbers = 0\nfor i in range(1, total_numbers + 1):\n    if math.gcd(i, total_numbers) == 1:\n        relatively_prime_numbers += 1\nans = relatively_prime_numbers / total_numbers", "\ntotal_num = 1000\nrelatively_prime_num = 0\nfor i in range(1, total_num + 1):\n    if math.gcd(i, total_num) == 1:\n        relatively_prime_num += 1\nans = relatively_prime_num / total_num", "\ns = set(range(1, 1001))\ns_relatively_prime_to_1000 = set()\nfor i in s:\n    if math.gcd(i, 1000) == 1:\n        s_relatively_prime_to_1000.add(i)\nans = len(s_relatively_prime_to_1000) / len(s)", "\ntotal_numbers = 1000\nnumbers_not_relatively_prime = 1000 - 1\nans = numbers_not_relatively_prime / total_numbers", "\nnum_relatively_prime = 0\nfor i in range(1, 1000):\n    if math.gcd(i, 1000) == 1:\n        num_relatively_prime += 1\nans = num_relatively_prime / 1000", "\nnum_relatively_prime = 0\nfor i in range(1, 1000):\n    if math.gcd(i, 1000) == 1:\n        num_relatively_prime += 1\nans = num_relatively_prime / 1000", "\nnum_relatively_prime = 0\nfor i in range(1, 1000):\n    if math.gcd(i, 1000) == 1:\n        num_relatively_prime += 1\nans = num_relatively_prime / 1000", "\ntotal_numbers = 1000\nnumbers_relatively_prime_to_1000 = 0\nfor number in range(1, 1001):\n    if math.gcd(number, 1000) == 1:\n        numbers_relatively_prime_to_1000 += 1\nans = numbers_relatively_prime_to_1000 / total_numbers", "\ntotal_numbers = 1000\nnumbers_relatively_prime_to_1000 = 0\nfor i in range(1, 1001):\n    if math.gcd(i, 1000) == 1:\n        numbers_relatively_prime_to_1000 += 1\nans = numbers_relatively_prime_to_1000 / total_numbers", "\ntotal_numbers = 1000\nnumbers_not_relatively_prime = 1000 / 2 + 1000 / 4 + 1000 / 5 + 1000 / 8 + 1000 / 10 + 1000 / 20 + 1000 / 25 + 1000 / 40 + 1000 / 50 + 1000 / 100 + 1000 / 125 + 1000 / 200 + 1000 / 250 + 1000 / 500\nnumbers_relatively_prime = 1000 - numbers_not_relatively_prime\nans = numbers_relatively_prime / total_numbers", "\ntotal_numbers = 1000\nnumbers_relatively_prime_to_1000 = 0\nfor i in range(1, 1001):\n    if math.gcd(i, 1000) == 1:\n        numbers_relatively_prime_to_1000 += 1\nans = numbers_relatively_prime_to_1000 / total_numbers", "\nimport math\nfrom sympy import simplify\nfrom sympy import Symbol", "\nimport random\nnum_trials = 10000\nnum_relatively_prime = 0\nfor _ in range(num_trials):\n    num = random.randint(1, 1000)\n    if math.gcd(num, 1000) == 1:\n        num_relatively_prime += 1\nans = num_relatively_prime / num_trials", "\nfrom sympy import factorint\ndef is_relatively_prime(a, b):\n    a_factors = factorint(a)\n    b_factors = factorint(b)\n    for factor in a_factors:\n        if factor in b_factors:\n            return False\n    return True", "\ntotal_numbers = 1000\nnumbers_not_relatively_prime = 1000 - math.gcd(1000, 1000) + 1\nans = numbers_not_relatively_prime / total_numbers", "\n# Hint: https://en.wikipedia.org/wiki/Coprime_integers\nnum_coprimes = 0\nfor i in range(1, 1000):\n    if math.gcd(i, 1000) == 1:\n        num_coprimes += 1\nans = num_coprimes / 1000", "\nfrom sympy import primefactors\nfrom sympy import isprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom sympy import randprime\nfrom symp", "\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint: Use the concept of prime numbers.\n# Hint", "\n# Hint: Use the concept of probability.\ntotal_numbers = 1000\nnumbers_relatively_prime_to_1000 = 0\nfor i in range(1, total_numbers + 1):\n    if math.gcd(i, total_numbers) == 1:\n        numbers_relatively_prime_to_1000 += 1\nans = numbers_relatively_prime_to_1000 / total_numbers", "\n# Hint: Use the function math.gcd(a, b) to find the greatest common divisor of a and b.\nS = range(1, 1001)\ncount = 0\nfor x in S:\n    if math.gcd(x, 1000) == 1:\n        count += 1\nans = count / len(S)"], "generated_prediction": "0.4", "options": ["A)5/7", "B)3/5", "C)4/7", "D)2/5", "E)2/7"], "answer": "D", "prediction": "C"}
{"question": "At the of his one-year investment, Charles received $54,080, including interest and principal from a certain investment. If the investment paid an annual interest of 8 percent compounded semi-annually, which of the following is the amount of money that Charles originally invested?", "generated": ["\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * (1 + interest_rate / 100 / 2) ** 2 - amount\nsolution = solve_it(interest - 54080, amount)\nans = solution[amount]", "\ninvestment = Symbol('investment', positive=True)\ninterest_rate = 8\ninterest = investment * (1 + interest_rate / 100 / 2) ** 2 - investment\nsolution = solve_it(interest - 54080, investment)\nans = solution[investment]", "\namount = Symbol('amount', positive=True)\ninterest = 0.08\nduration = 1\namount_with_interest = amount * (1 + interest / 2) ** (2 * duration)\nsolution = solve_it(amount_with_interest - 54080, amount)\nans = solution[amount]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * (1 + interest_rate / 200) ** 2 - amount\nsolution = solve_it(interest - 54080, amount)\nans = solution[amount]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * (1 + interest_rate / 200) ** 2 - amount\nsolution = solve_it(interest - 54080, amount)\nans = solution[amount]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * interest_rate / 200\nans = 54080 - interest", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * interest_rate / 100\namount_after_one_year = amount + interest\nsolution = solve_it(amount_after_one_year - 54080, amount)\nans = solution[amount]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * interest_rate / 100\namount_after_one_year = amount + interest\nsolution = solve_it(amount_after_one_year - 54080, amount)\nans = solution[amount]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * interest_rate / 100\namount_after_one_year = amount + interest\nsolution = solve_it(amount_after_one_year - 54080, amount)\nans = solution[amount]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * interest_rate / 100\namount_after_one_year = amount + interest\nsolution = solve_it(amount_after_one_year - 54080, amount)\nans = solution[amount]", "\namount_invested = Symbol('amount_invested', positive=True)\ninterest_rate = 8\ninterest_earned = 54080 - amount_invested\nsolution = solve_it(interest_earned - amount_invested * interest_rate / 100 / 2, amount_invested)\nans = solution[amount_invested]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * (1 + interest_rate / 200) ** 2 - amount\nsolution = solve_it(interest - 54080, amount)\nans = solution[amount]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\nnum_of_compoundings = 2\nnum_of_years = 1\nsolution = solve_it(amount * (1 + interest_rate / 100 / num_of_compoundings) ** (num_of_compoundings * num_of_years) - 54080, amount)\nans = solution[amount]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * interest_rate / 100\namount_in_6_months = amount + interest\namount_in_1_year = amount_in_6_months + interest\nsolution = solve_it(amount_in_1_year - 54080, amount)\nans = solution[amount]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * interest_rate / 100\ninterest_after_6_months = interest / 2\ninterest_after_1_year = interest_after_6_months + interest_after_6_months\nsolution = solve_it(interest_after_1_year + amount - 54080, amount)\nans = solution[amount]", "\ninvestment = Symbol('investment', positive=True)\ninterest_rate = 8\ninterest = investment * interest_rate / 100\ninterest_after_6_months = interest / 2\ninterest_after_1_year = interest_after_6_months + interest\nsolution = solve_it(investment + interest_after_1_year - 54080, investment)\nans = solution[investment]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * interest_rate / 100\ninterest_after_6_months = interest / 2\nprincipal = amount + interest_after_6_months\nsolution = solve_it(principal - 54080, amount)\nans = solution[amount]", "\nprincipal = Symbol('principal', positive=True)\ninterest_rate = 8\ninterest = 0.08 * principal * (1 + 0.08 / 2)\nsolution = solve_it(interest + principal - 54080, principal)\nans = solution[principal]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ninterest = amount * interest_rate / 100\ninterest_in_6_months = interest / 2\namount_in_6_months = amount + interest_in_6_months\namount_in_1_year = amount_in_6_months + interest_in_6_months\nsolution = solve_it(amount_in_1_year - 54080, amount)\nans = solution[amount]", "\noriginal_investment = Symbol('original_investment', positive=True)\ninterest_rate = 8\ninterest_rate_per_period = interest_rate / 2\nnum_periods = 2\namount_received = 54080\nsolution = solve_it(original_investment * (1 + interest_rate_per_period / 100) ** num_periods - amount_received, original_investment)\nans = solution[original_investment]", "\nprincipal = Symbol('principal', positive=True)\ninterest_rate = 8\ninterest = principal * interest_rate / 100\ninterest_after_6_months = interest / 2\ninterest_after_1_year = interest_after_6_months + interest_after_6_months\nsolution = solve_it(interest_after_1_year + principal - 54080, principal)\nans = solution[principal]", "\nprincipal = Symbol('principal', positive=True)\ninterest_rate = 8\ninterest = principal * interest_rate / 100\ninterest_after_6_months = interest / 2\ntotal_amount = principal + interest_after_6_months + interest\nsolution = solve_it(total_amount - 54080, principal)\nans = solution[principal]", "\nprincipal = Symbol('principal', positive=True)\ninterest_rate = 0.08\ninterest = principal * interest_rate\nprincipal_with_interest = principal + interest\nans = principal_with_interest / (1 + interest_rate / 2) ** 2 - 54080", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\ntime = 1\namount_after_1_year = amount * (1 + interest_rate / 200) ** 2\nsolution = solve_it(amount_after_1_year - 54080, amount)\nans = solution[amount]", "\nprincipal = Symbol('principal', positive=True)\ninterest = Symbol('interest', positive=True)\ninterest_rate = 8\nnum_of_periods = 2\namount_after_one_year = principal * (1 + interest_rate / 100 / num_of_periods) ** num_of_periods\nsolution = solve_it(amount_after_one_year - 54080, principal)\nans = solution[principal]", "\namount = Symbol('amount', positive=True)\ninterest_rate = 8\nnum_compounding_periods = 2\nnum_years = 1\nsolution = solve_it(amount * (1 + interest_rate / num_compounding_periods / 100) ** (num_compounding_periods * num_years) - 54080, amount)\nans = solution[amount]", "\nprincipal = Symbol('principal', positive=True)\ninterest_rate = 8\ninterest = principal * interest_rate / 100\ninterest_with_compound_interest = interest * (1 + interest_rate / 200)\nsolution = solve_it(principal + interest_with_compound_interest - 54080, principal)\nans = solution[principal]", "\ninvestment = Symbol('investment', positive=True)\ninterest_rate = 8\ninterest = investment * interest_rate / 100\ninterest_after_6_months = interest / 2\ninterest_after_1_year = interest + interest_after_6_months\nsolution = solve_it(interest_after_1_year - 54080, investment)\nans = solution[investment]", "\nprincipal = Symbol('principal', positive=True)\ninterest = 0.08\ninterest_rate = 0.08 / 2\nnum_periods = 2\namount_at_end = 54080\nsolution = solve_it(principal * (1 + interest_rate) ** num_periods - amount_at_end, principal)\nans = solution[principal]", "\nprincipal = Symbol('principal', positive=True)\ninterest_rate = 8 / 100\ninterest = interest_rate / 2\namount_after_one_year = 5 * (1 + interest) ** 2 * principal\nsolution = solve_it(amount_after_one_year - 54080, principal)\nans = solution[principal]"], "generated_prediction": "50000.0", "options": ["A)$45,000", "B)$50,000", "C)$54,000", "D)$59,000", "E)$62,000"], "answer": "B", "prediction": "B"}
{"question": "Joe's age, Joe's sister's age and Joe\u2019s fathers age sums up to 100. When Joe is as old as his father, Joe's sister will be twice as old as now. When Joe is as old as his father then his father is twice as old as when his sister was as old as her father. Find the age of Joe's father?", "generated": ["\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\nsolution = solve_it([joe_age + sister_age + father_age - 100, sister_age - 2 * joe_age, father_age - 2 * sister_age], [joe_age, sister_age, father_age])\nans = solution[father_age]", "\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\nsolution = solve_it([joe_age + sister_age + father_age - 100, sister_age - 2 * joe_age, father_age - 2 * sister_age], [joe_age, sister_age, father_age])\nans = solution[father_age]", "\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\nsolution = solve_it([joe_age + sister_age + father_age - 100, sister_age * 2 - joe_age, father_age * 2 - sister_age], [joe_age, sister_age, father_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, sister_age * 2 - joe_age, father_age * 2 - sister_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, sister_age * 2 - joe_age, father_age * 2 - sister_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, sister_age - 2 * joe_age, father_age - 2 * sister_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, sister_age - 2 * joe_age, father_age - 2 * sister_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsolution = solve_it([father_age + sister_age + joe_age - 100, sister_age - 2 * joe_age, father_age - 2 * sister_age], [father_age, sister_age, joe_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsolution = solve_it([father_age + sister_age + joe_age - 100, sister_age - 2 * joe_age, father_age - 2 * sister_age], [father_age, sister_age, joe_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([joe_age + sister_age + father_age - 100, sister_age - 2 * joe_age, father_age - 2 * sister_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\nsolution = solve_it([joe_age + sister_age + father_age - 100, father_age - joe_age, 2 * sister_age - father_age, 2 * father_age - sister_age], [joe_age, sister_age, father_age])\nans = solution[father_age]", "\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\nsolution = solve_it([joe_age + sister_age + father_age - 100, sister_age + joe_age - father_age, sister_age + father_age - 2 * joe_age], [joe_age, sister_age, father_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsolution = solve_it([father_age + sister_age + joe_age - 100, sister_age + father_age - 2 * joe_age, sister_age + joe_age - 2 * father_age], [father_age, sister_age, joe_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, joe_age + father_age - 2 * sister_age, joe_age + father_age - 2 * joe_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\nsolution = solve_it([joe_age + sister_age + father_age - 100,\n                     joe_age - father_age,\n                     sister_age - 2 * joe_age,\n                     father_age - 2 * sister_age],\n                    [joe_age, sister_age, father_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsolution = solve_it([father_age + sister_age + joe_age - 100, joe_age - father_age, sister_age * 2 - joe_age, father_age * 2 - sister_age], [father_age, sister_age, joe_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, sister_age + father_age - 2 * joe_age, father_age + sister_age - 2 * father_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\nsolution = solve_it([joe_age + sister_age + father_age - 100, sister_age + joe_age - 2 * father_age, sister_age - father_age - 2 * joe_age], [joe_age, sister_age, father_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, joe_age + father_age - 2 * sister_age, father_age - 2 * joe_age + sister_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, joe_age + father_age - 2 * sister_age, father_age - 2 * joe_age + sister_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\njoe_age = 100 - father_age - sister_age\nsolution = solve_it([father_age - joe_age, sister_age * 2 - joe_age, father_age * 2 - sister_age], [father_age, sister_age, joe_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, sister_age - 2 * joe_age + father_age, father_age - 2 * sister_age + joe_age], [father_age, sister_age, joe_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\njoe_sister_age = Symbol('joe_sister_age', positive=True)\nsolution = solve_it([joe_age + joe_sister_age + father_age - 100, joe_age + joe_sister_age + father_age - 100, joe_age + joe_sister_age + father_age - 100], [father_age, joe_age, joe_sister_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, joe_age + father_age - father_age, sister_age + father_age - 2 * sister_age], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, father_age + joe_age - 2 * sister_age, father_age - joe_age - 2 * (father_age - sister_age)], [father_age, joe_age, sister_age])\nans = solution[father_age]", "\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nfather_age = Symbol('father_age', positive=True)\nsolution = solve_it([joe_age + sister_age + father_age - 100, sister_age + father_age - 2 * joe_age, father_age - 2 * sister_age], [joe_age, sister_age, father_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsolution = solve_it([father_age + sister_age + joe_age - 100, sister_age + father_age - 2 * joe_age, father_age - 2 * sister_age], [father_age, sister_age, joe_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsolution = solve_it([father_age + sister_age + joe_age - 100, sister_age + father_age - 2 * joe_age, father_age - 2 * sister_age], [father_age, sister_age, joe_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsolution = solve_it([father_age + sister_age + joe_age - 100, sister_age + father_age - 2 * joe_age, father_age - 2 * sister_age], [father_age, sister_age, joe_age])\nans = solution[father_age]", "\nfather_age = Symbol('father_age', positive=True)\njoe_age = Symbol('joe_age', positive=True)\nsister_age = Symbol('sister_age', positive=True)\nsolution = solve_it([father_age + joe_age + sister_age - 100, sister_age + father_age - 2 * joe_age, father_age - 2 * sister_age], [father_age, joe_age, sister_age])\nans = solution[father_age]"], "generated_prediction": "57.14", "options": ["A)45", "B)48", "C)50", "D)55", "E)58"], "answer": "C", "prediction": "E"}
{"question": "If one third of 3/4 of a number is 21. Then, find the number?", "generated": ["\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 3 / 4 / 3 - 21, number)\nans = solution[number]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num * 3 / 4 / 3 - 21, num)\nans = solution[num]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)", "\nnum = Symbol('num', positive=True)\nans = solve_it(num * 3 / 4 / 3 - 21, num)", "\nnum = Symbol('num', positive=True)\nans = solve_it(num * 3 / 4 / 3 - 21, num)", "\nnum = Symbol('num', positive=True)\nans = solve_it(num * 3 / 4 / 3 - 21, num)", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)", "\nnumber = Symbol('number', positive=True)\nans = solve_it(3 / 4 * number / 3 - 21, number)", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number / 3 / 4 - 21, number)\nans = solution[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(1/3 * 3/4 * number - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 * 1 / 3 - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 * 1 / 3 - 21, number)[number]", "\nnum = Symbol('num', positive=True)\nans = solve_it(num / 3 - 21, num)", "\nnum = Symbol('num', positive=True)\nans = solve_it(num / 4 - 21 / 3, num)", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)[number]", "\nnum = Symbol('num', positive=True)\nans = solve_it(num * 3 / 4 / 3 - 21, num)[num]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 * 1 / 3 - 21, number)", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 * 1 / 3 - 21, number)", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nans = solve_it(number * 3 / 4 / 3 - 21, number)[number]", "\nnumber = Symbol('number', positive=True)\nsolution = solve_it(number * 1/3 * 3/4 - 21, number)\nans = solution[number]", "\nn = Symbol('n', positive=True)\nans = solve_it(n / 3 / 4 / 3 - 21, n)[n]"], "generated_prediction": "84.0", "options": ["A)84", "B)66", "C)28", "D)19", "E)11"], "answer": "A", "prediction": "A"}
{"question": "If m > 0, y > 0, and x is m percent of 4y, then, in terms of y, m is what percentage of x?", "generated": ["\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m / x * 100)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m / x * 100)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m / x * 100)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m / x * 100)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m / x * 100)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m / x * 100)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m / x * 100)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m * 100 / x)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m * 100 / x)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m * 100 / x)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m * 100 / x)", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = simplify(m * 100 / x)", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nm = Symbol('m', positive=True)\nsolution = solve_it(x - m * y / 100, x)\nans = m * 100 / solution[x]", "\nx = Symbol('x')\ny = Symbol('y')\nm = Symbol('m')\nsolution = solve_it(x - m * 4 * y / 100, x)\nans = m * 100 / solution[x]", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = m * 100 / x", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = m * 100 / x", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = m * 100 / x", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = m * 100 / x", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = m / x * 100", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = m * 100 / x", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = m * 100 / x", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it([x - m * y / 100, m * y / 100 - 4 * y], [x, m])\nans = solution[m] / solution[x] * 100", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nans = m / x * 100", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it([m - x * 100 / 4 / y, x - m * 4 * y / 100], [m, x])\nans = simplify(solution[m] * 100 / solution[x])", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nm = Symbol('m', positive=True)\nsolution = solve_it(x - m * 4 * y / 100, x)\nans = m * 100 / solution[x]", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nm = Symbol('m', positive=True)\nsolution = solve_it(x - m * 4 * y / 100, x)\nans = m / solution[x] * 100", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = m * 4 * y / 100\nsolution = solve_it(x - m, m)\nans = solution[m] / y * 100", "\nx = Symbol('x', positive=True)\ny = Symbol('y', positive=True)\nm = Symbol('m', positive=True)\nsolution = solve_it(x - m * 4 * y / 100, x)\nans = m / solution[x] * 100", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it([x - m / 100 * 4 * y, m - x / y * 100], [x, m])\nans = solution[m]", "\nm = Symbol('m', positive=True)\ny = Symbol('y', positive=True)\nx = Symbol('x', positive=True)\nsolution = solve_it([x - m / 100 * 4 * y, m - x / y * 100], [x, m])\nans = solution[m]"], "generated_prediction": "2500/y", "options": ["A)y/400", "B)4y", "C)50y", "D)2500/y", "E)5000/y"], "answer": "D", "prediction": "E"}
{"question": "A man wants to eat fruit for breakfast and vegetable for dinner. He has 6 different types of fruit and 8 different types of vegetables. He can only eat one type at a time. In how many ways can he eat breakfast and dinner.", "generated": ["\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nans = 6 * 8", "\nnum_fruits = 6\nnum_vegetables = 8\nans = num_fruits * num_vegetables", "\nnum_of_ways = 6 * 8\nans = num_of_ways", "\nbreakfast_options = 6\ndinner_options = 8\nans = breakfast_options * dinner_options"], "generated_prediction": "48", "options": ["A)54", "B)24", "C)48", "D)20", "E)36"], "answer": "C", "prediction": "C"}
{"question": "There is a 90% chance that a registered voter in Burghtown voted in the last election. If five registered voters are chosen at random, what is the approximate likelihood that exactly four of them voted in the last election?", "generated": ["\nans = 0.9 ** 4 * 0.1 ** 1", "\nans = 0.9 ** 4 * 0.1", "\nfrom scipy.stats import binom\nans = binom.pmf(4, 5, 0.9)", "\nans = 0.9 ** 4 * 0.1 ** 1 * math.factorial(5) / math.factorial(4) / math.factorial(1)", "\nans = 0.9 ** 4 * 0.1 ** 1 * math.factorial(5) / math.factorial(4) / math.factorial(1)", "\nans = math.factorial(5) / math.factorial(4) / math.factorial(1) * 0.9 ** 4 * 0.1 ** 1", "\nans = math.factorial(5) / math.factorial(4) / math.factorial(1) * 0.9 ** 4 * 0.1 ** 1", "\np = 0.9\nq = 1 - p\nans = math.factorial(5) * p ** 4 * q / 5", "\nans = 0.9 ** 4 * 0.1 ** 1 * 5", "\nans = 1 - 0.9 ** 4 * 0.1 ** 1", "\n# Hint: Binomial distribution\nans = 0.9 ** 4 * 0.1", "\np = 0.9\nq = 1 - p\nn = 5\nans = math.factorial(n) * p ** 4 * q / n", "\n# Hint: Binomial distribution\np = 0.9\nn = 5\nk = 4\nans = math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)", "\nprobability_of_voting = 0.9\nprobability_of_not_voting = 1 - probability_of_voting\nprobability_of_exactly_four_voting = math.pow(probability_of_voting, 4) * math.pow(probability_of_not_voting, 1) * 5\nans = probability_of_exactly_four_voting", "\n# binomial distribution\nfrom scipy.stats import binom\nans = binom.pmf(4, 5, 0.9)", "\nprobability_of_voting = 0.9\nprobability_of_not_voting = 1 - probability_of_voting\nprobability_of_4_voting = probability_of_voting ** 4 * probability_of_not_voting\nprobability_of_5_voting = probability_of_voting ** 5\nprobability_of_4_or_5_voting = probability_of_4_voting + probability_of_5_voting\nans = probability_of_4_voting / probability_of_4_or_5_voting", "\n# Hint: use binomial distribution\nimport scipy.stats\nn = 5\np = 0.9\nk = 4\nans = scipy.stats.binom.pmf(k, n, p)", "\nnum_voters = 5\nprobability_of_voting = 0.9\nprobability_of_not_voting = 1 - probability_of_voting\nans = math.factorial(num_voters) / (math.factorial(4) * math.factorial(1)) * probability_of_voting ** 4 * probability_of_not_voting ** 1", "\nprobability = 0.9\nans = math.factorial(5) * probability ** 4 * (1 - probability) ** 1 / 100", "\n# ans = binomial_distribution(n=5, p=0.9, x=4)\nans = 0.59", "\n# Binomial distribution\np = 0.9\nn = 5\nk = 4\nans = math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)", "\n# P(X=4) = 5C4 * 0.9^4 * 0.1^1\nans = math.factorial(5) / (math.factorial(4) * math.factorial(1)) * 0.9 ** 4 * 0.1 ** 1", "\nprobability_of_voting = 0.9\nprobability_of_not_voting = 1 - probability_of_voting\nprobability_of_voting_4_times = probability_of_voting ** 4 * probability_of_not_voting\nprobability_of_voting_4_times = probability_of_voting ** 4 * probability_of_not_voting\nprobability_of_voting_3_times = probability_of_voting ** 3 * probability_of_not_voting ** 2\nprobability_of_voting_2_times = probability_of_voting ** 2 * probability_of_not_voting ** 3\nprobability_of_voting_1_times = probability_of_voting ** 1 * probability_of_not_voting ** 4\nprobability_of_voting_0_times = probability_of_voting ** 0 * probability_of_not_voting ** 5\nans = probability_of_voting_4_times + probability_of_voting_3_times + probability_of_", "\nnum_voters = 5\nprob_voted = 0.9\nprob_not_voted = 1 - prob_voted\nprob_exactly_four_voted = math.factorial(num_voters) / (math.factorial(4) * math.factorial(num_voters - 4)) * prob_voted ** 4 * prob_not_voted ** 1\nans = prob_exactly_four_voted", "\n# Binomial distribution\n# P(X=4) = C(5,4) * 0.9^4 * 0.1^1\n# P(X=4) = 5 * 0.9^4 * 0.1\nans = 5 * 0.9**4 * 0.1", "\n# Binomial distribution\n# P(X=4) = C(5, 4) * 0.9^4 * 0.1^1\nans = math.factorial(5) / (math.factorial(4) * math.factorial(1)) * 0.9 ** 4 * 0.1 ** 1", "\n# Answer: D\n# Solution:\n# P(4) = C(5,4) * 0.9^4 * 0.1^1 = 0.590", "\n# https://www.mathsisfun.com/data/binomial-distribution.html\n# https://www.mathsisfun.com/data/binomial-distribution-table.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n#", "\n# Binomial distribution\n# https://www.mathsisfun.com/data/binomial-distribution.html\n# https://www.mathsisfun.com/data/binomial-distribution-table.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calculator.html\n# https://www.mathsisfun.com/data/binomial-distribution-calcul", "\n# The answer is calculated using binomial distribution.\n# The probability of success is 0.9.\n# The probability of failure is 0.1.\n# The number of trials is 5.\n# The number of successes is 4.\n# The probability of success is 0.9.\n# The probability of failure is 0.1.\n# The number of trials is 5.\n# The number of successes is 4.\n# The probability of success is 0.9.\n# The probability of failure is 0.1.\n# The number of trials is 5.\n# The number of successes is 4.\n# The probability of success is 0.9.\n# The probability of failure is 0.1.\n# The number of trials is 5.\n# The number of successes is 4.\n# The probability of success is 0.9.\n# The probability of failure is 0.1.\n# The number of trials is 5.\n# The number of successes is 4.\n# The probability of success is 0.9.\n# The probability of failure is 0.1.\n# The number of trials is 5.\n# The number of successes is 4.\n# The probability of"], "generated_prediction": "0.32805", "options": ["A)26.2%", "B)32.8%", "C)43.7%", "D)59.0%", "E)65.6%"], "answer": "E", "prediction": "B"}
{"question": "Alice wants to put up fencing around three sides of her rectangular yard and leave one side of 10 meters unfenced. If the yard has an area of 240 square meters, how many meters of fencing does she need?", "generated": ["\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width - unfenced_side], [width, height])\nans = 2 * solution[width] + 2 * solution[height]", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([width * height - area, width + height - unfenced_side], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\narea = 240\nunfenced_side = 10\nsolution = solve_it([length * width - area, length - unfenced_side], [length, width])\nans = 2 * (solution[length] + solution[width])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nsolution = solve_it([width * height - area, width - 10], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\narea = 240\nsolution = solve_it([length * width - area, length - 10], [length, width])\nans = 2 * (solution[length] + solution[width])", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\narea = 240\nsolution = solve_it([length * width - area, length - 10], [length, width])\nans = 2 * (solution[length] + solution[width])", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\narea = 240\nsolution = solve_it([length * width - area, length - 10], [length, width])\nans = 2 * (solution[length] + solution[width])", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\narea = 240\nsolution = solve_it([length * width - area, length - 10], [length, width])\nans = 2 * (solution[length] + solution[width])", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\narea = 240\nsolution = solve_it([length * width - area, length - 10], [length, width])\nans = 2 * (solution[length] + solution[width])", "\nwidth = Symbol('width', positive=True)\nlength = Symbol('length', positive=True)\narea = 240\nsolution = solve_it([width * length - area, width - 10], [width, length])\nans = 2 * (solution[width] + solution[length])", "\nlength = Symbol('length', positive=True)\nwidth = Symbol('width', positive=True)\narea = 240\nsolution = solve_it([length * width - area, length - 10], [length, width])\nans = 2 * (solution[length] + solution[width])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nunfenced = 10\nsolution = solve_it([width * height - area, width - unfenced], [width, height])\nans = 2 * (solution[width] + solution[height])", "\nwidth = Symbol('width', positive=True)\nheight = Symbol('height', positive=True)\narea = 240\nside_left_unfenced = 10\nsolution = solve_it([width * height - area, width - side_left_unfenced], [width, height])\nans = 2 * (solution[width] + solution[height])"], "generated_prediction": "68.0", "options": ["A)58", "B)62", "C)66", "D)70", "E)74"], "answer": "A", "prediction": "C"}
{"question": "John would make the 3-letter codes with diffenrent 5 vowels and 20 consonants with the condition that the middle letter must be vowel and the first letter and the third letter must be different from each other and are both consonant. How many different codes can be made?", "generated": ["\nconsonants = 20\nvowels = 5\nans = consonants * vowels * (consonants - 1)", "\nconsonants = 20\nvowels = 5\nans = consonants * vowels * (consonants - 1)", "\nnum_vowels = 5\nnum_consonants = 20\nnum_codes = num_vowels * num_consonants * num_consonants\nans = num_codes", "\nnum_vowels = 5\nnum_consonants = 20\nnum_codes = num_vowels * num_consonants * num_consonants\nans = num_codes", "\nfirst_letter_count = 20\nsecond_letter_count = 5\nthird_letter_count = 20\nans = first_letter_count * second_letter_count * third_letter_count", "\nans = 5 * 20 * 20", "\nans = 20 * 5 * 20", "\nans = 5 * 20 * 20", "\nnum_codes = 5 * 20 * 20\nans = num_codes", "\nfirst_letter = 20\nsecond_letter = 5\nthird_letter = 20\nans = first_letter * second_letter * third_letter", "\nans = 5 * 20 * 20", "\nfirst_letter = 20\nsecond_letter = 5\nthird_letter = 20\nans = first_letter * second_letter * third_letter", "\nvowels = 5\nconsonants = 20\nfirst_letter_consonants = consonants - 1\nthird_letter_consonants = consonants - 1\nans = vowels * first_letter_consonants * third_letter_consonants", "\nnum_vowels = 5\nnum_consonants = 20\nnum_codes = num_vowels * num_consonants * (num_consonants - 1)\nans = num_codes", "\nfirst_letter = 20\nsecond_letter = 5\nthird_letter = 20\nans = first_letter * second_letter * third_letter", "\nfirst_letter = 20\nsecond_letter = 5\nthird_letter = 20\nans = first_letter * second_letter * third_letter", "\nvowels = 5\nconsonants = 20\nans = vowels * consonants * consonants", "\nnum_consonants = 20\nnum_vowels = 5\nnum_codes = num_consonants * num_vowels * (num_consonants - 1)\nans = num_codes", "\nconsonants = 20\nvowels = 5\nfirst_letter_consonants = consonants - 1\nthird_letter_consonants = consonants - 1\nmiddle_letter_vowels = vowels\nans = first_letter_consonants * middle_letter_vowels * third_letter_consonants", "\nnum_vowels = 5\nnum_consonants = 20\nnum_codes = num_vowels * num_consonants * (num_consonants - 1)\nans = num_codes", "\nvowels = 5\nconsonants = 20\nans = vowels * consonants * consonants", "\nnum_vowels = 5\nnum_consonants = 20\nnum_codes = num_vowels * num_consonants * (num_consonants - 1)\nans = num_codes", "\nnum_vowels = 5\nnum_consonants = 20\nnum_codes = num_vowels * num_consonants * (num_consonants - 1)\nans = num_codes", "\nnum_vowels = 5\nnum_consonants = 20\nnum_codes = num_vowels * num_consonants * (num_consonants - 1)\nans = num_codes", "\nvowels = 5\nconsonants = 20\nfirst_letter_consonant = consonants\nsecond_letter_vowel = vowels\nthird_letter_consonant = consonants - 1\nans = first_letter_consonant * second_letter_vowel * third_letter_consonant", "\nvowels = 5\nconsonants = 20\nfirst_letter_consonant = consonants\nsecond_letter_vowel = vowels\nthird_letter_consonant = consonants - 1\nans = first_letter_consonant * second_letter_vowel * third_letter_consonant", "\nnum_vowels = 5\nnum_consonants = 20\nnum_codes = num_vowels * num_consonants * (num_consonants - 1)\nans = num_codes", "\nnum_vowels = 5\nnum_consonants = 20\nnum_codes = num_vowels * num_consonants * (num_consonants - 1)\nans = num_codes", "\nconsonants = 20\nvowels = 5\nans = consonants * vowels * consonants", "\nnum_vowels = 5\nnum_consonants = 20\nnum_first_letter_consonants = num_consonants - 1\nnum_third_letter_consonants = num_consonants - 1\nnum_codes = num_vowels * num_first_letter_consonants * num_third_letter_consonants\nans = num_codes"], "generated_prediction": "2000", "options": ["A)1,980", "B)2,020", "C)2,100", "D)2,200", "E)1,900"], "answer": "E", "prediction": "B"}
{"question": "What is the sum of three consecutive integers whose product can be expressed as 727+728+729.", "generated": ["\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - (727 + 728 + 729), x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - (727 + 728 + 729), x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x]", "\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x]", "\nx = Symbol('x')\nsolution = solve_it(x * (x + 1) * (x + 2) - (727 + 728 + 729), x)\nans = solution[x] + 1 + 2", "\nx = Symbol('x')\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x] + 1 + 2", "\nx = Symbol('x')\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x] + 1 + 2", "\nx = Symbol('x')\nsolution = solve_it(x * (x + 1) * (x + 2) - (727 + 728 + 729), x)\nans = solution[x] + 1 + 2", "\nx = Symbol('x', integer=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = sum(solution)", "\nx = Symbol('x', positive=True)\nans = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)", "\nx = Symbol('x', integer=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - (727 + 728 + 729), x)\nans = solution[x] + 1", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nnum3 = Symbol('num3', positive=True)\nsolution = solve_it([num1 * num2 * num3 - (727 + 728 + 729), num1 + num2 + num3], [num1, num2])\nans = solution[num1] + solution[num2] + solution[num3]", "\nx = Symbol('x')\nans = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = ans[x]", "\nnum = Symbol('num', integer=True)\nsolution = solve_it(num * (num + 1) * (num + 2) - 727 - 728 - 729, num)\nans = solution[num]", "\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 * 728 * 729, x)\nans = sum(solution)", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nnum3 = Symbol('num3', positive=True)\nsolution = solve_it([num1 * num2 * num3 - (727 + 728 + 729), num1 + num2 + num3 - (num1 + 1 + num1 + 2)], [num1, num2, num3])\nans = solution[num1] + solution[num2] + solution[num3]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nnum3 = Symbol('num3', positive=True)\nsolution = solve_it([num1 * num2 * num3 - 727 * 728 * 729, num1 + num2 + num3], [num1, num2, num3])\nans = solution[num1] + solution[num2] + solution[num3]", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nnum3 = Symbol('num3', positive=True)\nproduct = num1 * num2 * num3\nsolution = solve_it(product - 727 * 728 * 729, num1)\nans = solution[num1] + num2 + num3", "\nx = Symbol('x')\nans = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)[x]", "\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x] + 1 + 2", "\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x] + 1 + 2", "\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - (727 + 728 + 729), x)\nans = solution[x] + 1 + 2", "\nx = Symbol('x', integer=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x] + 1 + 2", "\ninteger = Symbol('integer', positive=True)\nsolution = solve_it(integer * (integer + 1) * (integer + 2) - (727 + 728 + 729), integer)\nans = solution[integer] + 1 + 2", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nnum3 = Symbol('num3', positive=True)\nsolution = solve_it([num1 * num2 * num3 - (727 + 728 + 729), num1 + num2 + num3], [num1, num2, num3])\nans = solution[num1] + solution[num2] + solution[num3]", "\nnum = Symbol('num', positive=True)\nsolution = solve_it(num * (num + 1) * (num + 2) - (727 + 728 + 729), num)\nans = solution[num] + 1 + 2", "\nx = Symbol('x', integer=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x] + 1 + 2", "\nnum1 = Symbol('num1', positive=True)\nnum2 = Symbol('num2', positive=True)\nnum3 = Symbol('num3', positive=True)\nsolution = solve_it([num1 * num2 * num3 - 727 * 728 * 729, num1 + num2 + num3], [num1, num2, num3])\nans = solution[num1] + solution[num2] + solution[num3]", "\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x] + 1 + 2", "\nx = Symbol('x', positive=True)\nsolution = solve_it(x * (x + 1) * (x + 2) - 727 - 728 - 729, x)\nans = solution[x] + 1 + 2"], "generated_prediction": "15.0", "options": ["A)37", "B)38", "C)36", "D)30", "E)39"], "answer": "E", "prediction": "B"}
{"question": "The capacity of a tank of dimensions (8 m \u00d7 6 m \u00d7 2.5 m) is", "generated": ["\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth * 1000\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth * 1000\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth * 1000\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\nvolume = width * height * depth\nans = volume * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nvolume = width * height * depth\nans = volume * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth\nans = capacity * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth\nans = capacity", "\nwidth = 8\nheight = 6\ndepth = 2.5\ncapacity = width * height * depth\nans = capacity", "\nwidth = 8\nheight = 6\nlength = 2.5\nvolume = width * height * length\nans = volume * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000", "\nwidth = 8\nheight = 6\ndepth = 2.5\nans = width * height * depth * 1000"], "generated_prediction": "120000.0", "options": ["A)120 litres", "B)1200 litres", "C)12000 litres", "D)120000 litres", "E)None of these"], "answer": "D", "prediction": "D"}
{"question": "The population of a city is 5265526. If there are 4169516 adults in the city, how many children are there in the city?", "generated": ["\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\ntotal_population = 5265526\nnum_adults = 4169516\nnum_children = total_population - num_adults\nans = num_children", "\nnum_adults = 4169516\nnum_children = 5265526 - num_adults\nans = num_children", "\nnum_adults = 4169516\nnum_children = 5265526 - num_adults\nans = num_children", "\nnum_adults = 4169516\nnum_children = 5265526 - num_adults\nans = num_children", "\nnum_adults = 4169516\nnum_children = 5265526 - num_adults\nans = num_children", "\nnum_adults = 4169516\nnum_children = 5265526 - num_adults\nans = num_children", "\nnum_adults = 4169516\nnum_children = 5265526 - num_adults\nans = num_children", "\ntotal_population = 5265526\nadults = 4169516\nchildren = total_population - adults\nans = children", "\nadults = 4169516\nchildren = 5265526 - adults\nans = children", "\ntotal_population = 5265526\ntotal_adults = 4169516\ntotal_children = total_population - total_adults\nans = total_children", "\npopulation = 5265526\nadults = 4169516\nchildren = population - adults\nans = children", "\npopulation = 5265526\nadults = 4169516\nchildren = population - adults\nans = children", "\npopulation = 5265526\nnum_adults = 4169516\nnum_children = population - num_adults\nans = num_children", "\npopulation = 5265526\nadults = 4169516\nchildren = population - adults\nans = children", "\npopulation = 5265526\nadults = 4169516\nchildren = population - adults\nans = children", "\npopulation = 5265526\nnum_adults = 4169516\nnum_children = population - num_adults\nans = num_children", "\npopulation = 5265526\nadults = 4169516\nchildren = population - adults\nans = children", "\npopulation = 5265526\nadults = 4169516\nchildren = population - adults\nans = children", "\nchildren = Symbol('children', positive=True)\npopulation = 5265526\nadults = 4169516\nsolution = solve_it(population - adults - children, children)\nans = solution[children]"], "generated_prediction": "1096010", "options": ["A)1095961", "B)1065961", "C)1085961", "D)1097961", "E)1096061"], "answer": "E", "prediction": "E"}
{"question": "It takes a worker 9 minutes to drive from home to work at an average rate of 20 kilometers per hour. How many minutes will it take the worker to cycle from home to work along the same route at an average rate of 6 kilometers per hour?", "generated": ["\ndistance = 20 * 9\ntime = distance / 6\nans = math.ceil(time)", "\ndistance = 20 * 9\ntime_to_cycle = distance / 6\nans = math.ceil(time_to_cycle)", "\ndistance = 20 * 9\ntime_taken_to_cycle = distance / 6\nans = time_taken_to_cycle", "\ndistance = 20 * 9\ntime_taken_to_cycle = distance / 6\nans = time_taken_to_cycle", "\ndistance = 20 * 9\ntime_taken_to_cycle = distance / 6\nans = time_taken_to_cycle", "\ntime_to_drive = 9\ndistance_to_drive = 20\ntime_to_cycle = distance_to_drive * time_to_drive / 6\nans = time_to_cycle", "\ntime_to_drive = 9\ndistance_to_drive = 20\ntime_to_cycle = distance_to_drive / 6 * time_to_drive\nans = time_to_cycle", "\ntime_to_drive = 9\ndistance_to_drive = 20\ntime_to_cycle = distance_to_drive / 6 * time_to_drive\nans = time_to_cycle", "\ndistance = Symbol('distance', positive=True)\ndriving_time = 9\ndriving_speed = 20\ncycling_speed = 6\ncycling_time = distance / cycling_speed * 60\nsolution = solve_it(cycling_time - driving_time, distance)\nans = solution[distance] / driving_speed * 60", "\ndistance = 20\ntime_to_drive = 9\ntime_to_cycle = distance / 6 * time_to_drive\nans = time_to_cycle", "\ndriving_time = 9\ndriving_speed = 20\ncycling_speed = 6\ncycling_time = driving_time * driving_speed / cycling_speed\nans = math.ceil(cycling_time)", "\ntime_to_drive = 9\ndistance_to_drive = 20 * time_to_drive\ntime_to_cycle = distance_to_drive / 6\nans = time_to_cycle", "\ndriving_distance = 20\ndriving_time = 9\ndriving_speed = driving_distance / driving_time\ncycling_distance = driving_distance\ncycling_speed = 6\ncycling_time = cycling_distance / cycling_speed\nans = cycling_time", "\ndriving_speed = 20\ncycling_speed = 6\ndriving_time = 9\ncycling_time = driving_time * driving_speed / cycling_speed\nans = math.ceil(cycling_time)", "\ndriving_speed = 20\ncycling_speed = 6\ndriving_time = 9\ncycling_time = driving_time * driving_speed / cycling_speed\nans = math.ceil(cycling_time)", "\ntime_to_drive = 9\ndistance_to_drive = 20\ndistance_to_cycle = 6\ntime_to_cycle = time_to_drive * distance_to_drive / distance_to_cycle\nans = math.ceil(time_to_cycle)", "\ndistance = 20 * 9\ntime_to_cycle = distance / 6\nans = time_to_cycle", "\ndistance = 20 * 9\ntime = distance / 6\nans = time", "\ndistance = Symbol('distance', positive=True)\ntime_by_car = 9\nspeed_by_car = 20\nspeed_by_cycle = 6\ntime_by_cycle = distance / speed_by_cycle\nsolution = solve_it(time_by_car - time_by_cycle, distance)\nans = solution[distance] / speed_by_cycle", "\ndistance = 20 * 9\ntime_to_cycle = distance / 6\nans = time_to_cycle", "\ndistance = 20 * 9\ntime = distance / 6\nans = time", "\ndistance = 20 * 9\ntime_to_cycle = distance / 6\nans = time_to_cycle", "\ndistance = 20 * 9\ntime_to_cycle = distance / 6\nans = time_to_cycle", "\ndistance = 20 * 9\ntime_to_cycle = distance / 6\nans = time_to_cycle", "\ndistance = 20 * 9\ntime_to_cycle = distance / 6\nans = time_to_cycle", "\ndistance = 20\ntime = 9\ntime_to_cycle = distance / 6 * time\nans = math.ceil(time_to_cycle)", "\ndistance = 20 * 9\ntime_to_cycle = distance / 6\nans = time_to_cycle", "\ndistance = Symbol('distance', positive=True)\ndrive_time = 9\ndrive_speed = 20\ncycle_speed = 6\ncycle_time = distance / cycle_speed\nsolution = solve_it(cycle_time - drive_time * (drive_speed / cycle_speed), distance)\nans = solution[distance]", "\ntime_taken_by_car = 9\ndistance_by_car = 20\ntime_taken_by_cycle = time_taken_by_car * distance_by_car / 6\nans = time_taken_by_cycle", "\ndistance = 20\ntime = 9\nnew_distance = 6\nnew_time = distance / time * new_distance\nans = new_time"], "generated_prediction": "30.0", "options": ["A)30", "B)32", "C)35", "D)36", "E)40"], "answer": "A", "prediction": "A"}
{"question": "Two friends are eating a jar full of candies. Had P eaten alone, it would have taken him 10 minutes to finish the candies in the jar. Had Q eaten alone, it would have taken her 5 minutes to finish half the jar. Since both of them are eating simultaneously, how many minutes would it take them to empty the jar?", "generated": ["\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_for_P = 10\ntime_for_Q = 5\nsolution = solve_it([P - time_for_P, Q - time_for_Q / 2], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_for_P = 10\ntime_for_Q = 5\nsolution = solve_it([P - time_for_P, Q - time_for_Q / 2], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_for_P = 10\ntime_for_Q = 5\nsolution = solve_it([P - time_for_P, Q - time_for_Q / 2], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P - time_taken_by_P, Q - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P - time_taken_by_P, Q - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P - time_taken_by_P, Q - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P - time_taken_by_P, Q - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P - time_taken_by_P, Q - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P - time_taken_by_P, Q - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P')\nQ = Symbol('Q')\nP_alone_time = 10\nQ_alone_time = 5\nsolution = solve_it([P + Q - P_alone_time, P - Q - Q_alone_time], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P + Q - time_taken_by_P, Q / 2 - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P + Q - time_taken_by_P, Q / 2 - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P + Q - time_taken_by_P, Q - 2 * P - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\nsolution = solve_it(P + Q - 10, Q - 5 / 2, P - Q)\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\nsolution = solve_it(P / 10 + Q / 5 - 1, P)\nans = solution[P]", "\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\ntime_taken_by_P_and_Q = Symbol('time_taken_by_P_and_Q', positive=True)\nsolution = solve_it(time_taken_by_P / time_taken_by_P_and_Q + time_taken_by_Q / time_taken_by_P_and_Q - 1, time_taken_by_P_and_Q)\nans = solution[time_taken_by_P_and_Q]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P + Q - 10, Q - 5], [P, Q])\nans = solution[P]", "\nP = Symbol('P')\nQ = Symbol('Q')\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P + Q - 10, Q - 5], [P, Q])\nans = solution[P]", "\nP = Symbol('P')\nQ = Symbol('Q')\nsolution = solve_it([P - 10, Q - 5, P + Q - 10], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5 / 2\nsolution = solve_it([P - time_taken_by_P, Q - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P + Q - time_taken_by_P, Q - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P - time_taken_by_P, Q - time_taken_by_Q / 2], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P - time_taken_by_P, Q - time_taken_by_Q / 2], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\nsolution = solve_it([P + Q - time_taken_by_P, Q - time_taken_by_Q], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_taken_by_P = 10\ntime_taken_by_Q = 5\ntime_taken_by_both = time_taken_by_P * Q / (P + Q)\nsolution = solve_it(time_taken_by_both - time_taken_by_Q, Q)\nans = solution[Q]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_to_finish_by_P = 10\ntime_to_finish_by_Q = 5\ntime_to_finish_by_P_and_Q = Symbol('time_to_finish_by_P_and_Q', positive=True)\nsolution = solve_it([P * time_to_finish_by_P_and_Q - time_to_finish_by_P, Q * time_to_finish_by_P_and_Q - time_to_finish_by_Q], [P, Q, time_to_finish_by_P_and_Q])\nans = solution[time_to_finish_by_P_and_Q]", "\ncandies_eaten_by_P = Symbol('candies_eaten_by_P', positive=True)\ncandies_eaten_by_Q = Symbol('candies_eaten_by_Q', positive=True)\ncandies_eaten_by_P_per_minute = 1 / 10\ncandies_eaten_by_Q_per_minute = 1 / 5\nsolution = solve_it([candies_eaten_by_P_per_minute + candies_eaten_by_Q_per_minute, candies_eaten_by_Q - 0.5 * candies_eaten_by_P], [candies_eaten_by_P, candies_eaten_by_Q])\nans = solution[candies_eaten_by_P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\nsolution = solve_it(P + Q - 10, P - Q - 5, P * Q - 5)\nans = solution[P]", "\nP = Symbol('P')\nQ = Symbol('Q')\nP_alone_time = 10\nQ_alone_time = 5\nsolution = solve_it([P + Q - P_alone_time, P + Q - 2 * Q_alone_time], [P, Q])\nans = solution[P]", "\nP = Symbol('P', positive=True)\nQ = Symbol('Q', positive=True)\ntime_P_alone = 10\ntime_Q_alone = 5\ntime_together = solve_it(P + Q - time_P_alone, Q)[Q]\nans = solve_it(P + Q - time_together, P)[P]"], "generated_prediction": "10.0", "options": ["A)4", "B)5", "C)6", "D)7", "E)8"], "answer": "B", "prediction": "A"}
