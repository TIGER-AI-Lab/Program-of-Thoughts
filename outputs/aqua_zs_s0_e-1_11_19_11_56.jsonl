{"question": "A car is being driven, in a straight line and at a uniform speed, towards the base of a vertical tower. The top of the tower is observed from the car and, in the process, it takes 10 minutes for the angle of elevation to change from 45\u00b0 to 60\u00b0. After how much more time will this car reach the base of the tower?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A car is being driven, in a straight line and at a uniform speed, towards the base of a vertical tower. The top of the tower is observed from the car and, in the process, it takes 10 minutes for the angle of elevation to change from 45\u00b0 to 60\u00b0. After how much more time will this car reach the base of the tower?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The angle of elevation is 45\u00b0, and the angle of elevation is 60\u00b0\n    angle_1 = 45\n    angle_2 = 60\n    # 2. The time is 10 minutes\n    time = 10\n    # 3. The speed of the car is uniform\n    speed = 1\n    # 4. The height of the tower is unknown\n    height = 1\n    # 5. The distance between the car and the tower is unknown\n    distance = 1\n    # 6. The time for the car to reach the base of the tower is unknown\n    time_2 = 1\n    # Secondly, we need to calculate the height of the tower\n    height = math.tan(math.radians(angle_1)) * distance\n    print(\"The height of the tower is:\", height)\n    # Thirdly, we need to calculate the distance between the car and the tower\n    distance = math.tan(math.radians(angle_2)) * height\n    print(\"The distance between the car and the tower is:\", distance)\n    # Finally, we need to calculate the time for the car to reach the base of the tower\n    time_2 = distance / speed\n    print(\"The time for the car to reach the base of the tower is:\", time_2)\n    return time_2\nans = solver()", "generated_prediction": "1.7320508075688765", "options": ["A)5(\u221a3 + 1)", "B)6(\u221a3 + \u221a2)", "C)7(\u221a3 \u2013 1)", "D)8(\u221a3 \u2013 2)", "E)None of these"], "answer": "A", "prediction": "A"}
{"question": "The original price of an item is discounted 22%. A customer buys the item at this discounted price using a $20-off coupon. There is no tax on the item, and this was the only item the customer bought. If the customer paid $1.90 more than half the original price of the item, what was the original price of the item?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The original price of an item is discounted 22%. A customer buys the item at this discounted price using a $20-off coupon. There is no tax on the item, and this was the only item the customer bought. If the customer paid $1.90 more than half the original price of the item, what was the original price of the item?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. original price of an item\n    # 2. discounted price of an item\n    # 3. price after using $20-off coupon\n    # 4. price paid by customer\n    # 5. half of the original price of the item\n    original_price = 0\n    discounted_price = 0\n    price_after_coupon = 0\n    price_paid = 0\n    half_original_price = 0\n    # Secondly, we need to calculate the original price of an item\n    for original_price in range(1, 100):\n        discounted_price = original_price * 0.78\n        price_after_coupon = discounted_price - 20\n        price_paid = price_after_coupon + 1.9\n        half_original_price = original_price / 2\n        if price_paid == half_original_price:\n            return original_price\nans = solver()", "generated_prediction": "None", "options": ["A)$61", "B)$65", "C)$67.40", "D)$70", "E)$78.20"], "answer": "E", "prediction": "None"}
{"question": "Find out which of the following values is the multiple of X, if it is divisible by 9 and 12?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Find out which of the following values is the multiple of X, if it is divisible by 9 and 12?\n# Options: 36, 15, 17, 5, 7\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    X = 12\n    options = [36, 15, 17, 5, 7]\n    answer = []\n    for i in options:\n        if i % X == 0:\n            answer.append(i)\n    return answer\nans = solver()", "generated_prediction": "36.0", "options": ["A)36", "B)15", "C)17", "D)5", "E)7"], "answer": "A", "prediction": "A"}
{"question": "If the probability that Stock A will increase in value during the next month is 0.56, and the probability that Stock B will increase in value during the next month is 0.74. What is the greatest value for the probability that neither of these two events will occur?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If the probability that Stock A will increase in value during the next month is 0.56, and the probability that Stock B will increase in value during the next month is 0.74. What is the greatest value for the probability that neither of these two events will occur?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    p_A = 0.56\n    p_B = 0.74\n    p_A_and_B = 0.56 * 0.74\n    p_A_or_B = 0.56 + 0.74 - 0.56 * 0.74\n    p_not_A_and_not_B = 1 - p_A_or_B\n    return p_not_A_and_not_B\nans = solver()", "generated_prediction": "0.11440000000000006", "options": ["A)0.22", "B)0.26", "C)0.37", "D)0.46", "E)0.63"], "answer": "B", "prediction": "A"}
{"question": "A trader sold an article at a profit of 20% for Rs.360. What is the cost price of the article?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A trader sold an article at a profit of 20% for Rs.360. What is the cost price of the article?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. cost price of the article\n    cost_price = 0\n    # 2. selling price of the article\n    selling_price = 360\n    # 3. profit rate\n    profit_rate = 20\n    # 4. profit\n    profit = selling_price * profit_rate / 100\n    # 5. cost price of the article\n    cost_price = selling_price - profit\n    return cost_price\nans = solver()", "generated_prediction": "288.0", "options": ["A)270", "B)300", "C)280", "D)320", "E)315"], "answer": "B", "prediction": "C"}
{"question": "20 marbles were pulled out of a bag of only white marbles, painted black, and then put back in. Then, another 20 marbles were pulled out, of which 1 was black, after which they were all returned to the bag. If the percentage of black marbles pulled out the second time represents their percentage in the bag, how many marbles in total Q does the bag currently hold?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: 20 marbles were pulled out of a bag of only white marbles, painted black, and then put back in. Then, another 20 marbles were pulled out, of which 1 was black, after which they were all returned to the bag. If the percentage of black marbles pulled out the second time represents their percentage in the bag, how many marbles in total Q does the bag currently hold?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of marbles pulled out the first time, which is 20\n    first_pull = 20\n    # 2. The number of marbles pulled out the second time, which is 20\n    second_pull = 20\n    # 3. The number of black marbles pulled out the second time, which is 1\n    second_pull_black = 1\n    # 4. The percentage of black marbles pulled out the second time, which is 5%\n    second_pull_black_percentage = 5\n    # 5. The total number of marbles in the bag, which is Q\n    total_marbles = 0\n    # 6. The percentage of black marbles in the bag, which is 5%\n    total_marbles_black_percentage = 5\n    # 7. The number of white marbles in the bag, which is Q - Q * 5%\n    total_marbles_white = 0\n    # 8. The number of black marbles in the bag, which is Q * 5%\n    total_marbles_black = 0\n    # 9. The number of white marbles pulled out the second time, which is 20 - 1\n    second_pull_white = second_pull - second_pull_black\n    # 10. The percentage of white marbles pulled out the second time, which is 95%\n    second_pull_white_percentage = 100 - second_pull_black_percentage\n    # 11. The number of white marbles pulled out the first time, which is 20\n    first_pull_white = first_pull\n    # 12. The percentage of white marbles pulled out the first time, which is 100%\n    first_pull_white_percentage = 100\n    # 13. The number of black marbles pulled out the first time, which is 0\n    first_pull_black = 0\n    # 14. The percentage of black marbles pulled out the first time, which is 0%\n    first_pull_black_percentage = 0\n    # 15. The number of white marbles in the bag after the first pull, which is Q - 20\n    total_marbles_white_after_first_\nans = solver()", "generated_prediction": "None", "options": ["A)40", "B)200", "C)380", "D)400", "E)3200"], "answer": "D", "prediction": "None"}
{"question": "Find the total no. of distinct bike no.'s that can beformed using 2 letters followed by 2 no.'s. How many letters need to be distinct?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Find the total no. of distinct bike no.'s that can beformed using 2 letters followed by 2 no.'s. How many letters need to be distinct?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of letters: 26\n    letters = 26\n    # 2. The number of numbers: 10\n    numbers = 10\n    # 3. The number of letters that need to be distinct: 2\n    distinct_letters = 2\n    # 4. The number of numbers that need to be distinct: 2\n    distinct_numbers = 2\n    # 5. The total number of letters: 2\n    total_letters = 2\n    # 6. The total number of numbers: 2\n    total_numbers = 2\n    # 7. The total number of distinct bike no.'s that can be formed using 2 letters followed by 2 no.'s\n    total_distinct_bikes = 0\n    # 8. The total number of letters that need to be distinct\n    total_distinct_letters = 0\n    # 9. The total number of numbers that need to be distinct\n    total_distinct_numbers = 0\n    # 10. The total number of letters\n    total_letters = 0\n    # 11. The total number of numbers\n    total_numbers = 0\n    # 12. The total number of distinct bike no.'s that can be formed using 2 letters followed by 2 no.'s\n    total_distinct_bikes = 0\n    # 13. The total number of letters that need to be distinct\n    total_distinct_letters = 0\n    # 14. The total number of numbers that need to be distinct\n    total_distinct_numbers = 0\n    # 15. The total number of letters\n    total_letters = 0\n    # 16. The total number of numbers\n    total_numbers = 0\n    # 17. The total number of distinct bike no.'s that can be formed using 2 letters followed by 2 no.'s\n    total_distinct_bikes = 0\n    # 18. The total number of letters that need to be distinct\n    total_distinct_letters = 0\n    # 19. The total number of numbers that need to be distinct\n    total_distinct_numbers = 0\n    # 20. The total number of letters\n    total_letters = 0\n    # 21. The total number\nans = solver()", "generated_prediction": "None", "options": ["A)74453", "B)64543", "C)74325", "D)65000", "E)97656"], "answer": "D", "prediction": "None"}
{"question": "A train running at a speed of 100 miles/hour, takes 10 hours to reach its destination. After covering quarter of the distance, it starts raining and the train has to be slowed to speed of 75 miles/hour. What is the total journey duration?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A train running at a speed of 100 miles/hour, takes 10 hours to reach its destination. After covering quarter of the distance, it starts raining and the train has to be slowed to speed of 75 miles/hour. What is the total journey duration?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The speed of the train when it is not raining\n    speed_not_raining = 100\n    # 2. The speed of the train when it is raining\n    speed_raining = 75\n    # 3. The total distance of the journey\n    total_distance = 100\n    # 4. The distance of the journey when it is not raining\n    distance_not_raining = total_distance / 4\n    # 5. The distance of the journey when it is raining\n    distance_raining = total_distance - distance_not_raining\n    # 6. The time of the journey when it is not raining\n    time_not_raining = distance_not_raining / speed_not_raining\n    # 7. The time of the journey when it is raining\n    time_raining = distance_raining / speed_raining\n    # 8. The total time of the journey\n    total_time = time_not_raining + time_raining\n    return total_time\nans = solver()", "generated_prediction": "1.25", "options": ["A)10", "B)11.5", "C)12.5", "D)13.5", "E)15"], "answer": "C", "prediction": "C"}
{"question": "Of the 200 students in a school, at least 45% attended the prom night and at least 35% took part in the debating session. What is the maximum number of students who could have neither attended the prom night nor the debating session?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Of the 200 students in a school, at least 45% attended the prom night and at least 35% took part in the debating session. What is the maximum number of students who could have neither attended the prom night nor the debating session?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # x: the number of students who attended the prom night\n    # y: the number of students who took part in the debating session\n    # z: the number of students who neither attended the prom night nor the debating session\n    x = 0\n    y = 0\n    z = 0\n    # Secondly, we need to define the constraints:\n    # x + y + z = 200\n    # x >= 45\n    # y >= 35\n    # z >= 0\n    # Thirdly, we need to find the maximum value of z\n    for x in range(45, 201):\n        for y in range(35, 201):\n            z = 200 - x - y\n            if z >= 0:\n                print(x, y, z)\n    return z\nans = solver()", "generated_prediction": "-200.0", "options": ["A)27", "B)81", "C)90", "D)99", "E)110"], "answer": "E", "prediction": "A"}
{"question": "A sales person gets a 10% commission on each sale he makes. How many sales of $250 each must he make in order to reach a salary of at least $1000?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A sales person gets a 10% commission on each sale he makes. How many sales of $250 each must he make in order to reach a salary of at least $1000?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    commission = 0.1\n    salary = 1000\n    sale = 250\n    sales = 0\n    while commission * sales * sale < salary:\n        sales += 1\n    return sales\nans = solver()", "generated_prediction": "40.0", "options": ["A)15", "B)24", "C)25", "D)40", "E)52"], "answer": "D", "prediction": "D"}
{"question": "A company produces 420 units of a particular computer component every month, at a production cost to the company of $110 per component, and sells all of the components by the end of each month. What is the minimum selling price per component that will guarantee that the yearly profit (revenue from sales minus production costs) will be at least $626,400 ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A company produces 420 units of a particular computer component every month, at a production cost to the company of $110 per component, and sells all of the components by the end of each month. What is the minimum selling price per component that will guarantee that the yearly profit (revenue from sales minus production costs) will be at least $626,400 ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of units produced per month\n    units_per_month = 420\n    # 2. The production cost per component\n    production_cost = 110\n    # 3. The minimum yearly profit\n    min_yearly_profit = 626400\n    # 4. The number of months in a year\n    months_in_a_year = 12\n    # 5. The number of units produced in a year\n    units_in_a_year = units_per_month * months_in_a_year\n    # 6. The production cost in a year\n    production_cost_in_a_year = production_cost * units_in_a_year\n    # 7. The minimum selling price per component\n    min_selling_price = (min_yearly_profit + production_cost_in_a_year) / units_in_a_year\n    return min_selling_price\nans = solver()", "generated_prediction": "234.28571428571428", "options": ["A)226", "B)230", "C)240", "D)260", "E)280"], "answer": "B", "prediction": "B"}
{"question": "At a certain factory, 10 percent of the staplers produced on Monday were defective and 2 percent of the non-defective staplers were rejected by mistake. If 72 of the non-defective staplers were rejected, what was the number of staplers produced that day?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: At a certain factory, 10 percent of the staplers produced on Monday were defective and 2 percent of the non-defective staplers were rejected by mistake. If 72 of the non-defective staplers were rejected, what was the number of staplers produced that day?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. the number of staplers produced that day\n    # 2. the number of defective staplers produced that day\n    # 3. the number of non-defective staplers produced that day\n    # 4. the number of non-defective staplers rejected by mistake\n    # 5. the number of non-defective staplers accepted\n    # 6. the number of staplers accepted\n    # 7. the number of staplers rejected\n    # 8. the number of staplers rejected by mistake\n    # 9. the number of staplers rejected by mistake\n    # 10. the number of staplers rejected by mistake\n    # 11. the number of staplers rejected by mistake\n    # 12. the number of staplers rejected by mistake\n    # 13. the number of staplers rejected by mistake\n    # 14. the number of staplers rejected by mistake\n    # 15. the number of staplers rejected by mistake\n    # 16. the number of staplers rejected by mistake\n    # 17. the number of staplers rejected by mistake\n    # 18. the number of staplers rejected by mistake\n    # 19. the number of staplers rejected by mistake\n    # 20. the number of staplers rejected by mistake\n    # 21. the number of staplers rejected by mistake\n    # 22. the number of staplers rejected by mistake\n    # 23. the number of staplers rejected by mistake\n    # 24. the number of staplers rejected by mistake\n    # 25. the number of staplers rejected by mistake\n    # 26. the number of staplers rejected by mistake\n    # 27. the number of staplers rejected by mistake\n    # 28. the number of staplers rejected by mistake\n    # 29. the number of staplers rejected by mistake\n    # 30. the number of staplers rejected by mistake\n    # 31. the number of staplers rejected by mistake\n    # 32. the number of\nans = solver()", "generated_prediction": "None", "options": ["A)4,000", "B)4,200", "C)4,500", "D)4,800", "E)5,000"], "answer": "A", "prediction": "None"}
{"question": "Machine A puts out a yo-yo every 6 minutes. Machine B puts out a yo-yo every 9 minutes. After how many minutes will they have produced 10 yo-yos?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Machine A puts out a yo-yo every 6 minutes. Machine B puts out a yo-yo every 9 minutes. After how many minutes will they have produced 10 yo-yos?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    machine_a_time = 6\n    machine_b_time = 9\n    total_yoyo = 10\n    time = 0\n    a_yoyo = 0\n    b_yoyo = 0\n    while a_yoyo + b_yoyo < total_yoyo:\n        time += 1\n        if time % machine_a_time == 0:\n            a_yoyo += 1\n        if time % machine_b_time == 0:\n            b_yoyo += 1\n    return time\nans = solver()", "generated_prediction": "36.0", "options": ["A)24 minutes", "B)32 minutes", "C)36 minutes", "D)64 minutes", "E)72 minutes"], "answer": "C", "prediction": "C"}
{"question": "Add: +45 and -30", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Add: +45 and -30\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 45\n    b = -30\n    c = a + b\n    return c\nans = solver()", "generated_prediction": "15.0", "options": ["A)-30", "B)+30", "C)0", "D)15", "E)-15"], "answer": "D", "prediction": "D"}
{"question": "In how many ways can the letters of the word \"PROBLEC\" be rearranged to make 7 letter words such that none of the letters repeat?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In how many ways can the letters of the word \"PROBLEC\" be rearranged to make 7 letter words such that none of the letters repeat?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of letters in the word \"PROBLEC\"\n    n = 7\n    # 2. The number of letters in the word \"PROBLEC\" that are not repeated\n    r = 4\n    # 3. The number of ways to rearrange the letters of the word \"PROBLEC\" to make 7 letter words such that none of the letters repeat\n    answer = 0\n    # Secondly, we need to calculate the answer\n    answer = math.factorial(n) / math.factorial(n - r)\n    # Thirdly, we need to return the answer\n    return answer\nans = solver()", "generated_prediction": "840.0", "options": ["A)2!", "B)3!", "C)7!", "D)8!", "E)9!"], "answer": "C", "prediction": "B"}
{"question": "Let A and B be independent events with P (A) = 0.2 and P(B) = 0.8. Find P(A/B)?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Let A and B be independent events with P (A) = 0.2 and P(B) = 0.8. Find P(A/B)?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    A = 0.2\n    B = 0.8\n    P_A_B = 0\n    P_A_B = A * B\n    return P_A_B\nans = solver()", "generated_prediction": "0.16000000000000003", "options": ["A)0.2", "B)0.4", "C)0.6", "D)1.2", "E)1.5"], "answer": "A", "prediction": "A"}
{"question": "Consider there is an staircase elevator and you are coming down. If you walk 20 steps and stop, then you reach bottom in 10 minutes. If you walk 10 steps and stop, you reach to the ground in 20 minutes. What is the speed of the elevator?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Consider there is an staircase elevator and you are coming down. If you walk 20 steps and stop, then you reach bottom in 10 minutes. If you walk 10 steps and stop, you reach to the ground in 20 minutes. What is the speed of the elevator?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of steps you walk each time\n    step = 10\n    # 2. The time you take to walk the steps\n    time = 20\n    # 3. The total number of steps\n    total_step = 20\n    # 4. The total time you take to walk the total steps\n    total_time = 10\n    # 5. The speed of the elevator\n    speed = 0\n    # Secondly, we need to calculate the speed of the elevator\n    speed = total_step / total_time\n    return speed\nans = solver()", "generated_prediction": "2.0", "options": ["A)1 step/minute", "B)2 step/minute", "C)3 step/minute", "D)4 step/minute", "E)None of the above"], "answer": "A", "prediction": "B"}
{"question": "Last year, a Home Appliance Store sold an average(arithmetic mean) of 42 microwave ovens per month. In the first 10 months of this year,the store has sold an average(arithmetic mean) of only 20 microwave ovens per month. What was the average number of microwave ovens sold per month during the entire 22 months period ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Last year, a Home Appliance Store sold an average(arithmetic mean) of 42 microwave ovens per month. In the first 10 months of this year,the store has sold an average(arithmetic mean) of only 20 microwave ovens per month. What was the average number of microwave ovens sold per month during the entire 22 months period ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The average number of microwave ovens sold per month in last year\n    last_year_average = 42\n    # 2. The average number of microwave ovens sold per month in the first 10 months of this year\n    this_year_average = 20\n    # 3. The number of months in last year\n    last_year_months = 12\n    # 4. The number of months in the first 10 months of this year\n    this_year_months = 10\n    # 5. The total number of months\n    total_months = last_year_months + this_year_months\n    # 6. The total number of microwave ovens sold in last year\n    last_year_total = last_year_average * last_year_months\n    # 7. The total number of microwave ovens sold in the first 10 months of this year\n    this_year_total = this_year_average * this_year_months\n    # 8. The total number of microwave ovens sold in the entire 22 months period\n    total_ovens = last_year_total + this_year_total\n    # 9. The average number of microwave ovens sold per month during the entire 22 months period\n    average = total_ovens / total_months\n    return average\nans = solver()", "generated_prediction": "32.0", "options": ["A)21", "B)30", "C)31", "D)32", "E)None of the above"], "answer": "D", "prediction": "D"}
{"question": "An exam is given in a certain class. The average (arithmetic mean) of the highest score and the lowest score is equal to x. If the average score for the entire class is equal to y and there are z students in the class, where z > 5, then in terms of x, y, and z, what is the average score for the class excluding the highest and lowest scorers?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: An exam is given in a certain class. The average (arithmetic mean) of the highest score and the lowest score is equal to x. If the average score for the entire class is equal to y and there are z students in the class, where z > 5, then in terms of x, y, and z, what is the average score for the class excluding the highest and lowest scorers?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x = 0\n    y = 0\n    z = 0\n    # Secondly, we need to calculate the average score for the class excluding the highest and lowest scorers\n    # Thirdly, we need to return the answer\n    return 0\nans = solver()", "generated_prediction": "None", "options": ["A)(zy \u2013 2x)/z", "B)(zy \u2013 2)/z", "C)(zx \u2013 y)/(z \u2013 2)", "D)(zy \u2013 2x)/(z -2)", "E)(zy \u2013 x)/(z + 2)"], "answer": "D", "prediction": "None"}
{"question": "[5 + ? \u00d7 19 - 15 - 7]/[13 \u00d7 13 - 156] = 6", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: [5 + ? \u00d7 19 - 15 - 7]/[13 \u00d7 13 - 156] = 6\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 5\n    b = 19\n    c = 15\n    d = 7\n    e = 13\n    f = 156\n    # Then, we need to calculate the result of the following expression:\n    result = (a + b * c - d - e) / (e * e - f)\n    return result\nans = solver()", "generated_prediction": "20.76923076923077", "options": ["A)4", "B)4.5", "C)5", "D)5.5", "E)6.5"], "answer": "C", "prediction": "C"}
{"question": "A grocer makes a 25% profit on the selling price for each bag of flour it sells. If he sells each bag for $100 and makes $3,000 in profit, how many bags did he sell?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A grocer makes a 25% profit on the selling price for each bag of flour it sells. If he sells each bag for $100 and makes $3,000 in profit, how many bags did he sell?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. profit_rate = 25%\n    profit_rate = 0.25\n    # 2. profit = $3,000\n    profit = 3000\n    # 3. selling_price = $100\n    selling_price = 100\n    # 4. number_of_bags = ?\n    number_of_bags = 0\n    # Secondly, we need to calculate the number_of_bags\n    number_of_bags = profit / (profit_rate * selling_price)\n    return number_of_bags\nans = solver()", "generated_prediction": "120.0", "options": ["A)12", "B)16", "C)24", "D)30", "E)40"], "answer": "C", "prediction": "D"}
{"question": "Alex and Jacob works at a toy shop that make toys. Alex takes 7 hours to make a toy, and Jacob takes 9 hours to make a toy. During a month, both of them makes 35 toys in total. If both of them have worked for almost similar number of hours how many toys have been prepared by Jacob?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Alex and Jacob works at a toy shop that make toys. Alex takes 7 hours to make a toy, and Jacob takes 9 hours to make a toy. During a month, both of them makes 35 toys in total. If both of them have worked for almost similar number of hours how many toys have been prepared by Jacob?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # Alex's working hours\n    alex_hours = 7\n    # Jacob's working hours\n    jacob_hours = 9\n    # Total number of toys\n    total_toys = 35\n    # Total working hours\n    total_hours = alex_hours + jacob_hours\n    # Total working hours of Alex\n    alex_total_hours = alex_hours * total_toys\n    # Total working hours of Jacob\n    jacob_total_hours = jacob_hours * total_toys\n    # Total working hours of both of them\n    total_working_hours = alex_total_hours + jacob_total_hours\n    # Number of toys prepared by Jacob\n    jacob_toys = total_working_hours / jacob_hours\n    return jacob_toys\nans = solver()", "generated_prediction": "62.22222222222222", "options": ["A)15", "B)16", "C)17", "D)18", "E)19"], "answer": "A", "prediction": "B"}
{"question": "John likes to have lightly flavored tea every evening. In a 50% strong milk tea, he replaces 15% of it with milk twice. Then, he replaces 10 percent of the resultant solution with more milk.\nWhat is the final concentration of tea John drinks?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: John likes to have lightly flavored tea every evening. In a 50% strong milk tea, he replaces 15% of it with milk twice. Then, he replaces 10 percent of the resultant solution with more milk.\nWhat is the final concentration of tea John drinks?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    tea_concentration = 0.5\n    milk_concentration = 0\n    milk_concentration_1 = 0.15\n    milk_concentration_2 = 0.1\n    tea_concentration_1 = 0\n    tea_concentration_2 = 0\n    tea_concentration_3 = 0\n    tea_concentration_4 = 0\n    tea_concentration_5 = 0\n    tea_concentration_6 = 0\n    tea_concentration_7 = 0\n    tea_concentration_8 = 0\n    tea_concentration_9 = 0\n    tea_concentration_10 = 0\n    tea_concentration_11 = 0\n    tea_concentration_12 = 0\n    tea_concentration_13 = 0\n    tea_concentration_14 = 0\n    tea_concentration_15 = 0\n    tea_concentration_16 = 0\n    tea_concentration_17 = 0\n    tea_concentration_18 = 0\n    tea_concentration_19 = 0\n    tea_concentration_20 = 0\n    tea_concentration_21 = 0\n    tea_concentration_22 = 0\n    tea_concentration_23 = 0\n    tea_concentration_24 = 0\n    tea_concentration_25 = 0\n    tea_concentration_26 = 0\n    tea_concentration_27 = 0\n    tea_concentration_28 = 0\n    tea_concentration_29 = 0\n    tea_concentration_30 = 0\n    tea_concentration_31 = 0\n    tea_concentration_32 = 0\n    tea_concentration_33 = 0\n    tea_concentration_34 = 0\n    tea_concentration_35 = 0\n    tea_concentration_36 = 0\n    tea_concentration_37 = 0\n    tea_concentration_38 = 0\n    tea_concentration_39 = 0\n    tea_con\nans = solver()", "generated_prediction": "None", "options": ["A)15.38%", "B)42%", "C)39.86%", "D)22.35%", "E)32.51%"], "answer": "E", "prediction": "None"}
{"question": "In a class 1/16 of the students study math, 1/10 of the students study bio, 1/8 of the students study english. The total number of students is a 4 digit number. Find the diffrence between maximum number of students and minimum number of students.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In a class 1/16 of the students study math, 1/10 of the students study bio, 1/8 of the students study english. The total number of students is a 4 digit number. Find the diffrence between maximum number of students and minimum number of students.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The total number of students\n    # 2. The number of students who study math\n    # 3. The number of students who study bio\n    # 4. The number of students who study english\n    # 5. The maximum number of students\n    # 6. The minimum number of students\n    total_students = 0\n    math_students = 0\n    bio_students = 0\n    english_students = 0\n    max_students = 0\n    min_students = 0\n    diff = 0\n    # Secondly, we need to find the total number of students\n    for i in range(1000, 10000):\n        total_students = i\n        math_students = math.ceil(total_students / 16)\n        bio_students = math.ceil(total_students / 10)\n        english_students = math.ceil(total_students / 8)\n        if math_students + bio_students + english_students == total_students:\n            max_students = total_students\n            break\n    for i in range(1000, 10000):\n        total_students = i\n        math_students = math.floor(total_students / 16)\n        bio_students = math.floor(total_students / 10)\n        english_students = math.floor(total_students / 8)\n        if math_students + bio_students + english_students == total_students:\n            min_students = total_students\n            break\n    diff = max_students - min_students\n    return diff\nans = solver()", "generated_prediction": "None", "options": ["A)8880", "B)8870", "C)8890", "D)7890", "E)6780"], "answer": "A", "prediction": "None"}
{"question": "On a normal day Bill usually averages about 15 mph when riding his bicycle. On a windy day, his speed is reduced by 4 mph. How far can Bill travel on a windy day in 21 minutes? Round to the nearest hundredth.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: On a normal day Bill usually averages about 15 mph when riding his bicycle. On a windy day, his speed is reduced by 4 mph. How far can Bill travel on a windy day in 21 minutes? Round to the nearest hundredth.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. Bill's average speed on a normal day\n    normal_speed = 15\n    # 2. Bill's average speed on a windy day\n    windy_speed = normal_speed - 4\n    # 3. The time Bill rides on a windy day\n    time = 21\n    # 4. The distance Bill travels on a windy day\n    distance = windy_speed * time\n    return distance\nans = solver()", "generated_prediction": "231.0", "options": ["A)2 miles", "B)2.25 miles", "C)3.25 miles", "D)3.85 miles", "E)2.85 miles"], "answer": "D", "prediction": "B"}
{"question": "A retailer sold an appliance for 40 percent above cost, which represented a gross profit of $20.00. For what price did the retailer sell the appliance?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A retailer sold an appliance for 40 percent above cost, which represented a gross profit of $20.00. For what price did the retailer sell the appliance?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    cost = 0\n    gross_profit = 20\n    gross_profit_percentage = 40\n    selling_price = 0\n    # Secondly, we need to calculate the selling price\n    selling_price = cost + gross_profit / gross_profit_percentage * 100\n    return selling_price\nans = solver()", "generated_prediction": "50.0", "options": ["A)$27.30", "B)$51.00", "C)$63.00", "D)$70.00", "E)$91.00"], "answer": "D", "prediction": "B"}
{"question": "At 6% per annum simple interest, Rahul borrowed Rs. 500. What amount will he pay to clear the debt after 4 years", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: At 6% per annum simple interest, Rahul borrowed Rs. 500. What amount will he pay to clear the debt after 4 years\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The amount of money borrowed\n    borrowed_money = 500\n    # 2. The interest rate\n    interest_rate = 0.06\n    # 3. The time period\n    time_period = 4\n    # 4. The amount of money to be paid\n    amount_to_be_paid = 0\n    # Secondly, we need to calculate the amount of money to be paid\n    amount_to_be_paid = borrowed_money * (1 + interest_rate * time_period)\n    return amount_to_be_paid\nans = solver()", "generated_prediction": "620.0", "options": ["A)750", "B)700", "C)620", "D)600", "E)None of these"], "answer": "C", "prediction": "C"}
{"question": "A computer routine was developed to generate two numbers (x,y) the first being a random number between 0 and 100 inclusive, and the second being less than or equal to the square root of the first. Each of the following pair satisfies the routine except", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A computer routine was developed to generate two numbers (x,y) the first being a random number between 0 and 100 inclusive, and the second being less than or equal to the square root of the first. Each of the following pair satisfies the routine except\n# Options: , , , , \n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x = 0\n    y = 0\n    # Then, we need to generate two numbers (x,y) the first being a random number between 0 and 100 inclusive, and the second being less than or equal to the square root of the first.\n    x = random.randint(0,100)\n    y = random.randint(0,math.sqrt(x))\n    # Finally, we need to return the answer\n    return (x,y)\nans = solver()", "generated_prediction": "None", "options": ["A)(99,10)", "B)(85,9)", "C)(50,7)", "D)(1,1)", "E)(1,0)"], "answer": "A", "prediction": "None"}
{"question": "A jeep travels a certain distance taking 6 hours in the forward journey. During the return journey, it increased its speed by 12km/hr and took 4 hours. What is the distance travelled by the jeep?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A jeep travels a certain distance taking 6 hours in the forward journey. During the return journey, it increased its speed by 12km/hr and took 4 hours. What is the distance travelled by the jeep?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The distance travelled by the jeep\n    # 2. The speed of the jeep in the forward journey\n    # 3. The speed of the jeep in the return journey\n    # 4. The time taken by the jeep in the forward journey\n    # 5. The time taken by the jeep in the return journey\n    distance = 0\n    speed_forward = 0\n    speed_return = 0\n    time_forward = 6\n    time_return = 4\n    # Secondly, we need to calculate the speed of the jeep in the forward journey\n    speed_forward = distance / time_forward\n    # Thirdly, we need to calculate the speed of the jeep in the return journey\n    speed_return = speed_forward + 12\n    # Fourthly, we need to calculate the distance travelled by the jeep\n    distance = speed_forward * time_forward\n    # Finally, we need to return the answer\n    return distance\nans = solver()", "generated_prediction": "None", "options": ["A)126km", "B)144km", "C)127km", "D)228km", "E)128km"], "answer": "B", "prediction": "None"}
{"question": "When I was 2 years old, my brother was half my age. Now I am 60 years old, how old is my brother?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: When I was 2 years old, my brother was half my age. Now I am 60 years old, how old is my brother?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    my_age = 2\n    my_brother_age = my_age / 2\n    my_age_now = 60\n    my_brother_age_now = my_brother_age + (my_age_now - my_age)\n    return my_brother_age_now\nans = solver()", "generated_prediction": "59.0", "options": ["A)A)59", "B)B)69", "C)C)79", "D)D)89", "E)E)99"], "answer": "A", "prediction": "A"}
{"question": "The original retail price of an appliance was 60 percent more than its wholesale cost. If the appliance was actually sold for 20 percent less than the original retail price, then it was sold for what percent more than its wholesale cost?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The original retail price of an appliance was 60 percent more than its wholesale cost. If the appliance was actually sold for 20 percent less than the original retail price, then it was sold for what percent more than its wholesale cost?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. original retail price\n    # 2. wholesale cost\n    # 3. actual retail price\n    original_retail_price = 0\n    wholesale_cost = 0\n    actual_retail_price = 0\n    # Secondly, we need to calculate the actual retail price\n    actual_retail_price = original_retail_price * 0.8\n    # Thirdly, we need to calculate the percent more than its wholesale cost\n    percent_more = (actual_retail_price - wholesale_cost) / wholesale_cost * 100\n    return percent_more\nans = solver()", "generated_prediction": "None", "options": ["A)20%", "B)28%", "C)36%", "D)40%", "E)42%"], "answer": "B", "prediction": "None"}
{"question": "On a map, the length of the road from Town F to Town G is measured to be 20 inches. On this map, 1/4 inch represents an actual distance of 10 miles. What is the actual distance, in miles, from Town F to Town G along this road?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: On a map, the length of the road from Town F to Town G is measured to be 20 inches. On this map, 1/4 inch represents an actual distance of 10 miles. What is the actual distance, in miles, from Town F to Town G along this road?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    map_length = 20\n    map_scale = 1/4\n    actual_scale = 10\n    actual_length = 0\n    # Secondly, we need to calculate the actual length\n    actual_length = map_length * map_scale * actual_scale\n    return actual_length\nans = solver()", "generated_prediction": "50.0", "options": ["A)800", "B)720", "C)960", "D)1140", "E)1160"], "answer": "A", "prediction": "A"}
{"question": "When folded into two equal halves a rectangular sheet had a perimeter of 48cm for each part folded along one set of sides and the same is 66cm when folded along the other set of sides. Find the area of the sheet.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: When folded into two equal halves a rectangular sheet had a perimeter of 48cm for each part folded along one set of sides and the same is 66cm when folded along the other set of sides. Find the area of the sheet.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # a: the length of the sheet\n    # b: the width of the sheet\n    a = 0\n    b = 0\n    # Secondly, we need to calculate the area of the sheet\n    area = a * b\n    return area\nans = solver()", "generated_prediction": "None", "options": ["A)1584", "B)1120", "C)792", "D)1320", "E)1200"], "answer": "B", "prediction": "None"}
{"question": "Suppose you can travel from a place M to a place N by 3 buses, from place N to place O by 4 buses, from place O to place P by 1 buses and from place P to place Q by 3 buses. In how many ways can you travel from M to Q ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Suppose you can travel from a place M to a place N by 3 buses, from place N to place O by 4 buses, from place O to place P by 1 buses and from place P to place Q by 3 buses. In how many ways can you travel from M to Q ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    M = 0\n    N = 0\n    O = 0\n    P = 0\n    Q = 0\n    # Secondly, we need to define the following variable:\n    MN = 0\n    NO = 0\n    OP = 0\n    PQ = 0\n    # Thirdly, we need to define the following variable:\n    MN_NO = 0\n    NO_OP = 0\n    OP_PQ = 0\n    MN_NO_OP = 0\n    NO_OP_PQ = 0\n    MN_NO_OP_PQ = 0\n    # Fourthly, we need to define the following variable:\n    MN_NO_OP_PQ_Q = 0\n    MN_NO_OP_PQ_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q_Q_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q_Q_Q_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q = 0\n    MN_NO_OP_PQ_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q_Q = 0\nans = solver()", "generated_prediction": "None", "options": ["A)24", "B)36", "C)72", "D)84", "E)None"], "answer": "B", "prediction": "None"}
{"question": "A rectangular solid, 3 x 4 x 15, is inscribed in a sphere, so that all eight of its vertices are on the sphere. What is the diameter of the sphere?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A rectangular solid, 3 x 4 x 15, is inscribed in a sphere, so that all eight of its vertices are on the sphere. What is the diameter of the sphere?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # a, b, c, r, d, e, f, g, h, i, j, k, l, m, n, o, p, q, s, t, u, v, w, x, y, z\n    a = 3\n    b = 4\n    c = 15\n    r = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    o = 0\n    p = 0\n    q = 0\n    s = 0\n    t = 0\n    u = 0\n    v = 0\n    w = 0\n    x = 0\n    y = 0\n    z = 0\n    # Secondly, we need to calculate the following equation:\n    d = a * a\n    e = b * b\n    f = c * c\n    g = d + e\n    h = g + f\n    i = math.sqrt(h)\n    j = i / 2\n    k = j * j\n    l = k - f\n    m = math.sqrt(l)\n    n = m / 2\n    o = n * n\n    p = o - e\n    q = math.sqrt(p)\n    s = q / 2\n    t = s * s\n    u = t - d\n    v = math.sqrt(u)\n    w = v / 2\n    x = w * w\n    y = x - f\n    z = math.sqrt(y)\n    r = z / 2\n    return r\nans = solver()", "generated_prediction": "None", "options": ["A) 13.3542", "B) 15.8113", "C) 18.3451", "D) 19.5667", "E) 20.8888"], "answer": "B", "prediction": "None"}
{"question": "A starts travel towards south 3km, then travel 5 km towards east, and again travels 3 km to north, and finally travels 2km towards west. In the end how far from is A from home?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A starts travel towards south 3km, then travel 5 km towards east, and again travels 3 km to north, and finally travels 2km towards west. In the end how far from is A from home?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x = 0\n    y = 0\n    distance = 0\n    # Secondly, we need to define the following list:\n    direction = ['south', 'east', 'north', 'west']\n    distance_list = [3, 5, 3, 2]\n    # Thirdly, we need to use for loop to calculate the distance\n    for i in range(len(direction)):\n        if direction[i] == 'south':\n            y -= distance_list[i]\n        elif direction[i] == 'east':\n            x += distance_list[i]\n        elif direction[i] == 'north':\n            y += distance_list[i]\n        elif direction[i] == 'west':\n            x -= distance_list[i]\n    distance = math.sqrt(x**2 + y**2)\n    return distance\nans = solver()", "generated_prediction": "3.0", "options": ["A)3km", "B)2km", "C)4km", "D)5km", "E)6km"], "answer": "A", "prediction": "A"}
{"question": "While selling a watch, a shopkeeper gives a discount of 5%. If he gives a discount of 7%, he earns Rs. 15 less as profit. The marked price of the watch is:", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: While selling a watch, a shopkeeper gives a discount of 5%. If he gives a discount of 7%, he earns Rs. 15 less as profit. The marked price of the watch is:\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The discount rate of 5%\n    discount_rate_5 = 0.05\n    # 2. The discount rate of 7%\n    discount_rate_7 = 0.07\n    # 3. The profit of Rs. 15\n    profit = 15\n    # 4. The marked price of the watch\n    marked_price = 0\n    # Secondly, we need to calculate the marked price of the watch\n    marked_price = profit / (discount_rate_5 - discount_rate_7)\n    # Thirdly, we need to return the marked price of the watch\n    return marked_price\nans = solver()", "generated_prediction": "-749.9999999999999", "options": ["A)Rs. 697.50", "B)Rs. 712.50", "C)Rs. 787.50", "D)Rs. 750", "E)Rs. 780"], "answer": "D", "prediction": "D"}
{"question": "A student instead of finding the value of 7/8 of a number, found the value of 7/18 of the number. If his answer differed from the actual one by 770, find the that number.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A student instead of finding the value of 7/8 of a number, found the value of 7/18 of the number. If his answer differed from the actual one by 770, find the that number.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number that the student found\n    # 2. The actual number\n    # 3. The difference between the actual number and the number that the student found\n    # 4. The number that the student should find\n    number_found = 0\n    actual_number = 0\n    difference = 0\n    number_should_find = 0\n    # Secondly, we need to find the actual number\n    # We know that the difference between the actual number and the number that the student found is 770\n    difference = 770\n    # We know that the number that the student found is 7/18 of the actual number\n    number_found = 7/18 * actual_number\n    # We know that the actual number is the number that the student found plus the difference\n    actual_number = number_found + difference\n    # Thirdly, we need to find the number that the student should find\n    # We know that the number that the student should find is 7/8 of the actual number\n    number_should_find = 7/8 * actual_number\n    return number_should_find\nans = solver()", "generated_prediction": "673.75", "options": ["A)1584", "B)2520", "C)1728", "D)1656", "E)None"], "answer": "A", "prediction": "A"}
{"question": "The monthly salary S of a shop assistant is the sum of a fixed salary of $500 plus 5% of all monthly sales. What should the monthly sales be so that her monthly salary reaches $1500?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The monthly salary S of a shop assistant is the sum of a fixed salary of $500 plus 5% of all monthly sales. What should the monthly sales be so that her monthly salary reaches $1500?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    S = 1500\n    fixed_salary = 500\n    sales = 0\n    monthly_sales = 0\n    while S > fixed_salary:\n        sales += 1\n        monthly_sales = sales * 0.05\n        S = fixed_salary + monthly_sales\n    return sales\nans = solver()", "generated_prediction": "None", "options": ["A)$50000", "B)$40000", "C)$30000", "D)$20000", "E)None of these"], "answer": "D", "prediction": "None"}
{"question": "An aeroplane flies along the four sides of a square at the speeds of 200, 400, 600 and 800km/hr. Find the average speed of the plane around the field?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: An aeroplane flies along the four sides of a square at the speeds of 200, 400, 600 and 800km/hr. Find the average speed of the plane around the field?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The length of the side of the square\n    side_length = 1000\n    # 2. The speed of the plane along the four sides\n    speed_1 = 200\n    speed_2 = 400\n    speed_3 = 600\n    speed_4 = 800\n    # 3. The time of the plane along the four sides\n    time_1 = side_length / speed_1\n    time_2 = side_length / speed_2\n    time_3 = side_length / speed_3\n    time_4 = side_length / speed_4\n    # 4. The distance of the plane along the four sides\n    distance_1 = speed_1 * time_1\n    distance_2 = speed_2 * time_2\n    distance_3 = speed_3 * time_3\n    distance_4 = speed_4 * time_4\n    # 5. The total distance of the plane around the field\n    total_distance = distance_1 + distance_2 + distance_3 + distance_4\n    # 6. The total time of the plane around the field\n    total_time = time_1 + time_2 + time_3 + time_4\n    # 7. The average speed of the plane around the field\n    average_speed = total_distance / total_time\n    return average_speed\nans = solver()", "generated_prediction": "384.0", "options": ["A)384", "B)562", "C)458", "D)156", "E)452"], "answer": "A", "prediction": "A"}
{"question": "Jack buys 18 sharpeners (white and brown) for rs. 100. If he pays 1 rupee more for each white than brown sharpeners. How many of white and how many brown sharpeners did he buy?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Jack buys 18 sharpeners (white and brown) for rs. 100. If he pays 1 rupee more for each white than brown sharpeners. How many of white and how many brown sharpeners did he buy?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The total price of sharpeners\n    total_price = 100\n    # 2. The price of each white sharpener\n    white_price = 1\n    # 3. The price of each brown sharpener\n    brown_price = 0\n    # 4. The total number of sharpeners\n    total_number = 18\n    # 5. The number of white sharpeners\n    white_number = 0\n    # 6. The number of brown sharpeners\n    brown_number = 0\n    # Secondly, we need to calculate the number of white sharpeners and brown sharpeners\n    white_number = (total_price - brown_price * total_number) / (white_price + brown_price)\n    brown_number = total_number - white_number\n    return white_number, brown_number\nans = solver()", "generated_prediction": "(100.0, -82.0)", "options": ["A)10,8", "B)9,8", "C)7,8", "D)5,6", "E)11,12"], "answer": "A", "prediction": "A"}
{"question": "Hoses A and B spout water at different constant rates, and hose A can fill a certain pool in 8 hours. Hose A filled the pool alone for the first 2 hours and the two hoses, working together, then finished filling the pool in another 3 hours. How many hours would it have taken hose B, working alone, to fill the entire pool?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Hoses A and B spout water at different constant rates, and hose A can fill a certain pool in 8 hours. Hose A filled the pool alone for the first 2 hours and the two hoses, working together, then finished filling the pool in another 3 hours. How many hours would it have taken hose B, working alone, to fill the entire pool?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. A: the rate of hose A\n    # 2. B: the rate of hose B\n    # 3. t: the time of hose A filled the pool alone\n    # 4. t1: the time of hose A and hose B filled the pool together\n    A = 0\n    B = 0\n    t = 0\n    t1 = 0\n    for A in range(1,100):\n        for B in range(1,100):\n            for t in range(1,100):\n                for t1 in range(1,100):\n                    if A*t + A*B*t1/A == 8 and A*t + A*B*t1/B == 8 and A*t + A*B*t1/A == A*t + A*B*t1/B:\n                        return B*t1\nans = solver()", "generated_prediction": "7.0", "options": ["A)8", "B)15", "C)12", "D)6", "E)3"], "answer": "A", "prediction": "D"}
{"question": "If 120 is reduced to 96, what is the reduction percent?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If 120 is reduced to 96, what is the reduction percent?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. original_price\n    original_price = 120\n    # 2. reduced_price\n    reduced_price = 96\n    # 3. reduction_percent\n    reduction_percent = 0\n    # 4. reduction_amount\n    reduction_amount = 0\n    # 5. reduction_percent_str\n    reduction_percent_str = ''\n    # 6. reduction_amount_str\n    reduction_amount_str = ''\n    # Secondly, we need to calculate the reduction_percent and reduction_amount\n    reduction_amount = original_price - reduced_price\n    reduction_percent = reduction_amount / original_price * 100\n    # Thirdly, we need to convert the reduction_percent and reduction_amount to string\n    reduction_percent_str = str(reduction_percent)\n    reduction_amount_str = str(reduction_amount)\n    # Finally, we need to return the answer\n    return reduction_percent_str + '%' + ' (' + reduction_amount_str + ')'\nans = solver()", "generated_prediction": "20.0% (24)", "options": ["A)30%", "B)40%", "C)20%", "D)10%", "E)5%"], "answer": "C", "prediction": "C"}
{"question": "I know a 5 digit number having a property that with a 1 after it, it is three times as large as it would be with a 1 before it.\nWhat is that number?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: I know a 5 digit number having a property that with a 1 after it, it is three times as large as it would be with a 1 before it.\nWhat is that number?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. the number of digits of the number\n    n = 5\n    # 2. the number of digits of the number\n    m = 10\n    # 3. the number of digits of the number\n    k = 1\n    # 4. the number of digits of the number\n    l = 3\n    # 5. the number of digits of the number\n    a = 0\n    # 6. the number of digits of the number\n    b = 0\n    # 7. the number of digits of the number\n    c = 0\n    # 8. the number of digits of the number\n    d = 0\n    # 9. the number of digits of the number\n    e = 0\n    # 10. the number of digits of the number\n    f = 0\n    # 11. the number of digits of the number\n    g = 0\n    # 12. the number of digits of the number\n    h = 0\n    # 13. the number of digits of the number\n    i = 0\n    # 14. the number of digits of the number\n    j = 0\n    # 15. the number of digits of the number\n    k = 0\n    # 16. the number of digits of the number\n    l = 0\n    # 17. the number of digits of the number\n    m = 0\n    # 18. the number of digits of the number\n    n = 0\n    # 19. the number of digits of the number\n    o = 0\n    # 20. the number of digits of the number\n    p = 0\n    # 21. the number of digits of the number\n    q = 0\n    # 22. the number of digits of the number\n    r = 0\n    # 23. the number of digits of the number\n    s = 0\n    # 24. the number of digits of the number\n    t = 0\n    # 25. the number of digits of the number\n    u = 0\n    # 26. the number of digits of the number\n    v = 0\n    # 27. the number of digits of the number\n    w = 0\n    # 28. the number of digits of the number\n    x = 0\n    # 29\nans = solver()", "generated_prediction": "None", "options": ["A)42857", "B)32456", "C)76523", "D)24567", "E)43566"], "answer": "A", "prediction": "None"}
{"question": "At Daifu university, 24% of all students are members of both a chess club and a swim team. If 20% of members of the swim team are not members of the chess club, what percentage of all Daifu students are members of the swim team?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: At Daifu university, 24% of all students are members of both a chess club and a swim team. If 20% of members of the swim team are not members of the chess club, what percentage of all Daifu students are members of the swim team?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    chess_club = 0.24\n    swim_team = 0.20\n    all_students = 1\n    # Secondly, we need to calculate the percentage of all Daifu students are members of the swim team\n    percentage = (chess_club - swim_team) / all_students\n    return percentage\nans = solver()", "generated_prediction": "0.03999999999999998", "options": ["A)20%", "B)30%", "C)40%", "D)50%", "E)60%"], "answer": "B", "prediction": "A"}
{"question": "If the population of a city increases by 5 % annually, what will be the population of the city in 2 years time if its current population is 78000?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If the population of a city increases by 5 % annually, what will be the population of the city in 2 years time if its current population is 78000?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. current_population: the current population of the city\n    current_population = 78000\n    # 2. annual_increase_rate: the annual increase rate of the city\n    annual_increase_rate = 0.05\n    # 3. years: the number of years\n    years = 2\n    # Secondly, we need to calculate the population of the city in 2 years time\n    for i in range(years):\n        current_population = current_population * (1 + annual_increase_rate)\n    return current_population\nans = solver()", "generated_prediction": "85995.0", "options": ["A)81900", "B)85995", "C)85800", "D)90000", "E)None of these"], "answer": "B", "prediction": "B"}
{"question": "Two cars start at the same time from opposite ends of a highway that is 50 miles long. One car is riding at 12 mph and the second car is riding at 13 mph. How long after they begin will they meet?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Two cars start at the same time from opposite ends of a highway that is 50 miles long. One car is riding at 12 mph and the second car is riding at 13 mph. How long after they begin will they meet?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    distance = 50\n    speed_1 = 12\n    speed_2 = 13\n    time = 0\n    distance_1 = 0\n    distance_2 = 0\n    while distance_1 < distance and distance_2 < distance:\n        distance_1 = speed_1 * time\n        distance_2 = speed_2 * time\n        time += 1\n    return time\nans = solver()", "generated_prediction": "5.0", "options": ["A) 1", "B) 1.25", "C) 1.50", "D) 1.75", "E) 2"], "answer": "E", "prediction": "B"}
{"question": "A shopkeeper employed a servant at a monthly salary of 1500. In addition to it, he agreed to pay him a commission of 15% on the monthly sale. How much sale in Rupees should the servant do if he wants his monthly income as 6000?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A shopkeeper employed a servant at a monthly salary of 1500. In addition to it, he agreed to pay him a commission of 15% on the monthly sale. How much sale in Rupees should the servant do if he wants his monthly income as 6000?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    salary = 1500\n    commission = 0.15\n    income = 6000\n    sale = 0\n    # Secondly, we need to calculate the sale\n    sale = (income - salary) / commission\n    return sale\nans = solver()", "generated_prediction": "30000.0", "options": ["A)30000", "B)415000", "C)31500", "D)50000", "E)None of these"], "answer": "A", "prediction": "A"}
{"question": "A man borrows Rs.360 If he pays it back in 12 monthly installments of Rs.31.50, what is his interest rate?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A man borrows Rs.360 If he pays it back in 12 monthly installments of Rs.31.50, what is his interest rate?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The amount of money borrowed\n    borrowed_money = 360\n    # 2. The number of monthly installments\n    number_of_monthly_installments = 12\n    # 3. The monthly installment\n    monthly_installment = 31.50\n    # 4. The interest rate\n    interest_rate = 0.01\n    # 5. The total amount of money paid back\n    total_amount_of_money_paid_back = 0\n    # 6. The total amount of interest paid\n    total_amount_of_interest_paid = 0\n    # 7. The total amount of money paid back in the first month\n    total_amount_of_money_paid_back_in_the_first_month = 0\n    # 8. The total amount of interest paid in the first month\n    total_amount_of_interest_paid_in_the_first_month = 0\n    # 9. The total amount of money paid back in the second month\n    total_amount_of_money_paid_back_in_the_second_month = 0\n    # 10. The total amount of interest paid in the second month\n    total_amount_of_interest_paid_in_the_second_month = 0\n    # 11. The total amount of money paid back in the third month\n    total_amount_of_money_paid_back_in_the_third_month = 0\n    # 12. The total amount of interest paid in the third month\n    total_amount_of_interest_paid_in_the_third_month = 0\n    # 13. The total amount of money paid back in the fourth month\n    total_amount_of_money_paid_back_in_the_fourth_month = 0\n    # 14. The total amount of interest paid in the fourth month\n    total_amount_of_interest_paid_in_the_fourth_month = 0\n    # 15. The total amount of money paid back in the fifth month\n    total_amount_of_money_paid_back_in_the_fifth_month = 0\n    # 16. The total amount of interest paid in the fifth month\nans = solver()", "generated_prediction": "None", "options": ["A)1.5%", "B)4.5%", "C)10%", "D)5%", "E)12%"], "answer": "D", "prediction": "None"}
{"question": "The price of a product is reduced by 30% . By what percentage should it be increased to make it 100%", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The price of a product is reduced by 30% . By what percentage should it be increased to make it 100%\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The price of a product is reduced by 30%\n    price_reduced = 0.7\n    # 2. By what percentage should it be increased to make it 100%\n    percentage_increased = 0\n    # 3. The price of a product is increased by percentage_increased to make it 100%\n    price_increased = 0\n    # 4. The price of a product is 100%\n    price_100 = 1\n    # Secondly, we need to calculate the percentage_increased\n    percentage_increased = (price_100 - price_reduced) / price_reduced * 100\n    print(\"The percentage should be increased is: \", percentage_increased)\n    # Thirdly, we need to calculate the price_increased\n    price_increased = price_reduced * (1 + percentage_increased / 100)\n    print(\"The price of a product is increased by \", percentage_increased, \"% to make it 100% is: \", price_increased)\n    return percentage_increased\nans = solver()", "generated_prediction": "42.85714285714287", "options": ["A)41.86%", "B)42.86%", "C)43.86%", "D)44.86%", "E)45.86%"], "answer": "B", "prediction": "B"}
{"question": "I have a money pouch containing Rs. 700. There are equal number of 25 paise coins, 50 paise coins and one rupee coins.\nHow many of each are there?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: I have a money pouch containing Rs. 700. There are equal number of 25 paise coins, 50 paise coins and one rupee coins.\nHow many of each are there?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    total_money = 700\n    number_of_25_paise = 0\n    number_of_50_paise = 0\n    number_of_1_rupee = 0\n    # Secondly, we need to write a for loop to find the answer\n    for number_of_25_paise in range(0, total_money):\n        for number_of_50_paise in range(0, total_money):\n            for number_of_1_rupee in range(0, total_money):\n                if number_of_25_paise + number_of_50_paise + number_of_1_rupee == total_money:\n                    if number_of_25_paise == number_of_50_paise == number_of_1_rupee:\n                        print(\"The number of 25 paise coins is:\", number_of_25_paise)\n                        print(\"The number of 50 paise coins is:\", number_of_50_paise)\n                        print(\"The number of 1 rupee coins is:\", number_of_1_rupee)\n                        return\n    print(\"There is no answer\")\nans = solver()", "generated_prediction": "None", "options": ["A)453", "B)651", "C)400", "D)487", "E)286"], "answer": "C", "prediction": "None"}
{"question": "A man spends Rs. 3500 per month and saves 12 1/2% of his income. His monthly income is ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A man spends Rs. 3500 per month and saves 12 1/2% of his income. His monthly income is ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. monthly_expense: the monthly expense of the man\n    monthly_expense = 3500\n    # 2. saving_rate: the saving rate of the man\n    saving_rate = 12.5\n    # 3. monthly_income: the monthly income of the man\n    monthly_income = 0\n    # 4. monthly_saving: the monthly saving of the man\n    monthly_saving = 0\n    # 5. monthly_saving_rate: the monthly saving rate of the man\n    monthly_saving_rate = 0\n    # 6. monthly_saving_rate_diff: the difference between the monthly saving rate and the saving rate\n    monthly_saving_rate_diff = 0\n    # 7. monthly_saving_rate_diff_abs: the absolute value of the difference between the monthly saving rate and the saving rate\n    monthly_saving_rate_diff_abs = 0\n    # 8. monthly_saving_rate_diff_abs_min: the minimum absolute value of the difference between the monthly saving rate and the saving rate\n    monthly_saving_rate_diff_abs_min = 0\n    # 9. monthly_income_min: the minimum monthly income of the man\n    monthly_income_min = 0\n    # 10. monthly_income_max: the maximum monthly income of the man\n    monthly_income_max = 0\n    # 11. monthly_income_range: the range of the monthly income of the man\n    monthly_income_range = 0\n    # 12. monthly_income_range_min: the minimum range of the monthly income of the man\n    monthly_income_range_min = 0\n    # 13. monthly_income_range_min_index: the index of the minimum range of the monthly income of the man\n    monthly_income_range_min_index = 0\n    # 14. monthly_income_range_min_index_list: the list of the index of the minimum range of the monthly income of the man\n    monthly_income_range_min_index_list = []\n    # 15. monthly_income_range_min_index_list_len: the length of the list of the index of\nans = solver()", "generated_prediction": "None", "options": ["A)Rs. 4400", "B)Rs. 4270", "C)Rs. 4000", "D)Rs. 3937.50", "E)None of these"], "answer": "C", "prediction": "None"}
{"question": "Five dozen toys are packed in a box and 98 boxes are kept in a tempo. How many tempos can lift 29400 toys in one round ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Five dozen toys are packed in a box and 98 boxes are kept in a tempo. How many tempos can lift 29400 toys in one round ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    toys_per_box = 5 * 12\n    boxes_per_tempo = 98\n    toys_per_tempo = toys_per_box * boxes_per_tempo\n    toys_to_lift = 29400\n    tempos_to_lift = math.ceil(toys_to_lift / toys_per_tempo)\n    return tempos_to_lift\nans = solver()", "generated_prediction": "5.0", "options": ["A)4", "B)5", "C)7", "D)6", "E)8"], "answer": "B", "prediction": "B"}
{"question": "There are 10 oranges in a basket. Find the no. of ways in which 2 oranges are chosen from the basket?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: There are 10 oranges in a basket. Find the no. of ways in which 2 oranges are chosen from the basket?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    n = 10\n    k = 2\n    answer = 0\n    # Secondly, we need to calculate the answer\n    answer = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n    return answer\nans = solver()", "generated_prediction": "45.0", "options": ["A)45", "B)90", "C)120", "D)150", "E)180"], "answer": "A", "prediction": "A"}
{"question": "A company contracts to paint 3 houses. Mr.Brown can paint a house in 6 days while Mr.Black would take 8 days and Mr.Blue 12 days. After 8 days Mr.Brown goes on vacation and Mr. Black begins to work for a period of 6 days. How many days will it take Mr.Blue to complete the contract?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A company contracts to paint 3 houses. Mr.Brown can paint a house in 6 days while Mr.Black would take 8 days and Mr.Blue 12 days. After 8 days Mr.Brown goes on vacation and Mr. Black begins to work for a period of 6 days. How many days will it take Mr.Blue to complete the contract?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. Mr.Brown's working days\n    brown_days = 6\n    # 2. Mr.Black's working days\n    black_days = 8\n    # 3. Mr.Blue's working days\n    blue_days = 12\n    # 4. Mr.Brown's vacation days\n    brown_vacation = 8\n    # 5. Mr.Black's working days after Mr.Brown's vacation\n    black_days_after_vacation = 6\n    # 6. The total days of the contract\n    total_days = brown_days + black_days + blue_days + brown_vacation + black_days_after_vacation\n    print(\"The total days of the contract is: \", total_days)\n    return total_days\nans = solver()", "generated_prediction": "40.0", "options": ["A)7", "B)8", "C)10", "D)11", "E)12"], "answer": "D", "prediction": "E"}
{"question": "Train A leaves a station every 16 minutes and Train B leaves every 17 minutes. If both trains just left the station simultaneously, how long until they do so again?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Train A leaves a station every 16 minutes and Train B leaves every 17 minutes. If both trains just left the station simultaneously, how long until they do so again?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    train_A_leaves_time = 16\n    train_B_leaves_time = 17\n    train_A_leaves_time_list = []\n    train_B_leaves_time_list = []\n    train_A_leaves_time_list.append(0)\n    train_B_leaves_time_list.append(0)\n    train_A_leaves_time_list.append(train_A_leaves_time)\n    train_B_leaves_time_list.append(train_B_leaves_time)\n    train_A_leaves_time_list_length = len(train_A_leaves_time_list)\n    train_B_leaves_time_list_length = len(train_B_leaves_time_list)\n    train_A_leaves_time_list_last_element = train_A_leaves_time_list[train_A_leaves_time_list_length - 1]\n    train_B_leaves_time_list_last_element = train_B_leaves_time_list[train_B_leaves_time_list_length - 1]\n    train_A_leaves_time_list_last_element_plus_train_A_leaves_time = train_A_leaves_time_list_last_element + train_A_leaves_time\n    train_B_leaves_time_list_last_element_plus_train_B_leaves_time = train_B_leaves_time_list_last_element + train_B_leaves_time\n    train_A_leaves_time_list_last_element_plus_train_A_leaves_time_list = []\n    train_B_leaves_time_list_last_element_plus_train_B_leaves_time_list = []\n    train_A_leaves_time_list_last_element_plus_train_A_leaves_time_list.append(train_A_leaves_time\nans = solver()", "generated_prediction": "None", "options": ["A)272 minutes", "B)304 minutes", "C)190 minutes", "D)70 minutes", "E)35 minutes"], "answer": "A", "prediction": "None"}
{"question": "A hollow cube of size 5cm is taken, with the thickness of 1cm. It is made of smaller cubes of size 1cm .If the outer surface of the cube is painted how many faces of the smaller cubes remain unpainted?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A hollow cube of size 5cm is taken, with the thickness of 1cm. It is made of smaller cubes of size 1cm .If the outer surface of the cube is painted how many faces of the smaller cubes remain unpainted?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The size of the hollow cube\n    size = 5\n    # 2. The thickness of the hollow cube\n    thickness = 1\n    # 3. The size of the smaller cubes\n    small_size = 1\n    # 4. The number of the smaller cubes\n    small_num = size ** 3\n    # 5. The number of the smaller cubes which are on the surface of the hollow cube\n    small_surface_num = (size - thickness) ** 2 * 6\n    # 6. The number of the smaller cubes which are on the surface of the hollow cube and are painted\n    small_surface_painted_num = small_surface_num * 2\n    # 7. The number of the smaller cubes which are on the surface of the hollow cube and are unpainted\n    small_surface_unpainted_num = small_surface_num - small_surface_painted_num\n    # 8. The number of the smaller cubes which are on the surface of the hollow cube and are unpainted\n    small_unpainted_num = small_num - small_surface_painted_num\n    # 9. The number of the faces of the smaller cubes which are on the surface of the hollow cube and are unpainted\n    small_unpainted_face_num = small_surface_unpainted_num * 6\n    return small_unpainted_face_num\nans = solver()", "generated_prediction": "-576.0", "options": ["A)438", "B)550", "C)500", "D)450", "E)498"], "answer": "A", "prediction": "A"}
{"question": "In a chocolate store, all chocolates are either vanilla or cocoa flavored only. 10% of the chocolates are cocoa flavored, 90% of the rest are squashed. What percentage of the chocolates are both vanilla flavored and not squashed?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In a chocolate store, all chocolates are either vanilla or cocoa flavored only. 10% of the chocolates are cocoa flavored, 90% of the rest are squashed. What percentage of the chocolates are both vanilla flavored and not squashed?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. total_chocolate: the total number of chocolates\n    total_chocolate = 100\n    # 2. cocoa_chocolate: the number of cocoa flavored chocolates\n    cocoa_chocolate = 10\n    # 3. vanilla_chocolate: the number of vanilla flavored chocolates\n    vanilla_chocolate = total_chocolate - cocoa_chocolate\n    # 4. squashed_chocolate: the number of squashed chocolates\n    squashed_chocolate = vanilla_chocolate * 0.9\n    # 5. vanilla_not_squashed_chocolate: the number of vanilla flavored and not squashed chocolates\n    vanilla_not_squashed_chocolate = vanilla_chocolate - squashed_chocolate\n    # 6. percentage: the percentage of vanilla flavored and not squashed chocolates\n    percentage = vanilla_not_squashed_chocolate / total_chocolate * 100\n    return percentage\nans = solver()", "generated_prediction": "9.0", "options": ["A)1%", "B)2%", "C)5%", "D)9%", "E)10%"], "answer": "D", "prediction": "D"}
{"question": "There is well of depth 30m and frog is at bottom of the well. He jumps 3m up one day and falls back 2m down the same day. How many days will it take for the frog to come out of the well?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: There is well of depth 30m and frog is at bottom of the well. He jumps 3m up one day and falls back 2m down the same day. How many days will it take for the frog to come out of the well?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    depth = 30\n    jump = 3\n    fall = 2\n    day = 0\n    # Secondly, we need to write a while loop to calculate the days\n    while depth > 0:\n        depth = depth - jump + fall\n        day = day + 1\n    return day\nans = solver()", "generated_prediction": "30.0", "options": ["A)25 days", "B)26 days", "C)27 days", "D)28 days", "E)29 days"], "answer": "D", "prediction": "A"}
{"question": "The sum of the 5 consecutive two digit odd numbers when divided by 10 becomes a perfect square, which of the following can be one of these 5 numbers?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The sum of the 5 consecutive two digit odd numbers when divided by 10 becomes a perfect square, which of the following can be one of these 5 numbers?\n# Options: 47, 91, 41, 67, 44\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. the sum of the 5 consecutive two digit odd numbers\n    # 2. the 5 consecutive two digit odd numbers\n    # 3. the perfect square\n    sum_of_5_consecutive_two_digit_odd_numbers = 0\n    five_consecutive_two_digit_odd_numbers = []\n    perfect_square = 0\n    # Secondly, we need to find the sum of the 5 consecutive two digit odd numbers\n    for i in range(1, 100):\n        if i % 2 == 1:\n            sum_of_5_consecutive_two_digit_odd_numbers += i\n    print(\"The sum of the 5 consecutive two digit odd numbers is:\", sum_of_5_consecutive_two_digit_odd_numbers)\n    # Thirdly, we need to find the 5 consecutive two digit odd numbers\n    for i in range(1, 100):\n        if i % 2 == 1:\n            five_consecutive_two_digit_odd_numbers.append(i)\n    print(\"The 5 consecutive two digit odd numbers are:\", five_consecutive_two_digit_odd_numbers)\n    # Fourthly, we need to find the perfect square\n    perfect_square = sum_of_5_consecutive_two_digit_odd_numbers / 10\n    print(\"The perfect square is:\", perfect_square)\n    # Finally, we need to find the answer\n    for i in range(1, 100):\n        if i % 2 == 1:\n            if math.sqrt(perfect_square) == i:\n                print(\"The answer is:\", i)\n                break\nans = solver()", "generated_prediction": "None", "options": ["A)47", "B)91", "C)41", "D)67", "E)44"], "answer": "C", "prediction": "None"}
{"question": "In a class, 8% of total students are interested in Football. 4/5 of total students are interested in Cricket. 10% of total students are interested in Basketball and remaining 20 students are not interested in any games. How many students are there in the class?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In a class, 8% of total students are interested in Football. 4/5 of total students are interested in Cricket. 10% of total students are interested in Basketball and remaining 20 students are not interested in any games. How many students are there in the class?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. Total number of students in the class\n    total_students = 0\n    # 2. Number of students interested in Football\n    football_students = 0\n    # 3. Number of students interested in Cricket\n    cricket_students = 0\n    # 4. Number of students interested in Basketball\n    basketball_students = 0\n    # 5. Number of students not interested in any games\n    no_game_students = 0\n    # 6. Percentage of students interested in Football\n    football_percentage = 0.08\n    # 7. Percentage of students interested in Cricket\n    cricket_percentage = 0.8\n    # 8. Percentage of students interested in Basketball\n    basketball_percentage = 0.1\n    # 9. Percentage of students not interested in any games\n    no_game_percentage = 0.2\n    # 10. Percentage of students interested in Football and Cricket\n    football_cricket_percentage = 0.08 + 0.8\n    # 11. Percentage of students interested in Football and Basketball\n    football_basketball_percentage = 0.08 + 0.1\n    # 12. Percentage of students interested in Football and not interested in any games\n    football_no_game_percentage = 0.08 + 0.2\n    # 13. Percentage of students interested in Cricket and Basketball\n    cricket_basketball_percentage = 0.8 + 0.1\n    # 14. Percentage of students interested in Cricket and not interested in any games\n    cricket_no_game_percentage = 0.8 + 0.2\n    # 15. Percentage of students interested in Basketball and not interested in any games\n    basketball_no_game_percentage = 0.1 + 0.2\n    # 16. Percentage of students interested in Football, Cricket and Basketball\n    football_cricket_basketball_percentage = 0.08 + 0.8 + 0.1\n    # 17. Percentage of students interested in Football, Cricket and not interested in any games\n    football_cricket_no_game_percentage = 0.08 + 0.8 + 0.2\n    # 18. Percentage of students interested in Football, Basketball and\nans = solver()", "generated_prediction": "None", "options": ["A)850", "B)800", "C)900", "D)950", "E)1000"], "answer": "E", "prediction": "None"}
{"question": "Q is as much younger than R as he is older than T. If the sum of the ages of R and T is 50 years. What is definitely the difference between R and Q's age?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Q is as much younger than R as he is older than T. If the sum of the ages of R and T is 50 years. What is definitely the difference between R and Q's age?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # Q, R, T, Q_age, R_age, T_age\n    Q = 0\n    R = 0\n    T = 0\n    Q_age = 0\n    R_age = 0\n    T_age = 0\n    # Secondly, we need to define the relationship between Q, R, T\n    # Q is as much younger than R as he is older than T\n    # Q_age = R_age - T_age\n    # Thirdly, we need to define the relationship between R and T\n    # The sum of the ages of R and T is 50 years\n    # R_age + T_age = 50\n    # Finally, we need to find the difference between R and Q's age\n    # R_age - Q_age = ?\n    # We can use for loop to find the answer\n    for R_age in range(1, 50):\n        for T_age in range(1, 50):\n            if R_age + T_age == 50:\n                Q_age = R_age - T_age\n                R_age = R_age\n                T_age = T_age\n                print(\"Q_age =\", Q_age, \"R_age =\", R_age, \"T_age =\", T_age)\n    return Q_age\nans = solver()", "generated_prediction": "48.0", "options": ["A)22", "B)27", "C)29", "D)Cannot be determined", "E)None of the above"], "answer": "D", "prediction": "B"}
{"question": "Calculate the maximum distance you can travel with $8.50 on a cab which charges $3.50 for the first quarter-mile and 10 cents for each additional quarter mile.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Calculate the maximum distance you can travel with $8.50 on a cab which charges $3.50 for the first quarter-mile and 10 cents for each additional quarter mile.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The initial distance is 0.25 miles\n    distance = 0.25\n    # 2. The initial cost is 3.50\n    cost = 3.50\n    # 3. The initial total distance is 0.25 miles\n    total_distance = 0.25\n    # 4. The initial total cost is 3.50\n    total_cost = 3.50\n    # 5. The initial number of times is 1\n    number_of_times = 1\n    # 6. The initial distance_list is [0.25]\n    distance_list = [0.25]\n    # 7. The initial cost_list is [3.50]\n    cost_list = [3.50]\n    # 8. The initial total_distance_list is [0.25]\n    total_distance_list = [0.25]\n    # 9. The initial total_cost_list is [3.50]\n    total_cost_list = [3.50]\n    # 10. The initial number_of_times_list is [1]\n    number_of_times_list = [1]\n    # 11. The initial distance_list_list is [[0.25]]\n    distance_list_list = [[0.25]]\n    # 12. The initial cost_list_list is [[3.50]]\n    cost_list_list = [[3.50]]\n    # 13. The initial total_distance_list_list is [[0.25]]\n    total_distance_list_list = [[0.25]]\n    # 14. The initial total_cost_list_list is [[3.50]]\n    total_cost_list_list = [[3.50]]\n    # 15. The initial number_of_times_list_list is [[1]]\n    number_of_times_list_list = [[1]]\n    # 16. The initial distance_list_list_list is [[[0.25]]]\n    distance_list_list_list = [[[0.25]]]\n    # 17. The initial cost_list_list_list is [[[3.50]]]\nans = solver()", "generated_prediction": "None", "options": ["A)11.75 miles", "B)12.75 miles", "C)17.75 miles", "D)14.75 miles", "E)10.75 miles"], "answer": "B", "prediction": "None"}
{"question": "In IPL season, Sachin current batting average is 51. In the finals, he scores 78 runs, then is batting average will be 54. Find out the total number of matches played by Sachin in this season.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In IPL season, Sachin current batting average is 51. In the finals, he scores 78 runs, then is batting average will be 54. Find out the total number of matches played by Sachin in this season.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. Sachin's current batting average: current_batting_average\n    current_batting_average = 51\n    # 2. Sachin's score in the finals: score_in_finals\n    score_in_finals = 78\n    # 3. Sachin's batting average after the finals: batting_average_after_finals\n    batting_average_after_finals = 54\n    # 4. The total number of matches played by Sachin in this season: total_number_of_matches\n    total_number_of_matches = 0\n    # Secondly, we need to calculate the total number of matches played by Sachin in this season\n    # We know that Sachin's batting average after the finals is 54, and his score in the finals is 78\n    # So, we can calculate the total number of runs scored by Sachin in this season\n    total_number_of_runs = batting_average_after_finals * (total_number_of_matches + 1) - score_in_finals\n    # We know that Sachin's current batting average is 51, and his score in the finals is 78\n    # So, we can calculate the total number of runs scored by Sachin before the finals\n    total_number_of_runs_before_finals = current_batting_average * total_number_of_matches - score_in_finals\n    # We know that the total number of runs scored by Sachin in this season is the sum of the total number of runs scored by Sachin before the finals and the total number of runs scored by Sachin in the finals\n    # So, we can calculate the total number of matches played by Sachin in this season\n    total_number_of_matches = (total_number_of_runs + score_in_finals) / current_batting_average\n    # Finally, we need to return the answer\n    return total_number_of_matches\nans = solver()", "generated_prediction": "1.0588235294117647", "options": ["A)6", "B)8", "C)9", "D)10", "E)11"], "answer": "C", "prediction": "A"}
{"question": "Amy is organizing her bookshelves and finds that she has 10 different types of books. She then codes each book with either a single letter or a pair of two different letters. If each type of book is uniquely represented by either a single letter or pair of letters, what is the smallest number of letters Amy will need to create the codes for all 10 types of books? (Assume the order of letters in a pair does not matter.)", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Amy is organizing her bookshelves and finds that she has 10 different types of books. She then codes each book with either a single letter or a pair of two different letters. If each type of book is uniquely represented by either a single letter or pair of letters, what is the smallest number of letters Amy will need to create the codes for all 10 types of books? (Assume the order of letters in a pair does not matter.)\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. the number of books\n    n = 10\n    # 2. the number of letters\n    m = 0\n    # 3. the number of pairs of letters\n    p = 0\n    # 4. the number of letters in total\n    t = 0\n    # 5. the number of pairs of letters in total\n    q = 0\n    # 6. the number of letters in total\n    s = 0\n    # 7. the number of pairs of letters in total\n    r = 0\n    # 8. the number of letters in total\n    u = 0\n    # 9. the number of pairs of letters in total\n    v = 0\n    # 10. the number of letters in total\n    w = 0\n    # 11. the number of pairs of letters in total\n    x = 0\n    # 12. the number of letters in total\n    y = 0\n    # 13. the number of pairs of letters in total\n    z = 0\n    # 14. the number of letters in total\n    a = 0\n    # 15. the number of pairs of letters in total\n    b = 0\n    # 16. the number of letters in total\n    c = 0\n    # 17. the number of pairs of letters in total\n    d = 0\n    # 18. the number of letters in total\n    e = 0\n    # 19. the number of pairs of letters in total\n    f = 0\n    # 20. the number of letters in total\n    g = 0\n    # 21. the number of pairs of letters in total\n    h = 0\n    # 22. the number of letters in total\n    i = 0\n    # 23. the number of pairs of letters in total\n    j = 0\n    # 24. the number of letters in total\n    k = 0\n    # 25. the number of pairs of letters in total\n    l = 0\n    # 26. the number of letters in total\n    o = 0\n    # 27. the number of pairs of letters in total\n    p = 0\n    # 28. the number of letters in total\n    q = 0\n    # 29. the number of pairs of letters in\nans = solver()", "generated_prediction": "None", "options": ["A)3", "B)4", "C)5", "D)10", "E)20"], "answer": "D", "prediction": "None"}
{"question": "A rectangular piece of 150 sq m has a length which is 1m more than the 4 times the breadth. What is the perimeter of the piece?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A rectangular piece of 150 sq m has a length which is 1m more than the 4 times the breadth. What is the perimeter of the piece?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. length\n    # 2. breadth\n    # 3. area\n    length = 0\n    breadth = 0\n    area = 150\n    # Secondly, we need to define the relationship between length, breadth and area\n    # 1. length = 4 * breadth + 1\n    # 2. area = length * breadth\n    # Thirdly, we need to calculate the length and breadth\n    for i in range(1, area):\n        for j in range(1, area):\n            if i * j == area and i == 4 * j + 1:\n                length = i\n                breadth = j\n    # Finally, we need to calculate the perimeter\n    perimeter = 2 * (length + breadth)\n    return perimeter\nans = solver()", "generated_prediction": "62.0", "options": ["A)60 m", "B)61 m", "C)62 m", "D)63 m", "E)64 m"], "answer": "C", "prediction": "C"}
{"question": "One gram of a certain health food contains 9 percent of the minimum daily requirement of vitamin E and 8 percent of the minimum daily requirement of vitamin A. If vitamins E and A are to be obtained from no other source, how many grams of the health food must be eaten daily to provide at least the minimum daily requirement of both vitamins?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: One gram of a certain health food contains 9 percent of the minimum daily requirement of vitamin E and 8 percent of the minimum daily requirement of vitamin A. If vitamins E and A are to be obtained from no other source, how many grams of the health food must be eaten daily to provide at least the minimum daily requirement of both vitamins?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. x: the number of grams of the health food\n    x = 0\n    # 2. min_daily_requirement_vitamin_E: the minimum daily requirement of vitamin E\n    min_daily_requirement_vitamin_E = 0\n    # 3. min_daily_requirement_vitamin_A: the minimum daily requirement of vitamin A\n    min_daily_requirement_vitamin_A = 0\n    # 4. vitamin_E_in_one_gram: the vitamin E in one gram of the health food\n    vitamin_E_in_one_gram = 0\n    # 5. vitamin_A_in_one_gram: the vitamin A in one gram of the health food\n    vitamin_A_in_one_gram = 0\n    # 6. vitamin_E_in_x_gram: the vitamin E in x grams of the health food\n    vitamin_E_in_x_gram = 0\n    # 7. vitamin_A_in_x_gram: the vitamin A in x grams of the health food\n    vitamin_A_in_x_gram = 0\n    # 8. min_daily_requirement_vitamin_E_met: whether the minimum daily requirement of vitamin E is met\n    min_daily_requirement_vitamin_E_met = False\n    # 9. min_daily_requirement_vitamin_A_met: whether the minimum daily requirement of vitamin A is met\n    min_daily_requirement_vitamin_A_met = False\n    # 10. min_daily_requirement_of_both_vitamins_met: whether the minimum daily requirement of both vitamins is met\n    min_daily_requirement_of_both_vitamins_met = False\n    # 11. min_daily_requirement_of_both_vitamins_met_x: the number of grams of the health food to provide at least the minimum daily requirement of both vitamins\n    min_daily_requirement_of_both_vitamins_met_x = 0\n    # Secondly, we need to assign values to the above variables\n    min_daily_requ\nans = solver()", "generated_prediction": "None", "options": ["A)8.5", "B)10.5", "C)12.5", "D)14.5", "E)16.5"], "answer": "C", "prediction": "None"}
{"question": "Assistants are needed to prepare for preparation. Each helper can make either 2 large cakes or 35 small cakes/hr. The kitchen is available for 3 hours and 20 large cakes & 700 small cakes are needed. How many helpers are required?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Assistants are needed to prepare for preparation. Each helper can make either 2 large cakes or 35 small cakes/hr. The kitchen is available for 3 hours and 20 large cakes & 700 small cakes are needed. How many helpers are required?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of helpers\n    helpers = 0\n    # 2. The number of large cakes\n    large_cakes = 0\n    # 3. The number of small cakes\n    small_cakes = 0\n    # 4. The number of hours\n    hours = 3\n    # 5. The number of large cakes needed\n    large_cakes_needed = 20\n    # 6. The number of small cakes needed\n    small_cakes_needed = 700\n    # 7. The number of large cakes made by one helper\n    large_cakes_made = 2\n    # 8. The number of small cakes made by one helper\n    small_cakes_made = 35\n    # 9. The number of large cakes made by all helpers\n    large_cakes_made_all = 0\n    # 10. The number of small cakes made by all helpers\n    small_cakes_made_all = 0\n    # 11. The number of large cakes made by all helpers in one hour\n    large_cakes_made_all_hour = 0\n    # 12. The number of small cakes made by all helpers in one hour\n    small_cakes_made_all_hour = 0\n    # 13. The number of large cakes made by all helpers in three hours\n    large_cakes_made_all_3hours = 0\n    # 14. The number of small cakes made by all helpers in three hours\n    small_cakes_made_all_3hours = 0\n    # 15. The number of large cakes made by all helpers in three hours\n    large_cakes_made_all_3hours = 0\n    # 16. The number of small cakes made by all helpers in three hours\n    small_cakes_made_all_3hours = 0\n    # 17. The number of large cakes made by all helpers in three hours\n    large_cakes_made_all_3hours = 0\n    # 18. The number of small cakes made by all helpers in three hours\n    small_cakes_made_all_3hours = 0\n    # 19. The number of large cakes made by all helpers in three hours\n    large_cakes_made_all_3hours = 0\n    # 20.\nans = solver()", "generated_prediction": "None", "options": ["A)8", "B)10", "C)12", "D)15", "E)19"], "answer": "B", "prediction": "None"}
{"question": "R, S, T, and U are points on a line, and U is the midpoint of line segment ST. If the lengths of line segments RS, RT, and ST are 5, 17, and 22, respectively. What is the length of line segment RU?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: R, S, T, and U are points on a line, and U is the midpoint of line segment ST. If the lengths of line segments RS, RT, and ST are 5, 17, and 22, respectively. What is the length of line segment RU?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # R, S, T, U, RS, RT, ST, RU\n    R = 0\n    S = 0\n    T = 0\n    U = 0\n    RS = 5\n    RT = 17\n    ST = 22\n    RU = 0\n    # Secondly, we need to calculate the length of line segment RU\n    RU = (RS + RT + ST) / 2\n    return RU\nans = solver()", "generated_prediction": "22.0", "options": ["A)6", "B)7", "C)8", "D)9", "E)10"], "answer": "A", "prediction": "E"}
{"question": "Six pita breads contain the same amount of falafel as do two rolls. Three rolls contain the same amount of falafel as five baguettes do. Two baguettes contain the same amount of falafel as how many pita breads?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Six pita breads contain the same amount of falafel as do two rolls. Three rolls contain the same amount of falafel as five baguettes do. Two baguettes contain the same amount of falafel as how many pita breads?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    pita = 0\n    roll = 0\n    baguette = 0\n    falafel = 0\n    # Secondly, we need to define the relationship between the variables\n    pita = 2 * roll\n    roll = 3 * baguette\n    baguette = 5 * pita\n    falafel = pita + roll + baguette\n    # Thirdly, we need to calculate the answer\n    pita = falafel / 2\n    return pita\nans = solver()", "generated_prediction": "None", "options": ["A)12/25", "B)3/2", "C)3", "D)2", "E)25/3"], "answer": "C", "prediction": "None"}
{"question": "A shopkeeper in order to promote his new shop put a discount of 20% on all the items for one day. Now he must sell the items at original price the other day. By what percentage must he increase the price to original?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A shopkeeper in order to promote his new shop put a discount of 20% on all the items for one day. Now he must sell the items at original price the other day. By what percentage must he increase the price to original?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The original price of the item\n    original_price = 100\n    # 2. The discount rate\n    discount_rate = 0.2\n    # 3. The price after discount\n    price_after_discount = original_price * (1 - discount_rate)\n    # 4. The increase rate\n    increase_rate = (original_price - price_after_discount) / price_after_discount\n    return increase_rate\nans = solver()", "generated_prediction": "0.25", "options": ["A)21%", "B)20%", "C)25%", "D)33%", "E)18%"], "answer": "C", "prediction": "C"}
{"question": "The bus fare for two persons for travelling between Agra and Aligarh id four-thirds the train fare between the same places for one person. The total fare paid by 6 persons travelling by bus and 8 persons travelling by train between the two places is Rs.1512. Find the train fare between the two places for one person?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The bus fare for two persons for travelling between Agra and Aligarh id four-thirds the train fare between the same places for one person. The total fare paid by 6 persons travelling by bus and 8 persons travelling by train between the two places is Rs.1512. Find the train fare between the two places for one person?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    bus_fare = 0\n    train_fare = 0\n    total_fare = 1512\n    bus_people = 6\n    train_people = 8\n    bus_fare = total_fare / (bus_people + train_people) * bus_people * 4 / 3\n    train_fare = total_fare / (bus_people + train_people) * train_people\n    return train_fare\nans = solver()", "generated_prediction": "864.0", "options": ["A)126", "B)77", "C)88", "D)66", "E)54"], "answer": "A", "prediction": "C"}
{"question": "A rectangle has a length of 8 centimeters and a width of 3 centimeters. Find the perimeter.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A rectangle has a length of 8 centimeters and a width of 3 centimeters. Find the perimeter.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    length = 8\n    width = 3\n    perimeter = 0\n    # Secondly, we need to calculate the perimeter\n    perimeter = 2 * (length + width)\n    return perimeter\nans = solver()", "generated_prediction": "22.0", "options": ["A)18cm", "B)22cm", "C)20cm", "D)30cm", "E)28cm"], "answer": "B", "prediction": "B"}
{"question": "Suppose you want to arrange your English, Hindi, Mathematics, History, Geography and Science books on a shelf. In how many ways can you do it ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Suppose you want to arrange your English, Hindi, Mathematics, History, Geography and Science books on a shelf. In how many ways can you do it ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of books\n    n = 6\n    # 2. The number of ways\n    ways = 0\n    # 3. The number of books in each shelf\n    shelf = 3\n    # 4. The number of books in each shelf\n    books = [1, 2, 3, 4, 5, 6]\n    # 5. The number of books in each shelf\n    shelf_1 = []\n    shelf_2 = []\n    shelf_3 = []\n    shelf_4 = []\n    shelf_5 = []\n    shelf_6 = []\n    # 6. The number of books in each shelf\n    shelf_1_1 = []\n    shelf_1_2 = []\n    shelf_1_3 = []\n    shelf_1_4 = []\n    shelf_1_5 = []\n    shelf_1_6 = []\n    shelf_2_1 = []\n    shelf_2_2 = []\n    shelf_2_3 = []\n    shelf_2_4 = []\n    shelf_2_5 = []\n    shelf_2_6 = []\n    shelf_3_1 = []\n    shelf_3_2 = []\n    shelf_3_3 = []\n    shelf_3_4 = []\n    shelf_3_5 = []\n    shelf_3_6 = []\n    shelf_4_1 = []\n    shelf_4_2 = []\n    shelf_4_3 = []\n    shelf_4_4 = []\n    shelf_4_5 = []\n    shelf_4_6 = []\n    shelf_5_1 = []\n    shelf_5_2 = []\n    shelf_5_3 = []\n    shelf_5_4 = []\n    shelf_5_5 = []\n    shelf_5_6 = []\n    shelf_6_1 = []\n    shelf_6_2 = []\n    shelf_6_3 = []\n    shelf_6_4 = []\n    shelf_6_5 = []\n    shelf_6_6 = []\n    # 7. The number of books in each shelf\n    shelf_\nans = solver()", "generated_prediction": "None", "options": ["A)520", "B)720", "C)920", "D)None", "E)Cannot be determined"], "answer": "B", "prediction": "None"}
{"question": "A straight picket fence is composed of x pickets each of which is 1/2 inch wide. If there are 6 inches of space between each pair of pickets, which of the following represents the length of fence in feet?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A straight picket fence is composed of x pickets each of which is 1/2 inch wide. If there are 6 inches of space between each pair of pickets, which of the following represents the length of fence in feet?\n# Options: 13x/2, 13x/2 - 6, 13x/24, /24, /24\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x = 0\n    length = 0\n    # Secondly, we need to calculate the length of fence in feet\n    length = 13 * x / 2 - 6\n    return length\nans = solver()", "generated_prediction": "-6.0", "options": ["A)13x/2", "B)13x/2 - 6", "C)13x/24", "D)(13x+1)/24", "E)(13x-12)/24"], "answer": "E", "prediction": "B"}
{"question": "A ship went on a voyage. After it had traveled 180 miles a plane started with 10 times the speed of the ship. Find the distance when they meet from starting point.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A ship went on a voyage. After it had traveled 180 miles a plane started with 10 times the speed of the ship. Find the distance when they meet from starting point.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The speed of the ship\n    ship_speed = 1\n    # 2. The speed of the plane\n    plane_speed = 10\n    # 3. The distance of the ship\n    ship_distance = 180\n    # 4. The distance of the plane\n    plane_distance = 0\n    # 5. The distance when they meet\n    meet_distance = 0\n    # Secondly, we need to calculate the distance when they meet\n    while plane_distance < ship_distance:\n        plane_distance = plane_distance + plane_speed\n        ship_distance = ship_distance + ship_speed\n        meet_distance = meet_distance + 1\n    return meet_distance\nans = solver()", "generated_prediction": "20.0", "options": ["A)238", "B)289", "C)200", "D)287", "E)187"], "answer": "C", "prediction": "C"}
{"question": "In a large forest, 300 deer were caught, tagged, and returned during 2001. During 2002, 500 deer were caught at random, of which only 20 had tags from the previous year. If the percent of deer in the forest that had tags during the second year and were caught in the 500 deer sample is representative of the percent of the total deer population in the forest with tags, what is the total deer population in the forest (assuming no change in population between 2001 and 2002)?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In a large forest, 300 deer were caught, tagged, and returned during 2001. During 2002, 500 deer were caught at random, of which only 20 had tags from the previous year. If the percent of deer in the forest that had tags during the second year and were caught in the 500 deer sample is representative of the percent of the total deer population in the forest with tags, what is the total deer population in the forest (assuming no change in population between 2001 and 2002)?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The total deer population in the forest\n    total_deer_population = 0\n    # 2. The number of deer caught, tagged, and returned during 2001\n    deer_caught_tagged_returned_2001 = 300\n    # 3. The number of deer caught at random during 2002\n    deer_caught_random_2002 = 500\n    # 4. The number of deer caught at random during 2002 with tags from the previous year\n    deer_caught_random_2002_with_tags = 20\n    # 5. The percent of deer in the forest that had tags during the second year and were caught in the 500 deer sample\n    percent_deer_forest_tags_2002 = deer_caught_random_2002_with_tags / deer_caught_random_2002\n    # 6. The percent of the total deer population in the forest with tags\n    percent_total_deer_population_tags = deer_caught_tagged_returned_2001 / total_deer_population\n    # 7. The total deer population in the forest (assuming no change in population between 2001 and 2002)\n    total_deer_population = deer_caught_tagged_returned_2001 / percent_deer_forest_tags_2002\n    return total_deer_population\nans = solver()", "generated_prediction": "None", "options": ["A)300", "B)500", "C)5000", "D)6000", "E)7500"], "answer": "E", "prediction": "None"}
{"question": "In a railway station, there are two trains going. One in the harbor line and one in the main line, each having a frequency of 10 minutes. The main line service starts at 5 o'clock and the harbor line starts at 5.02 A.M. A man goes to the station every day to catch the first train that comes. What is the probability of the man catching the first train?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In a railway station, there are two trains going. One in the harbor line and one in the main line, each having a frequency of 10 minutes. The main line service starts at 5 o'clock and the harbor line starts at 5.02 A.M. A man goes to the station every day to catch the first train that comes. What is the probability of the man catching the first train?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The time of the first train in the harbor line\n    harbor_line_first_train_time = 5.02\n    # 2. The time of the first train in the main line\n    main_line_first_train_time = 5\n    # 3. The frequency of the train in the harbor line\n    harbor_line_frequency = 10\n    # 4. The frequency of the train in the main line\n    main_line_frequency = 10\n    # 5. The time of the man going to the station\n    man_going_time = 5.01\n    # 6. The probability of the man catching the first train\n    probability = 0\n    # 7. The number of the train in the harbor line\n    harbor_line_train_number = 0\n    # 8. The number of the train in the main line\n    main_line_train_number = 0\n    # 9. The time of the train in the harbor line\n    harbor_line_train_time = 0\n    # 10. The time of the train in the main line\n    main_line_train_time = 0\n    # 11. The time of the first train\n    first_train_time = 0\n    # 12. The time of the second train\n    second_train_time = 0\n    # 13. The time of the third train\n    third_train_time = 0\n    # 14. The time of the fourth train\n    fourth_train_time = 0\n    # 15. The time of the fifth train\n    fifth_train_time = 0\n    # 16. The time of the sixth train\n    sixth_train_time = 0\n    # 17. The time of the seventh train\n    seventh_train_time = 0\n    # 18. The time of the eighth train\n    eighth_train_time = 0\n    # 19. The time of the ninth train\n    ninth_train_time = 0\n    # 20. The time of the tenth train\n    tenth_train_time = 0\n    # 21. The time of the eleventh train\n    eleventh_train_time = 0\n    # 22. The time of the tw\nans = solver()", "generated_prediction": "None", "options": ["A)0.9", "B)0.8", "C)0.6", "D)0.65", "E)1.5"], "answer": "B", "prediction": "None"}
{"question": "The average (arithmetic mean) of the weight of 10 vehicles is 12.2 tons. The average weight of the group of vehicles increased by 2.6 tons after a new heavy duty truck was added to the group? What is the weight in tons of the heavy duty truck?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The average (arithmetic mean) of the weight of 10 vehicles is 12.2 tons. The average weight of the group of vehicles increased by 2.6 tons after a new heavy duty truck was added to the group? What is the weight in tons of the heavy duty truck?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The average weight of the group of vehicles\n    average_weight = 12.2\n    # 2. The increase of the average weight\n    increase = 2.6\n    # 3. The number of vehicles\n    number_of_vehicles = 10\n    # 4. The weight of the heavy duty truck\n    heavy_duty_truck = 0\n    # Secondly, we need to calculate the weight of the heavy duty truck\n    heavy_duty_truck = average_weight * number_of_vehicles + increase * number_of_vehicles\n    heavy_duty_truck = heavy_duty_truck / (number_of_vehicles + 1)\n    # Finally, we need to return the answer\n    return heavy_duty_truck\nans = solver()", "generated_prediction": "13.454545454545455", "options": ["A)40.8", "B)41.6", "C)42.2", "D)43.5", "E)44.8"], "answer": "A", "prediction": "B"}
{"question": "Boomtown urban planners expect the city\u2019s population to increase by 10% per year over the next two years. If that projection were to come true, the population two years from now would be exactly double the population of one year ago. Which of the following is closest to the percent population increase in Boomtown over the last year?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Boomtown urban planners expect the city\u2019s population to increase by 10% per year over the next two years. If that projection were to come true, the population two years from now would be exactly double the population of one year ago. Which of the following is closest to the percent population increase in Boomtown over the last year?\n# Options: 20%, 40%, 50%, 65%, 75%\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. population_one_year_ago\n    population_one_year_ago = 100\n    # 2. population_two_years_ago\n    population_two_years_ago = 100\n    # 3. population_one_year_later\n    population_one_year_later = population_one_year_ago * 1.1\n    # 4. population_two_years_later\n    population_two_years_later = population_two_years_ago * 1.1 * 1.1\n    # 5. population_increase_percentage\n    population_increase_percentage = (population_one_year_later - population_one_year_ago) / population_one_year_ago * 100\n    return population_increase_percentage\nans = solver()", "generated_prediction": "10.000000000000014", "options": ["A)20%", "B)40%", "C)50%", "D)65%", "E)75%"], "answer": "D", "prediction": "A"}
{"question": "Arjun and Sajal are friends, each has some money. If Arun gives $30 to Sajal, the Sajal will have twice the money left with Arjun. But, if Sajal gives $10 to Arjun, Arjun will have thrice as much as is left with Sajal. How much money does each have?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Arjun and Sajal are friends, each has some money. If Arun gives $30 to Sajal, the Sajal will have twice the money left with Arjun. But, if Sajal gives $10 to Arjun, Arjun will have thrice as much as is left with Sajal. How much money does each have?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    Arjun = 0\n    Sajal = 0\n    # Secondly, we need to define the following equation:\n    Arjun = Sajal * 2 - 30\n    Sajal = Arjun / 3 + 10\n    # Thirdly, we need to return the answer:\n    return Arjun, Sajal\nans = solver()", "generated_prediction": "(-30, 0.0)", "options": ["A)62, 35", "B)62, 34", "C)34, 62", "D)42, 62", "E)62, 42"], "answer": "B", "prediction": "A"}
{"question": "Julie\u2019s yard is rectangular. One side of the yard is 100 feet wide. The total area of the yard is 3,000 square feet. What is the length of the other side of the yard?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Julie\u2019s yard is rectangular. One side of the yard is 100 feet wide. The total area of the yard is 3,000 square feet. What is the length of the other side of the yard?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The width of the yard\n    width = 100\n    # 2. The area of the yard\n    area = 3000\n    # 3. The length of the yard\n    length = 0\n    # Secondly, we need to calculate the length of the yard\n    length = area / width\n    # Thirdly, we need to return the answer\n    return length\nans = solver()", "generated_prediction": "30.0", "options": ["A)30 feet", "B)20 feet", "C)10 feet", "D)50 feet", "E)60 feet"], "answer": "A", "prediction": "A"}
{"question": "The greatest common factor of two positive integers is 11. The least common multiple of these two integers is 7700. If one of the integers is 350, what is the other?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The greatest common factor of two positive integers is 11. The least common multiple of these two integers is 7700. If one of the integers is 350, what is the other?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # gcf: greatest common factor\n    # lcm: least common multiple\n    gcf = 11\n    lcm = 7700\n    # Secondly, we need to find the other integer, which is the product of gcf and lcm divided by the given integer.\n    other_integer = (gcf * lcm) / 350\n    return other_integer\nans = solver()", "generated_prediction": "242.0", "options": ["A)242", "B)308", "C)352", "D)412", "E)456"], "answer": "A", "prediction": "A"}
{"question": "A square piece of cloth is trimmed by 4 feet on one edge to form a rectangular piece, which is then cut diagonally in half to create two triangles. If the area of each of triangle is 70 square feet, what was the perimeter (in feet) of the original piece of square cloth?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A square piece of cloth is trimmed by 4 feet on one edge to form a rectangular piece, which is then cut diagonally in half to create two triangles. If the area of each of triangle is 70 square feet, what was the perimeter (in feet) of the original piece of square cloth?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # a: the length of the original piece of square cloth\n    a = 0\n    # b: the length of the rectangular piece\n    b = 0\n    # c: the length of the diagonal of the rectangular piece\n    c = 0\n    # d: the length of the diagonal of the triangle\n    d = 0\n    # e: the length of the side of the triangle\n    e = 0\n    # f: the perimeter of the original piece of square cloth\n    f = 0\n    # Secondly, we need to calculate the value of each variable\n    for a in range(1, 100):\n        b = a - 4\n        c = math.sqrt(a**2 + b**2)\n        d = math.sqrt(2) * a\n        e = d / 2\n        f = 4 * a\n        if e == 70:\n            break\n    return f\nans = solver()", "generated_prediction": "396.0", "options": ["A)56", "B)58", "C)60", "D)62", "E)64"], "answer": "A", "prediction": "E"}
{"question": "The length of the ribbon was originally 30 cm. It was reduced in the ratio 5 : 3. What is its length now?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The length of the ribbon was originally 30 cm. It was reduced in the ratio 5 : 3. What is its length now?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    original_length = 30\n    ratio = 5/3\n    reduced_length = original_length * ratio\n    return reduced_length\nans = solver()", "generated_prediction": "50.0", "options": ["A)18", "B)30", "C)6", "D)15", "E)12"], "answer": "A", "prediction": "A"}
{"question": "M = abc is a three digit number and N = cba, if M > N and M - N + 396c = 990. Then how many values of M are more than 300.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: M = abc is a three digit number and N = cba, if M > N and M - N + 396c = 990. Then how many values of M are more than 300.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    M = 0\n    N = 0\n    c = 0\n    a = 0\n    b = 0\n    count = 0\n    for c in range(1, 10):\n        for a in range(1, 10):\n            for b in range(1, 10):\n                M = 100 * a + 10 * b + c\n                N = 100 * c + 10 * b + a\n                if M > N and M - N + 396 * c == 990:\n                    count += 1\n    return count\nans = solver()", "generated_prediction": "18.0", "options": ["A)20", "B)30", "C)40", "D)200", "E)None"], "answer": "A", "prediction": "A"}
{"question": "there are more than 501 students in a school such that 20% of them exactly took physics and 28% of them exactly took math. What could be the least possible no of students in the school?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: there are more than 501 students in a school such that 20% of them exactly took physics and 28% of them exactly took math. What could be the least possible no of students in the school?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. the number of students in the school\n    # 2. the number of students who took physics\n    # 3. the number of students who took math\n    # 4. the number of students who took both physics and math\n    # 5. the number of students who took neither physics nor math\n    # 6. the number of students who took physics but not math\n    # 7. the number of students who took math but not physics\n    # 8. the number of students who took either physics or math\n    # 9. the number of students who took either physics or math but not both\n    # 10. the number of students who took both physics and math\n    # 11. the number of students who took neither physics nor math\n    # 12. the number of students who took either physics or math but not both\n    # 13. the number of students who took both physics and math\n    # 14. the number of students who took neither physics nor math\n    # 15. the number of students who took either physics or math but not both\n    # 16. the number of students who took both physics and math\n    # 17. the number of students who took neither physics nor math\n    # 18. the number of students who took either physics or math but not both\n    # 19. the number of students who took both physics and math\n    # 20. the number of students who took neither physics nor math\n    # 21. the number of students who took either physics or math but not both\n    # 22. the number of students who took both physics and math\n    # 23. the number of students who took neither physics nor math\n    # 24. the number of students who took either physics or math but not both\n    # 25. the number of students who took both physics and math\n    # 26. the number of students who took neither physics nor math\n    # 27. the number of students who took either physics or math but not both\n    # 28. the number of students who took both physics and math\n    # 29. the number of students who took neither physics nor math\n    # 30. the number of students who took either physics or math but not both\n    # 31. the number of students who took both physics and math\nans = solver()", "generated_prediction": "None", "options": ["A)550", "B)570", "C)600", "D)700", "E)none of these"], "answer": "E", "prediction": "None"}
{"question": "If Raj was one-third as old as Rahim 5 years back and Raj is 17 years old now, How old is Rahim now?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If Raj was one-third as old as Rahim 5 years back and Raj is 17 years old now, How old is Rahim now?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    raj_age_5_years_ago = 0\n    rahim_age_5_years_ago = 0\n    raj_age_now = 17\n    rahim_age_now = 0\n    # Secondly, we need to calculate the rahim_age_5_years_ago\n    rahim_age_5_years_ago = raj_age_5_years_ago * 3\n    # Thirdly, we need to calculate the rahim_age_now\n    rahim_age_now = rahim_age_5_years_ago + 5\n    return rahim_age_now\nans = solver()", "generated_prediction": "5.0", "options": ["A)37", "B)41", "C)40", "D)42", "E)43"], "answer": "B", "prediction": "A"}
{"question": "A cow is tethered in the middle of a field with a 14 feet long rope. If the cow grazes 10 sq.ft. per day, then approximately what time will be taken by the cow to graze the whole field?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A cow is tethered in the middle of a field with a 14 feet long rope. If the cow grazes 10 sq.ft. per day, then approximately what time will be taken by the cow to graze the whole field?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The length of the rope\n    rope_length = 14\n    # 2. The area of the field\n    field_area = rope_length ** 2 * math.pi\n    # 3. The area that the cow can graze per day\n    cow_grazing_area = 10\n    # 4. The time that the cow takes to graze the whole field\n    cow_grazing_time = field_area / cow_grazing_area\n    return cow_grazing_time\nans = solver()", "generated_prediction": "61.57521601035994", "options": ["A)51 days", "B)61 days", "C)71 days", "D)81 days", "E)91 days"], "answer": "B", "prediction": "B"}
{"question": "A book was sold for Rs 27.50 with a profit of 10%. If it were sold for Rs. 25.75, then would have been percentage of profit and loss ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A book was sold for Rs 27.50 with a profit of 10%. If it were sold for Rs. 25.75, then would have been percentage of profit and loss ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The price of the book\n    price = 27.50\n    # 2. The profit of the book\n    profit = 10\n    # 3. The price of the book if it were sold for Rs. 25.75\n    price_new = 25.75\n    # 4. The profit of the book if it were sold for Rs. 25.75\n    profit_new = 0\n    # 5. The percentage of profit and loss\n    percentage = 0\n    # Secondly, we need to calculate the profit of the book if it were sold for Rs. 25.75\n    profit_new = price_new - price\n    # Thirdly, we need to calculate the percentage of profit and loss\n    percentage = profit_new / price * 100\n    return percentage\nans = solver()", "generated_prediction": "-6.363636363636363", "options": ["A)2% Profit", "B)3% Profit", "C)2% Loss", "D)3% Loss", "E)4% Loss"], "answer": "B", "prediction": "D"}
{"question": "In how many ways can a teacher in a kindergarten school arrange a group of 3 children (Susan, Tim and Zen) on 3 identical chairs in a straight line so that Susan is on the left of Tim?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In how many ways can a teacher in a kindergarten school arrange a group of 3 children (Susan, Tim and Zen) on 3 identical chairs in a straight line so that Susan is on the left of Tim?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of children: n = 3\n    n = 3\n    # 2. The number of chairs: m = 3\n    m = 3\n    # 3. The number of ways: ways = 0\n    ways = 0\n    # 4. The number of ways that Susan is on the left of Tim: ways_susan_left_tim = 0\n    ways_susan_left_tim = 0\n    # 5. The number of ways that Susan is on the right of Tim: ways_susan_right_tim = 0\n    ways_susan_right_tim = 0\n    # 6. The number of ways that Susan is on the left of Zen: ways_susan_left_zen = 0\n    ways_susan_left_zen = 0\n    # 7. The number of ways that Susan is on the right of Zen: ways_susan_right_zen = 0\n    ways_susan_right_zen = 0\n    # 8. The number of ways that Tim is on the left of Zen: ways_tim_left_zen = 0\n    ways_tim_left_zen = 0\n    # 9. The number of ways that Tim is on the right of Zen: ways_tim_right_zen = 0\n    ways_tim_right_zen = 0\n    # 10. The number of ways that Susan is on the left of Tim and Susan is on the left of Zen: ways_susan_left_tim_left_zen = 0\n    ways_susan_left_tim_left_zen = 0\n    # 11. The number of ways that Susan is on the left of Tim and Susan is on the right of Zen: ways_susan_left_tim_right_zen = 0\n    ways_susan_left_tim_right_zen = 0\n    # 12. The number of ways that Susan is on the right of Tim and Susan is on the left of Zen: ways_susan_right_tim_left_zen = 0\n    ways_susan_right_tim_left_zen = 0\n    # 13. The number of\nans = solver()", "generated_prediction": "None", "options": ["A)7", "B)3", "C)2", "D)1", "E)6"], "answer": "B", "prediction": "None"}
{"question": "The telephone bill of a certain establishment is party fixed and partly varies as the number of calls consumed. When in a certain month 540 calls made the bill is Rs.1800. In another month 620 calls are consumed then the bill becomes Rs.2040. In another month 500 units are consumed due to more\nholidays. The bill for that month would be :", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The telephone bill of a certain establishment is party fixed and partly varies as the number of calls consumed. When in a certain month 540 calls made the bill is Rs.1800. In another month 620 calls are consumed then the bill becomes Rs.2040. In another month 500 units are consumed due to more\nholidays. The bill for that month would be :\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 540\n    b = 620\n    c = 500\n    d = 1800\n    e = 2040\n    f = 0\n    # Secondly, we need to calculate the value of f\n    f = (d * b - e * a) / (b - a)\n    print(f)\n    return f\nans = solver()", "generated_prediction": "None", "options": ["A)Rs.1560", "B)Rs.1680", "C)Rs.1840", "D)Rs.1950", "E)Rs.1690"], "answer": "B", "prediction": "None"}
{"question": "Two balls A and B rotate along a circular track. Ball A makes 2 full rotations in 26 minutes. Ball B makes 5 full rotation in 35 minutes. If they start rotating now from the same point, when will they be at the same starting point again?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Two balls A and B rotate along a circular track. Ball A makes 2 full rotations in 26 minutes. Ball B makes 5 full rotation in 35 minutes. If they start rotating now from the same point, when will they be at the same starting point again?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The time of rotation of ball A and B\n    time_A = 26\n    time_B = 35\n    # 2. The number of rotation of ball A and B\n    rotation_A = 2\n    rotation_B = 5\n    # 3. The time of rotation of ball A and B\n    time_A = time_A * 60\n    time_B = time_B * 60\n    # 4. The time of rotation of ball A and B\n    time_A = time_A / rotation_A\n    time_B = time_B / rotation_B\n    # 5. The time of rotation of ball A and B\n    time_A = time_A * rotation_A\n    time_B = time_B * rotation_B\n    # 6. The time of rotation of ball A and B\n    time_A = time_A / rotation_A\n    time_B = time_B / rotation_B\n    # 7. The time of rotation of ball A and B\n    time_A = time_A * rotation_A\n    time_B = time_B * rotation_B\n    # 8. The time of rotation of ball A and B\n    time_A = time_A / rotation_A\n    time_B = time_B / rotation_B\n    # 9. The time of rotation of ball A and B\n    time_A = time_A * rotation_A\n    time_B = time_B * rotation_B\n    # 10. The time of rotation of ball A and B\n    time_A = time_A / rotation_A\n    time_B = time_B / rotation_B\n    # 11. The time of rotation of ball A and B\n    time_A = time_A * rotation_A\n    time_B = time_B * rotation_B\n    # 12. The time of rotation of ball A and B\n    time_A = time_A / rotation_A\n    time_B = time_B / rotation_B\n    # 13. The time of rotation of ball A and B\n    time_A = time_A * rotation_A\nans = solver()", "generated_prediction": "None", "options": ["A)1 hour and 31 minutes", "B)2 hour and 31 minutes", "C)3 hour and 31 minutes", "D)4 hour and 31 minutes", "E)5 hour and 31 minutes"], "answer": "A", "prediction": "None"}
{"question": "A bookshelf contains 45 books, 30 of which are hardcover and 20 of which are fiction. What is the maximum number of books that are both hardcover and fiction?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A bookshelf contains 45 books, 30 of which are hardcover and 20 of which are fiction. What is the maximum number of books that are both hardcover and fiction?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. hardcover: the number of hardcover books\n    # 2. fiction: the number of fiction books\n    # 3. total: the total number of books\n    hardcover = 30\n    fiction = 20\n    total = 45\n    # Secondly, we need to find the maximum number of books that are both hardcover and fiction\n    # We can use the following formula:\n    # max = min(hardcover, fiction)\n    max = min(hardcover, fiction)\n    return max\nans = solver()", "generated_prediction": "20.0", "options": ["A)10", "B)15", "C)18", "D)20", "E)30"], "answer": "D", "prediction": "D"}
{"question": "A newspaper costs $4 on Sunday and $1 the rest of the days of the week. If a hotel orders twice as many papers on Sunday as it does the rest of the days of the week and pays $210 per week for newspapers, how many newspapers does it buy on Monday?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A newspaper costs $4 on Sunday and $1 the rest of the days of the week. If a hotel orders twice as many papers on Sunday as it does the rest of the days of the week and pays $210 per week for newspapers, how many newspapers does it buy on Monday?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The cost of newspaper on Sunday\n    cost_sunday = 4\n    # 2. The cost of newspaper on other days\n    cost_others = 1\n    # 3. The number of newspaper on Sunday\n    num_sunday = 2 * num_others\n    # 4. The number of newspaper on other days\n    num_others = ?\n    # 5. The total cost of newspaper\n    total_cost = 210\n    # 6. The total number of newspaper\n    total_num = num_sunday + num_others\n    # 7. The total cost of newspaper on Sunday\n    total_cost_sunday = cost_sunday * num_sunday\n    # 8. The total cost of newspaper on other days\n    total_cost_others = cost_others * num_others\n    # 9. The total cost of newspaper on Sunday and other days\n    total_cost_all = total_cost_sunday + total_cost_others\n    # 10. The total number of newspaper on Sunday and other days\n    total_num_all = num_sunday + num_others\n    # 11. The number of newspaper on Monday\n    num_monday = num_others\n    return num_monday\nans = solver()", "generated_prediction": "None", "options": ["A)15", "B)30", "C)45", "D)60", "E)75"], "answer": "A", "prediction": "None"}
{"question": "A number of friends decided to go on a picnic and planned to spend Rs. 96 on eatables. Four of them, however, did not turn up. As a consequence, the remaining ones had to contribute Rs. 4 extra, each. The number of those who attended the picnic was", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A number of friends decided to go on a picnic and planned to spend Rs. 96 on eatables. Four of them, however, did not turn up. As a consequence, the remaining ones had to contribute Rs. 4 extra, each. The number of those who attended the picnic was\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    total_money = 96\n    extra_money = 4\n    total_people = 0\n    # Secondly, we need to write a for loop to find the answer\n    for i in range(1, total_money):\n        if (total_money - extra_money * i) % i == 0:\n            total_people = i\n            break\n    return total_people\nans = solver()", "generated_prediction": "1.0", "options": ["A)8", "B)12", "C)16", "D)24", "E)25"], "answer": "A", "prediction": "A"}
{"question": "A wire in the shape of rectangle of length 27 cm and breadth 17 cm is rebent to form a square. What will be the measure of each side?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A wire in the shape of rectangle of length 27 cm and breadth 17 cm is rebent to form a square. What will be the measure of each side?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    length = 27\n    breadth = 17\n    area = length * breadth\n    side = math.sqrt(area)\n    return side\nans = solver()", "generated_prediction": "21.42428528562855", "options": ["A)9", "B)11", "C)22", "D)25", "E)31"], "answer": "C", "prediction": "C"}
{"question": "A man divides Rs 8600 among 5 sons, 4 daughters and 2 nephews. If each daughter receives four times as much as each nephew, and each son receives five as much as each nephew. How much does each daughter receive ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A man divides Rs 8600 among 5 sons, 4 daughters and 2 nephews. If each daughter receives four times as much as each nephew, and each son receives five as much as each nephew. How much does each daughter receive ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The total amount of money\n    total_amount = 8600\n    # 2. The number of sons\n    num_sons = 5\n    # 3. The number of daughters\n    num_daughters = 4\n    # 4. The number of nephews\n    num_nephews = 2\n    # 5. The ratio of each daughter to each nephew\n    ratio_daughters_nephews = 4\n    # 6. The ratio of each son to each nephew\n    ratio_sons_nephews = 5\n    # Secondly, we need to calculate the amount of money each nephew receives\n    amount_nephews = total_amount / (num_sons * ratio_sons_nephews + num_daughters * ratio_daughters_nephews + num_nephews)\n    # Thirdly, we need to calculate the amount of money each daughter receives\n    amount_daughters = amount_nephews * ratio_daughters_nephews\n    return amount_daughters\nans = solver()", "generated_prediction": "800.0", "options": ["A)Rs 400", "B)Rs 500", "C)Rs 600", "D)Rs 700", "E)Rs 800"], "answer": "E", "prediction": "E"}
{"question": "Silu and Meenu were walking on the road.\nSilu said, \"I weigh 51 Kgs. How much do you weigh?\"\nMeenu replied that she wouldn't reveal her weight directly as she is overweight.\nBut she said, \"I weigh 29 Kgs plus half of my weight. \"How much does Meenu weigh?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Silu and Meenu were walking on the road.\nSilu said, \"I weigh 51 Kgs. How much do you weigh?\"\nMeenu replied that she wouldn't reveal her weight directly as she is overweight.\nBut she said, \"I weigh 29 Kgs plus half of my weight. \"How much does Meenu weigh?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    silu_weight = 51\n    meenu_weight = 0\n    # Secondly, we need to define the equation:\n    meenu_weight = 29 + meenu_weight/2\n    # Thirdly, we need to solve the equation:\n    for i in range(1,100):\n        meenu_weight = 29 + meenu_weight/2\n        if meenu_weight == silu_weight:\n            print(\"Meenu's weight is:\", meenu_weight)\n            break\n        else:\n            continue\nans = solver()", "generated_prediction": "None", "options": ["A)12", "B)28", "C)27", "D)58", "E)91"], "answer": "D", "prediction": "None"}
{"question": "Roy was suffering from severe headaches. He went to see his doctor and the doctor gave him 5 tablets asking him to take one tablet every 15 minutes.\nHow much time will it take Roy to consume all the 5 tablets?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Roy was suffering from severe headaches. He went to see his doctor and the doctor gave him 5 tablets asking him to take one tablet every 15 minutes.\nHow much time will it take Roy to consume all the 5 tablets?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of tablets Roy has\n    tablets = 5\n    # 2. The time interval between each tablet\n    interval = 15\n    # 3. The time Roy takes to consume all the tablets\n    time = 0\n    for i in range(tablets):\n        time += interval\n    return time\nans = solver()", "generated_prediction": "None", "options": ["A)45 Min", "B)75 Min", "C)90 Min", "D)120 Min", "E)60 Min"], "answer": "E", "prediction": "None"}
{"question": "In a bag of red and green sweets, the ratio of red sweets to green sweets is 3:4. If the bag contains 120 green sweets, how many red sweets are there?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In a bag of red and green sweets, the ratio of red sweets to green sweets is 3:4. If the bag contains 120 green sweets, how many red sweets are there?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The ratio of red sweets to green sweets is 3:4\n    ratio_red_to_green = 3\n    ratio_green_to_red = 4\n    # 2. The bag contains 120 green sweets\n    green_sweets = 120\n    # 3. The number of red sweets\n    red_sweets = 0\n    # Secondly, we need to calculate the number of red sweets\n    red_sweets = green_sweets * ratio_red_to_green / ratio_green_to_red\n    # Thirdly, we need to return the answer\n    return red_sweets\nans = solver()", "generated_prediction": "90.0", "options": ["A)90", "B)80", "C)95", "D)100", "E)85"], "answer": "A", "prediction": "A"}
{"question": "A club consists of members whose ages are in A.P. The common difference being 3 months. If the youngest member of the club is just 7 years old and the sum of the ages of all the members is 250, then number of members in the club are :", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A club consists of members whose ages are in A.P. The common difference being 3 months. If the youngest member of the club is just 7 years old and the sum of the ages of all the members is 250, then number of members in the club are :\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The youngest member of the club is just 7 years old\n    youngest_member = 7\n    # 2. The sum of the ages of all the members is 250\n    sum_of_ages = 250\n    # 3. The common difference being 3 months\n    common_difference = 3\n    # 4. The number of members in the club\n    number_of_members = 0\n    # Secondly, we need to calculate the number of members in the club\n    # 1. The age of the youngest member is 7 years old, so the age of the oldest member is 7 + (number_of_members - 1) * 3\n    age_of_oldest_member = youngest_member + (number_of_members - 1) * common_difference\n    # 2. The sum of the ages of all the members is 250, so the sum of the ages of all the members is 7 + (number_of_members - 1) * 3 * number_of_members / 2\n    sum_of_ages = youngest_member + (number_of_members - 1) * common_difference * number_of_members / 2\n    # 3. The number of members in the club is (sum_of_ages - youngest_member) * 2 / (number_of_members - 1) / common_difference\n    number_of_members = (sum_of_ages - youngest_member) * 2 / (number_of_members - 1) / common_difference\n    return number_of_members\nans = solver()", "generated_prediction": "None", "options": ["A)18", "B)20", "C)25", "D)26", "E)27"], "answer": "C", "prediction": "None"}
{"question": "M men agree to purchase a gift for Rs. D. If 3 men drop out how much more will each have to contribute towards the purchase of the gift?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: M men agree to purchase a gift for Rs. D. If 3 men drop out how much more will each have to contribute towards the purchase of the gift?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    M = int(input(\"Please input the number of men: \"))\n    D = int(input(\"Please input the price of the gift: \"))\n    # Secondly, we need to calculate the contribution of each man\n    contribution = D / M\n    print(\"The contribution of each man is: \", contribution)\n    # Thirdly, we need to calculate the contribution of each man after 3 men drop out\n    contribution_after = (D + contribution * 3) / (M - 3)\n    print(\"The contribution of each man after 3 men drop out is: \", contribution_after)\n    # Finally, we need to calculate the difference between the contribution of each man and the contribution of each man after 3 men drop out\n    difference = contribution_after - contribution\n    print(\"The difference between the contribution of each man and the contribution of each man after 3 men drop out is: \", difference)\n    return difference\nans = solver()", "generated_prediction": "None", "options": ["A)D/(M-3)", "B)MD/3", "C)M/(D-3)", "D)3D/(M2-3M)", "E)None of these"], "answer": "D", "prediction": "None"}
{"question": "At what price should the Karan mark a sewing machine that costs him Rs. 1200/- so that even after offering a 20% discount, he makes 20% profit?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: At what price should the Karan mark a sewing machine that costs him Rs. 1200/- so that even after offering a 20% discount, he makes 20% profit?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    cost_price = 1200\n    discount = 20\n    profit = 20\n    # Secondly, we need to calculate the selling price\n    selling_price = cost_price * (1 + profit / 100) / (1 - discount / 100)\n    return selling_price\nans = solver()", "generated_prediction": "1800.0", "options": ["A)1,879", "B)1,875", "C)1,876", "D)1,872", "E)1,800"], "answer": "E", "prediction": "E"}
{"question": "Train \u2018A\u2019 leaves Mumbai Central for Lucknow at 11 am, running at the speed of 40 kmph. Train \u2018B\u2019 leaves Mumbai Central for Lucknow by the same route at 2 pm on the same day, running at the speed of 72 kmph. At what time will the two trains meet each other?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Train \u2018A\u2019 leaves Mumbai Central for Lucknow at 11 am, running at the speed of 40 kmph. Train \u2018B\u2019 leaves Mumbai Central for Lucknow by the same route at 2 pm on the same day, running at the speed of 72 kmph. At what time will the two trains meet each other?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The distance between Mumbai Central and Lucknow\n    distance = 1250\n    # 2. The speed of train A\n    speed_A = 40\n    # 3. The speed of train B\n    speed_B = 72\n    # 4. The time train A leaves Mumbai Central\n    time_A = 11\n    # 5. The time train B leaves Mumbai Central\n    time_B = 14\n    # 6. The time train A and train B meet each other\n    time_meet = 0\n    # Secondly, we need to calculate the time train A and train B meet each other\n    time_meet = (distance / (speed_A + speed_B)) + time_A\n    # Thirdly, we need to return the answer\n    return time_meet\nans = solver()", "generated_prediction": "22.160714285714285", "options": ["A)12 am on the next day", "B)5 am on the next day", "C)5 pm on the next day", "D)2 pm on the next day", "E)None of these"], "answer": "A", "prediction": "D"}
{"question": "Mark told John \"If you give me half your money I will have Rs.75. John said, \"if you give me one third of your money, I will have Rs.75/-. How much money did John have ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Mark told John \"If you give me half your money I will have Rs.75. John said, \"if you give me one third of your money, I will have Rs.75/-. How much money did John have ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. Mark's money\n    # 2. John's money\n    # 3. Mark's money after giving half of it to John\n    # 4. John's money after giving one third of it to Mark\n    mark_money = 0\n    john_money = 0\n    mark_money_after = 0\n    john_money_after = 0\n    # Secondly, we need to find the value of the above variables\n    for mark_money in range(1, 100):\n        for john_money in range(1, 100):\n            mark_money_after = mark_money - mark_money / 2\n            john_money_after = john_money - john_money / 3\n            if mark_money_after == 75 and john_money_after == 75:\n                print(\"Mark's money is:\", mark_money)\n                print(\"John's money is:\", john_money)\n                print(\"Mark's money after giving half of it to John is:\", mark_money_after)\n                print(\"John's money after giving one third of it to Mark is:\", john_money_after)\n                return\n    print(\"No answer\")\nans = solver()", "generated_prediction": "None", "options": ["A)22", "B)60", "C)28", "D)26", "E)18"], "answer": "B", "prediction": "None"}
{"question": "The number of water lilies on a certain lake doubles every two days. If there is exactly one water lily on the lake, it takes 60 days for the lake to be fully covered with water lilies. In how many days will the lake be fully covered with lilies, if initially there were 64 water lilies on it?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The number of water lilies on a certain lake doubles every two days. If there is exactly one water lily on the lake, it takes 60 days for the lake to be fully covered with water lilies. In how many days will the lake be fully covered with lilies, if initially there were 64 water lilies on it?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of water lilies on a certain lake\n    # 2. The number of days for the lake to be fully covered with water lilies\n    # 3. The number of days for the lake to be fully covered with water lilies, if initially there were 64 water lilies on it\n    water_lilies = 1\n    days = 0\n    days_64 = 0\n    # Secondly, we need to use for loop to calculate the number of days for the lake to be fully covered with water lilies, if initially there were 64 water lilies on it\n    for i in range(1, 64):\n        water_lilies = water_lilies * 2\n        days = days + 2\n        if water_lilies == 64:\n            days_64 = days\n    return days_64\nans = solver()", "generated_prediction": "12.0", "options": ["A)15", "B)28", "C)30", "D)53", "E)59"], "answer": "D", "prediction": "A"}
{"question": "x men working x hours per day can do x units of a work in x days. How much work can be completed by y men working y hours per day in y days?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: x men working x hours per day can do x units of a work in x days. How much work can be completed by y men working y hours per day in y days?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x_men = 10\n    x_hours = 8\n    x_units = 100\n    x_days = 5\n    y_men = 20\n    y_hours = 8\n    y_days = 5\n    # Secondly, we need to calculate the work done by x men in x days\n    x_work = x_men * x_hours * x_units * x_days\n    print(\"The work done by x men in x days is:\", x_work)\n    # Thirdly, we need to calculate the work done by y men in y days\n    y_work = y_men * y_hours * x_units * y_days\n    print(\"The work done by y men in y days is:\", y_work)\n    # Finally, we need to calculate the work done by y men in y days\n    answer = y_work / x_work\n    print(\"The work done by y men in y days is:\", answer)\n    return answer\nans = solver()", "generated_prediction": "2.0", "options": ["A)x2/y2 units", "B)y3/x2 units", "C)x3/y2 units", "D)y2/x2 units", "E)None of these"], "answer": "B", "prediction": "A"}
{"question": "ABCDE is a regular pentagon with F at its center. How many different quadrilaterals can be formed by joining 4 of the points A,B,C,D,E and F?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: ABCDE is a regular pentagon with F at its center. How many different quadrilaterals can be formed by joining 4 of the points A,B,C,D,E and F?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The length of the side of the pentagon\n    side_length = 1\n    # 2. The coordinates of the points A, B, C, D, E and F\n    A = (0, 0)\n    B = (side_length, 0)\n    C = (side_length * math.cos(math.pi / 5), side_length * math.sin(math.pi / 5))\n    D = (side_length * math.cos(math.pi / 5), -side_length * math.sin(math.pi / 5))\n    E = (-side_length, 0)\n    F = (0, 0)\n    # 3. The coordinates of the points A, B, C, D, E and F in a list\n    points = [A, B, C, D, E, F]\n    # 4. The number of different quadrilaterals\n    num_quadrilaterals = 0\n    # 5. The list of the different quadrilaterals\n    quadrilaterals = []\n    # 6. The list of the different quadrilaterals in a list\n    quadrilaterals_list = []\n    # 7. The list of the different quadrilaterals in a list\n    quadrilaterals_list_2 = []\n    # 8. The list of the different quadrilaterals in a list\n    quadrilaterals_list_3 = []\n    # 9. The list of the different quadrilaterals in a list\n    quadrilaterals_list_4 = []\n    # 10. The list of the different quadrilaterals in a list\n    quadrilaterals_list_5 = []\n    # 11. The list of the different quadrilaterals in a list\n    quadrilaterals_list_6 = []\n    # 12. The list of the different quadrilaterals in a list\n    quadrilaterals_list_7 = []\n    # 13. The list of the different quadrilaterals in a list\n    quadrilaterals_list_8 = []\n    # 14. The list of the different quadrilaterals in\nans = solver()", "generated_prediction": "None", "options": ["A)12", "B)10", "C)5", "D)15", "E)20"], "answer": "D", "prediction": "None"}
{"question": "Points A, B, C, D lie in this order on the circumference of a circle. Minor arc AC is 160\u00b0, and minor arc BD is 150\u00b0. If B bisects minor arc AC, then what is the measure of minor arc AD?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Points A, B, C, D lie in this order on the circumference of a circle. Minor arc AC is 160\u00b0, and minor arc BD is 150\u00b0. If B bisects minor arc AC, then what is the measure of minor arc AD?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. angle_AC = 160\n    angle_AC = 160\n    # 2. angle_BD = 150\n    angle_BD = 150\n    # 3. angle_AB = angle_AC / 2\n    angle_AB = angle_AC / 2\n    # 4. angle_BC = angle_BD - angle_AB\n    angle_BC = angle_BD - angle_AB\n    # 5. angle_AD = 360 - angle_AC - angle_BC\n    angle_AD = 360 - angle_AC - angle_BC\n    return angle_AD\nans = solver()", "generated_prediction": "130.0", "options": ["A)80\u00b0", "B)130\u00b0", "C)140\u00b0", "D)160\u00b0", "E)220\u00b0"], "answer": "B", "prediction": "B"}
{"question": "If 75 percent of the employees of a certain company take a winter vacation, 40 percent take a winter and a summer vacation, and 20 percent take neither a winter nor a summer vacation, what Q percent of the employees take a summer vacation but not a winter vacation?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If 75 percent of the employees of a certain company take a winter vacation, 40 percent take a winter and a summer vacation, and 20 percent take neither a winter nor a summer vacation, what Q percent of the employees take a summer vacation but not a winter vacation?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    winter_vacation = 0.75\n    winter_and_summer_vacation = 0.4\n    neither_winter_nor_summer_vacation = 0.2\n    summer_vacation = 0\n    # Secondly, we need to calculate the summer_vacation\n    summer_vacation = winter_vacation - winter_and_summer_vacation + neither_winter_nor_summer_vacation\n    # Thirdly, we need to calculate the Q\n    Q = summer_vacation / (1 - neither_winter_nor_summer_vacation)\n    return Q\nans = solver()", "generated_prediction": "0.6875", "options": ["A)5%", "B)15%", "C)25%", "D)35%", "E)45%"], "answer": "A", "prediction": "B"}
{"question": "The cross-section of a canal is shaped like a trapezium. If the canal is 10 m wide at the top and 6 m wide at the bottom and the area of cross-section is 640 square meters, the depth of cannel is?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The cross-section of a canal is shaped like a trapezium. If the canal is 10 m wide at the top and 6 m wide at the bottom and the area of cross-section is 640 square meters, the depth of cannel is?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    width_top = 10\n    width_bottom = 6\n    area = 640\n    depth = 0\n    # Secondly, we need to calculate the depth of the canal\n    depth = area / (width_top + width_bottom)\n    return depth\nans = solver()", "generated_prediction": "40.0", "options": ["A)26", "B)28", "C)21", "D)80", "E)23"], "answer": "D", "prediction": "A"}
{"question": "During one season, a tennis team won 20 matches and lost 30% of their matches. What was the number of matches that the team lost?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: During one season, a tennis team won 20 matches and lost 30% of their matches. What was the number of matches that the team lost?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of matches that the team won\n    win = 20\n    # 2. The percentage of matches that the team lost\n    lost_percentage = 30\n    # 3. The number of matches that the team lost\n    lost = 0\n    # 4. The total number of matches that the team played\n    total = 0\n    # Secondly, we need to calculate the total number of matches that the team played\n    total = win + lost\n    # Thirdly, we need to calculate the number of matches that the team lost\n    lost = total * lost_percentage / 100\n    # Finally, we need to return the answer\n    return lost\nans = solver()", "generated_prediction": "6.0", "options": ["A)70", "B)30", "C)3", "D)7", "E)5"], "answer": "C", "prediction": "D"}
{"question": "A point on the edge of a fan blade that is rotating in a plane 10 centimeters from the center of the fan. What is the distance traveled, in centimeters, by this point after 30 seconds when the fan runs at the rate of 300 revolutions per minutes?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A point on the edge of a fan blade that is rotating in a plane 10 centimeters from the center of the fan. What is the distance traveled, in centimeters, by this point after 30 seconds when the fan runs at the rate of 300 revolutions per minutes?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    radius = 10\n    time = 30\n    rpm = 300\n    # Secondly, we need to calculate the distance traveled by this point\n    distance = 2 * math.pi * radius * rpm * time / 60\n    return distance\nans = solver()", "generated_prediction": "9424.77796076938", "options": ["A)750pi", "B)1500pi", "C)1875pi", "D)3000pi", "E)7500pi"], "answer": "D", "prediction": "D"}
{"question": "If n is such that 36 \u2264 n \u2264 72, then x = (n2 + 2\u221an(n + 4) + 16) / (n+ 4\u221an+ 4) satisfies", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If n is such that 36 \u2264 n \u2264 72, then x = (n2 + 2\u221an(n + 4) + 16) / (n+ 4\u221an+ 4) satisfies\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    n = 36\n    x = 0\n    while n <= 72:\n        x = (n**2 + 2*math.sqrt(n)*(n+4) + 16) / (n+4*math.sqrt(n)+4)\n        print(x)\n        n += 1\n    return x\nans = solver()", "generated_prediction": "59.02943725152286", "options": ["A)20 < x < 54", "B)23 < x < 58", "C)25 < x < 64", "D)28 < x < 60", "E)None of these"], "answer": "D", "prediction": "B"}
{"question": "At its maximum speed, a space shuttle can travel 700m high in 40 seconds. It will also take 5 seconds to pass a point. What then is the length of the space shuttle?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: At its maximum speed, a space shuttle can travel 700m high in 40 seconds. It will also take 5 seconds to pass a point. What then is the length of the space shuttle?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The maximum speed of the space shuttle\n    v = 700 / 40\n    # 2. The time to pass a point\n    t = 5\n    # 3. The length of the space shuttle\n    l = v * t\n    return l\nans = solver()", "generated_prediction": "87.5", "options": ["A)50 m", "B)75 m", "C)100 m", "D)125 m", "E)150 m"], "answer": "C", "prediction": "B"}
{"question": "A starts a business with Rs.40,000. After 2 months, B joined him with Rs.60,000. C joined them after some more time with Rs.120,000. At the end of the year, out of a total profit of Rs.375,000, C gets Rs.150,000 as his share. How many months after B joined the business, did C join?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A starts a business with Rs.40,000. After 2 months, B joined him with Rs.60,000. C joined them after some more time with Rs.120,000. At the end of the year, out of a total profit of Rs.375,000, C gets Rs.150,000 as his share. How many months after B joined the business, did C join?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    A = 40000\n    B = 60000\n    C = 120000\n    total_profit = 375000\n    C_share = 150000\n    # Secondly, we need to calculate the total months of the business\n    total_months = (C_share / C) * 12\n    print(\"The total months of the business is:\", total_months)\n    # Thirdly, we need to calculate the months after B joined the business\n    months_after_B_joined = total_months - 2\n    print(\"The months after B joined the business is:\", months_after_B_joined)\n    return months_after_B_joined\nans = solver()", "generated_prediction": "13.0", "options": ["A)2 months", "B)4 months", "C)23 months", "D)24 months", "E)84 months"], "answer": "B", "prediction": "B"}
{"question": "A paper is in a square form whose one side is 20 cm. Two semi circles are drawn on its opposites as diameters. If these semi circles are cut down what is the area of the remaining paper?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A paper is in a square form whose one side is 20 cm. Two semi circles are drawn on its opposites as diameters. If these semi circles are cut down what is the area of the remaining paper?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The length of the paper\n    length = 20\n    # 2. The radius of the semi circle\n    radius = length / 2\n    # 3. The area of the paper\n    area = length * length\n    # 4. The area of the semi circle\n    area_semi_circle = math.pi * radius * radius / 2\n    # 5. The area of the remaining paper\n    area_remaining = area - area_semi_circle * 2\n    return area_remaining\nans = solver()", "generated_prediction": "85.84073464102067", "options": ["A)8.75", "B)8.79", "C)8.75", "D)8.71", "E)8.72"], "answer": "C", "prediction": "B"}
{"question": "An athlete runs M miles in 4 hours, then rides a bike N miles in the same number of hours. Which of the following represents the average speed, in miles per hour, for these two activities combined?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: An athlete runs M miles in 4 hours, then rides a bike N miles in the same number of hours. Which of the following represents the average speed, in miles per hour, for these two activities combined?\n# Options: M + N / 8, 2M + N / 8, M + N / 4, M + 3N / 8, M + N / 5\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    M = 0\n    N = 0\n    # Secondly, we need to calculate the average speed, in miles per hour, for these two activities combined\n    average_speed = (M + N) / 8\n    return average_speed\nans = solver()", "generated_prediction": "None", "options": ["A)M + N / 8", "B)2M + N / 8", "C)M + N / 4", "D)M + 3N / 8", "E)M + N / 5"], "answer": "A", "prediction": "None"}
{"question": "8 man work for 6 days to complete a work. How many men are required to complete same work in 1/2 day.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: 8 man work for 6 days to complete a work. How many men are required to complete same work in 1/2 day.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of men: n\n    # 2. The number of days: d\n    n = 8\n    d = 6\n    # Then, we need to calculate the number of men required to complete the work in 1/2 day\n    # We can use the following formula:\n    # n * d = n' * (1/2)\n    n_prime = n * d * 2\n    return n_prime\nans = solver()", "generated_prediction": "96.0", "options": ["A)93 men", "B)94 men", "C)95 men", "D)96 men", "E)97 men"], "answer": "D", "prediction": "D"}
{"question": "64 boys and 40 girls form a group for social work. During their membership drive, the same number of boys and girls joined the group. How many members does the group have now, if the ratio of boys to girls is 4:3?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: 64 boys and 40 girls form a group for social work. During their membership drive, the same number of boys and girls joined the group. How many members does the group have now, if the ratio of boys to girls is 4:3?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    boys = 64\n    girls = 40\n    ratio_boys_to_girls = 4/3\n    ratio_girls_to_boys = 3/4\n    # Secondly, we need to find the number of boys and girls who joined the group\n    boys_joined = boys * ratio_girls_to_boys\n    girls_joined = girls * ratio_boys_to_girls\n    # Thirdly, we need to find the total number of boys and girls in the group\n    boys_total = boys + boys_joined\n    girls_total = girls + girls_joined\n    # Finally, we need to find the total number of members in the group\n    total_members = boys_total + girls_total\n    return total_members\nans = solver()", "generated_prediction": "205.33333333333331", "options": ["A)277", "B)288", "C)200", "D)277", "E)168"], "answer": "E", "prediction": "B"}
{"question": "A cyclist travels at 12 miles per hour. How many minutes will it take to travel 48 miles?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A cyclist travels at 12 miles per hour. How many minutes will it take to travel 48 miles?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    mph = 12\n    miles = 48\n    # Secondly, we need to calculate the time in minutes\n    time = miles / mph * 60\n    return time\nans = solver()", "generated_prediction": "240.0", "options": ["A)1", "B)240", "C)30", "D)60", "E)120"], "answer": "B", "prediction": "B"}
{"question": "Kevin drove from A to B at a constant speed of 70 mph. Once he reached B, he turned right around with pause, and returned to A at a constant speed of 90 mph. Exactly 3 hours before the end of his trip, he was still approaching B, only 70 miles away from it. What is the distance between A and B?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Kevin drove from A to B at a constant speed of 70 mph. Once he reached B, he turned right around with pause, and returned to A at a constant speed of 90 mph. Exactly 3 hours before the end of his trip, he was still approaching B, only 70 miles away from it. What is the distance between A and B?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The distance between A and B\n    distance = 0\n    # 2. The time Kevin spent on the road\n    time = 0\n    # 3. The speed Kevin drove from A to B\n    speed_a_to_b = 70\n    # 4. The speed Kevin drove from B to A\n    speed_b_to_a = 90\n    # 5. The time Kevin spent on the road from A to B\n    time_a_to_b = 0\n    # 6. The time Kevin spent on the road from B to A\n    time_b_to_a = 0\n    # 7. The time Kevin spent on the road from A to B\n    distance_a_to_b = 0\n    # 8. The time Kevin spent on the road from B to A\n    distance_b_to_a = 0\n    # 9. The time Kevin spent on the road from A to B\n    distance_a_to_b = 0\n    # 10. The time Kevin spent on the road from B to A\n    distance_b_to_a = 0\n    # 11. The time Kevin spent on the road from A to B\n    distance_a_to_b = 0\n    # 12. The time Kevin spent on the road from B to A\n    distance_b_to_a = 0\n    # 13. The time Kevin spent on the road from A to B\n    distance_a_to_b = 0\n    # 14. The time Kevin spent on the road from B to A\n    distance_b_to_a = 0\n    # 15. The time Kevin spent on the road from A to B\n    distance_a_to_b = 0\n    # 16. The time Kevin spent on the road from B to A\n    distance_b_to_a = 0\n    # 17. The time Kevin spent on the road from A to B\n    distance_a_to_b = 0\n    # 18. The time Kevin spent on the road from B to A\n    distance_b_to_a = 0\n    # 19. The time Kevin spent on the road from A to B\n    distance_a\nans = solver()", "generated_prediction": "None", "options": ["A)180", "B)90", "C)270", "D)360", "E)None of the above"], "answer": "A", "prediction": "None"}
{"question": "30 is subtracted from a number, it is reduced to its one third. What is the value of 50% of that number?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: 30 is subtracted from a number, it is reduced to its one third. What is the value of 50% of that number?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x = 0\n    y = 0\n    z = 0\n    # Secondly, we need to write the equation:\n    x = y - 30\n    y = x / 3\n    z = y / 2\n    # Thirdly, we need to return the answer:\n    return z\nans = solver()", "generated_prediction": "-5.0", "options": ["A)22.5", "B)84", "C)21", "D)24", "E)25"], "answer": "A", "prediction": "A"}
{"question": "If a man rows at the rate of 4 kmph in still water and his rate against the current is 2 kmph, then the man's rate along the current is:", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If a man rows at the rate of 4 kmph in still water and his rate against the current is 2 kmph, then the man's rate along the current is:\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    rate_still_water = 4\n    rate_against_current = 2\n    rate_along_current = 0\n    # Secondly, we need to calculate the rate_along_current\n    rate_along_current = rate_still_water + rate_against_current\n    return rate_along_current\nans = solver()", "generated_prediction": "6.0", "options": ["A)15 kmph", "B)6 kmph", "C)12 kmph", "D)14 kmph", "E)6 kmph"], "answer": "E", "prediction": "E"}
{"question": "The sum of the digits of a three digit number is 17, and the sum of the squares of its digits is 109. If we subtract 495 from the number, we shall get a number consisting of the same digits written in the reverse order. Find the number.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The sum of the digits of a three digit number is 17, and the sum of the squares of its digits is 109. If we subtract 495 from the number, we shall get a number consisting of the same digits written in the reverse order. Find the number.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # a, b, c: the three digits of the number\n    a = 0\n    b = 0\n    c = 0\n    # Secondly, we need to define the following equation:\n    # a + b + c = 17\n    # a^2 + b^2 + c^2 = 109\n    # cba - abc = 495\n    # Thirdly, we need to solve the equation by using for loop\n    for a in range(0, 10):\n        for b in range(0, 10):\n            for c in range(0, 10):\n                if a + b + c == 17 and a**2 + b**2 + c**2 == 109 and c*100 + b*10 + a - a*100 - b*10 - c == 495:\n                    return a*100 + b*10 + c\n    return -1\nans = solver()", "generated_prediction": "368.0", "options": ["A)368", "B)377", "C)288", "D)997", "E)112"], "answer": "A", "prediction": "A"}
{"question": "X and Y are two alloys which were made by mixing zinc and copper in the ratio 6:9 and 7:11, respectively. If 40 grams of alloy X and 60 grams of alloy Y are melted and mixed to form alloy Z, what is the ratio of zinc and copper in the alloy Z ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: X and Y are two alloys which were made by mixing zinc and copper in the ratio 6:9 and 7:11, respectively. If 40 grams of alloy X and 60 grams of alloy Y are melted and mixed to form alloy Z, what is the ratio of zinc and copper in the alloy Z ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # X_zinc, X_copper, Y_zinc, Y_copper, Z_zinc, Z_copper\n    X_zinc = 6\n    X_copper = 9\n    Y_zinc = 7\n    Y_copper = 11\n    Z_zinc = 0\n    Z_copper = 0\n    # Secondly, we need to calculate the ratio of zinc and copper in the alloy Z\n    Z_zinc = X_zinc * 40 + Y_zinc * 60\n    Z_copper = X_copper * 40 + Y_copper * 60\n    Z_ratio = Z_zinc / Z_copper\n    print(Z_ratio)\n    return Z_ratio\nans = solver()", "generated_prediction": "0.6470588235294118", "options": ["A)69:91", "B)59:91", "C)59:90", "D)59:91", "E)69:101"], "answer": "B", "prediction": "C"}
{"question": "The nefarious bandit Hoopsmot decides to go in with his criminal partner Smolapon to purchase a number of senators. Hoopsmot contributes $16,000 to their bribery pool, and Smolapon contributes just $4,000. Their total allows them to influence 30 senators. How many senators of these can be considered Hoopsmot's?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The nefarious bandit Hoopsmot decides to go in with his criminal partner Smolapon to purchase a number of senators. Hoopsmot contributes $16,000 to their bribery pool, and Smolapon contributes just $4,000. Their total allows them to influence 30 senators. How many senators of these can be considered Hoopsmot's?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    Hoopsmot = 16000\n    Smolapon = 4000\n    senators = 30\n    # Secondly, we need to calculate the number of senators that can be considered Hoopsmot's\n    Hoopsmot_senators = Hoopsmot / (Hoopsmot + Smolapon) * senators\n    return Hoopsmot_senators\nans = solver()", "generated_prediction": "24.0", "options": ["A)18", "B)20", "C)22", "D)24", "E)26"], "answer": "D", "prediction": "D"}
{"question": "The difference between the squares of two numbers is 256000 and the sum of the numbers is 1000. The numbers are", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The difference between the squares of two numbers is 256000 and the sum of the numbers is 1000. The numbers are\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The difference between the squares of two numbers is 256000\n    difference = 256000\n    # 2. The sum of the numbers is 1000\n    sum = 1000\n    # 3. The numbers are\n    number1 = 0\n    number2 = 0\n    # Secondly, we need to find the numbers\n    for i in range(1, sum):\n        for j in range(1, sum):\n            if (i*i - j*j) == difference and (i + j) == sum:\n                number1 = i\n                number2 = j\n    return number1, number2\nans = solver()", "generated_prediction": "(628, 372)", "options": ["A)600, 400", "B)628, 372", "C)640, 360", "D)None of these", "E)Cannot be determined"], "answer": "B", "prediction": "B"}
{"question": "An astronaut weighing 211 pounds on Earth would weigh 182 pounds on Venus. The weight of the astronaut on Venus would be approximately what percent of the astronaut\u2019s weight on Earth?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: An astronaut weighing 211 pounds on Earth would weigh 182 pounds on Venus. The weight of the astronaut on Venus would be approximately what percent of the astronaut\u2019s weight on Earth?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    weight_on_earth = 211\n    weight_on_venus = 182\n    percent = 0\n    # Secondly, we need to calculate the percent\n    percent = weight_on_venus / weight_on_earth * 100\n    return percent\nans = solver()", "generated_prediction": "86.25592417061611", "options": ["A)50%", "B)60%", "C)70%", "D)86%", "E)90%"], "answer": "D", "prediction": "D"}
{"question": "A man walks at 5 kmph for 6 hrs and at 4 kmph for 12 hrs. His average speed is", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A man walks at 5 kmph for 6 hrs and at 4 kmph for 12 hrs. His average speed is\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. speed1 = 5 kmph\n    speed1 = 5\n    # 2. speed2 = 4 kmph\n    speed2 = 4\n    # 3. time1 = 6 hrs\n    time1 = 6\n    # 4. time2 = 12 hrs\n    time2 = 12\n    # 5. distance1 = speed1 * time1\n    distance1 = speed1 * time1\n    # 6. distance2 = speed2 * time2\n    distance2 = speed2 * time2\n    # 7. total_distance = distance1 + distance2\n    total_distance = distance1 + distance2\n    # 8. total_time = time1 + time2\n    total_time = time1 + time2\n    # 9. average_speed = total_distance / total_time\n    average_speed = total_distance / total_time\n    return average_speed\nans = solver()", "generated_prediction": "4.333333333333333", "options": ["A)4 1/3 km/h", "B)7 2/3 km/h", "C)9 \u00bd km/h", "D)8 km/h", "E)81 km/h"], "answer": "A", "prediction": "A"}
{"question": "[(272 - 32) (124 + 176)] / (17 x 15 - 15) = ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: [(272 - 32) (124 + 176)] / (17 x 15 - 15) = ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 272\n    b = 32\n    c = 124\n    d = 176\n    e = 17\n    f = 15\n    g = 15\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    o = 0\n    p = 0\n    q = 0\n    r = 0\n    s = 0\n    t = 0\n    u = 0\n    v = 0\n    w = 0\n    x = 0\n    y = 0\n    z = 0\n    aa = 0\n    ab = 0\n    ac = 0\n    ad = 0\n    ae = 0\n    af = 0\n    ag = 0\n    ah = 0\n    ai = 0\n    aj = 0\n    ak = 0\n    al = 0\n    am = 0\n    an = 0\n    ao = 0\n    ap = 0\n    aq = 0\n    ar = 0\n    as_ = 0\n    at = 0\n    au = 0\n    av = 0\n    aw = 0\n    ax = 0\n    ay = 0\n    az = 0\n    ba = 0\n    bb = 0\n    bc = 0\n    bd = 0\n    be = 0\n    bf = 0\n    bg = 0\n    bh = 0\n    bi = 0\n    bj = 0\n    bk = 0\n    bl = 0\n    bm = 0\n    bn = 0\n    bo = 0\n    bp = 0\n    bq = 0\n    br = 0\n    bs = 0\n    bt = 0\n    bu = 0\n    bv = 0\n    bw = 0\n    bx = 0\n    by = 0\n    bz = 0\n    ca = 0\n    cb = 0\n    cc = 0\n    cd = 0\n    ce = 0\n    cf = 0\n    cg = 0\n    ch = 0\n    ci = 0\n    cj = 0\n    ck = 0\n    cl = 0\nans = solver()", "generated_prediction": "None", "options": ["A)0", "B)2.25", "C)300", "D)400", "E)None of these"], "answer": "C", "prediction": "None"}
{"question": "Everyone in the family earns money each month. If the total income of a family per month is $9000 and the median income is $3000, how many members are there in the family?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Everyone in the family earns money each month. If the total income of a family per month is $9000 and the median income is $3000, how many members are there in the family?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    total_income = 9000\n    median_income = 3000\n    # Secondly, we need to find the number of members in the family\n    num_members = 0\n    for i in range(1, total_income):\n        if i * median_income == total_income:\n            num_members = i\n            break\n    return num_members\nans = solver()", "generated_prediction": "3.0", "options": ["A)2", "B)3", "C)4", "D)5", "E)6"], "answer": "B", "prediction": "B"}
{"question": "The bus fare of one adult is Rs. 140 from Ranchi to Patna and bus fare of a child is half the fare of one adult between the same places. What is the total bus fare of 4 adults and 3 children between same places?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The bus fare of one adult is Rs. 140 from Ranchi to Patna and bus fare of a child is half the fare of one adult between the same places. What is the total bus fare of 4 adults and 3 children between same places?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    adult_fare = 140\n    child_fare = adult_fare / 2\n    adult_num = 4\n    child_num = 3\n    total_fare = adult_fare * adult_num + child_fare * child_num\n    return total_fare\nans = solver()", "generated_prediction": "770.0", "options": ["A)Rs. 666", "B)Rs. 670", "C)Rs. 700", "D)Rs. 570", "E)Rs. 770"], "answer": "E", "prediction": "E"}
{"question": "An organization decided to raise Rs. 6 lakh by collecting equal contribution from each of its employees. If each of them had contributed Rs. 60 extra, the contribution would have been Rs. 6.24 lakh. How many employees are there in that organization?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: An organization decided to raise Rs. 6 lakh by collecting equal contribution from each of its employees. If each of them had contributed Rs. 60 extra, the contribution would have been Rs. 6.24 lakh. How many employees are there in that organization?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The total amount of money that the organization wants to raise\n    total_amount = 6000000\n    # 2. The extra amount of money that each employee contributes\n    extra_amount = 60\n    # 3. The total amount of money that the organization wants to raise if each employee contributes Rs. 60 extra\n    total_amount_with_extra = 6240000\n    # 4. The number of employees in the organization\n    num_employees = 0\n    # 5. The amount of money that each employee contributes\n    amount_per_employee = 0\n    # 6. The amount of money that each employee contributes if he/she contributes Rs. 60 extra\n    amount_per_employee_with_extra = 0\n    # 7. The difference between the amount of money that each employee contributes and the amount of money that each employee contributes if he/she contributes Rs. 60 extra\n    difference = 0\n    # 8. The difference between the total amount of money that the organization wants to raise and the total amount of money that the organization wants to raise if each employee contributes Rs. 60 extra\n    difference_total = 0\n    # 9. The difference between the amount of money that each employee contributes and the amount of money that each employee contributes if he/she contributes Rs. 60 extra, divided by the difference between the total amount of money that the organization wants to raise and the total amount of money that the organization wants to raise if each employee contributes Rs. 60 extra\n    difference_ratio = 0\n    # 10. The number of employees in the organization, calculated by the difference between the amount of money that each employee contributes and the amount of money that each employee contributes if he/she contributes Rs. 60 extra, divided by the difference between the total amount of money that the organization wants to raise and the total amount of money that the organization wants to raise if each employee contributes Rs. 60 extra\n    num_employees_calculated = 0\n    # 11. The difference between the number of employees in the organization and the number of employees in the organization, calculated by the difference between the amount of money that each employee contributes and the amount of money that each employee contributes if he/she contributes Rs. 60 extra, divided by the difference between the total\nans = solver()", "generated_prediction": "None", "options": ["A)300", "B)200", "C)400", "D)100", "E)500"], "answer": "C", "prediction": "None"}
{"question": "If there are 5,000 voters out of which 20% are not eligible to vote and there are two candidates contesting. The winning candidate won by 15% of the votes. What is the total number of votes he got ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If there are 5,000 voters out of which 20% are not eligible to vote and there are two candidates contesting. The winning candidate won by 15% of the votes. What is the total number of votes he got ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. Total number of voters\n    total_voters = 5000\n    # 2. Percentage of voters who are not eligible to vote\n    percentage_not_eligible = 20\n    # 3. Percentage of votes won by the winning candidate\n    percentage_won = 15\n    # 4. Total number of votes won by the winning candidate\n    total_votes_won = 0\n    # 5. Total number of votes casted\n    total_votes_casted = 0\n    # 6. Total number of eligible voters\n    total_eligible_voters = 0\n    # 7. Total number of not eligible voters\n    total_not_eligible_voters = 0\n    # 8. Total number of votes casted by eligible voters\n    total_votes_casted_by_eligible_voters = 0\n    # 9. Total number of votes casted by not eligible voters\n    total_votes_casted_by_not_eligible_voters = 0\n    # 10. Total number of votes casted by the winning candidate\n    total_votes_casted_by_winning_candidate = 0\n    # 11. Total number of votes casted by the losing candidate\n    total_votes_casted_by_losing_candidate = 0\n    # 12. Total number of votes casted by the winning candidate\n    total_votes_casted_by_winning_candidate = 0\n    # 13. Total number of votes casted by the losing candidate\n    total_votes_casted_by_losing_candidate = 0\n    # 14. Total number of votes casted by the winning candidate\n    total_votes_casted_by_winning_candidate = 0\n    # 15. Total number of votes casted by the losing candidate\n    total_votes_casted_by_losing_candidate = 0\n    # 16. Total number of votes casted by the winning candidate\n    total_votes_casted_by_winning_candidate = 0\n    # 17. Total number of votes casted by the losing candidate\n    total_votes_casted_by_losing_candidate = 0\n    # 18. Total number of\nans = solver()", "generated_prediction": "None", "options": ["A)3267", "B)2678", "C)2797", "D)2300", "E)2781"], "answer": "D", "prediction": "None"}
{"question": "For bringing each copper coin from the bottom of a river, a coin-diver gets 20 cents, and for each brass coin she gets 25 cents. If after one dive, she got $3.40. What is the minimum number of copper coins that she brought?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: For bringing each copper coin from the bottom of a river, a coin-diver gets 20 cents, and for each brass coin she gets 25 cents. If after one dive, she got $3.40. What is the minimum number of copper coins that she brought?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of copper coins\n    copper_coins = 0\n    # 2. The number of brass coins\n    brass_coins = 0\n    # 3. The total money that the coin-diver got\n    total_money = 0\n    # 4. The minimum number of copper coins that she brought\n    min_copper_coins = 0\n    # Secondly, we need to write a for loop to calculate the minimum number of copper coins that she brought\n    for copper_coins in range(0, 100):\n        for brass_coins in range(0, 100):\n            total_money = copper_coins * 0.2 + brass_coins * 0.25\n            if total_money == 3.4:\n                min_copper_coins = copper_coins\n                break\n    return min_copper_coins\nans = solver()", "generated_prediction": "2.0", "options": ["A)4", "B)3", "C)2", "D)1", "E)0"], "answer": "C", "prediction": "C"}
{"question": "Ram and Krishna start from A and B, respectively, at the same time and travel towards each other at constant speeds of 20m/s and 40m/s, respectively, along the same route. Ram meets Krishna at point C on the road after 10 seconds. Find the total distance between A to B.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Ram and Krishna start from A and B, respectively, at the same time and travel towards each other at constant speeds of 20m/s and 40m/s, respectively, along the same route. Ram meets Krishna at point C on the road after 10 seconds. Find the total distance between A to B.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The distance between A and B\n    distance_AB = 0\n    # 2. The distance between A and C\n    distance_AC = 0\n    # 3. The distance between B and C\n    distance_BC = 0\n    # 4. The time that Ram and Krishna meet\n    time = 10\n    # 5. The speed of Ram\n    speed_Ram = 20\n    # 6. The speed of Krishna\n    speed_Krishna = 40\n    # Secondly, we need to calculate the distance between A and C\n    distance_AC = speed_Ram * time\n    # Thirdly, we need to calculate the distance between B and C\n    distance_BC = speed_Krishna * time\n    # Finally, we need to calculate the distance between A and B\n    distance_AB = distance_AC + distance_BC\n    return distance_AB\nans = solver()", "generated_prediction": "600.0", "options": ["A)700 meters", "B)1000 meters", "C)700 kilometers", "D)555 meters", "E)600 meters"], "answer": "E", "prediction": "E"}
{"question": "Car \u2018X\u2019 covers a distance of 320 kms in 8 hours and car \u2018Y\u2019 covers a distance of 415 kms in 5 hrs. What is the difference in the speed of the two cars?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Car \u2018X\u2019 covers a distance of 320 kms in 8 hours and car \u2018Y\u2019 covers a distance of 415 kms in 5 hrs. What is the difference in the speed of the two cars?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x_distance = 320\n    y_distance = 415\n    x_time = 8\n    y_time = 5\n    x_speed = x_distance / x_time\n    y_speed = y_distance / y_time\n    speed_difference = x_speed - y_speed\n    return speed_difference\nans = solver()", "generated_prediction": "-43.0", "options": ["A)42kms/hr", "B)41km/hr", "C)43kms/hr", "D)45kms/hr", "E)None of these"], "answer": "C", "prediction": "C"}
{"question": "Winson runs from his home to his school at an average speed of 10 miles/hr, and then walks home along the same route at an average speed of 5 miles/hr. If the whole journey took one hour, how many miles is his home from his school?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Winson runs from his home to his school at an average speed of 10 miles/hr, and then walks home along the same route at an average speed of 5 miles/hr. If the whole journey took one hour, how many miles is his home from his school?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The average speed of Winson running from his home to his school\n    run_speed = 10\n    # 2. The average speed of Winson walking from his school to his home\n    walk_speed = 5\n    # 3. The whole journey took one hour\n    time = 1\n    # 4. The distance from Winson's home to his school\n    distance = 0\n    # Secondly, we need to calculate the distance from Winson's home to his school\n    distance = run_speed * time\n    print(\"The distance from Winson's home to his school is:\", distance)\n    return distance\nans = solver()", "generated_prediction": "10.0", "options": ["A)9", "B)6", "C)4", "D)3", "E)2"], "answer": "D", "prediction": "A"}
{"question": "A sporting goods store carries only yellow and white golf balls. At the beginning of the day it had 600 golf balls in stock, and by the end of the day it had sold 80% of its inventory of golf balls. If the store sold an equal number of yellow and white golf balls, and in doing so sold all of its white golf balls, how many yellow golf balls did the store have to begin the day?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A sporting goods store carries only yellow and white golf balls. At the beginning of the day it had 600 golf balls in stock, and by the end of the day it had sold 80% of its inventory of golf balls. If the store sold an equal number of yellow and white golf balls, and in doing so sold all of its white golf balls, how many yellow golf balls did the store have to begin the day?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of yellow golf balls at the beginning of the day\n    yellow_golf_balls = 0\n    # 2. The number of white golf balls at the beginning of the day\n    white_golf_balls = 0\n    # 3. The number of yellow golf balls sold\n    yellow_golf_balls_sold = 0\n    # 4. The number of white golf balls sold\n    white_golf_balls_sold = 0\n    # 5. The number of yellow golf balls at the end of the day\n    yellow_golf_balls_end = 0\n    # 6. The number of white golf balls at the end of the day\n    white_golf_balls_end = 0\n    # 7. The number of golf balls in stock at the beginning of the day\n    golf_balls_begin = 600\n    # 8. The number of golf balls in stock at the end of the day\n    golf_balls_end = 0\n    # 9. The number of golf balls sold\n    golf_balls_sold = 0\n    # 10. The number of golf balls in stock at the beginning of the day\n    golf_balls_begin = 600\n    # 11. The number of golf balls in stock at the end of the day\n    golf_balls_end = 0\n    # 12. The number of golf balls sold\n    golf_balls_sold = 0\n    # 13. The percentage of golf balls sold\n    percentage_golf_balls_sold = 0.8\n    # 14. The number of golf balls in stock at the end of the day\n    golf_balls_end = 0\n    # 15. The number of golf balls sold\n    golf_balls_sold = 0\n    # 16. The percentage of golf balls sold\n    percentage_golf_balls_sold = 0.8\n    # 17. The number of golf balls in stock at the end of the day\n    golf_balls_end = 0\n    # 18. The number of golf balls sold\n    golf_balls_sold = 0\n    # 19. The percentage of golf balls sold\n    percentage_golf_balls_sold = 0.8\n    #\nans = solver()", "generated_prediction": "None", "options": ["A)80", "B)120", "C)240", "D)320", "E)360"], "answer": "E", "prediction": "None"}
{"question": "A flagstaff 17.5 metre high casts a shadow of length 40.25 metre. The height of building, which casts a shadow of length 28.75 metre under similar conditions will be :", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A flagstaff 17.5 metre high casts a shadow of length 40.25 metre. The height of building, which casts a shadow of length 28.75 metre under similar conditions will be :\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    height_of_flagstaff = 17.5\n    length_of_shadow_of_flagstaff = 40.25\n    length_of_shadow_of_building = 28.75\n    height_of_building = 0\n    # Secondly, we need to calculate the height of building\n    height_of_building = length_of_shadow_of_building * height_of_flagstaff / length_of_shadow_of_flagstaff\n    return height_of_building\nans = solver()", "generated_prediction": "12.5", "options": ["A)12 metre", "B)12.5 metre", "C)13.5 metre", "D)14 metre", "E)15 metre"], "answer": "B", "prediction": "B"}
{"question": "Two cars are travelling from the same starting point in the same direction, having started their commute at the same time. The first car travels at a steady rate of 55 mph, while the second travels at a steady rate of 52 mph. How much time will pass before the cars are 15 miles away from each other?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Two cars are travelling from the same starting point in the same direction, having started their commute at the same time. The first car travels at a steady rate of 55 mph, while the second travels at a steady rate of 52 mph. How much time will pass before the cars are 15 miles away from each other?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The distance between the two cars\n    distance = 15\n    # 2. The speed of the first car\n    speed_1 = 55\n    # 3. The speed of the second car\n    speed_2 = 52\n    # 4. The time\n    time = 0\n    # Secondly, we need to calculate the time\n    while distance > 0:\n        distance = distance - (speed_1 + speed_2) * time\n        time = time + 1\n    return time\nans = solver()", "generated_prediction": "2.0", "options": ["A)3 hours", "B)5 hours", "C)6 hours", "D)4 hours", "E)7 hours"], "answer": "B", "prediction": "A"}
{"question": "The events A and B are independent. The probability that event A occurs is 0.6, and the probability that at least one of the events A or B occurs is 0.96. What is the probability that event B occurs?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The events A and B are independent. The probability that event A occurs is 0.6, and the probability that at least one of the events A or B occurs is 0.96. What is the probability that event B occurs?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # P(A) = 0.6\n    # P(B) = ?\n    # P(A or B) = 0.96\n    # P(A and B) = ?\n    # P(A and B) = P(A) * P(B)\n    # P(A or B) = P(A) + P(B) - P(A and B)\n    # P(B) = P(A or B) - P(A) + P(A and B)\n    # P(B) = 0.96 - 0.6 + P(A) * P(B)\n    # P(B) = 0.36 + 0.6 * P(B)\n    # P(B) = 0.36 / (1 - 0.6)\n    # P(B) = 0.36 / 0.4\n    # P(B) = 0.9\n    return 0.9\nans = solver()", "generated_prediction": "0.9", "options": ["A)0.5", "B)0.6", "C)0.7", "D)0.8", "E)0.9"], "answer": "E", "prediction": "E"}
{"question": "The ratio of the volumes of a cube to that of the sphere which will fit inside the cube is?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The ratio of the volumes of a cube to that of the sphere which will fit inside the cube is?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The volume of the cube\n    # 2. The volume of the sphere\n    # 3. The ratio of the volumes of a cube to that of the sphere\n    cube_volume = 0\n    sphere_volume = 0\n    ratio = 0\n    # Secondly, we need to calculate the volume of the cube and the volume of the sphere\n    cube_volume = math.pow(2, 3)\n    sphere_volume = (4/3) * math.pi * math.pow(2, 3)\n    # Thirdly, we need to calculate the ratio of the volumes of a cube to that of the sphere\n    ratio = cube_volume / sphere_volume\n    return ratio\nans = solver()", "generated_prediction": "0.23873241463784303", "options": ["A)2: \u03c0", "B)7:2", "C)8:2", "D)6: \u03c0", "E)8:3"], "answer": "D", "prediction": "A"}
{"question": "My wall contains 8 red colour ties, 13 violet colour ties,10 blue colour ties, 5 pink colour ties, 4 green colour ties. If electricity is gone and I want at least two ties of same colour then how many ties I should take out from my rack?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: My wall contains 8 red colour ties, 13 violet colour ties,10 blue colour ties, 5 pink colour ties, 4 green colour ties. If electricity is gone and I want at least two ties of same colour then how many ties I should take out from my rack?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    red_ties = 8\n    violet_ties = 13\n    blue_ties = 10\n    pink_ties = 5\n    green_ties = 4\n    total_ties = red_ties + violet_ties + blue_ties + pink_ties + green_ties\n    print(\"Total ties:\", total_ties)\n    # Secondly, we need to define the number of ties we need to take out from the rack\n    ties_to_take_out = 0\n    for i in range(total_ties):\n        if i >= 2:\n            ties_to_take_out = i\n            break\n    print(\"Ties to take out:\", ties_to_take_out)\n    return ties_to_take_out\nans = solver()", "generated_prediction": "2.0", "options": ["A)2", "B)3", "C)4", "D)5", "E)6"], "answer": "E", "prediction": "A"}
{"question": "Find 25/12*5", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Find 25/12*5\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 25\n    b = 12\n    c = 5\n    d = a/b\n    e = d*c\n    return e\nans = solver()", "generated_prediction": "10.416666666666668", "options": ["A)2.5498", "B)0.4167", "C)3.3987", "D)8.5497", "E)5.6312"], "answer": "B", "prediction": "A"}
{"question": "The value of log2 4 is:", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The value of log2 4 is:\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    log2_4 = 0\n    # Secondly, we need to calculate the value of log2 4\n    log2_4 = math.log(4, 2)\n    # Finally, we need to return the answer\n    return log2_4\nans = solver()", "generated_prediction": "2.0", "options": ["A)2", "B)4", "C)6", "D)8", "E)12"], "answer": "A", "prediction": "A"}
{"question": "Calculate the percentage gain of a merchant who purchased 90 kg of oranges for Rs. 450 and sold the whole lot at the rate of Rs. 7.50 per kg.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Calculate the percentage gain of a merchant who purchased 90 kg of oranges for Rs. 450 and sold the whole lot at the rate of Rs. 7.50 per kg.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The price of oranges per kg when the merchant purchased 90 kg of oranges\n    price_per_kg_when_purchased = 450 / 90\n    print(\"The price of oranges per kg when the merchant purchased 90 kg of oranges is:\", price_per_kg_when_purchased)\n    # 2. The price of oranges per kg when the merchant sold the whole lot\n    price_per_kg_when_sold = 7.5\n    print(\"The price of oranges per kg when the merchant sold the whole lot is:\", price_per_kg_when_sold)\n    # 3. The percentage gain of a merchant\n    percentage_gain = (price_per_kg_when_sold - price_per_kg_when_purchased) / price_per_kg_when_purchased * 100\n    print(\"The percentage gain of a merchant is:\", percentage_gain)\n    return percentage_gain\nans = solver()", "generated_prediction": "50.0", "options": ["A)50 %", "B)60 %", "C)55 %", "D)70 %", "E)58%"], "answer": "A", "prediction": "A"}
{"question": "A train M leaves City A at 5 am and reaches City B at 9am. Another train N leaves City B at 7am and reaches City A at 1030am. At what time do the 2 trains cross one another?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A train M leaves City A at 5 am and reaches City B at 9am. Another train N leaves City B at 7am and reaches City A at 1030am. At what time do the 2 trains cross one another?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The distance between City A and City B\n    distance = 100\n    # 2. The speed of train M\n    speed_M = distance / 4\n    # 3. The speed of train N\n    speed_N = distance / 3.5\n    # 4. The time when train M leaves City A\n    time_M = 5\n    # 5. The time when train N leaves City B\n    time_N = 7\n    # 6. The time when train M reaches City B\n    time_M_B = 9\n    # 7. The time when train N reaches City A\n    time_N_A = 10.5\n    # 8. The time when train M and train N cross one another\n    time_cross = 0\n    # 9. The distance between City A and the place where train M and train N cross one another\n    distance_cross = 0\n    # 10. The distance between City B and the place where train M and train N cross one another\n    distance_cross_B = 0\n    # 11. The distance between City A and the place where train M and train N cross one another\n    distance_cross_A = 0\n    # 12. The time when train M and train N cross one another\n    time_cross_A = 0\n    time_cross_B = 0\n    # 13. The time when train M and train N cross one another\n    time_cross = 0\n    # 14. The distance between City A and the place where train M and train N cross one another\n    distance_cross = 0\n    # 15. The distance between City B and the place where train M and train N cross one another\n    distance_cross_B = 0\n    # 16. The distance between City A and the place where train M and train N cross one another\n    distance_cross_A = 0\n    # 17. The time when train M and train N cross one another\n    time_cross_A = 0\n    time_cross_B = 0\n    # 18. The time when train M and train N cross one another\n    time_cross = 0\n    # 19. The distance between City A and the place where train M and\nans = solver()", "generated_prediction": "None", "options": ["A)1 hr 23 min", "B)1 hr 15 min", "C)1 hr 8 min", "D)56 min", "E)55 min"], "answer": "D", "prediction": "None"}
{"question": "Janice bikes at 10 miles per hour, while Jennie bikes at 20. How long until they have collectively biked 1 mile?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Janice bikes at 10 miles per hour, while Jennie bikes at 20. How long until they have collectively biked 1 mile?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # Janice's speed: 10 miles per hour\n    janice_speed = 10\n    # Jennie's speed: 20 miles per hour\n    jennie_speed = 20\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\n    time = 0\n    # The distance they have biked: 0 miles\n    distance = 0\n    # The time they have biked: 0 hours\nans = solver()", "generated_prediction": "None", "options": ["A)1 minute", "B)2 minutes", "C)3 minutes", "D)4 minutes", "E)5 minutes"], "answer": "B", "prediction": "None"}
{"question": "In an exam, a candidate secured 504 marks of the maximum mark of M. If the maximum mark M is converted into 800 marks, he would have secured 420 marks. What is the value of M?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In an exam, a candidate secured 504 marks of the maximum mark of M. If the maximum mark M is converted into 800 marks, he would have secured 420 marks. What is the value of M?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # M = ?\n    # 504 = ?\n    # 420 = ?\n    M = 0\n    x = 504\n    y = 420\n    # Secondly, we need to write the equation:\n    # 504/M = 420/800\n    # 504*800 = 420*M\n    # 4032000 = 420*M\n    # M = 4032000/420\n    M = 4032000/420\n    return M\nans = solver()", "generated_prediction": "9600.0", "options": ["A)278", "B)2890", "C)270", "D)2702", "E)960"], "answer": "E", "prediction": "E"}
{"question": "If Jill needed to buy 10 bottles of soda for a party in which 8 people attended, how many bottles of soda will she need to buy for a party in which 12 people are attending?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If Jill needed to buy 10 bottles of soda for a party in which 8 people attended, how many bottles of soda will she need to buy for a party in which 12 people are attending?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of bottles of soda Jill needed to buy for a party in which 8 people attended\n    bottles_8 = 10\n    # 2. The number of bottles of soda Jill needed to buy for a party in which 12 people are attending\n    bottles_12 = 0\n    # 3. The number of people attended the party in which 8 people attended\n    people_8 = 8\n    # 4. The number of people attended the party in which 12 people are attending\n    people_12 = 12\n    # 5. The number of bottles of soda Jill needed to buy for a party in which 12 people are attending\n    bottles_12 = bottles_8 * people_12 / people_8\n    return bottles_12\nans = solver()", "generated_prediction": "15.0", "options": ["A)6", "B)8", "C)10", "D)12", "E)14"], "answer": "C", "prediction": "E"}
{"question": "Two ants are standing side-by-side. One ant, which is 4 inches tall, casts a shadow that is 10 inches long. The other ant is 6 inches tall. Compute, in inches, the length of the shadow that the taller ant casts.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Two ants are standing side-by-side. One ant, which is 4 inches tall, casts a shadow that is 10 inches long. The other ant is 6 inches tall. Compute, in inches, the length of the shadow that the taller ant casts.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The length of the shadow that the taller ant casts.\n    # 2. The length of the shadow that the shorter ant casts.\n    # 3. The height of the taller ant.\n    # 4. The height of the shorter ant.\n    shadow_length_taller_ant = 0\n    shadow_length_shorter_ant = 0\n    height_taller_ant = 0\n    height_shorter_ant = 0\n    # Secondly, we need to assign the value to the variable.\n    shadow_length_shorter_ant = 10\n    height_shorter_ant = 4\n    height_taller_ant = 6\n    # Thirdly, we need to compute the length of the shadow that the taller ant casts.\n    shadow_length_taller_ant = shadow_length_shorter_ant * height_taller_ant / height_shorter_ant\n    # Finally, we need to return the answer.\n    return shadow_length_taller_ant\nans = solver()", "generated_prediction": "15.0", "options": ["A)36", "B)28", "C)42", "D)15", "E)20"], "answer": "D", "prediction": "D"}
{"question": "The height of a room to its semi-perimeter is 2:5. It costs Rs.260 to paper the walls of the room with paper 50cm wide at Rs.2 per meter allowing an area of 15 sq.m for doors and windows. The height of the room is:", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The height of a room to its semi-perimeter is 2:5. It costs Rs.260 to paper the walls of the room with paper 50cm wide at Rs.2 per meter allowing an area of 15 sq.m for doors and windows. The height of the room is:\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The height of the room\n    # 2. The semi-perimeter of the room\n    # 3. The cost of the paper\n    # 4. The width of the paper\n    # 5. The price of the paper\n    # 6. The area of the doors and windows\n    height = 0\n    semi_perimeter = 0\n    cost = 0\n    width = 0\n    price = 0\n    area = 0\n    # Secondly, we need to assign the value to the variable\n    semi_perimeter = 2.5\n    cost = 260\n    width = 50\n    price = 2\n    area = 15\n    # Thirdly, we need to calculate the height of the room\n    height = semi_perimeter * 2\n    # Finally, we need to return the answer\n    return height\nans = solver()", "generated_prediction": "5.0", "options": ["A)2.6m", "B)3.9m", "C)4m", "D)4.2m", "E)4.4m"], "answer": "C", "prediction": "C"}
{"question": "The sum of k consecutive integers is 51. If the least integer is -50, then k =", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The sum of k consecutive integers is 51. If the least integer is -50, then k =\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    k = 0\n    sum = 0\n    least_integer = -50\n    while sum != 51:\n        k += 1\n        sum = 0\n        for i in range(k):\n            sum += least_integer + i\n    return k\nans = solver()", "generated_prediction": "102.0", "options": ["A)40", "B)62", "C)82", "D)92", "E)102"], "answer": "E", "prediction": "E"}
{"question": "In a survey of students, each student selected from a list of 10 songs the 2 songs that the student liked best. If each song was selected 5 times, how many students were surveyed?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In a survey of students, each student selected from a list of 10 songs the 2 songs that the student liked best. If each song was selected 5 times, how many students were surveyed?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of songs: n = 10\n    n = 10\n    # 2. The number of times each song was selected: k = 5\n    k = 5\n    # 3. The number of students: x\n    x = 0\n    # 4. The number of ways to select 2 songs from 10 songs: C(10, 2) = 45\n    C = math.factorial(n) / (math.factorial(2) * math.factorial(n - 2))\n    # 5. The number of ways to select 5 songs from 10 songs: C(10, 5) = 252\n    C1 = math.factorial(n) / (math.factorial(5) * math.factorial(n - 5))\n    # 6. The number of ways to select 7 songs from 10 songs: C(10, 7) = 120\n    C2 = math.factorial(n) / (math.factorial(7) * math.factorial(n - 7))\n    # 7. The number of ways to select 9 songs from 10 songs: C(10, 9) = 10\n    C3 = math.factorial(n) / (math.factorial(9) * math.factorial(n - 9))\n    # 8. The number of ways to select 10 songs from 10 songs: C(10, 10) = 1\n    C4 = math.factorial(n) / (math.factorial(10) * math.factorial(n - 10))\n    # 9. The number of ways to select 2 songs from 10 songs, and each song was selected 5 times: C(10, 2) * C(5, 5) = 45 * 1 = 45\n    C5 = C * C4\n    # 10. The number of ways to select 2 songs from 10 songs, and each song was selected 5 times: C(10, 2) * C(5, 5) = 45 * 1 = 45\n    C6 = C * C4\n    # 11. The number of ways to select 2 songs from 10 songs, and each song was selected 5 times: C(10, 2) * C(5, 5) =\nans = solver()", "generated_prediction": "None", "options": ["A)96", "B)48", "C)32", "D)25", "E)18"], "answer": "D", "prediction": "None"}
{"question": "If one of the roots of the quadratic equation x^2 + mx + 22 = 0 is 1.5, then what is the value of m?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If one of the roots of the quadratic equation x^2 + mx + 22 = 0 is 1.5, then what is the value of m?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    m = 0\n    x1 = 0\n    x2 = 0\n    # Secondly, we need to calculate the value of m\n    x1 = 1.5\n    x2 = -22/x1\n    m = x1 + x2\n    return m\nans = solver()", "generated_prediction": "-13.166666666666666", "options": ["A)-23.5", "B)-17.5", "C)-10.5", "D)-16.2", "E)Cannot be determined"], "answer": "D", "prediction": "B"}
{"question": "At an election meeting 10 speakers are to address the meeting. The only protocol to be observed is that whenever they speak the pm should speak before the mp and the mp should speak before the mla. In how many ways can the meeting be held?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: At an election meeting 10 speakers are to address the meeting. The only protocol to be observed is that whenever they speak the pm should speak before the mp and the mp should speak before the mla. In how many ways can the meeting be held?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    pm = 'pm'\n    mp = 'mp'\n    mla = 'mla'\n    speaker = [pm, mp, mla]\n    meeting = []\n    meeting_list = []\n    meeting_list_final = []\n    meeting_list_final_final = []\n    meeting_list_final_final_final = []\n    meeting_list_final_final_final_final = []\n    meeting_list_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final = []\n    meeting_list_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final_final = []\n    meeting_list_final_\nans = solver()", "generated_prediction": "None", "options": ["A)10!/3", "B)10!/6", "C)10!/2", "D)10!/4", "E)10!/5"], "answer": "B", "prediction": "None"}
{"question": "Anna is able to buy 5 more articles for $300 after the price of each article decreased by 15%. What is the new selling price of each article?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Anna is able to buy 5 more articles for $300 after the price of each article decreased by 15%. What is the new selling price of each article?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The original price of each article\n    original_price = 0\n    # 2. The number of articles that Anna can buy\n    number_of_articles = 0\n    # 3. The total price of the articles that Anna can buy\n    total_price = 0\n    # 4. The new selling price of each article\n    new_selling_price = 0\n    # 5. The decrease rate of the price of each article\n    decrease_rate = 0\n    # 6. The number of articles that Anna can buy after the price of each article decreased by 15%\n    number_of_articles_after_decrease = 0\n    # 7. The total price of the articles that Anna can buy after the price of each article decreased by 15%\n    total_price_after_decrease = 0\n    # 8. The number of articles that Anna can buy more after the price of each article decreased by 15%\n    number_of_articles_more = 0\n    # 9. The total price of the articles that Anna can buy more after the price of each article decreased by 15%\n    total_price_more = 0\n    # 10. The new selling price of each article after the price of each article decreased by 15%\n    new_selling_price_after_decrease = 0\n    # 11. The number of articles that Anna can buy more after the price of each article decreased by 15%\n    number_of_articles_more_after_decrease = 0\n    # 12. The total price of the articles that Anna can buy more after the price of each article decreased by 15%\n    total_price_more_after_decrease = 0\n    # 13. The new selling price of each article after the price of each article decreased by 15%\n    new_selling_price_after_decrease = 0\n    # 14. The number of articles that Anna can buy more after the price of each article decreased by 15%\n    number_of_articles_more_after_decrease = 0\n    # 15. The total price of the articles that Anna can buy more after the price of each article decreased by 15%\n    total_price_more\nans = solver()", "generated_prediction": "None", "options": ["A)$8", "B)$10", "C)$13.6", "D)$22.9", "E)$40"], "answer": "C", "prediction": "None"}
{"question": "In a row of children Neha is 12th from left end and Radha is 6th from right end. When Radha is shifted to left by 2 places and Neha is shifted to right by 2 places there 6 children between Radha and Neha. How many children are there in the row?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In a row of children Neha is 12th from left end and Radha is 6th from right end. When Radha is shifted to left by 2 places and Neha is shifted to right by 2 places there 6 children between Radha and Neha. How many children are there in the row?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. Neha's position from left end\n    Neha_position_from_left_end = 12\n    # 2. Radha's position from right end\n    Radha_position_from_right_end = 6\n    # 3. The number of children between Radha and Neha\n    number_of_children_between_Radha_and_Neha = 6\n    # 4. The number of children in the row\n    number_of_children_in_the_row = 0\n    # Secondly, we need to calculate the number of children in the row\n    number_of_children_in_the_row = Neha_position_from_left_end + Radha_position_from_right_end + number_of_children_between_Radha_and_Neha\n    return number_of_children_in_the_row\nans = solver()", "generated_prediction": "24.0", "options": ["A)23", "B)27", "C)26", "D)28", "E)29"], "answer": "D", "prediction": "B"}
{"question": "10kg of a mixture contains 30% sand and 70% clay. In order to make the mixture contain equal quantities of clay and sand how much of the mixture is to be removed and replaced with pure sand?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: 10kg of a mixture contains 30% sand and 70% clay. In order to make the mixture contain equal quantities of clay and sand how much of the mixture is to be removed and replaced with pure sand?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The weight of the mixture\n    weight_mixture = 10\n    # 2. The percentage of sand in the mixture\n    percentage_sand = 30\n    # 3. The percentage of clay in the mixture\n    percentage_clay = 70\n    # 4. The weight of sand in the mixture\n    weight_sand = weight_mixture * percentage_sand / 100\n    # 5. The weight of clay in the mixture\n    weight_clay = weight_mixture * percentage_clay / 100\n    # 6. The weight of pure sand\n    weight_pure_sand = weight_clay\n    # 7. The weight of pure clay\n    weight_pure_clay = weight_sand\n    # 8. The weight of the mixture after removing and replacing\n    weight_mixture_after = weight_mixture - weight_sand + weight_pure_sand\n    # 9. The percentage of sand in the mixture after removing and replacing\n    percentage_sand_after = weight_pure_sand / weight_mixture_after * 100\n    # 10. The percentage of clay in the mixture after removing and replacing\n    percentage_clay_after = weight_pure_clay / weight_mixture_after * 100\n    # 11. The weight of sand in the mixture after removing and replacing\n    weight_sand_after = weight_mixture_after * percentage_sand_after / 100\n    # 12. The weight of clay in the mixture after removing and replacing\n    weight_clay_after = weight_mixture_after * percentage_clay_after / 100\n    # 13. The weight of the mixture to be removed\n    weight_mixture_removed = weight_sand\n    # 14. The weight of sand to be removed\n    weight_sand_removed = weight_sand\n    # 15. The weight of clay to be removed\n    weight_clay_removed = weight_clay - weight_pure_clay\n    # 16. The weight of pure sand to be added\n    weight_pure_sand_added = weight_pure_sand\n    # 17. The weight of pure clay to be added\n    weight_\nans = solver()", "generated_prediction": "None", "options": ["A)10/7", "B)20/7", "C)30/7", "D)40/7", "E)50/7"], "answer": "B", "prediction": "None"}
{"question": "A man spends 70% of his income. If his income increases by 20%, then what will be his new expenditure?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A man spends 70% of his income. If his income increases by 20%, then what will be his new expenditure?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    income = 0\n    expenditure = 0\n    increase = 0\n    new_expenditure = 0\n    # Secondly, we need to assign the value to the variable:\n    income = 100\n    expenditure = 70\n    increase = 20\n    new_expenditure = 0\n    # Thirdly, we need to calculate the new expenditure:\n    new_expenditure = expenditure + (increase / 100) * expenditure\n    return new_expenditure\nans = solver()", "generated_prediction": "84.0", "options": ["A)58.3%", "B)62.5%", "C)63.5%", "D)64.5%", "E)65.5%"], "answer": "A", "prediction": "D"}
{"question": "What is the greatest number of identical bouquets that can be made out of 28 white and 98 red tulips if no flowers are to be left out? (Two bouquets are identical whenever the number of red tulips in the two bouquets is equal and the number of white tulips in the two bouquets is equal.)", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: What is the greatest number of identical bouquets that can be made out of 28 white and 98 red tulips if no flowers are to be left out? (Two bouquets are identical whenever the number of red tulips in the two bouquets is equal and the number of white tulips in the two bouquets is equal.)\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of white tulips\n    white_tulips = 28\n    # 2. The number of red tulips\n    red_tulips = 98\n    # 3. The number of bouquets\n    bouquets = 0\n    # 4. The number of white tulips in each bouquet\n    white_tulips_in_each_bouquet = 0\n    # 5. The number of red tulips in each bouquet\n    red_tulips_in_each_bouquet = 0\n    # 6. The number of white tulips left\n    white_tulips_left = 0\n    # 7. The number of red tulips left\n    red_tulips_left = 0\n    # 8. The number of bouquets that can be made\n    bouquets_can_be_made = 0\n    # 9. The number of white tulips in each bouquet that can be made\n    white_tulips_in_each_bouquet_can_be_made = 0\n    # 10. The number of red tulips in each bouquet that can be made\n    red_tulips_in_each_bouquet_can_be_made = 0\n    # 11. The number of white tulips left that can be made\n    white_tulips_left_can_be_made = 0\n    # 12. The number of red tulips left that can be made\n    red_tulips_left_can_be_made = 0\n    # 13. The greatest number of identical bouquets that can be made\n    greatest_number_of_identical_bouquets_can_be_made = 0\n    # 14. The number of white tulips in each bouquet that can be made\n    white_tulips_in_each_bouquet_can_be_made_greatest = 0\n    # 15. The number of red tulips in each bouquet that can be made\n    red_tulips_in_each_bouquet_can_be_made_greatest = 0\n    # 16\nans = solver()", "generated_prediction": "None", "options": ["A)4", "B)7", "C)10", "D)14", "E)21"], "answer": "D", "prediction": "None"}
{"question": "Sharon works for 5 hours to earn enough tips to buy an ice cream cake, while Karen works for 4. After how many hours will they be able to buy the cake together?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Sharon works for 5 hours to earn enough tips to buy an ice cream cake, while Karen works for 4. After how many hours will they be able to buy the cake together?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    sharon_hour = 5\n    sharon_tips = sharon_hour * 2\n    karen_hour = 4\n    karen_tips = karen_hour * 3\n    cake_price = 10\n    total_tips = sharon_tips + karen_tips\n    total_hour = sharon_hour + karen_hour\n    # Secondly, we need to check if they can buy the cake together\n    if total_tips >= cake_price:\n        print(\"They can buy the cake together after \" + str(total_hour) + \" hours.\")\n    else:\n        print(\"They can't buy the cake together.\")\n    return\nans = solver()", "generated_prediction": "None", "options": ["A)1 hour", "B)2 hours", "C)3 hours", "D)4 hours", "E)5 hours"], "answer": "C", "prediction": "None"}
{"question": "If x<0, y>0, and |x^3| > |y^2|, which of the following must be true?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If x<0, y>0, and |x^3| > |y^2|, which of the following must be true?\n# Options: x > y, y^2 > x^2, -x^3 < y^2, \u2013x < y, x < \u2013y\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x = 0\n    y = 0\n    x_3 = 0\n    y_2 = 0\n    x_2 = 0\n    x_3_abs = 0\n    y_2_abs = 0\n    x_3_abs_y_2_abs = 0\n    x_y = 0\n    x_y_abs = 0\n    x_y_abs_x_2 = 0\n    x_y_abs_x_2_y_2 = 0\n    x_y_abs_x_2_y_2_x_3 = 0\n    x_y_abs_x_2_y_2_x_3_y_2 = 0\n    x_y_abs_x_2_y_2_x_3_y_2_x_3 = 0\n    x_y_abs_x_2_y_2_x_3_y_2_x_3_y_2 = 0\n    x_y_abs_x_2_y_2_x_3_y_2_x_3_y_2_x_3 = 0\n    x_y_abs_x_2_y_2_x_3_y_2_x_3_y_2_x_3_y_2 = 0\n    x_y_abs_x_2_y_2_x_3_y_2_x_3_y_2_x_3_y_2_x_3 = 0\n    x_y_abs_x_2_y_2_x_3_y_2_x_3_y_2_x_3_y_2_x_3_y_2 = 0\n    x_y_abs_x_2_y_2_x_3_y_2_x_3_y_2_x_3_y_2_x_3_y_2_x_3 = 0\n    x_y_abs_x_2_y_2_x_3_y_2_x_3_y_2_x_3_y\nans = solver()", "generated_prediction": "None", "options": ["A)x > y", "B)y^2 > x^2", "C)-x^3 < y^2", "D)\u2013x < y", "E)x < \u2013y"], "answer": "B", "prediction": "None"}
{"question": "Printer A and Printer B can each print 1\u20442 page per second. How long will it take both printers working together to print 100 pages?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Printer A and Printer B can each print 1\u20442 page per second. How long will it take both printers working together to print 100 pages?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of pages that need to be printed\n    pages = 100\n    # 2. The number of pages that can be printed by Printer A and Printer B per second\n    pages_per_second_A = 0.5\n    pages_per_second_B = 0.5\n    # 3. The number of pages that can be printed by Printer A and Printer B per minute\n    pages_per_minute_A = pages_per_second_A * 60\n    pages_per_minute_B = pages_per_second_B * 60\n    # 4. The number of pages that can be printed by Printer A and Printer B per hour\n    pages_per_hour_A = pages_per_minute_A * 60\n    pages_per_hour_B = pages_per_minute_B * 60\n    # 5. The number of pages that can be printed by Printer A and Printer B per day\n    pages_per_day_A = pages_per_hour_A * 24\n    pages_per_day_B = pages_per_hour_B * 24\n    # 6. The number of pages that can be printed by Printer A and Printer B per week\n    pages_per_week_A = pages_per_day_A * 7\n    pages_per_week_B = pages_per_day_B * 7\n    # 7. The number of pages that can be printed by Printer A and Printer B per month\n    pages_per_month_A = pages_per_week_A * 4\n    pages_per_month_B = pages_per_week_B * 4\n    # 8. The number of pages that can be printed by Printer A and Printer B per year\n    pages_per_year_A = pages_per_month_A * 12\n    pages_per_year_B = pages_per_month_B * 12\n    # 9. The number of pages that can be printed by Printer A and Printer B per decade\n    pages_per_decade_A = pages_per_year_A * 10\n    pages\nans = solver()", "generated_prediction": "None", "options": ["A)25 seconds", "B)50 seconds", "C)100 seconds", "D)200 seconds", "E)400 seconds"], "answer": "C", "prediction": "None"}
{"question": "Two ants are moving from their farms towards each other. Ant A is moving at a speed of 9 cm per hour and ant B is moving at a speed of 6 cm per hour. If the farms are 75 cm away from each other, what will be the distance (in cm) that ant A travels until meeting ant B?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Two ants are moving from their farms towards each other. Ant A is moving at a speed of 9 cm per hour and ant B is moving at a speed of 6 cm per hour. If the farms are 75 cm away from each other, what will be the distance (in cm) that ant A travels until meeting ant B?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The distance between the two farms\n    distance = 75\n    # 2. The speed of ant A\n    speed_A = 9\n    # 3. The speed of ant B\n    speed_B = 6\n    # 4. The time that ant A travels until meeting ant B\n    time = distance / (speed_A + speed_B)\n    # 5. The distance that ant A travels until meeting ant B\n    distance_A = speed_A * time\n    return distance_A\nans = solver()", "generated_prediction": "45.0", "options": ["A)45", "B)48", "C)51", "D)54", "E)57"], "answer": "A", "prediction": "A"}
{"question": "Roberts has a property worth of $1023.65. But in a record his property worth is written as greatest positive even integer less than or equal to his property worth and it is divisible by 100. Find the difference between actual property and recorded property worth?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Roberts has a property worth of $1023.65. But in a record his property worth is written as greatest positive even integer less than or equal to his property worth and it is divisible by 100. Find the difference between actual property and recorded property worth?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    actual_property = 1023.65\n    recorded_property = 0\n    difference = 0\n    # Secondly, we need to find the greatest positive even integer less than or equal to his property worth and it is divisible by 100.\n    for i in range(0, int(actual_property)):\n        if i % 2 == 0 and i % 100 == 0:\n            recorded_property = i\n    # Thirdly, we need to find the difference between actual property and recorded property worth.\n    difference = actual_property - recorded_property\n    return difference\nans = solver()", "generated_prediction": "23.649999999999977", "options": ["A)23.65", "B)1000", "C)35.62", "D)2.65", "E)1023.65"], "answer": "A", "prediction": "A"}
{"question": "A man spend 810 in buying trouser at Rs 70 each and shirt at 30 each. What will be the ratio of trouser and shirt when the maximum number of trouser is purchased?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A man spend 810 in buying trouser at Rs 70 each and shirt at 30 each. What will be the ratio of trouser and shirt when the maximum number of trouser is purchased?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The total money the man spend\n    total_money = 810\n    # 2. The price of trouser\n    price_trouser = 70\n    # 3. The price of shirt\n    price_shirt = 30\n    # 4. The maximum number of trouser\n    max_trouser = total_money // price_trouser\n    # 5. The maximum number of shirt\n    max_shirt = total_money // price_shirt\n    # 6. The ratio of trouser and shirt\n    ratio = 0\n    # 7. The maximum ratio of trouser and shirt\n    max_ratio = 0\n    # 8. The number of trouser\n    num_trouser = 0\n    # 9. The number of shirt\n    num_shirt = 0\n    # Secondly, we need to calculate the ratio of trouser and shirt\n    for i in range(max_trouser + 1):\n        for j in range(max_shirt + 1):\n            if i * price_trouser + j * price_shirt == total_money:\n                ratio = i / j\n                if ratio > max_ratio:\n                    max_ratio = ratio\n                    num_trouser = i\n                    num_shirt = j\n    return num_trouser, num_shirt\nans = solver()", "generated_prediction": "(9, 6)", "options": ["A)9 Trousers", "B)8 Trousers", "C)10 Trousers", "D)7 Trousers", "E)11 Trousers"], "answer": "A", "prediction": "A"}
{"question": "If a subscription for 15 issues of a magazine costs $42.00 and represents a saving of 25 percent of the cover prices, what is the cover price per issue?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If a subscription for 15 issues of a magazine costs $42.00 and represents a saving of 25 percent of the cover prices, what is the cover price per issue?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The subscription price for 15 issues of a magazine\n    subscription_price = 42.00\n    # 2. The saving of 25 percent of the cover prices\n    saving = 25\n    # 3. The cover price per issue\n    cover_price = 0\n    # Secondly, we need to calculate the cover price per issue\n    cover_price = subscription_price / (1 - saving / 100)\n    # Thirdly, we need to return the answer\n    return cover_price\nans = solver()", "generated_prediction": "56.0", "options": ["A)$7.73", "B)$6.73", "C)$5.73", "D)$4.73", "E)$3.73"], "answer": "E", "prediction": "A"}
{"question": "Christopher and Jonathan were having bets. They decide that a coin will be flipped twenty times and each time it turns heads, Christopher will give $2 to Jonathan and each time it turns out to be Tails, Jonathan will give 3$ to Christopher. After flipping for twenty times none of the both won or lost any amount.\nHow many times did the coin landed on Heads ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Christopher and Jonathan were having bets. They decide that a coin will be flipped twenty times and each time it turns heads, Christopher will give $2 to Jonathan and each time it turns out to be Tails, Jonathan will give 3$ to Christopher. After flipping for twenty times none of the both won or lost any amount.\nHow many times did the coin landed on Heads ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of times the coin landed on Heads\n    # 2. The number of times the coin landed on Tails\n    # 3. The amount of money Christopher gave to Jonathan\n    # 4. The amount of money Jonathan gave to Christopher\n    # 5. The total amount of money Christopher and Jonathan had\n    heads = 0\n    tails = 0\n    christopher_gave = 0\n    jonathan_gave = 0\n    total_money = 0\n    # Secondly, we need to define the number of times the coin was flipped\n    times = 20\n    # Thirdly, we need to define the amount of money Christopher and Jonathan had before the coin was flipped\n    christopher_money = 100\n    jonathan_money = 100\n    # Fourthly, we need to define the amount of money Christopher and Jonathan gave to each other\n    christopher_gave_money = 2\n    jonathan_gave_money = 3\n    # Fifthly, we need to define the amount of money Christopher and Jonathan had after the coin was flipped\n    christopher_money_after = christopher_money - christopher_gave_money\n    jonathan_money_after = jonathan_money - jonathan_gave_money\n    # Sixthly, we need to define the amount of money Christopher and Jonathan had after the coin was flipped for twenty times\n    christopher_money_after_twenty = christopher_money_after * times\n    jonathan_money_after_twenty = jonathan_money_after * times\n    # Seventhly, we need to define the amount of money Christopher and Jonathan had after the coin was flipped for twenty times\n    total_money_after_twenty = christopher_money_after_twenty + jonathan_money_after_twenty\n    # Eighthly, we need to define the amount of money Christopher and Jonathan had after the coin was flipped for twenty times\n    total_money_after_twenty = christopher_money_after_twenty + jonathan_money_after_twenty\n    # Ninthly, we need to define the amount of money Christopher and Jonathan had after\nans = solver()", "generated_prediction": "None", "options": ["A)10", "B)23", "C)16", "D)18", "E)12"], "answer": "E", "prediction": "None"}
{"question": "Allen starts from X, goes to Y. At the same time Bob starts from Y and goes towards X. Once Allen reaches Y he changes his direction and returns to X. Once Bob reaches X, he changes his direction and returns to Y. Throughout Allen travels at 54 kmph and Bob travels at 78kmph. By the time they meet for the second time, Bob covers 48 km more than Allen. Find the distance between X and Y.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Allen starts from X, goes to Y. At the same time Bob starts from Y and goes towards X. Once Allen reaches Y he changes his direction and returns to X. Once Bob reaches X, he changes his direction and returns to Y. Throughout Allen travels at 54 kmph and Bob travels at 78kmph. By the time they meet for the second time, Bob covers 48 km more than Allen. Find the distance between X and Y.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # Allen's speed: 54 kmph\n    Allen_speed = 54\n    # Bob's speed: 78 kmph\n    Bob_speed = 78\n    # Allen's distance: 48 km\n    Allen_distance = 48\n    # Bob's distance: 48 km\n    Bob_distance = 48\n    # Allen's time: ?\n    Allen_time = 0\n    # Bob's time: ?\n    Bob_time = 0\n    # Allen's total distance: ?\n    Allen_total_distance = 0\n    # Bob's total distance: ?\n    Bob_total_distance = 0\n    # Allen's total time: ?\n    Allen_total_time = 0\n    # Bob's total time: ?\n    Bob_total_time = 0\n    # Allen's total speed: ?\n    Allen_total_speed = 0\n    # Bob's total speed: ?\n    Bob_total_speed = 0\n    # Allen's total distance: ?\n    Allen_total_distance = 0\n    # Bob's total distance: ?\n    Bob_total_distance = 0\n    # Allen's total time: ?\n    Allen_total_time = 0\n    # Bob's total time: ?\n    Bob_total_time = 0\n    # Allen's total speed: ?\n    Allen_total_speed = 0\n    # Bob's total speed: ?\n    Bob_total_speed = 0\n    # Allen's total distance: ?\n    Allen_total_distance = 0\n    # Bob's total distance: ?\n    Bob_total_distance = 0\n    # Allen's total time: ?\n    Allen_total_time = 0\n    # Bob's total time: ?\n    Bob_total_time = 0\n    # Allen's total speed: ?\n    Allen_total_speed = 0\n    # Bob's total speed: ?\n    Bob_total_speed = 0\n    # Allen's total distance: ?\n    Allen_total_distance = 0\n    # Bob's total distance: ?\n    Bob_total_distance = 0\n    # Allen's total time: ?\n    Allen_total_time = 0\n    # Bob's total\nans = solver()", "generated_prediction": "None", "options": ["A)144km", "B)72 km", "C)126km", "D)84 km", "E)48km"], "answer": "E", "prediction": "None"}
{"question": "Tires of a certain brand, when purchased new, last for four years. A customer can choose to purchase the new tires at a cost of $180 per tire or can have his current tires repaired at a cost of $40 per tire, a repair that will make the current tires last for one additional year. The average cost per year of the new tires is what percent greater than the cost of repairing the current tires?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Tires of a certain brand, when purchased new, last for four years. A customer can choose to purchase the new tires at a cost of $180 per tire or can have his current tires repaired at a cost of $40 per tire, a repair that will make the current tires last for one additional year. The average cost per year of the new tires is what percent greater than the cost of repairing the current tires?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. cost_new_tires: the cost of new tires\n    cost_new_tires = 180\n    # 2. cost_repair_tires: the cost of repairing the current tires\n    cost_repair_tires = 40\n    # 3. years_new_tires: the years of new tires\n    years_new_tires = 4\n    # 4. years_repair_tires: the years of repairing the current tires\n    years_repair_tires = 1\n    # 5. average_cost_new_tires: the average cost per year of the new tires\n    average_cost_new_tires = cost_new_tires / years_new_tires\n    # 6. average_cost_repair_tires: the average cost per year of the repairing the current tires\n    average_cost_repair_tires = cost_repair_tires / years_repair_tires\n    # 7. percent_greater: the percent greater than the cost of repairing the current tires\n    percent_greater = (average_cost_new_tires - average_cost_repair_tires) / average_cost_repair_tires * 100\n    return percent_greater\nans = solver()", "generated_prediction": "12.5", "options": ["A)8%", "B)10%", "C)12.5%", "D)16.7%", "E)25%"], "answer": "C", "prediction": "C"}
{"question": "A rope 20 meters long is cut into two pieces. If the length of one piece of rope is 3 meters shorter than the length of the other, what is the length, in meters, of the longer piece of rope?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A rope 20 meters long is cut into two pieces. If the length of one piece of rope is 3 meters shorter than the length of the other, what is the length, in meters, of the longer piece of rope?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    rope_length = 20\n    rope_length_1 = 0\n    rope_length_2 = 0\n    rope_length_diff = 3\n    rope_length_1_max = rope_length\n    rope_length_1_min = 0\n    rope_length_2_max = rope_length\n    rope_length_2_min = 0\n    rope_length_1_max_temp = rope_length\n    rope_length_1_min_temp = 0\n    rope_length_2_max_temp = rope_length\n    rope_length_2_min_temp = 0\n    rope_length_1_max_temp_2 = rope_length\n    rope_length_1_min_temp_2 = 0\n    rope_length_2_max_temp_2 = rope_length\n    rope_length_2_min_temp_2 = 0\n    rope_length_1_max_temp_3 = rope_length\n    rope_length_1_min_temp_3 = 0\n    rope_length_2_max_temp_3 = rope_length\n    rope_length_2_min_temp_3 = 0\n    rope_length_1_max_temp_4 = rope_length\n    rope_length_1_min_temp_4 = 0\n    rope_length_2_max_temp_4 = rope_length\n    rope_length_2_min_temp_4 = 0\n    rope_length_1_max_temp_5 = rope_length\n    rope_length_1_min_temp_5 = 0\n    rope_length_2_max_temp_5 = rope_length\n    rope_length_2_min_temp_5 = 0\n    rope_length_1_max_temp_6 = rope_length\n    rope_length_1_min_temp_6 = 0\n    rope_length_2_max_temp_6 = rope_length\n    rope_length_2_min_temp_6 = 0\n    rope_length_1_max_temp_7 = rope_length\n    rope_length\nans = solver()", "generated_prediction": "None", "options": ["A)7.5", "B)8.9", "C)9.9", "D)11.5", "E)11.7"], "answer": "D", "prediction": "None"}
{"question": "Jerry purchased a 1-year $5,000 bond that paid an annual interest rate of 12% compounded every six months. How much interest had this bond accrued at maturity?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Jerry purchased a 1-year $5,000 bond that paid an annual interest rate of 12% compounded every six months. How much interest had this bond accrued at maturity?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The amount of money Jerry purchased the bond\n    amount = 5000\n    # 2. The annual interest rate of the bond\n    rate = 0.12\n    # 3. The number of times the interest is compounded per year\n    times = 2\n    # 4. The number of years the bond is held\n    years = 1\n    # 5. The amount of interest accrued at maturity\n    interest = 0\n    # Secondly, we need to calculate the amount of interest accrued at maturity\n    interest = amount * (1 + rate / times) ** (times * years) - amount\n    # Thirdly, we need to return the answer\n    return interest\nans = solver()", "generated_prediction": "618.0000000000009", "options": ["A)$5102", "B)$618", "C)$216", "D)$202", "E)$200"], "answer": "B", "prediction": "B"}
{"question": "Decipher the following multiplication table:\nM A D\nB E\n-------------\nM A D\nR A E\n-------------\nA M I D", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Decipher the following multiplication table:\nM A D\nB E\n-------------\nM A D\nR A E\n-------------\nA M I D\n# Options: 9 2 0 0, 9 2 0 9, 9 2 0 1, 9 2 0 7, 9 2 2 2\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    M = 0\n    A = 0\n    D = 0\n    B = 0\n    E = 0\n    R = 0\n    I = 0\n    # Secondly, we need to define the following rules:\n    # 1. M, A, D, B, E, R, I are all digits from 0 to 9\n    # 2. M, A, D, B, E, R, I are all different\n    # 3. M, A, D, B, E, R, I are all non-zero\n    # 4. M * B = R * 10 + A\n    # 5. M * E = R * 10 + A\n    # 6. A * M = I * 10 + D\n    # 7. A * D = M * 10 + A\n    # 8. B * E = E * 10 + R\n    # 9. D * E = A * 10 + E\n    # 10. R * A = A * 10 + E\n    # 11. I * D = M * 10 + I\n    # Thirdly, we need to find the answer\n    for M in range(1, 10):\n        for A in range(0, 10):\n            if A == M:\n                continue\n            for D in range(0, 10):\n                if D == A or D == M:\n                    continue\n                for B in range(0, 10):\n                    if B == D or B == A or B == M:\n                        continue\n                    for E in range(0, 10):\n                        if E == B or E == D or E == A or E == M:\n                            continue\n                        for R in range(0, 10):\n                            if R == E or R == B or R == D or R == A or R == M:\n                                continue\n                            for I in range(0, 10):\n                                if I == R or I == E or I == B or I == D or I == A or I == M:\n                                    continue\n                                if M * B == R * 10 + A and M * E == R * 10 + A and A * M == I * 10 + D and A *\nans = solver()", "generated_prediction": "None", "options": ["A)9 2 0 0", "B)9 2 0 9", "C)9 2 0 1", "D)9 2 0 7", "E)9 2 2 2"], "answer": "D", "prediction": "None"}
{"question": "Sachin was twice as old as Ajay 10 years back. How old is Ajay today if Sachin will be 40 years old in 10 years", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Sachin was twice as old as Ajay 10 years back. How old is Ajay today if Sachin will be 40 years old in 10 years\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # Ajay's age 10 years back\n    Ajay_age_10_years_back = 0\n    # Sachin's age 10 years back\n    Sachin_age_10_years_back = 0\n    # Ajay's age today\n    Ajay_age_today = 0\n    # Sachin's age today\n    Sachin_age_today = 0\n    # Sachin's age in 10 years\n    Sachin_age_in_10_years = 0\n    # Ajay's age in 10 years\n    Ajay_age_in_10_years = 0\n    # Now, we need to define the following equation:\n    # Ajay_age_10_years_back + 10 = Ajay_age_today\n    # Sachin_age_10_years_back + 10 = Sachin_age_today\n    # Sachin_age_today + 10 = Sachin_age_in_10_years\n    # Ajay_age_today + 10 = Ajay_age_in_10_years\n    # Sachin_age_in_10_years = 40\n    # Ajay_age_today = 2 * Ajay_age_10_years_back\n    # Now, we need to solve the equation:\n    Ajay_age_10_years_back = 0\n    Sachin_age_10_years_back = 0\n    Ajay_age_today = 0\n    Sachin_age_today = 0\n    Sachin_age_in_10_years = 0\n    Ajay_age_in_10_years = 0\n    Ajay_age_10_years_back = 0\n    Sachin_age_10_years_back = Ajay_age_10_years_back * 2\n    Ajay_age_today = Ajay_age_10_years_back + 10\n    Sachin_age_today = Sachin_age_10_years_back + 10\n    Sachin_age_in_10_years = Sachin_age_today + 10\n    Ajay_age_in_10_years = Ajay_age_today +\nans = solver()", "generated_prediction": "None", "options": ["A)18", "B)25", "C)15", "D)20", "E)21"], "answer": "D", "prediction": "None"}
{"question": "What will be the cost of gardening 1-metre \u2013 broad boundary around a rectangular plot having perimeter of 340 metres at the rate of 10 per square metre?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: What will be the cost of gardening 1-metre \u2013 broad boundary around a rectangular plot having perimeter of 340 metres at the rate of 10 per square metre?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. Perimeter of the rectangular plot\n    perimeter = 340\n    # 2. The rate of gardening\n    rate = 10\n    # 3. The width of the boundary\n    width = 1\n    # 4. The length of the rectangular plot\n    length = 0\n    # 5. The cost of gardening\n    cost = 0\n    # Secondly, we need to calculate the length of the rectangular plot\n    length = perimeter - 2 * width\n    # Thirdly, we need to calculate the cost of gardening\n    cost = rate * length * width\n    return cost\nans = solver()", "generated_prediction": "3380.0", "options": ["A)3400", "B)1700", "C)3440", "D)Cannot be determined", "E)None of these"], "answer": "C", "prediction": "A"}
{"question": "Last year, 34 percent of Ace Book Company's sales revenue came from the sale of novels. Of the remaining revenue, 1/3 was from the sale of biographies. The company's revenue from the sale of novels was approximately, how many times its revenue from the sale of biographies?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Last year, 34 percent of Ace Book Company's sales revenue came from the sale of novels. Of the remaining revenue, 1/3 was from the sale of biographies. The company's revenue from the sale of novels was approximately, how many times its revenue from the sale of biographies?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. x: the revenue from the sale of novels\n    # 2. y: the revenue from the sale of biographies\n    x = 0\n    y = 0\n    # Secondly, we need to define the following equation:\n    # 1. x + y = 100\n    # 2. 0.34x + 0.33y = 0.34x + 0.33(100 - x) = 0.34x + 33 - 0.33x = 33\n    # 3. x = 33 / 0.67 = 49.25\n    x = 33 / 0.67\n    y = 100 - x\n    # Thirdly, we need to calculate the ratio of x and y\n    ratio = x / y\n    return ratio\nans = solver()", "generated_prediction": "0.9705882352941174", "options": ["A)1.3", "B)1.5", "C)2.1", "D)2.5", "E)3.1"], "answer": "B", "prediction": "A"}
{"question": "A bee bypasses 0.05% of flowers it flies by because it can sense they don't have any nectar in them. How many flowers will the bee fly by to bypass 8 flowers?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A bee bypasses 0.05% of flowers it flies by because it can sense they don't have any nectar in them. How many flowers will the bee fly by to bypass 8 flowers?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The probability of bypassing a flower\n    p = 0.0005\n    # 2. The number of flowers the bee bypasses\n    n = 8\n    # 3. The number of flowers the bee flies by\n    x = 0\n    # 4. The probability of bypassing n flowers\n    p_n = 0\n    # 5. The probability of bypassing n flowers in x times\n    p_n_x = 0\n    # 6. The probability of bypassing n flowers in x+1 times\n    p_n_x_1 = 0\n    # 7. The probability of bypassing n flowers in x+2 times\n    p_n_x_2 = 0\n    # 8. The probability of bypassing n flowers in x+3 times\n    p_n_x_3 = 0\n    # 9. The probability of bypassing n flowers in x+4 times\n    p_n_x_4 = 0\n    # 10. The probability of bypassing n flowers in x+5 times\n    p_n_x_5 = 0\n    # 11. The probability of bypassing n flowers in x+6 times\n    p_n_x_6 = 0\n    # 12. The probability of bypassing n flowers in x+7 times\n    p_n_x_7 = 0\n    # 13. The probability of bypassing n flowers in x+8 times\n    p_n_x_8 = 0\n    # 14. The probability of bypassing n flowers in x+9 times\n    p_n_x_9 = 0\n    # 15. The probability of bypassing n flowers in x+10 times\n    p_n_x_10 = 0\n    # 16. The probability of bypassing n flowers in x+11 times\n    p_n_x_11 = 0\n    # 17. The probability of bypassing n flowers in x+12 times\n    p_n_x_12 = 0\n    # 18. The probability of bypassing n flowers in x+13 times\n    p_n_x_13 = 0\n    # 19. The probability of bypassing n flowers in x+14 times\nans = solver()", "generated_prediction": "None", "options": ["A)2000", "B)4000", "C)8000", "D)16000", "E)32000"], "answer": "D", "prediction": "None"}
{"question": "Fernando purchased a university meal plan that allows him to have a total of 3 lunches and 3 dinners per week. If the cafeteria is closed on weekends and Fernando always goes home for a dinner on Friday nights, how many options does he have to allocate his meals?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Fernando purchased a university meal plan that allows him to have a total of 3 lunches and 3 dinners per week. If the cafeteria is closed on weekends and Fernando always goes home for a dinner on Friday nights, how many options does he have to allocate his meals?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of lunches per week\n    lunches = 3\n    # 2. The number of dinners per week\n    dinners = 3\n    # 3. The number of days per week\n    days = 5\n    # 4. The number of options\n    options = 0\n    # Secondly, we need to write a for loop to calculate the number of options\n    for i in range(lunches+1):\n        for j in range(dinners+1):\n            if i+j == days:\n                options += 1\n    return options\nans = solver()", "generated_prediction": "2.0", "options": ["A)5C3*4C3", "B)5C4*4C2", "C)5C2*4C4", "D)5C6*4C5", "E)4C3*4C3"], "answer": "A", "prediction": "A"}
{"question": "What should come in place of the question mark(?) in each of the following questions ?\na2 - b2/(a + b)2 (?)=(a - b)2", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: What should come in place of the question mark(?) in each of the following questions ?\na2 - b2/(a + b)2 (?)=(a - b)2\n# Options: , 2, 2, a3 + b3, None of these\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 2\n    b = 3\n    c = a2 - b2/(a + b)2\n    return c\nans = solver()", "generated_prediction": "None", "options": ["A)(a + b)(a - b)", "B)(a - b)2", "C)(a + b)2", "D)a3 + b3", "E)None of these"], "answer": "A", "prediction": "None"}
{"question": "A number is as much greater than 36 as is less than 86. Find the Number.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A number is as much greater than 36 as is less than 86. Find the Number.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x = 0\n    y = 0\n    z = 0\n    # Secondly, we need to write the equation:\n    x = 86 - z\n    y = z - 36\n    z = x + y\n    return z\nans = solver()", "generated_prediction": "50.0", "options": ["A)60", "B)56", "C)51", "D)61", "E)41"], "answer": "D", "prediction": "A"}
{"question": "A certain phone manufacturer ships its products in crates. A crate consists of p pallets, and each pallet holds 1250 phones. If the manufacturer ships 4 crates, how many phones are shipped?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A certain phone manufacturer ships its products in crates. A crate consists of p pallets, and each pallet holds 1250 phones. If the manufacturer ships 4 crates, how many phones are shipped?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    p = 0\n    crates = 4\n    phones_per_pallet = 1250\n    phones_per_crate = p * phones_per_pallet\n    phones_per_shipment = crates * phones_per_crate\n    return phones_per_shipment\nans = solver()", "generated_prediction": "None", "options": ["A)1000p", "B)1500p", "C)2000p", "D)2500p", "E)30000"], "answer": "D", "prediction": "None"}
{"question": "A can construct a wall in 40 min and B can construct the wall in 45 min. How many hours is needed to contruct a wall if both the person working together.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A can construct a wall in 40 min and B can construct the wall in 45 min. How many hours is needed to contruct a wall if both the person working together.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    A = 40\n    B = 45\n    C = A + B\n    print(C)\n    return C\nans = solver()", "generated_prediction": "85.0", "options": ["A)20 min", "B)22 min", "C)23 min", "D)21 min", "E)20 min"], "answer": "D", "prediction": "D"}
{"question": "An express electric train takes exact three seconds to enter tunnel which is 1 mile long.\nIf train is traveling at 120 mile an hour, how long will it take to pass completely through the tunnel ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: An express electric train takes exact three seconds to enter tunnel which is 1 mile long.\nIf train is traveling at 120 mile an hour, how long will it take to pass completely through the tunnel ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The length of the tunnel\n    tunnel_length = 1\n    # 2. The speed of the train\n    train_speed = 120\n    # 3. The time that the train takes to enter the tunnel\n    time_to_enter_tunnel = 3\n    # 4. The time that the train takes to pass completely through the tunnel\n    time_to_pass_tunnel = 0\n    # Secondly, we need to calculate the time that the train takes to pass completely through the tunnel\n    time_to_pass_tunnel = tunnel_length / train_speed * 60 + time_to_enter_tunnel\n    # Thirdly, we need to return the answer\n    return time_to_pass_tunnel\nans = solver()", "generated_prediction": "None", "options": ["A)43 seconds", "B)39 seconds", "C)20 seconds", "D)33 seconds", "E)55 seconds"], "answer": "D", "prediction": "None"}
{"question": "A merchant receives an invoice for a motor boat for $20 000 with terms 4/30, n/100. What is the highest simple interest rate at which he can afford to borrow money in order to take advantage of the discount?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A merchant receives an invoice for a motor boat for $20 000 with terms 4/30, n/100. What is the highest simple interest rate at which he can afford to borrow money in order to take advantage of the discount?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The amount of the invoice:\n    invoice = 20000\n    # 2. The discount rate:\n    discount_rate = 4\n    # 3. The discount period:\n    discount_period = 30\n    # 4. The net payment period:\n    net_payment_period = 100\n    # 5. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 6. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 7. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 8. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 9. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 10. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 11. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 12. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 13. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 14. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 15. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 16. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 17. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 18. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 19. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 20. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 21. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 22. The highest simple interest rate:\n    highest_simple_interest_rate = 0\n    # 23. The highest simple interest rate:\n    highest_simple\nans = solver()", "generated_prediction": "None", "options": ["A)247.67", "B)237.67", "C)227.67", "D)215.67", "E)None of these"], "answer": "A", "prediction": "None"}
{"question": "There are ten lime soda bottles on a table in a restaurant. They are to be served among two different groups of customers consisting of 5 members each. How many ways are there to create these 2 groups?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: There are ten lime soda bottles on a table in a restaurant. They are to be served among two different groups of customers consisting of 5 members each. How many ways are there to create these 2 groups?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of bottles\n    n = 10\n    # 2. The number of customers in each group\n    k = 5\n    # 3. The number of groups\n    m = 2\n    # 4. The number of ways to create these 2 groups\n    ways = 0\n    # Secondly, we need to write a for loop to calculate the number of ways\n    for i in range(0, k+1):\n        ways += math.factorial(n-i) / (math.factorial(i) * math.factorial(n-i-k))\n    return ways\nans = solver()", "generated_prediction": "49171.0", "options": ["A)90", "B)105", "C)126", "D)252", "E)525"], "answer": "D", "prediction": "E"}
{"question": "A special cereal mixture contains rice, wheat and corn in the ratio of 2:3:5. If a bag of the mixture contains 3 pounds of rice, how much corn does it contain?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A special cereal mixture contains rice, wheat and corn in the ratio of 2:3:5. If a bag of the mixture contains 3 pounds of rice, how much corn does it contain?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    rice = 3\n    wheat = 0\n    corn = 0\n    ratio = [2, 3, 5]\n    total = sum(ratio)\n    ratio = [i/total for i in ratio]\n    corn = rice / ratio[0] * ratio[2]\n    return corn\nans = solver()", "generated_prediction": "7.5", "options": ["A)6.5", "B)7.5", "C)7", "D)6", "E)None of the above"], "answer": "B", "prediction": "B"}
{"question": "You can purchase one soda and two energy bars for 150 cents, or two sodas and three energy bars for 300\ncents. If the costs of the items do not change, compute the cost in cents of six sodas and seven bars.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: You can purchase one soda and two energy bars for 150 cents, or two sodas and three energy bars for 300\ncents. If the costs of the items do not change, compute the cost in cents of six sodas and seven bars.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    soda_price = 0\n    bar_price = 0\n    soda_num = 0\n    bar_num = 0\n    total_price = 0\n    # Secondly, we need to define the following equation:\n    soda_price + 2 * bar_price = 150\n    2 * soda_price + 3 * bar_price = 300\n    # Thirdly, we need to solve the equation:\n    soda_price = 150 - 2 * bar_price\n    2 * (150 - 2 * bar_price) + 3 * bar_price = 300\n    300 - 3 * bar_price = 300 - 4 * bar_price\n    bar_price = 0\n    soda_price = 150\n    # Fourthly, we need to calculate the total price:\n    soda_num = 6\n    bar_num = 7\n    total_price = soda_num * soda_price + bar_num * bar_price\n    return total_price\nans = solver()", "generated_prediction": "None", "options": ["A)500", "B)600", "C)750", "D)800", "E)900"], "answer": "E", "prediction": "None"}
{"question": "A pen company produces very fine quality of writing pens. Company knows that on average 10% of the produced pens are always defective so are rejected before packing. Company promises to deliver 7200 pens to its wholesaler at Rs. 10 each. It estimates the overall profit on all the manufactured pens to be 25%. What is the manufactured cost of each pen?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A pen company produces very fine quality of writing pens. Company knows that on average 10% of the produced pens are always defective so are rejected before packing. Company promises to deliver 7200 pens to its wholesaler at Rs. 10 each. It estimates the overall profit on all the manufactured pens to be 25%. What is the manufactured cost of each pen?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of pens that are produced\n    # 2. The number of pens that are defective\n    # 3. The number of pens that are delivered\n    # 4. The price of each pen\n    # 5. The profit rate\n    # 6. The cost of each pen\n    num_of_pens_produced = 0\n    num_of_pens_defective = 0\n    num_of_pens_delivered = 7200\n    price_of_each_pen = 10\n    profit_rate = 0.25\n    cost_of_each_pen = 0\n    # Secondly, we need to calculate the number of pens that are produced\n    num_of_pens_produced = num_of_pens_delivered / (1 - profit_rate)\n    # Thirdly, we need to calculate the number of pens that are defective\n    num_of_pens_defective = num_of_pens_produced * 0.1\n    # Finally, we need to calculate the cost of each pen\n    cost_of_each_pen = price_of_each_pen / (1 + profit_rate)\n    return cost_of_each_pen\nans = solver()", "generated_prediction": "8.0", "options": ["A)Rs. 6", "B)Rs. 7.2", "C)Rs. 5.6", "D)Rs. 8", "E)None of these"], "answer": "B", "prediction": "D"}
{"question": "A two digit number exceeds the sum of the digits of that number by 18. If the digit at the unit's place is double the digit in the ten's place, what is the number?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A two digit number exceeds the sum of the digits of that number by 18. If the digit at the unit's place is double the digit in the ten's place, what is the number?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number\n    # 2. The digit at the unit's place\n    # 3. The digit in the ten's place\n    # 4. The sum of the digits\n    # 5. The difference between the number and the sum of the digits\n    number = 0\n    unit_digit = 0\n    ten_digit = 0\n    sum_of_digits = 0\n    difference = 0\n    # Secondly, we need to write the condition of the question\n    # 1. The number is a two digit number\n    # 2. The number exceeds the sum of the digits of that number by 18\n    # 3. The digit at the unit's place is double the digit in the ten's place\n    for number in range(10, 100):\n        unit_digit = number % 10\n        ten_digit = number // 10\n        sum_of_digits = unit_digit + ten_digit\n        difference = number - sum_of_digits\n        if difference == 18 and unit_digit == 2 * ten_digit:\n            return number\n    return None\nans = solver()", "generated_prediction": "24.0", "options": ["A)12", "B)24", "C)42", "D)48", "E)49"], "answer": "B", "prediction": "B"}
{"question": "Suppose for any real number x, [x] denotes the greatest integer less than or equal to x. Let L(x,y) = [x] + [y] + [x + y] and R(x,y) = [2x] + [2y]. Then it is impossible to find any two positive real numbers x and y for which", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Suppose for any real number x, [x] denotes the greatest integer less than or equal to x. Let L(x,y) = [x] + [y] + [x + y] and R(x,y) = [2x] + [2y]. Then it is impossible to find any two positive real numbers x and y for which\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x = 0\n    y = 0\n    L = 0\n    R = 0\n    # Secondly, we need to define the function of L(x,y) and R(x,y)\n    def L(x,y):\n        return math.floor(x) + math.floor(y) + math.floor(x + y)\n    def R(x,y):\n        return 2 * math.floor(x) + 2 * math.floor(y)\n    # Thirdly, we need to find the two positive real numbers x and y for which L(x,y) = R(x,y)\n    for x in range(1,100):\n        for y in range(1,100):\n            if L(x,y) == R(x,y):\n                print(x,y)\n    return\nans = solver()", "generated_prediction": "None", "options": ["A)L(x,y) = R(x,y)", "B)L(x,y) \u2260 R(x,y)", "C)L(x,y) < R(x,y)", "D)L(x,y) < R(x,y)", "E)None"], "answer": "D", "prediction": "None"}
{"question": "Three bells ring at intervals of 36 seconds, 40 seconds and 48 seconds, respectively. They start ringing together at a particular time. When they will ring together again?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Three bells ring at intervals of 36 seconds, 40 seconds and 48 seconds, respectively. They start ringing together at a particular time. When they will ring together again?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    bell1 = 36\n    bell2 = 40\n    bell3 = 48\n    time = 0\n    while True:\n        if time % bell1 == 0 and time % bell2 == 0 and time % bell3 == 0:\n            return time\n        time += 1\nans = solver()", "generated_prediction": "None", "options": ["A)After 6 minutes", "B)After 12 minutes", "C)After 18 minutes", "D)After 24 minutes", "E)none"], "answer": "B", "prediction": "None"}
{"question": "An electric pole, 14 metres high, casts a shadow of 10 metres. Find the height of a tree that casts a shadow of 15 metres under similar conditions.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: An electric pole, 14 metres high, casts a shadow of 10 metres. Find the height of a tree that casts a shadow of 15 metres under similar conditions.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The height of the electric pole\n    height_of_electric_pole = 14\n    # 2. The length of the shadow of the electric pole\n    length_of_shadow_of_electric_pole = 10\n    # 3. The length of the shadow of the tree\n    length_of_shadow_of_tree = 15\n    # 4. The height of the tree\n    height_of_tree = 0\n    # Secondly, we need to calculate the height of the tree\n    height_of_tree = height_of_electric_pole * length_of_shadow_of_tree / length_of_shadow_of_electric_pole\n    return height_of_tree\nans = solver()", "generated_prediction": "21.0", "options": ["A)21", "B)22", "C)20", "D)23", "E)24"], "answer": "A", "prediction": "A"}
{"question": "At my favorite fruit stand, an orange costs 18 dollars, a pineapple costs 27 dollars, and a grape costs 15 dollars. Using the same logic, can you tell how much a mango costs?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: At my favorite fruit stand, an orange costs 18 dollars, a pineapple costs 27 dollars, and a grape costs 15 dollars. Using the same logic, can you tell how much a mango costs?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    orange = 18\n    pineapple = 27\n    grape = 15\n    mango = 0\n    # Secondly, we need to find the relationship between the price of mango and the price of other fruits.\n    # We can find that the price of mango is the average of the price of orange and pineapple.\n    mango = (orange + pineapple) / 2\n    return mango\nans = solver()", "generated_prediction": "22.5", "options": ["A)22 dollars", "B)15 dollars", "C)20 dollars", "D)18 dollars", "E)10 dollars"], "answer": "B", "prediction": "A"}
{"question": "In the coordinate plane, a triangle has vertices at (a,0), (b,0), and (x,y). If a>x>b>0>y, which of the following represents the area of that triangle?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In the coordinate plane, a triangle has vertices at (a,0), (b,0), and (x,y). If a>x>b>0>y, which of the following represents the area of that triangle?\n# Options: /2, /2, /2, /x, /2y\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 0\n    b = 0\n    x = 0\n    y = 0\n    area = 0\n    # Secondly, we need to define the following conditions:\n    if a > x > b > 0 > y:\n        area = (a*y + b*y + x*y)/2\n    else:\n        print(\"The condition is not satisfied.\")\n    return area\nans = solver()", "generated_prediction": "None", "options": ["A)(ay\u2212by)/2", "B)(ab\u2212ay)/2", "C)(by\u2212ay)/2", "D)(ay+by)/x", "E)(a\u2212b)/2y"], "answer": "C", "prediction": "None"}
{"question": "A car finishes a journey in 20 hours at the speed of 60 km/hr. If the same distance is to be covered in 10 hours, how much speed does the car gain?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A car finishes a journey in 20 hours at the speed of 60 km/hr. If the same distance is to be covered in 10 hours, how much speed does the car gain?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The distance of the journey\n    distance = 0\n    # 2. The time of the journey\n    time = 0\n    # 3. The speed of the car\n    speed = 0\n    # 4. The speed gain of the car\n    speed_gain = 0\n    # Secondly, we need to calculate the speed of the car\n    speed = distance / time\n    # Thirdly, we need to calculate the speed gain of the car\n    speed_gain = speed * 2\n    return speed_gain\nans = solver()", "generated_prediction": "None", "options": ["A)80 kmph", "B)50 kmph", "C)120 kmph", "D)70 kmph", "E)80 kmph"], "answer": "C", "prediction": "None"}
{"question": "Three friends Alan, Roger and Peter attempt to answer a question on an exam. Alan randomly guesses the answer, giving him a 1/5 probability of guessing correctly. Roger cheats by looking at the paper of the student in front of him, giving him a 2/3 probability of answering correctly. And Peter dutifully performs the calculations, then marks the answer, giving him a 5/6 probability of a correct answer. What is the probability that the question is answered correctly, but not via cheating?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Three friends Alan, Roger and Peter attempt to answer a question on an exam. Alan randomly guesses the answer, giving him a 1/5 probability of guessing correctly. Roger cheats by looking at the paper of the student in front of him, giving him a 2/3 probability of answering correctly. And Peter dutifully performs the calculations, then marks the answer, giving him a 5/6 probability of a correct answer. What is the probability that the question is answered correctly, but not via cheating?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. Alan's probability of guessing correctly\n    p_alan = 1/5\n    # 2. Roger's probability of answering correctly\n    p_roger = 2/3\n    # 3. Peter's probability of a correct answer\n    p_peter = 5/6\n    # 4. The probability that the question is answered correctly, but not via cheating\n    p_correct = 0\n    # 5. The probability that the question is answered correctly\n    p_correct_answer = p_alan + p_roger + p_peter\n    # 6. The probability that the question is answered correctly via cheating\n    p_cheating = p_roger + p_peter\n    # 7. The probability that the question is answered correctly, but not via cheating\n    p_correct = p_correct_answer - p_cheating\n    return p_correct\nans = solver()", "generated_prediction": "0.20000000000000018", "options": ["A)1/18", "B)1/9", "C)23/90", "D)5/18", "E)13/45"], "answer": "A", "prediction": "A"}
{"question": "The difference between simple interest and C.I. at the same rate for Rs.5000 for 2 years in Rs.72. The rate of interest is?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The difference between simple interest and C.I. at the same rate for Rs.5000 for 2 years in Rs.72. The rate of interest is?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The amount of money\n    money = 5000\n    # 2. The time of interest\n    time = 2\n    # 3. The rate of interest\n    rate = 0\n    # 4. The difference between simple interest and C.I.\n    difference = 72\n    # 5. The simple interest\n    simple_interest = 0\n    # 6. The compound interest\n    compound_interest = 0\n    # Secondly, we need to calculate the rate of interest\n    for i in range(1, 101):\n        rate = i / 100\n        simple_interest = money * rate * time\n        compound_interest = money * (1 + rate) ** time\n        if compound_interest - simple_interest == difference:\n            return rate\n    return -1\nans = solver()", "generated_prediction": "-1.0", "options": ["A)10%", "B)12%", "C)6%", "D)8%", "E)4%"], "answer": "B", "prediction": "E"}
{"question": "All 250 files on Sam's hard drive are infected by either a virus or a worm or both. The number of files that are infected only by a worm is 2.5 times the number of files that are infected by both a virus and a worm. If 50% of the files were not infected by a virus, how many of Sam's files were NOT infected by a worm?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: All 250 files on Sam's hard drive are infected by either a virus or a worm or both. The number of files that are infected only by a worm is 2.5 times the number of files that are infected by both a virus and a worm. If 50% of the files were not infected by a virus, how many of Sam's files were NOT infected by a worm?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of files that are infected by both a virus and a worm\n    # 2. The number of files that are infected only by a worm\n    # 3. The number of files that are NOT infected by a virus\n    # 4. The number of files that are NOT infected by a worm\n    # 5. The total number of files\n    infected_by_both = 0\n    infected_by_worm = 0\n    not_infected_by_virus = 0\n    not_infected_by_worm = 0\n    total_number = 0\n    # Secondly, we need to define the following equation:\n    # 1. The number of files that are infected only by a worm is 2.5 times the number of files that are infected by both a virus and a worm\n    # 2. 50% of the files were not infected by a virus\n    # 3. The total number of files is 250\n    infected_by_worm = 2.5 * infected_by_both\n    not_infected_by_virus = 0.5 * total_number\n    total_number = 250\n    # Thirdly, we need to define the following equation:\n    # 1. The number of files that are NOT infected by a worm is the total number of files minus the number of files that are infected by both a virus and a worm and the number of files that are infected only by a worm\n    not_infected_by_worm = total_number - infected_by_both - infected_by_worm\n    return not_infected_by_worm\nans = solver()", "generated_prediction": "250.0", "options": ["A)50", "B)70", "C)75", "D)100", "E)125"], "answer": "C", "prediction": "D"}
{"question": "A father wants to divide Rs. 5100 between his two sons, Mohan and Sohan who are 23 and 24 at present. He divides the amount in such a way that if their shares are invested at compound interest at 4% p.a. they will receive equal amount on attaining the age of 26 years. Find Mohan's share.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A father wants to divide Rs. 5100 between his two sons, Mohan and Sohan who are 23 and 24 at present. He divides the amount in such a way that if their shares are invested at compound interest at 4% p.a. they will receive equal amount on attaining the age of 26 years. Find Mohan's share.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # Mohan's share: x\n    # Sohan's share: y\n    # Mohan's age: a\n    # Sohan's age: b\n    # Mohan's share at age 26: x1\n    # Sohan's share at age 26: y1\n    x = 0\n    y = 0\n    a = 23\n    b = 24\n    x1 = 0\n    y1 = 0\n    # Secondly, we need to define the equation:\n    # x + y = 5100\n    # x1 = y1\n    # x1 = x * (1 + 0.04)^(26 - a)\n    # y1 = y * (1 + 0.04)^(26 - b)\n    # Thirdly, we need to solve the equation:\n    for x in range(0, 5100):\n        y = 5100 - x\n        x1 = x * (1 + 0.04)**(26 - a)\n        y1 = y * (1 + 0.04)**(26 - b)\n        if x1 == y1:\n            break\n    return x\nans = solver()", "generated_prediction": "2500.0", "options": ["A)2400", "B)2500", "C)2600", "D)2700", "E)None of these"], "answer": "B", "prediction": "B"}
{"question": "What is 60% of 30% of 1400 grams?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: What is 60% of 30% of 1400 grams?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 60% of 30% of 1400 grams\n    a = 60\n    b = 30\n    c = 1400\n    d = a * b * c\n    e = d / 100\n    f = e / 100\n    return f\nans = solver()", "generated_prediction": "252.0", "options": ["A)450 gms", "B)100 gms", "C)252 gms", "D)240 gms", "E)None of these"], "answer": "C", "prediction": "C"}
{"question": "A certain liquid passes through a drain at a rate of w/25 gallons every x seconds. At that rate, how many minutes will it take y gallons to pass through the drain?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A certain liquid passes through a drain at a rate of w/25 gallons every x seconds. At that rate, how many minutes will it take y gallons to pass through the drain?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    w = 25\n    x = 1\n    y = 100\n    # Secondly, we need to calculate the rate of the liquid passing through the drain\n    rate = w/x\n    # Thirdly, we need to calculate the time it takes for y gallons to pass through the drain\n    time = y/rate\n    # Finally, we need to convert the time from seconds to minutes\n    time_min = time/60\n    return time_min\nans = solver()", "generated_prediction": "0.06666666666666667", "options": ["A)y/(1200xy)", "B)20xy/w", "C)5xy/(12w)", "D)w/(3xy)", "E)3y/(wx)"], "answer": "C", "prediction": "A"}
{"question": "A coin made of alloy of aluminum and silver measures 2 x 15 mm (it is 2 mm thick and its diameter is 15 mm). If the weight of the coin is 30 grams and the volume of aluminum in the alloy equals that of silver, what will be the weight of a coin measuring 1 x 30 mm made of pure aluminum if silver is twice as heavy as aluminum?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A coin made of alloy of aluminum and silver measures 2 x 15 mm (it is 2 mm thick and its diameter is 15 mm). If the weight of the coin is 30 grams and the volume of aluminum in the alloy equals that of silver, what will be the weight of a coin measuring 1 x 30 mm made of pure aluminum if silver is twice as heavy as aluminum?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The weight of the coin is 30 grams\n    weight_coin = 30\n    # 2. The volume of aluminum in the alloy equals that of silver\n    volume_aluminum = 1\n    volume_silver = 1\n    # 3. The diameter of the coin is 15 mm\n    diameter_coin = 15\n    # 4. The thickness of the coin is 2 mm\n    thickness_coin = 2\n    # 5. The diameter of the coin is 30 mm\n    diameter_coin_new = 30\n    # 6. The thickness of the coin is 1 mm\n    thickness_coin_new = 1\n    # 7. The weight of aluminum is 1\n    weight_aluminum = 1\n    # 8. The weight of silver is 2\n    weight_silver = 2\n    # 9. The weight of the coin is 30 grams\n    weight_coin_new = 30\n    # 10. The volume of aluminum in the alloy equals that of silver\n    volume_aluminum_new = 1\n    volume_silver_new = 1\n    # 11. The diameter of the coin is 15 mm\n    diameter_coin_new = 15\n    # 12. The thickness of the coin is 2 mm\n    thickness_coin_new = 2\n    # 13. The diameter of the coin is 30 mm\n    diameter_coin_new = 30\n    # 14. The thickness of the coin is 1 mm\n    thickness_coin_new = 1\n    # 15. The weight of aluminum is 1\n    weight_aluminum_new = 1\n    # 16. The weight of silver is 2\n    weight_silver_new = 2\n    # 17. The weight of the coin is 30 grams\n    weight_coin_new = 30\n    # 18. The volume of aluminum in the alloy equals that of silver\n    volume_aluminum_new = 1\n    volume_silver_new = 1\n    # 19. The diameter of the coin is 15 mm\n    diameter_coin_new = 15\n    # 20. The thickness of the coin is 2 mm\n    thickness_coin_new = 2\n    # 21. The diameter of the coin is 30 mm\n    diameter_coin_new =\nans = solver()", "generated_prediction": "None", "options": ["A)36 grams", "B)40 grams", "C)42 grams", "D)48 grams", "E)50 grams"], "answer": "B", "prediction": "None"}
{"question": "If 10 is subtracted from 2/3 of a number the result is equal to sum of 40 and 1/3 of the number. Find the number", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If 10 is subtracted from 2/3 of a number the result is equal to sum of 40 and 1/3 of the number. Find the number\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number we want to find\n    # 2. The result of 2/3 of the number\n    # 3. The result of 1/3 of the number\n    # 4. The result of sum of 40 and 1/3 of the number\n    # 5. The result of 10 is subtracted from 2/3 of a number\n    number = 0\n    two_third_number = 0\n    one_third_number = 0\n    sum_of_40_and_one_third_number = 0\n    ten_subtracted_from_two_third_number = 0\n    # Secondly, we need to find the number by using for loop\n    for number in range(1, 100):\n        two_third_number = 2/3 * number\n        one_third_number = 1/3 * number\n        sum_of_40_and_one_third_number = 40 + one_third_number\n        ten_subtracted_from_two_third_number = two_third_number - 10\n        if ten_subtracted_from_two_third_number == sum_of_40_and_one_third_number:\n            return number\nans = solver()", "generated_prediction": "None", "options": ["A)100", "B)160", "C)150", "D)210", "E)220"], "answer": "C", "prediction": "None"}
{"question": "What is the largest integral value of 'k' for which the quadratic equation x2 - 5x + k = 0 will have two real and distinct roots?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: What is the largest integral value of 'k' for which the quadratic equation x2 - 5x + k = 0 will have two real and distinct roots?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 1\n    b = -5\n    c = k\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"The quadratic equation x2 - 5x + k = 0 will have no real roots.\")\n    elif delta == 0:\n        print(\"The quadratic equation x2 - 5x + k = 0 will have one real root.\")\n    else:\n        print(\"The quadratic equation x2 - 5x + k = 0 will have two real roots.\")\n    return delta\nans = solver()", "generated_prediction": "None", "options": ["A)9", "B)7", "C)3", "D)8", "E)12"], "answer": "C", "prediction": "None"}
{"question": "900 + 5 \u00d7 12 = ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: 900 + 5 \u00d7 12 = ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 900\n    b = 5\n    c = 12\n    d = a + b * c\n    return d\nans = solver()", "generated_prediction": "960.0", "options": ["A)820", "B)202", "C)420", "D)209", "E)960"], "answer": "E", "prediction": "E"}
{"question": "Shweta rides at the rate of 10 km per hour but stops for 10 minutes to take rest at the end of every 15 km. How many hours will she take to cover 100 km", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Shweta rides at the rate of 10 km per hour but stops for 10 minutes to take rest at the end of every 15 km. How many hours will she take to cover 100 km\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The distance that Shweta rides per hour\n    distance_per_hour = 10\n    # 2. The distance that Shweta rides per minute\n    distance_per_minute = distance_per_hour / 60\n    # 3. The distance that Shweta rides per second\n    distance_per_second = distance_per_minute / 60\n    # 4. The distance that Shweta rides per 15 km\n    distance_per_15_km = 15\n    # 5. The time that Shweta takes to rest\n    time_to_rest = 10\n    # 6. The distance that Shweta rides per 15 km\n    distance_to_ride = 100\n    # 7. The time that Shweta takes to cover 100 km\n    time_to_ride = 0\n    # 8. The distance that Shweta has ridden\n    distance_ridden = 0\n    # 9. The time that Shweta has rested\n    time_rested = 0\n    # 10. The time that Shweta has ridden\n    time_ridden = 0\n    # 11. The time that Shweta has taken to cover 100 km\n    time_taken = 0\n    # Secondly, we need to calculate the time that Shweta takes to cover 100 km\n    while distance_ridden < distance_to_ride:\n        time_to_ride = time_to_ride + 1\n        distance_ridden = distance_ridden + distance_per_second\n        if distance_ridden >= distance_per_15_km:\n            time_rested = time_rested + time_to_rest\n            distance_ridden = distance_ridden - distance_per_15_km\n    time_ridden = time_to_ride - time_rested\n    time_taken = time_to_ride\n    return time_taken\nans = solver()", "generated_prediction": "None", "options": ["A)9 hours.", "B)10 hours.", "C)11 hours.", "D)12 hours.", "E)13 hours."], "answer": "C", "prediction": "None"}
{"question": "Mr.Sam takes 17 hours to go by train to a certain city and return by car. He loses 4 hours if he goes both ways by train. How long would he have taken if he had traveled by car in both ways?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Mr.Sam takes 17 hours to go by train to a certain city and return by car. He loses 4 hours if he goes both ways by train. How long would he have taken if he had traveled by car in both ways?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The time Mr.Sam takes to go by train to a certain city and return by car.\n    time_train_car = 17\n    # 2. The time Mr.Sam loses if he goes both ways by train.\n    time_train_train = 4\n    # 3. The time Mr.Sam takes if he had traveled by car in both ways.\n    time_car_car = 0\n    # Secondly, we need to calculate the time Mr.Sam takes if he had traveled by car in both ways.\n    time_car_car = time_train_car - time_train_train\n    return time_car_car\nans = solver()", "generated_prediction": "13.0", "options": ["A)22 hrs", "B)18 hrs", "C)16 hrs", "D)20 hrs", "E)13 hrs"], "answer": "E", "prediction": "E"}
{"question": "Jim filled his dog's bowl with dog food. Starting at 8:00 am, Jim's dog ate exactly once an hour, consuming exactly 1/3 of the dog food remaining in the bowl at each feeding session. Approximately, what percent of the original food was in the dog's bowl right before the dog began to eat at noon of the same day?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Jim filled his dog's bowl with dog food. Starting at 8:00 am, Jim's dog ate exactly once an hour, consuming exactly 1/3 of the dog food remaining in the bowl at each feeding session. Approximately, what percent of the original food was in the dog's bowl right before the dog began to eat at noon of the same day?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The original food in the dog's bowl\n    original_food = 1\n    # 2. The food in the dog's bowl at each feeding session\n    food_in_bowl = original_food\n    # 3. The time of each feeding session\n    time = 8\n    # 4. The food in the dog's bowl right before the dog began to eat at noon of the same day\n    food_in_bowl_at_noon = 0\n    # 5. The percent of the original food was in the dog's bowl right before the dog began to eat at noon of the same day\n    percent = 0\n    # Secondly, we need to use for loop to calculate the food in the dog's bowl at each feeding session\n    for i in range(1, 5):\n        food_in_bowl = food_in_bowl - food_in_bowl / 3\n        time = time + 1\n        if time == 12:\n            food_in_bowl_at_noon = food_in_bowl\n    # Thirdly, we need to calculate the percent of the original food was in the dog's bowl right before the dog began to eat at noon of the same day\n    percent = food_in_bowl_at_noon / original_food * 100\n    return percent\nans = solver()", "generated_prediction": "19.753086419753092", "options": ["A)20%", "B)25%", "C)30%", "D)35%", "E)40%"], "answer": "A", "prediction": "A"}
{"question": "John conducted a survey about car color. 60% of the people who took the survey were women. Of the men who were surveyed, 75% preferred red cars over green cars. If 10 men liked green cars more than red, how many people took the survey?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: John conducted a survey about car color. 60% of the people who took the survey were women. Of the men who were surveyed, 75% preferred red cars over green cars. If 10 men liked green cars more than red, how many people took the survey?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The total number of people who took the survey\n    total_people = 0\n    # 2. The number of women who took the survey\n    women_number = 0\n    # 3. The number of men who took the survey\n    men_number = 0\n    # 4. The number of men who preferred red cars over green cars\n    red_cars_number = 0\n    # 5. The number of men who preferred green cars over red cars\n    green_cars_number = 0\n    # 6. The number of men who preferred red cars over green cars\n    red_cars_number = 0\n    # 7. The number of men who preferred green cars over red cars\n    green_cars_number = 0\n    # 8. The number of men who preferred red cars over green cars\n    red_cars_number = 0\n    # 9. The number of men who preferred green cars over red cars\n    green_cars_number = 0\n    # 10. The number of men who preferred red cars over green cars\n    red_cars_number = 0\n    # 11. The number of men who preferred green cars over red cars\n    green_cars_number = 0\n    # 12. The number of men who preferred red cars over green cars\n    red_cars_number = 0\n    # 13. The number of men who preferred green cars over red cars\n    green_cars_number = 0\n    # 14. The number of men who preferred red cars over green cars\n    red_cars_number = 0\n    # 15. The number of men who preferred green cars over red cars\n    green_cars_number = 0\n    # 16. The number of men who preferred red cars over green cars\n    red_cars_number = 0\n    # 17. The number of men who preferred green cars over red cars\n    green_cars_number = 0\n    # 18. The number of men who preferred red cars over green cars\n    red_cars_number = 0\n    # 19. The number of men who preferred green cars over red cars\n    green_cars_number = 0\n    # 20. The number of men who preferred red cars over green cars\n    red\nans = solver()", "generated_prediction": "None", "options": ["A)100", "B)120", "C)50", "D)200", "E)80"], "answer": "A", "prediction": "None"}
{"question": "How many ways A boy can reach the top of stairs which contain 10 steps, when he can take either one or two steps every time?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: How many ways A boy can reach the top of stairs which contain 10 steps, when he can take either one or two steps every time?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of steps\n    n = 10\n    # 2. The number of ways\n    ways = 0\n    # 3. The number of steps taken every time\n    step = 1\n    # 4. The number of steps taken every time\n    step = 2\n    # 5. The number of steps taken every time\n    step = 3\n    # 6. The number of steps taken every time\n    step = 4\n    # 7. The number of steps taken every time\n    step = 5\n    # 8. The number of steps taken every time\n    step = 6\n    # 9. The number of steps taken every time\n    step = 7\n    # 10. The number of steps taken every time\n    step = 8\n    # 11. The number of steps taken every time\n    step = 9\n    # 12. The number of steps taken every time\n    step = 10\n    # 13. The number of steps taken every time\n    step = 11\n    # 14. The number of steps taken every time\n    step = 12\n    # 15. The number of steps taken every time\n    step = 13\n    # 16. The number of steps taken every time\n    step = 14\n    # 17. The number of steps taken every time\n    step = 15\n    # 18. The number of steps taken every time\n    step = 16\n    # 19. The number of steps taken every time\n    step = 17\n    # 20. The number of steps taken every time\n    step = 18\n    # 21. The number of steps taken every time\n    step = 19\n    # 22. The number of steps taken every time\n    step = 20\n    # 23. The number of steps taken every time\n    step = 21\n    # 24. The number of steps taken every time\n    step = 22\n    # 25. The number of steps taken every time\n    step = 23\n    # 26. The number of steps taken every time\n    step = 24\n    # 27. The number of steps taken every time\n    step = 25\n    # 28. The number of steps taken every time\n    step = 26\n    # 29. The number of steps taken\nans = solver()", "generated_prediction": "None", "options": ["A)88", "B)89", "C)90", "D)91", "E)92"], "answer": "B", "prediction": "None"}
{"question": "IF one gallon of soft drink is made of 40% orange juice and 60% water, how many additional gallons of orange juice must be mixed in order to make the orange juice 60% of the soft drink?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: IF one gallon of soft drink is made of 40% orange juice and 60% water, how many additional gallons of orange juice must be mixed in order to make the orange juice 60% of the soft drink?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. x: the number of additional gallons of orange juice\n    # 2. y: the number of gallons of soft drink\n    x = 0\n    y = 0\n    # Secondly, we need to define the following equation:\n    # 1. 0.4 * y + x = 0.6 * (y + x)\n    # 2. 0.4 * y + x = 0.6y + 0.6x\n    # 3. 0.4y - 0.6y = 0.6x - x\n    # 4. -0.2y = 0.6x - x\n    # 5. -0.2y = 0.5x\n    # 6. y = -2.5x\n    # 7. y = -2.5 * x\n    # 8. y = -2.5 * x\n    # 9. y = -2.5 * x\n    # 10. y = -2.5 * x\n    # 11. y = -2.5 * x\n    # 12. y = -2.5 * x\n    # 13. y = -2.5 * x\n    # 14. y = -2.5 * x\n    # 15. y = -2.5 * x\n    # 16. y = -2.5 * x\n    # 17. y = -2.5 * x\n    # 18. y = -2.5 * x\n    # 19. y = -2.5 * x\n    # 20. y = -2.5 * x\n    # 21. y = -2.5 * x\n    # 22. y = -2.5 * x\n    # 23. y = -2.5 * x\n    # 24. y = -2.5 * x\n    # 25. y = -2.5 * x\n    # 26. y = -2.5 * x\n    # 27. y = -2.5 * x\n    # 28. y = -2.5 * x\n    # 29. y = -2.5 * x\n    # 30. y = -2.5 * x\n    # 31. y =\nans = solver()", "generated_prediction": "None", "options": ["A)0.5", "B)1", "C)1.25", "D)1.5", "E)2"], "answer": "A", "prediction": "None"}
{"question": "What is the units digit of 9^3-7?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: What is the units digit of 9^3-7?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 9\n    b = 3\n    c = 7\n    d = a**b-c\n    e = d%10\n    return e\nans = solver()", "generated_prediction": "2.0", "options": ["A)1", "B)3", "C)5", "D)2", "E)4"], "answer": "D", "prediction": "D"}
{"question": "5 horses are in a race. Mr.Jain selects two of horses at random and bets on them. The probability that he selected the winning horse is", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: 5 horses are in a race. Mr.Jain selects two of horses at random and bets on them. The probability that he selected the winning horse is\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of horses in the race\n    n = 5\n    # 2. The number of horses that Mr.Jain selected\n    k = 2\n    # 3. The number of horses that Mr.Jain selected and won the race\n    x = 1\n    # 4. The probability that Mr.Jain selected the winning horse\n    p = 0\n    # 5. The number of horses that Mr.Jain selected and lost the race\n    y = k - x\n    # 6. The number of horses that Mr.Jain didn't select and won the race\n    z = n - k\n    # 7. The number of horses that Mr.Jain didn't select and lost the race\n    w = n - z\n    # 8. The number of horses that Mr.Jain selected and won the race\n    a = math.factorial(k) / (math.factorial(x) * math.factorial(y))\n    # 9. The number of horses that Mr.Jain didn't select and won the race\n    b = math.factorial(z) / (math.factorial(x) * math.factorial(z - x))\n    # 10. The number of horses that Mr.Jain selected and lost the race\n    c = math.factorial(k) / (math.factorial(y) * math.factorial(x))\n    # 11. The number of horses that Mr.Jain didn't select and lost the race\n    d = math.factorial(w) / (math.factorial(y) * math.factorial(w - y))\n    # 12. The number of horses that Mr.Jain selected\n    e = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n    # 13. The number of horses that Mr.Jain didn't select\n    f = math.factorial(n) / (math.factorial(n - k) * math.factorial(k))\n    # 14. The number of horses that won the race\n    g = math.factorial(n) / (math.\nans = solver()", "generated_prediction": "None", "options": ["A)1/5", "B)2/5", "C)3/5", "D)4/5", "E)6/5"], "answer": "B", "prediction": "None"}
{"question": "On dividing 2272 and 875 by a 3-digit number N, we get the same remainder. The sum of the digits of N is:", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: On dividing 2272 and 875 by a 3-digit number N, we get the same remainder. The sum of the digits of N is:\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 2272, 875, and the sum of the digits of N\n    a = 2272\n    b = 875\n    sum_of_digits = 0\n    # Secondly, we need to find the remainder of 2272 and 875 by a 3-digit number N\n    for i in range(100, 1000):\n        if a % i == b % i:\n            sum_of_digits = sum(map(int, str(i)))\n            break\n    return sum_of_digits\nans = solver()", "generated_prediction": "10.0", "options": ["A)10", "B)11", "C)12", "D)13", "E)14"], "answer": "A", "prediction": "A"}
{"question": "On a test the passing students had an average of 83, while the failing students had an average\nof 55. If the overall class average was 76, what percent of the class passed?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: On a test the passing students had an average of 83, while the failing students had an average\nof 55. If the overall class average was 76, what percent of the class passed?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    pass_avg = 83\n    fail_avg = 55\n    class_avg = 76\n    pass_num = 0\n    fail_num = 0\n    class_num = 0\n    pass_percent = 0\n    fail_percent = 0\n    class_percent = 0\n    pass_percent = pass_avg * pass_num\n    fail_percent = fail_avg * fail_num\n    class_percent = class_avg * class_num\n    pass_num = (class_avg * class_num - fail_avg * fail_num) / (pass_avg - fail_avg)\n    fail_num = class_num - pass_num\n    pass_percent = pass_num / class_num\n    return pass_percent\nans = solver()", "generated_prediction": "None", "options": ["A)44%", "B)66%", "C)68%", "D)72%", "E)75%"], "answer": "E", "prediction": "None"}
{"question": "The average wages of a worker during a fortnight comprising of 15 consecutive working days was $90 per day. During the first 7 days, his average wage was $87 per day and the average wage during the last 7 days was $92 per day. What was his wage on the 8th day?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The average wages of a worker during a fortnight comprising of 15 consecutive working days was $90 per day. During the first 7 days, his average wage was $87 per day and the average wage during the last 7 days was $92 per day. What was his wage on the 8th day?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The average wages of a worker during a fortnight comprising of 15 consecutive working days was $90 per day.\n    average_wages = 90\n    # 2. During the first 7 days, his average wage was $87 per day\n    average_wages_first_7_days = 87\n    # 3. The average wage during the last 7 days was $92 per day.\n    average_wages_last_7_days = 92\n    # 4. What was his wage on the 8th day?\n    wage_on_8th_day = 0\n    # 5. The total wages of the worker during the first 7 days\n    total_wages_first_7_days = average_wages_first_7_days * 7\n    # 6. The total wages of the worker during the last 7 days\n    total_wages_last_7_days = average_wages_last_7_days * 7\n    # 7. The total wages of the worker during the 15 days\n    total_wages_15_days = average_wages * 15\n    # 8. The total wages of the worker during the first 7 days and the last 7 days\n    total_wages_first_7_days_and_last_7_days = total_wages_first_7_days + total_wages_last_7_days\n    # 9. The total wages of the worker during the first 7 days and the last 7 days and the 8th day\n    total_wages_first_7_days_and_last_7_days_and_8th_day = total_wages_first_7_days_and_last_7_days + wage_on_8th_day\n    # 10. The total wages of the worker during the first 7 days and the last 7 days and the 8th day and the 9th day\n    total_wages_first_7_days_and_last_7_days_and_8th_day_and_9th_day = total_wages_first_7_days_and_last_7_days_and_8th_day + wage_on\nans = solver()", "generated_prediction": "None", "options": ["A)$83", "B)$92", "C)$90", "D)$97", "E)$104"], "answer": "D", "prediction": "None"}
{"question": "Two numbers are in the ratio 3:5. If 9 is subtracted from each, the new numbers are in the ratio 12:23. The smaller number is?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Two numbers are in the ratio 3:5. If 9 is subtracted from each, the new numbers are in the ratio 12:23. The smaller number is?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    o = 0\n    p = 0\n    q = 0\n    r = 0\n    s = 0\n    t = 0\n    u = 0\n    v = 0\n    w = 0\n    x = 0\n    y = 0\n    z = 0\n    aa = 0\n    bb = 0\n    cc = 0\n    dd = 0\n    ee = 0\n    ff = 0\n    gg = 0\n    hh = 0\n    ii = 0\n    jj = 0\n    kk = 0\n    ll = 0\n    mm = 0\n    nn = 0\n    oo = 0\n    pp = 0\n    qq = 0\n    rr = 0\n    ss = 0\n    tt = 0\n    uu = 0\n    vv = 0\n    ww = 0\n    xx = 0\n    yy = 0\n    zz = 0\n    aaa = 0\n    bbb = 0\n    ccc = 0\n    ddd = 0\n    eee = 0\n    fff = 0\n    ggg = 0\n    hhh = 0\n    iii = 0\n    jjj = 0\n    kkk = 0\n    lll = 0\n    mmm = 0\n    nnn = 0\n    ooo = 0\n    ppp = 0\n    qqq = 0\n    rrr = 0\n    sss = 0\n    ttt = 0\n    uuu = 0\n    vvv = 0\n    www = 0\n    xxx = 0\n    yyy = 0\n    zzz = 0\n    aaaa = 0\n    bbbb = 0\n    cccc = 0\n    dddd = 0\n    eeee = 0\n    ffff = 0\n    gggg = 0\nans = solver()", "generated_prediction": "None", "options": ["A)21", "B)33", "C)35", "D)42", "E)58"], "answer": "B", "prediction": "None"}
{"question": "If 6 yrs are subtracted from the present age of Ajay and the remainder is divided by 18, then the present age of Rahul is obtained. If Rahul is 2 yrs younger to Denis whose age is 5 yrs, then what is Ajay's present age?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If 6 yrs are subtracted from the present age of Ajay and the remainder is divided by 18, then the present age of Rahul is obtained. If Rahul is 2 yrs younger to Denis whose age is 5 yrs, then what is Ajay's present age?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    Ajay_age = 0\n    Rahul_age = 0\n    Denis_age = 0\n    Ajay_age_after_6_yrs = 0\n    Rahul_age_after_6_yrs = 0\n    Denis_age_after_6_yrs = 0\n    Ajay_age_after_6_yrs_divided_by_18 = 0\n    Rahul_age_after_6_yrs_divided_by_18 = 0\n    Denis_age_after_6_yrs_divided_by_18 = 0\n    Ajay_age_after_6_yrs_divided_by_18_remainder = 0\n    Rahul_age_after_6_yrs_divided_by_18_remainder = 0\n    Denis_age_after_6_yrs_divided_by_18_remainder = 0\n    Ajay_age_after_6_yrs_divided_by_18_remainder_subtracted_from_Rahul_age = 0\n    Rahul_age_after_6_yrs_divided_by_18_remainder_subtracted_from_Denis_age = 0\n    Denis_age_after_6_yrs_divided_by_18_remainder_subtracted_from_Ajay_age = 0\n    Ajay_age_after_6_yrs_divided_by_18_remainder_subtracted_from_Rahul_age_subtracted_from_Denis_age = 0\n    Rahul_age_after_6_yrs_divided_by_18_remainder_subtracted_from_Denis_age_subtracted_from_Ajay_age = 0\n    Denis_age_after_6_yrs_divided_by_18_remainder_subtracted_from_Ajay_age_subtracted_from_Rahul_age = 0\n    Ajay_age_after_6_yrs_divided_by_18_remainder_subtracted_from_Rahul_age_subtracted_\nans = solver()", "generated_prediction": "None", "options": ["A)40", "B)60", "C)70", "D)80", "E)90"], "answer": "B", "prediction": "None"}
{"question": "Anna has 4 books. If she decide to arrange the 4 books in every possible combination and moved just one book every minute, how long would it taken by her ?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Anna has 4 books. If she decide to arrange the 4 books in every possible combination and moved just one book every minute, how long would it taken by her ?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of books\n    num_books = 4\n    # 2. The number of possible combinations\n    num_combinations = math.factorial(num_books)\n    # 3. The number of minutes\n    num_minutes = num_combinations\n    return num_minutes\nans = solver()", "generated_prediction": "24.0", "options": ["A)22 minutes", "B)30 minutes", "C)15 minutes", "D)24 minutes", "E)35 minutes"], "answer": "D", "prediction": "D"}
{"question": "The manufacturer of tyres is offering a 20% discount on the price of its tubeless tyres. Some retailers are offering additional discounts. If a retailer offers an additional 20% discount, then what is the total discount available at that retailer?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The manufacturer of tyres is offering a 20% discount on the price of its tubeless tyres. Some retailers are offering additional discounts. If a retailer offers an additional 20% discount, then what is the total discount available at that retailer?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    manufacturer_discount = 0.2\n    retailer_discount = 0.2\n    total_discount = 0\n    # Secondly, we need to calculate the total discount\n    total_discount = manufacturer_discount + retailer_discount\n    return total_discount\nans = solver()", "generated_prediction": "0.4", "options": ["A)10%", "B)25%", "C)28%", "D)30%", "E)36%"], "answer": "E", "prediction": "B"}
{"question": "A rectangular parking space is marked out by painting three of its sides. If the length of the unpainted side is 9 feet, and the sum of the lengths of the painted sides is 37 feet, then what is the area of the parking space in square feet?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A rectangular parking space is marked out by painting three of its sides. If the length of the unpainted side is 9 feet, and the sum of the lengths of the painted sides is 37 feet, then what is the area of the parking space in square feet?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. the length of the unpainted side is 9 feet\n    unpainted_side = 9\n    # 2. the sum of the lengths of the painted sides is 37 feet\n    painted_side = 37\n    # 3. the area of the parking space in square feet\n    area = 0\n    # Secondly, we need to calculate the area of the parking space in square feet\n    # 1. we need to calculate the length of the painted side\n    painted_side_length = painted_side / 2\n    # 2. we need to calculate the length of the painted side\n    painted_side_width = painted_side / 2\n    # 3. we need to calculate the area of the parking space in square feet\n    area = unpainted_side * painted_side_length * painted_side_width\n    return area\nans = solver()", "generated_prediction": "3080.25", "options": ["A)46", "B)81", "C)126", "D)252", "E)None"], "answer": "C", "prediction": "E"}
{"question": "Peter wants to find 10 additional people to form a scavenger hunt team with him. If he has 10 friends who would like to participate, how many choices does he have for forming his team?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Peter wants to find 10 additional people to form a scavenger hunt team with him. If he has 10 friends who would like to participate, how many choices does he have for forming his team?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of people who would like to participate\n    n = 10\n    # 2. The number of people who Peter wants to find\n    k = 10\n    # 3. The number of choices\n    choices = 0\n    # Secondly, we need to calculate the number of choices\n    for i in range(n):\n        choices += math.factorial(n-1)\n    return choices\nans = solver()", "generated_prediction": "3628800.0", "options": ["A)0", "B)1", "C)2", "D)3", "E)4"], "answer": "B", "prediction": "E"}
{"question": "The average weight of 10 oarsmen in a boat is increased by 1.8 kg when one of the crew, who weighs 53 kg is replaced by a new man. Find the weight of the new man.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The average weight of 10 oarsmen in a boat is increased by 1.8 kg when one of the crew, who weighs 53 kg is replaced by a new man. Find the weight of the new man.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The average weight of 10 oarsmen in a boat is increased by 1.8 kg when one of the crew, who weighs 53 kg is replaced by a new man.\n    # 2. The weight of the new man.\n    # 3. The weight of the crew.\n    # 4. The weight of the new man.\n    average_weight = 1.8\n    weight_new_man = 0\n    weight_crew = 53\n    weight_new_man = 0\n    # Secondly, we need to calculate the weight of the new man.\n    weight_new_man = average_weight + weight_crew\n    return weight_new_man\nans = solver()", "generated_prediction": "54.8", "options": ["A)71", "B)62", "C)43", "D)67", "E)40"], "answer": "A", "prediction": "B"}
{"question": "A box contains a certain number of balls, marked successively from 1 to n. If there are 45 different ways that two balls can be selected from the box such that the ball with number 3 marked on it is not selected, then what is the value of n?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A box contains a certain number of balls, marked successively from 1 to n. If there are 45 different ways that two balls can be selected from the box such that the ball with number 3 marked on it is not selected, then what is the value of n?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    n = 0\n    ways = 45\n    # Secondly, we need to write a for loop to find the value of n\n    for n in range(1, 100):\n        if n == 3:\n            continue\n        else:\n            ways = ways - 1\n            if ways == 0:\n                break\n    return n\nans = solver()", "generated_prediction": "46.0", "options": ["A)11", "B)10", "C)9", "D)8", "E)7"], "answer": "A", "prediction": "A"}
{"question": "If Q, a positive integer, has 5 factors, which of the following must be true about Q?\nI. Q is the square of a prime number.\nII. Q is the fourth power of a prime number.\nIII. Q is the product of two prime numbers.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If Q, a positive integer, has 5 factors, which of the following must be true about Q?\nI. Q is the square of a prime number.\nII. Q is the fourth power of a prime number.\nIII. Q is the product of two prime numbers.\n# Options: I only, III only, II only, I and II only, I and III only\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    Q = 0\n    factors = 0\n    prime_factors = 0\n    prime_factors_list = []\n    prime_factors_list_2 = []\n    prime_factors_list_3 = []\n    prime_factors_list_4 = []\n    prime_factors_list_5 = []\n    prime_factors_list_6 = []\n    prime_factors_list_7 = []\n    prime_factors_list_8 = []\n    prime_factors_list_9 = []\n    prime_factors_list_10 = []\n    prime_factors_list_11 = []\n    prime_factors_list_12 = []\n    prime_factors_list_13 = []\n    prime_factors_list_14 = []\n    prime_factors_list_15 = []\n    prime_factors_list_16 = []\n    prime_factors_list_17 = []\n    prime_factors_list_18 = []\n    prime_factors_list_19 = []\n    prime_factors_list_20 = []\n    prime_factors_list_21 = []\n    prime_factors_list_22 = []\n    prime_factors_list_23 = []\n    prime_factors_list_24 = []\n    prime_factors_list_25 = []\n    prime_factors_list_26 = []\n    prime_factors_list_27 = []\n    prime_factors_list_28 = []\n    prime_factors_list_29 = []\n    prime_factors_list_30 = []\n    prime_factors_list_31 = []\n    prime_factors_list_32 = []\n    prime_factors_list_33 = []\n    prime_factors_list_34 = []\n    prime_factors_list_35 = []\n    prime_factors_list_36 = []\n    prime_factors_list_37 = []\n    prime_factors_list_38 = []\n    prime_factors_list\nans = solver()", "generated_prediction": "None", "options": ["A)I only", "B)III only", "C)II only", "D)I and II only", "E)I and III only"], "answer": "B", "prediction": "None"}
{"question": "If 6x - y = 24 and y = 3x, what is the value of x?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If 6x - y = 24 and y = 3x, what is the value of x?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    x = 0\n    y = 0\n    z = 0\n    # Secondly, we need to calculate the value of x, y and z\n    for x in range(1, 100):\n        y = 3 * x\n        z = 6 * x - y\n        if z == 24:\n            break\n    return x\nans = solver()", "generated_prediction": "8.0", "options": ["A)8", "B)9", "C)10", "D)11", "E)12"], "answer": "A", "prediction": "A"}
{"question": "You can rent DVDs at a local video store for $4.00 per movie without a membership. However, if you purchase a membership for $7.00 per month, you can rent DVDs for $2.00 each. What is the minimum amount of DVDs you would have to rent to make it worth it to purchase the membership?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: You can rent DVDs at a local video store for $4.00 per movie without a membership. However, if you purchase a membership for $7.00 per month, you can rent DVDs for $2.00 each. What is the minimum amount of DVDs you would have to rent to make it worth it to purchase the membership?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The price of a membership\n    membership_price = 7\n    # 2. The price of a DVD without a membership\n    dvd_price_without_membership = 4\n    # 3. The price of a DVD with a membership\n    dvd_price_with_membership = 2\n    # 4. The minimum amount of DVDs you would have to rent to make it worth it to purchase the membership\n    minimum_amount_of_dvds = 0\n    # 5. The total price of DVDs without a membership\n    total_price_of_dvds_without_membership = 0\n    # 6. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 7. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 8. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 9. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 10. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 11. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 12. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 13. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 14. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 15. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\n    # 16. The total price of DVDs with a membership\n    total_price_of_dvds_with_membership = 0\nans = solver()", "generated_prediction": "None", "options": ["A)1", "B)2", "C)3", "D)4", "E)5"], "answer": "D", "prediction": "None"}
{"question": "A bag of cat food weighs 7 pounds and 4 ounces. How much does the bag weigh in ounces?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A bag of cat food weighs 7 pounds and 4 ounces. How much does the bag weigh in ounces?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. weight_in_pounds = 7\n    # 2. weight_in_ounces = 4\n    weight_in_pounds = 7\n    weight_in_ounces = 4\n    # Secondly, we need to convert the weight in pounds to ounces\n    # 1. 1 pound = 16 ounces\n    # 2. weight_in_ounces = weight_in_pounds * 16\n    weight_in_ounces = weight_in_pounds * 16\n    # Thirdly, we need to add the weight in ounces to the weight in ounces\n    # 1. weight_in_ounces = weight_in_ounces + weight_in_ounces\n    weight_in_ounces = weight_in_ounces + weight_in_ounces\n    # Finally, we need to return the answer\n    return weight_in_ounces\nans = solver()", "generated_prediction": "224.0", "options": ["A) 108", "B) 112", "C) 116", "D) 120", "E) 124"], "answer": "C", "prediction": "E"}
{"question": "By himself, Jack can clean a yacht in 12 hours. On a particular day, he happens to finish two-thirds of the work. The remaining portion of the work is done by Jill, whose rate of cleaning is just 5% of what Jack can do. How long does it take Jill to finish the remaining work?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: By himself, Jack can clean a yacht in 12 hours. On a particular day, he happens to finish two-thirds of the work. The remaining portion of the work is done by Jill, whose rate of cleaning is just 5% of what Jack can do. How long does it take Jill to finish the remaining work?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # Jack's rate of cleaning:\n    Jack_rate = 12\n    # Jack's work:\n    Jack_work = 2/3\n    # Jill's rate of cleaning:\n    Jill_rate = Jack_rate * 0.05\n    # Jill's work:\n    Jill_work = 1 - Jack_work\n    # The time Jill takes to finish the remaining work:\n    Jill_time = Jill_work / Jill_rate\n    return Jill_time\nans = solver()", "generated_prediction": "0.5555555555555556", "options": ["A)4", "B)8", "C)22", "D)50", "E)20"], "answer": "E", "prediction": "A"}
{"question": "Professors borrowed Rs. 5000 from the university at simple interest. After 3 years, the university got Rs. 300 on interest. What was the rate of interest per annum?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Professors borrowed Rs. 5000 from the university at simple interest. After 3 years, the university got Rs. 300 on interest. What was the rate of interest per annum?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # P = 5000\n    # r = ?\n    # t = 3\n    # I = 300\n    P = 5000\n    t = 3\n    I = 300\n    r = 0\n    for i in range(1,100):\n        r = i/100\n        if P*r*t == I:\n            return r\n    return r\nans = solver()", "generated_prediction": "0.02", "options": ["A)2%", "B)8%", "C)5%", "D)10%", "E)None of these"], "answer": "A", "prediction": "A"}
{"question": "In a sale, a discount of 20% was available on all the articles. If Vinit purchased an article for Rs.4578 in the sale. What was the actual selling price of the article?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: In a sale, a discount of 20% was available on all the articles. If Vinit purchased an article for Rs.4578 in the sale. What was the actual selling price of the article?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    discount = 0.2\n    price = 4578\n    actual_price = price / (1 - discount)\n    return actual_price\nans = solver()", "generated_prediction": "5722.5", "options": ["A)s.5050", "B)s.5723", "C)s.5040", "D)s.4950", "E)s.4870"], "answer": "B", "prediction": "B"}
{"question": "If 27 bottles of soda cost A cents, how much will B bottles cost in dollars?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If 27 bottles of soda cost A cents, how much will B bottles cost in dollars?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    A = 27\n    B = 3\n    C = A * B\n    D = C / 100\n    E = D * 100\n    F = E / 100\n    G = F * 100\n    H = G / 100\n    I = H * 100\n    J = I / 100\n    K = J * 100\n    L = K / 100\n    M = L * 100\n    N = M / 100\n    O = N * 100\n    P = O / 100\n    Q = P * 100\n    R = Q / 100\n    S = R * 100\n    T = S / 100\n    U = T * 100\n    V = U / 100\n    W = V * 100\n    X = W / 100\n    Y = X * 100\n    Z = Y / 100\n    AA = Z * 100\n    AB = AA / 100\n    AC = AB * 100\n    AD = AC / 100\n    AE = AD * 100\n    AF = AE / 100\n    AG = AF / 100\n    AH = AG * 100\n    AI = AH / 100\n    AJ = AI * 100\n    AK = AJ / 100\n    AL = AK * 100\n    AM = AL / 100\n    AN = AM * 100\n    AO = AN / 100\n    AP = AO * 100\n    AQ = AP / 100\n    AR = AQ * 100\n    AS = AR / 100\n    AT = AS * 100\n    AU = AT / 100\n    AV = AU * 100\n    AW = AV / 100\n    AX = AW / 100\n    AY = AX * 100\n    AZ = AY / 100\n    BA = AZ * 100\n    BB = BA / 100\n    BC = BB * 100\n    BD = BC / 100\n    BE = BD * 100\n    BF = BE / 100\n    BG = BF / 100\n    BH = BG * 100\n    BI = BH / 100\n    BJ = BI * 100\n    BK = BJ / 100\n    BL = BK * 100\n    BM = BL / 100\n    BN = BM * 100\n    BO = BN / 100\n    BP = BO\nans = solver()", "generated_prediction": "None", "options": ["A)AB/2700", "B)27/AB", "C)AB/270", "D)2700/AB", "E)100AB/27"], "answer": "A", "prediction": "None"}
{"question": "A bag contains 11 candy bars: three cost 50 cents each, four cost $1 each and four cost $2\neach. How many ways can 3 candy bars be selected from the 11 candy bars so that the total cost is more than $4?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A bag contains 11 candy bars: three cost 50 cents each, four cost $1 each and four cost $2\neach. How many ways can 3 candy bars be selected from the 11 candy bars so that the total cost is more than $4?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of candy bars that cost 50 cents each\n    num_50 = 3\n    # 2. The number of candy bars that cost $1 each\n    num_1 = 4\n    # 3. The number of candy bars that cost $2 each\n    num_2 = 4\n    # 4. The total number of candy bars\n    num_total = num_50 + num_1 + num_2\n    # 5. The total cost of candy bars\n    cost_total = num_50 * 0.5 + num_1 + num_2 * 2\n    # 6. The number of candy bars that we want to select\n    num_select = 3\n    # 7. The total cost of candy bars that we want to select\n    cost_select = 4\n    # 8. The number of ways that we can select candy bars\n    num_ways = 0\n    # 9. The number of ways that we can select candy bars that cost 50 cents each\n    num_ways_50 = 0\n    # 10. The number of ways that we can select candy bars that cost $1 each\n    num_ways_1 = 0\n    # 11. The number of ways that we can select candy bars that cost $2 each\n    num_ways_2 = 0\n    # 12. The number of ways that we can select candy bars that cost 50 cents each and $1 each\n    num_ways_50_1 = 0\n    # 13. The number of ways that we can select candy bars that cost 50 cents each and $2 each\n    num_ways_50_2 = 0\n    # 14. The number of ways that we can select candy bars that cost $1 each and $2 each\n    num_ways_1_2 = 0\n    # 15. The number of ways that we can select candy bars that cost 50 cents each, $1 each and $2 each\n    num_ways_50_1_2 = 0\n    # 16. The number of ways that we can select candy bars that cost 50 cents each and $1 each and $2 each\n    num_ways_50_1_2 = 0\n    # 17. The number of ways that we\nans = solver()", "generated_prediction": "None", "options": ["A)8", "B)28", "C)46", "D)66", "E)70"], "answer": "C", "prediction": "None"}
{"question": "At a conference, one team is made up of 4 men and 4 women. Four presenters are chosen to present the team's findings in front of the entire conference. How many different groups of presenters can be chosen from the team if a team cannot be composed of men only or women only? (Two groups of presenters are considered different if at least one presenter is different.)", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: At a conference, one team is made up of 4 men and 4 women. Four presenters are chosen to present the team's findings in front of the entire conference. How many different groups of presenters can be chosen from the team if a team cannot be composed of men only or women only? (Two groups of presenters are considered different if at least one presenter is different.)\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of men and women in the team\n    men = 4\n    women = 4\n    # 2. The number of presenters\n    presenters = 4\n    # 3. The number of different groups of presenters\n    groups = 0\n    # Secondly, we need to write a for loop to calculate the number of different groups of presenters\n    for i in range(0, men + 1):\n        for j in range(0, women + 1):\n            if i + j == presenters and i != 0 and j != 0:\n                groups += 1\n    return groups\nans = solver()", "generated_prediction": "3.0", "options": ["A)120", "B)19", "C)180", "D)420", "E)460"], "answer": "B", "prediction": "B"}
{"question": "Exactly 2/5th of the children in a certain class are girls. If there are 100 boys in the class, how many girls are in the class?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Exactly 2/5th of the children in a certain class are girls. If there are 100 boys in the class, how many girls are in the class?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The number of boys in the class\n    boys = 100\n    # 2. The ratio of girls to boys\n    ratio = 2/5\n    # 3. The total number of children in the class\n    total = boys / (1 - ratio)\n    # 4. The number of girls in the class\n    girls = total * ratio\n    return girls\nans = solver()", "generated_prediction": "66.66666666666667", "options": ["A)50", "B)100", "C)150", "D)200", "E)70"], "answer": "C", "prediction": "A"}
{"question": "Two numbers are said to be relatively prime if they share no common positive factors other than 1. Set S contains the set of integers from 1 to 1,000, inclusive. What is the probability that a number chosen from S is relatively prime to 1,000?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Two numbers are said to be relatively prime if they share no common positive factors other than 1. Set S contains the set of integers from 1 to 1,000, inclusive. What is the probability that a number chosen from S is relatively prime to 1,000?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    S = list(range(1, 1001))\n    count = 0\n    for i in S:\n        if math.gcd(i, 1000) == 1:\n            count += 1\n    return count / len(S)\nans = solver()", "generated_prediction": "0.4", "options": ["A)5/7", "B)3/5", "C)4/7", "D)2/5", "E)2/7"], "answer": "D", "prediction": "C"}
{"question": "At the of his one-year investment, Charles received $54,080, including interest and principal from a certain investment. If the investment paid an annual interest of 8 percent compounded semi-annually, which of the following is the amount of money that Charles originally invested?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: At the of his one-year investment, Charles received $54,080, including interest and principal from a certain investment. If the investment paid an annual interest of 8 percent compounded semi-annually, which of the following is the amount of money that Charles originally invested?\n# Options: $45,000, $50,000, $54,000, $59,000, $62,000\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. The amount of money that Charles originally invested\n    # 2. The annual interest rate\n    # 3. The number of times that interest is compounded per year\n    # 4. The number of years that the money is invested\n    # 5. The amount of money that Charles received at the end of the investment\n    principal = 0\n    annual_interest_rate = 0.08\n    times_compounded_per_year = 2\n    years = 1\n    amount_received = 54080\n    # Secondly, we need to calculate the amount of money that Charles originally invested\n    for i in range(0, 5):\n        principal = amount_received / (1 + annual_interest_rate / times_compounded_per_year) ** (times_compounded_per_year * years)\n        principal = round(principal, 2)\n        if principal == 50000:\n            return principal\n        else:\n            amount_received = amount_received + 1000\nans = solver()", "generated_prediction": "50000.0", "options": ["A)$45,000", "B)$50,000", "C)$54,000", "D)$59,000", "E)$62,000"], "answer": "B", "prediction": "B"}
{"question": "Joe's age, Joe's sister's age and Joe\u2019s fathers age sums up to 100. When Joe is as old as his father, Joe's sister will be twice as old as now. When Joe is as old as his father then his father is twice as old as when his sister was as old as her father. Find the age of Joe's father?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Joe's age, Joe's sister's age and Joe\u2019s fathers age sums up to 100. When Joe is as old as his father, Joe's sister will be twice as old as now. When Joe is as old as his father then his father is twice as old as when his sister was as old as her father. Find the age of Joe's father?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # Joe's age, Joe's sister's age and Joe\u2019s fathers age\n    joe_age = 0\n    joe_sister_age = 0\n    joe_father_age = 0\n    # Secondly, we need to find the age of Joe's father\n    for joe_father_age in range(1, 100):\n        for joe_age in range(1, 100):\n            for joe_sister_age in range(1, 100):\n                if joe_age + joe_sister_age + joe_father_age == 100:\n                    if joe_age == joe_father_age:\n                        if joe_sister_age * 2 == joe_father_age:\n                            if joe_father_age * 2 == joe_sister_age:\n                                return joe_father_age\nans = solver()", "generated_prediction": "None", "options": ["A)45", "B)48", "C)50", "D)55", "E)58"], "answer": "C", "prediction": "None"}
{"question": "If one third of 3/4 of a number is 21. Then, find the number?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If one third of 3/4 of a number is 21. Then, find the number?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. one_third = 1/3\n    one_third = 1/3\n    # 2. three_fourths = 3/4\n    three_fourths = 3/4\n    # 3. twenty_one = 21\n    twenty_one = 21\n    # 4. number = ?\n    number = 0\n    # Secondly, we need to find the number, and we can use for loop to find the number\n    for i in range(1, 100):\n        if one_third * three_fourths * i == twenty_one:\n            number = i\n            break\n    return number\nans = solver()", "generated_prediction": "84.0", "options": ["A)84", "B)66", "C)28", "D)19", "E)11"], "answer": "A", "prediction": "A"}
{"question": "If m > 0, y > 0, and x is m percent of 4y, then, in terms of y, m is what percentage of x?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: If m > 0, y > 0, and x is m percent of 4y, then, in terms of y, m is what percentage of x?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    m = 0\n    y = 0\n    x = 0\n    # Secondly, we need to calculate the value of x\n    x = 4 * y * m / 100\n    # Thirdly, we need to calculate the value of m\n    m = x * 100 / y\n    return m\nans = solver()", "generated_prediction": "None", "options": ["A)y/400", "B)4y", "C)50y", "D)2500/y", "E)5000/y"], "answer": "D", "prediction": "None"}
{"question": "A man wants to eat fruit for breakfast and vegetable for dinner. He has 6 different types of fruit and 8 different types of vegetables. He can only eat one type at a time. In how many ways can he eat breakfast and dinner.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: A man wants to eat fruit for breakfast and vegetable for dinner. He has 6 different types of fruit and 8 different types of vegetables. He can only eat one type at a time. In how many ways can he eat breakfast and dinner.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    fruit = 6\n    vegetable = 8\n    breakfast = 1\n    dinner = 1\n    # Secondly, we need to calculate the total number of ways to eat breakfast and dinner\n    total = fruit * breakfast * vegetable * dinner\n    return total\nans = solver()", "generated_prediction": "48.0", "options": ["A)54", "B)24", "C)48", "D)20", "E)36"], "answer": "C", "prediction": "C"}
{"question": "There is a 90% chance that a registered voter in Burghtown voted in the last election. If five registered voters are chosen at random, what is the approximate likelihood that exactly four of them voted in the last election?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: There is a 90% chance that a registered voter in Burghtown voted in the last election. If five registered voters are chosen at random, what is the approximate likelihood that exactly four of them voted in the last election?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # 1. n: the number of registered voters in Burghtown\n    n = 5\n    # 2. p: the probability that a registered voter in Burghtown voted in the last election\n    p = 0.9\n    # 3. k: the number of registered voters in Burghtown who voted in the last election\n    k = 4\n    # 4. q: the probability that a registered voter in Burghtown did not vote in the last election\n    q = 1 - p\n    # 5. C: the number of combinations of n things taken k at a time\n    C = math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n    # 6. P: the probability that exactly k of them voted in the last election\n    P = C * (p ** k) * (q ** (n - k))\n    return P\nans = solver()", "generated_prediction": "0.3280499999999999", "options": ["A)26.2%", "B)32.8%", "C)43.7%", "D)59.0%", "E)65.6%"], "answer": "E", "prediction": "B"}
{"question": "Alice wants to put up fencing around three sides of her rectangular yard and leave one side of 10 meters unfenced. If the yard has an area of 240 square meters, how many meters of fencing does she need?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Alice wants to put up fencing around three sides of her rectangular yard and leave one side of 10 meters unfenced. If the yard has an area of 240 square meters, how many meters of fencing does she need?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    area = 240\n    length = 10\n    perimeter = 0\n    width = 0\n    # Secondly, we need to calculate the perimeter of the yard\n    perimeter = area + length\n    # Thirdly, we need to calculate the width of the yard\n    width = perimeter / 4\n    # Finally, we need to calculate the length of the fencing\n    fencing = perimeter - length\n    return fencing\nans = solver()", "generated_prediction": "240.0", "options": ["A)58", "B)62", "C)66", "D)70", "E)74"], "answer": "A", "prediction": "A"}
{"question": "John would make the 3-letter codes with diffenrent 5 vowels and 20 consonants with the condition that the middle letter must be vowel and the first letter and the third letter must be different from each other and are both consonant. How many different codes can be made?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: John would make the 3-letter codes with diffenrent 5 vowels and 20 consonants with the condition that the middle letter must be vowel and the first letter and the third letter must be different from each other and are both consonant. How many different codes can be made?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    vowels = 5\n    consonants = 20\n    middle_letter = vowels\n    first_letter = consonants\n    third_letter = consonants\n    first_and_third_letter = consonants\n    # Secondly, we need to calculate the number of different codes can be made\n    codes = vowels * consonants * consonants\n    return codes\nans = solver()", "generated_prediction": "2000.0", "options": ["A)1,980", "B)2,020", "C)2,100", "D)2,200", "E)1,900"], "answer": "E", "prediction": "B"}
{"question": "What is the sum of three consecutive integers whose product can be expressed as 727+728+729.", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: What is the sum of three consecutive integers whose product can be expressed as 727+728+729.\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z\n    a = 727\n    b = 728\n    c = 729\n    d = a + b + c\n    e = a * b * c\n    f = d / 3\n    g = e / 3\n    h = f * 3\n    i = g * 3\n    j = h - a\n    k = i - b\n    l = j - c\n    m = k + 1\n    n = l + 1\n    o = m + 1\n    p = n + 1\n    q = o + 1\n    r = p + 1\n    s = q + 1\n    t = r + 1\n    u = s + 1\n    v = t + 1\n    w = u + 1\n    x = v + 1\n    y = w + 1\n    z = x + 1\n    return z\nans = solver()", "generated_prediction": "735.0", "options": ["A)37", "B)38", "C)36", "D)30", "E)39"], "answer": "E", "prediction": "E"}
{"question": "The capacity of a tank of dimensions (8 m \u00d7 6 m \u00d7 2.5 m) is", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The capacity of a tank of dimensions (8 m \u00d7 6 m \u00d7 2.5 m) is\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    length = 8\n    width = 6\n    height = 2.5\n    capacity = length * width * height\n    print(\"The capacity of a tank of dimensions (8 m \u00d7 6 m \u00d7 2.5 m) is:\", capacity)\n    return capacity\nans = solver()", "generated_prediction": "120.0", "options": ["A)120 litres", "B)1200 litres", "C)12000 litres", "D)120000 litres", "E)None of these"], "answer": "D", "prediction": "A"}
{"question": "The population of a city is 5265526. If there are 4169516 adults in the city, how many children are there in the city?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: The population of a city is 5265526. If there are 4169516 adults in the city, how many children are there in the city?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    population = 5265526\n    adults = 4169516\n    children = 0\n    # Secondly, we need to calculate the number of children in the city\n    children = population - adults\n    return children\nans = solver()", "generated_prediction": "1096010.0", "options": ["A)1095961", "B)1065961", "C)1085961", "D)1097961", "E)1096061"], "answer": "E", "prediction": "E"}
{"question": "It takes a worker 9 minutes to drive from home to work at an average rate of 20 kilometers per hour. How many minutes will it take the worker to cycle from home to work along the same route at an average rate of 6 kilometers per hour?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: It takes a worker 9 minutes to drive from home to work at an average rate of 20 kilometers per hour. How many minutes will it take the worker to cycle from home to work along the same route at an average rate of 6 kilometers per hour?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    time_drive = 9\n    rate_drive = 20\n    rate_cycle = 6\n    time_cycle = 0\n    distance = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive = 0\n    distance_cycle = 0\n    distance_drive =\nans = solver()", "generated_prediction": "None", "options": ["A)30", "B)32", "C)35", "D)36", "E)40"], "answer": "A", "prediction": "None"}
{"question": "Two friends are eating a jar full of candies. Had P eaten alone, it would have taken him 10 minutes to finish the candies in the jar. Had Q eaten alone, it would have taken her 5 minutes to finish half the jar. Since both of them are eating simultaneously, how many minutes would it take them to empty the jar?", "generated": "\nimport math\nimport numpy as np\nimport statistics\n\n# Question: Two friends are eating a jar full of candies. Had P eaten alone, it would have taken him 10 minutes to finish the candies in the jar. Had Q eaten alone, it would have taken her 5 minutes to finish half the jar. Since both of them are eating simultaneously, how many minutes would it take them to empty the jar?\n# Answer this question by implementing a solver() function, use for loop if necessary.\ndef solver():\n    # Let's write a Python program step by step, and then return the answer\n    # Firstly, we need define the following variable:\n    # P_eat_alone = 10\n    # Q_eat_alone = 5\n    P_eat_alone = 10\n    Q_eat_alone = 5\n    # Secondly, we need to define the following variable:\n    # P_eat_together = ?\n    # Q_eat_together = ?\n    P_eat_together = P_eat_alone / 2\n    Q_eat_together = Q_eat_alone / 2\n    # Thirdly, we need to define the following variable:\n    # P_eat_together_time = ?\n    # Q_eat_together_time = ?\n    P_eat_together_time = P_eat_together * 1\n    Q_eat_together_time = Q_eat_together * 1\n    # Fourthly, we need to define the following variable:\n    # P_eat_together_time_list = []\n    # Q_eat_together_time_list = []\n    P_eat_together_time_list = []\n    Q_eat_together_time_list = []\n    # Fifthly, we need to define the following variable:\n    # P_eat_together_time_list.append(P_eat_together_time)\n    # Q_eat_together_time_list.append(Q_eat_together_time)\n    P_eat_together_time_list.append(P_eat_together_time)\n    Q_eat_together_time_list.append(Q_eat_together_time)\n    # Sixthly, we need to define the following variable:\n    # P_eat_together_time_list_sum = sum(P_eat_together_time_list)\n    # Q_eat_together_time_list_sum = sum(Q_eat_together_time_list)\n    P_eat_together_time_list_sum = sum(P_eat_together_time_list)\n    Q_eat_together_time_list_sum = sum(Q_eat_together_time_list)\n    # Seventhly, we need to define the following variable:\nans = solver()", "generated_prediction": "None", "options": ["A)4", "B)5", "C)6", "D)7", "E)8"], "answer": "B", "prediction": "None"}
